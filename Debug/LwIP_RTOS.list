
LwIP_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d488  08000250  08000250  00010250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000382c  0801d6d8  0801d6d8  0002d6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020f04  08020f04  00040150  2**0
                  CONTENTS
  4 .ARM          00000008  08020f04  08020f04  00030f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020f0c  08020f0c  00040150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020f0c  08020f0c  00030f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020f10  08020f10  00030f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08020f14  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  20000090  08020fa4  00040090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  200000f0  08021004  000400f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00011504  20000150  08021064  00040150  2**2
                  ALLOC
 12 ._user_heap_stack 00000c04  20011654  08021064  00041654  2**0
                  ALLOC
 13 .ARM.attributes 00000036  00000000  00000000  00040150  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00040186  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003a962  00000000  00000000  000401c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000085b3  00000000  00000000  0007ab2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002ae0  00000000  00000000  000830e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000021d8  00000000  00000000  00085bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002b829  00000000  00000000  00087d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000ea43  00000000  00000000  000b35c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000baf0  00000000  00000000  000c2004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  000cdaf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000150 	.word	0x20000150
 800026c:	00000000 	.word	0x00000000
 8000270:	0801d6c0 	.word	0x0801d6c0

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000154 	.word	0x20000154
 800028c:	0801d6c0 	.word	0x0801d6c0

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b982 	b.w	80005ac <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d146      	bne.n	800035e <__udivmoddi4+0x9e>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d95e      	bls.n	8000394 <__udivmoddi4+0xd4>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	409c      	lsls	r4, r3
 80002e8:	fa20 f202 	lsr.w	r2, r0, r2
 80002ec:	4317      	orrs	r7, r2
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	0c22      	lsrs	r2, r4, #16
 80002f8:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	fb01 f005 	mul.w	r0, r1, r5
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x5e>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x5c>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 8134 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	b2a4      	uxth	r4, r4
 8000322:	fbb2 f0fe 	udiv	r0, r2, lr
 8000326:	fb0e 2210 	mls	r2, lr, r0, r2
 800032a:	fb00 f505 	mul.w	r5, r0, r5
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	42a5      	cmp	r5, r4
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x88>
 8000336:	eb1c 0404 	adds.w	r4, ip, r4
 800033a:	f100 32ff 	add.w	r2, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x86>
 8000340:	42a5      	cmp	r5, r4
 8000342:	f200 8119 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 8000346:	4610      	mov	r0, r2
 8000348:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034c:	1b64      	subs	r4, r4, r5
 800034e:	2100      	movs	r1, #0
 8000350:	b11e      	cbz	r6, 800035a <__udivmoddi4+0x9a>
 8000352:	40dc      	lsrs	r4, r3
 8000354:	2300      	movs	r3, #0
 8000356:	e9c6 4300 	strd	r4, r3, [r6]
 800035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0xb4>
 8000362:	2e00      	cmp	r6, #0
 8000364:	f000 80fc 	beq.w	8000560 <__udivmoddi4+0x2a0>
 8000368:	2100      	movs	r1, #0
 800036a:	e9c6 0500 	strd	r0, r5, [r6]
 800036e:	4608      	mov	r0, r1
 8000370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14c      	bne.n	8000416 <__udivmoddi4+0x156>
 800037c:	42ab      	cmp	r3, r5
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2a6>
 8000382:	4282      	cmp	r2, r0
 8000384:	f240 80ef 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000388:	4608      	mov	r0, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e5      	beq.n	800035a <__udivmoddi4+0x9a>
 800038e:	e9c6 4700 	strd	r4, r7, [r6]
 8000392:	e7e2      	b.n	800035a <__udivmoddi4+0x9a>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xd8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f382 	clz	r3, r2
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 809f 	bne.w	80004e0 <__udivmoddi4+0x220>
 80003a2:	1a8a      	subs	r2, r1, r2
 80003a4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a8:	fa1f f78c 	uxth.w	r7, ip
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb2 f5fe 	udiv	r5, r2, lr
 80003b2:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b6:	0c22      	lsrs	r2, r4, #16
 80003b8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003bc:	fb07 f005 	mul.w	r0, r7, r5
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d90f      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003c4:	eb1c 0202 	adds.w	r2, ip, r2
 80003c8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003cc:	bf2c      	ite	cs
 80003ce:	f04f 0901 	movcs.w	r9, #1
 80003d2:	f04f 0900 	movcc.w	r9, #0
 80003d6:	4290      	cmp	r0, r2
 80003d8:	d903      	bls.n	80003e2 <__udivmoddi4+0x122>
 80003da:	f1b9 0f00 	cmp.w	r9, #0
 80003de:	f000 80ce 	beq.w	800057e <__udivmoddi4+0x2be>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ec:	fb0e 2210 	mls	r2, lr, r0, r2
 80003f0:	fb00 f707 	mul.w	r7, r0, r7
 80003f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	42a7      	cmp	r7, r4
 8000408:	f200 80b3 	bhi.w	8000572 <__udivmoddi4+0x2b2>
 800040c:	4610      	mov	r0, r2
 800040e:	1be4      	subs	r4, r4, r7
 8000410:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000414:	e79c      	b.n	8000350 <__udivmoddi4+0x90>
 8000416:	f1c1 0420 	rsb	r4, r1, #32
 800041a:	408b      	lsls	r3, r1
 800041c:	fa05 fc01 	lsl.w	ip, r5, r1
 8000420:	fa22 f704 	lsr.w	r7, r2, r4
 8000424:	40e5      	lsrs	r5, r4
 8000426:	408a      	lsls	r2, r1
 8000428:	431f      	orrs	r7, r3
 800042a:	fa20 f304 	lsr.w	r3, r0, r4
 800042e:	4088      	lsls	r0, r1
 8000430:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fbb5 fef8 	udiv	lr, r5, r8
 8000444:	fb08 551e 	mls	r5, r8, lr, r5
 8000448:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800044c:	fb0e f90c 	mul.w	r9, lr, ip
 8000450:	45a9      	cmp	r9, r5
 8000452:	d90e      	bls.n	8000472 <__udivmoddi4+0x1b2>
 8000454:	197d      	adds	r5, r7, r5
 8000456:	f10e 3aff 	add.w	sl, lr, #4294967295
 800045a:	bf2c      	ite	cs
 800045c:	f04f 0b01 	movcs.w	fp, #1
 8000460:	f04f 0b00 	movcc.w	fp, #0
 8000464:	45a9      	cmp	r9, r5
 8000466:	d903      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000468:	f1bb 0f00 	cmp.w	fp, #0
 800046c:	f000 808d 	beq.w	800058a <__udivmoddi4+0x2ca>
 8000470:	46d6      	mov	lr, sl
 8000472:	eba5 0509 	sub.w	r5, r5, r9
 8000476:	fa1f f983 	uxth.w	r9, r3
 800047a:	fbb5 f3f8 	udiv	r3, r5, r8
 800047e:	fb08 5513 	mls	r5, r8, r3, r5
 8000482:	fb03 fc0c 	mul.w	ip, r3, ip
 8000486:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800048a:	45ac      	cmp	ip, r5
 800048c:	d906      	bls.n	800049c <__udivmoddi4+0x1dc>
 800048e:	197d      	adds	r5, r7, r5
 8000490:	f103 38ff 	add.w	r8, r3, #4294967295
 8000494:	d201      	bcs.n	800049a <__udivmoddi4+0x1da>
 8000496:	45ac      	cmp	ip, r5
 8000498:	d87e      	bhi.n	8000598 <__udivmoddi4+0x2d8>
 800049a:	4643      	mov	r3, r8
 800049c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004a0:	eba5 050c 	sub.w	r5, r5, ip
 80004a4:	fba3 9802 	umull	r9, r8, r3, r2
 80004a8:	4545      	cmp	r5, r8
 80004aa:	46ce      	mov	lr, r9
 80004ac:	46c4      	mov	ip, r8
 80004ae:	d302      	bcc.n	80004b6 <__udivmoddi4+0x1f6>
 80004b0:	d106      	bne.n	80004c0 <__udivmoddi4+0x200>
 80004b2:	4548      	cmp	r0, r9
 80004b4:	d204      	bcs.n	80004c0 <__udivmoddi4+0x200>
 80004b6:	3b01      	subs	r3, #1
 80004b8:	ebb9 0e02 	subs.w	lr, r9, r2
 80004bc:	eb68 0c07 	sbc.w	ip, r8, r7
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d06f      	beq.n	80005a4 <__udivmoddi4+0x2e4>
 80004c4:	ebb0 020e 	subs.w	r2, r0, lr
 80004c8:	eb65 050c 	sbc.w	r5, r5, ip
 80004cc:	40ca      	lsrs	r2, r1
 80004ce:	fa05 f404 	lsl.w	r4, r5, r4
 80004d2:	40cd      	lsrs	r5, r1
 80004d4:	4618      	mov	r0, r3
 80004d6:	4314      	orrs	r4, r2
 80004d8:	2100      	movs	r1, #0
 80004da:	e9c6 4500 	strd	r4, r5, [r6]
 80004de:	e73c      	b.n	800035a <__udivmoddi4+0x9a>
 80004e0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e4:	f1c3 0220 	rsb	r2, r3, #32
 80004e8:	4099      	lsls	r1, r3
 80004ea:	409c      	lsls	r4, r3
 80004ec:	40d5      	lsrs	r5, r2
 80004ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004f2:	fa20 f202 	lsr.w	r2, r0, r2
 80004f6:	fa1f f78c 	uxth.w	r7, ip
 80004fa:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fe:	430a      	orrs	r2, r1
 8000500:	fb0e 5510 	mls	r5, lr, r0, r5
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f507 	mul.w	r5, r0, r7
 800050e:	428d      	cmp	r5, r1
 8000510:	d90e      	bls.n	8000530 <__udivmoddi4+0x270>
 8000512:	eb1c 0101 	adds.w	r1, ip, r1
 8000516:	f100 38ff 	add.w	r8, r0, #4294967295
 800051a:	bf2c      	ite	cs
 800051c:	f04f 0901 	movcs.w	r9, #1
 8000520:	f04f 0900 	movcc.w	r9, #0
 8000524:	428d      	cmp	r5, r1
 8000526:	d902      	bls.n	800052e <__udivmoddi4+0x26e>
 8000528:	f1b9 0f00 	cmp.w	r9, #0
 800052c:	d031      	beq.n	8000592 <__udivmoddi4+0x2d2>
 800052e:	4640      	mov	r0, r8
 8000530:	1b49      	subs	r1, r1, r5
 8000532:	b292      	uxth	r2, r2
 8000534:	fbb1 f5fe 	udiv	r5, r1, lr
 8000538:	fb0e 1115 	mls	r1, lr, r5, r1
 800053c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000540:	fb05 f107 	mul.w	r1, r5, r7
 8000544:	4291      	cmp	r1, r2
 8000546:	d907      	bls.n	8000558 <__udivmoddi4+0x298>
 8000548:	eb1c 0202 	adds.w	r2, ip, r2
 800054c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x296>
 8000552:	4291      	cmp	r1, r2
 8000554:	d823      	bhi.n	800059e <__udivmoddi4+0x2de>
 8000556:	4645      	mov	r5, r8
 8000558:	1a52      	subs	r2, r2, r1
 800055a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055e:	e726      	b.n	80003ae <__udivmoddi4+0xee>
 8000560:	4631      	mov	r1, r6
 8000562:	4630      	mov	r0, r6
 8000564:	e6f9      	b.n	800035a <__udivmoddi4+0x9a>
 8000566:	1a84      	subs	r4, r0, r2
 8000568:	eb65 0203 	sbc.w	r2, r5, r3
 800056c:	2001      	movs	r0, #1
 800056e:	4617      	mov	r7, r2
 8000570:	e70b      	b.n	800038a <__udivmoddi4+0xca>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e74a      	b.n	800040e <__udivmoddi4+0x14e>
 8000578:	4464      	add	r4, ip
 800057a:	3802      	subs	r0, #2
 800057c:	e6e4      	b.n	8000348 <__udivmoddi4+0x88>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	3902      	subs	r1, #2
 8000586:	4462      	add	r2, ip
 8000588:	e6c9      	b.n	800031e <__udivmoddi4+0x5e>
 800058a:	f1ae 0e02 	sub.w	lr, lr, #2
 800058e:	443d      	add	r5, r7
 8000590:	e76f      	b.n	8000472 <__udivmoddi4+0x1b2>
 8000592:	3802      	subs	r0, #2
 8000594:	4461      	add	r1, ip
 8000596:	e7cb      	b.n	8000530 <__udivmoddi4+0x270>
 8000598:	3b02      	subs	r3, #2
 800059a:	443d      	add	r5, r7
 800059c:	e77e      	b.n	800049c <__udivmoddi4+0x1dc>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	e7d9      	b.n	8000558 <__udivmoddi4+0x298>
 80005a4:	4618      	mov	r0, r3
 80005a6:	4631      	mov	r1, r6
 80005a8:	e6d7      	b.n	800035a <__udivmoddi4+0x9a>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, char *pcTaskName)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
  /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */

  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_SET); //turn on red led when detects stack overflow
 80005ba:	2201      	movs	r2, #1
 80005bc:	2110      	movs	r1, #16
 80005be:	4803      	ldr	r0, [pc, #12]	; (80005cc <vApplicationStackOverflowHook+0x1c>)
 80005c0:	f003 fe26 	bl	8004210 <HAL_GPIO_WritePin>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	42021800 	.word	0x42021800

080005d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <MX_FREERTOS_Init+0x18>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <MX_FREERTOS_Init+0x1c>)
 80005da:	f00b f86d 	bl	800b6b8 <osThreadNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <MX_FREERTOS_Init+0x20>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	08020c90 	.word	0x08020c90
 80005ec:	080005f5 	.word	0x080005f5
 80005f0:	20000274 	.word	0x20000274

080005f4 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */

  MX_LWIP_Init();
 80005fc:	f000 fdcc 	bl	8001198 <MX_LWIP_Init>
  //echoTaskHandle = osThreadNew(StartEchoTask, NULL, &echoTask_attributes);
  tcpClientTaskHandle = osThreadNew(StartTcpClientTask, NULL, &tcpClientTask_attributes);
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <StartDefaultTask+0x2c>)
 8000602:	2100      	movs	r1, #0
 8000604:	4807      	ldr	r0, [pc, #28]	; (8000624 <StartDefaultTask+0x30>)
 8000606:	f00b f857 	bl	800b6b8 <osThreadNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a06      	ldr	r2, [pc, #24]	; (8000628 <StartDefaultTask+0x34>)
 800060e:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 8000610:	2101      	movs	r1, #1
 8000612:	4806      	ldr	r0, [pc, #24]	; (800062c <StartDefaultTask+0x38>)
 8000614:	f003 fe14 	bl	8004240 <HAL_GPIO_TogglePin>

    osDelay(100);
 8000618:	2064      	movs	r0, #100	; 0x64
 800061a:	f00b f8df 	bl	800b7dc <osDelay>
    HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 800061e:	e7f7      	b.n	8000610 <StartDefaultTask+0x1c>
 8000620:	08020c6c 	.word	0x08020c6c
 8000624:	08000631 	.word	0x08000631
 8000628:	2000016c 	.word	0x2000016c
 800062c:	42020400 	.word	0x42020400

08000630 <StartTcpClientTask>:
    }
  }
}

void StartTcpClientTask(void const *argument)
{
 8000630:	b5b0      	push	{r4, r5, r7, lr}
 8000632:	b08c      	sub	sp, #48	; 0x30
 8000634:	af04      	add	r7, sp, #16
 8000636:	6078      	str	r0, [r7, #4]

  LWIP_UNUSED_ARG(argument);

  while (1)
  {
    if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0) //gnetif.gw.addr == 0 system has no valid ip address
 8000638:	4b5a      	ldr	r3, [pc, #360]	; (80007a4 <StartTcpClientTask+0x174>)
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d003      	beq.n	8000648 <StartTcpClientTask+0x18>
 8000640:	4b58      	ldr	r3, [pc, #352]	; (80007a4 <StartTcpClientTask+0x174>)
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d104      	bne.n	8000652 <StartTcpClientTask+0x22>
    {
      osDelay(1000);
 8000648:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064c:	f00b f8c6 	bl	800b7dc <osDelay>
      continue;
 8000650:	e0a7      	b.n	80007a2 <StartTcpClientTask+0x172>
    }
    else //valid ip address
    {
      osDelay(100); //request interval
 8000652:	2064      	movs	r0, #100	; 0x64
 8000654:	f00b f8c2 	bl	800b7dc <osDelay>
    }

    nRead = 0; //clear indexes
 8000658:	2300      	movs	r3, #0
 800065a:	83fb      	strh	r3, [r7, #30]
    nWritten = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	83bb      	strh	r3, [r7, #28]

    conn = netconn_new(NETCONN_TCP); //new tcp netconn
 8000660:	2200      	movs	r2, #0
 8000662:	2100      	movs	r1, #0
 8000664:	2010      	movs	r0, #16
 8000666:	f00e fd01 	bl	800f06c <netconn_new_with_proto_and_callback>
 800066a:	61b8      	str	r0, [r7, #24]

    if (conn != NULL)
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0e2      	beq.n	8000638 <StartTcpClientTask+0x8>
    {
      IP4_ADDR(&server_addr, SERVER_IP1, SERVER_IP2, SERVER_IP3, SERVER_IP4); //server ip
 8000672:	4b4d      	ldr	r3, [pc, #308]	; (80007a8 <StartTcpClientTask+0x178>)
 8000674:	4a4d      	ldr	r2, [pc, #308]	; (80007ac <StartTcpClientTask+0x17c>)
 8000676:	601a      	str	r2, [r3, #0]
      err = netconn_connect(conn, &server_addr, SERVER_PORT); //connect to the server
 8000678:	f641 6261 	movw	r2, #7777	; 0x1e61
 800067c:	494a      	ldr	r1, [pc, #296]	; (80007a8 <StartTcpClientTask+0x178>)
 800067e:	69b8      	ldr	r0, [r7, #24]
 8000680:	f00e fdae 	bl	800f1e0 <netconn_connect>
 8000684:	4603      	mov	r3, r0
 8000686:	75fb      	strb	r3, [r7, #23]

      if (err != ERR_OK)
 8000688:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d003      	beq.n	8000698 <StartTcpClientTask+0x68>
      {
        netconn_delete(conn); //free memory
 8000690:	69b8      	ldr	r0, [r7, #24]
 8000692:	f00e fd89 	bl	800f1a8 <netconn_delete>
        continue;
 8000696:	e084      	b.n	80007a2 <StartTcpClientTask+0x172>
      }

      memset(&packet, 0, sizeof(struct time_packet));
 8000698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800069c:	2100      	movs	r1, #0
 800069e:	4844      	ldr	r0, [pc, #272]	; (80007b0 <StartTcpClientTask+0x180>)
 80006a0:	f01c f951 	bl	801c946 <memset>
      packet.head = 0xAE; //head
 80006a4:	4b42      	ldr	r3, [pc, #264]	; (80007b0 <StartTcpClientTask+0x180>)
 80006a6:	22ae      	movs	r2, #174	; 0xae
 80006a8:	701a      	strb	r2, [r3, #0]
      packet.type = REQ; //request type
 80006aa:	4b41      	ldr	r3, [pc, #260]	; (80007b0 <StartTcpClientTask+0x180>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	705a      	strb	r2, [r3, #1]
      packet.tail = 0xEA; //tail
 80006b0:	4b3f      	ldr	r3, [pc, #252]	; (80007b0 <StartTcpClientTask+0x180>)
 80006b2:	22ea      	movs	r2, #234	; 0xea
 80006b4:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff

      do
      {
        if (netconn_write_partly(
            conn, //connection
            (const void*) (&packet + nWritten), //buffer pointer
 80006b8:	8bbb      	ldrh	r3, [r7, #28]
 80006ba:	021b      	lsls	r3, r3, #8
 80006bc:	4a3c      	ldr	r2, [pc, #240]	; (80007b0 <StartTcpClientTask+0x180>)
 80006be:	1899      	adds	r1, r3, r2
        if (netconn_write_partly(
 80006c0:	8bbb      	ldrh	r3, [r7, #28]
 80006c2:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 80006c6:	f107 030a 	add.w	r3, r7, #10
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2300      	movs	r3, #0
 80006ce:	69b8      	ldr	r0, [r7, #24]
 80006d0:	f00e ffb4 	bl	800f63c <netconn_write_partly>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d006      	beq.n	80006e8 <StartTcpClientTask+0xb8>
            (sizeof(struct time_packet) - nWritten), //buffer length
            NETCONN_NOFLAG, //no copy
            (size_t*) &len) != ERR_OK) //written len
        {
          netconn_close(conn); //close session
 80006da:	69b8      	ldr	r0, [r7, #24]
 80006dc:	f00f f8b0 	bl	800f840 <netconn_close>
          netconn_delete(conn); //free memory
 80006e0:	69b8      	ldr	r0, [r7, #24]
 80006e2:	f00e fd61 	bl	800f1a8 <netconn_delete>
          continue;
 80006e6:	e003      	b.n	80006f0 <StartTcpClientTask+0xc0>
        }
        else
        {
          nWritten += len;
 80006e8:	897a      	ldrh	r2, [r7, #10]
 80006ea:	8bbb      	ldrh	r3, [r7, #28]
 80006ec:	4413      	add	r3, r2
 80006ee:	83bb      	strh	r3, [r7, #28]
        }
      }
      while (nWritten < sizeof(struct time_packet)); //send request
 80006f0:	8bbb      	ldrh	r3, [r7, #28]
 80006f2:	2bff      	cmp	r3, #255	; 0xff
 80006f4:	d9e0      	bls.n	80006b8 <StartTcpClientTask+0x88>

      while (netconn_recv(conn, &buf) == ERR_OK) //receive the response
 80006f6:	e01f      	b.n	8000738 <StartTcpClientTask+0x108>
      {
        do
        {
          netbuf_data(buf, &data, &len); //receive data pointer & length
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	f107 020a 	add.w	r2, r7, #10
 80006fe:	f107 010c 	add.w	r1, r7, #12
 8000702:	4618      	mov	r0, r3
 8000704:	f010 fc7a 	bl	8010ffc <netbuf_data>

          memcpy(&packet + nRead, data, len);
 8000708:	8bfb      	ldrh	r3, [r7, #30]
 800070a:	021b      	lsls	r3, r3, #8
 800070c:	4a28      	ldr	r2, [pc, #160]	; (80007b0 <StartTcpClientTask+0x180>)
 800070e:	4413      	add	r3, r2
 8000710:	68f9      	ldr	r1, [r7, #12]
 8000712:	897a      	ldrh	r2, [r7, #10]
 8000714:	4618      	mov	r0, r3
 8000716:	f01c f992 	bl	801ca3e <memcpy>
          nRead += len;
 800071a:	897a      	ldrh	r2, [r7, #10]
 800071c:	8bfb      	ldrh	r3, [r7, #30]
 800071e:	4413      	add	r3, r2
 8000720:	83fb      	strh	r3, [r7, #30]
        }
        while (netbuf_next(buf) >= 0); //check buffer empty
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	4618      	mov	r0, r3
 8000726:	f010 fcb3 	bl	8011090 <netbuf_next>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	dae3      	bge.n	80006f8 <StartTcpClientTask+0xc8>
        netbuf_delete(buf); //clear buffer
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	4618      	mov	r0, r3
 8000734:	f010 fc42 	bl	8010fbc <netbuf_delete>
      while (netconn_recv(conn, &buf) == ERR_OK) //receive the response
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	4619      	mov	r1, r3
 800073e:	69b8      	ldr	r0, [r7, #24]
 8000740:	f00e ff02 	bl	800f548 <netconn_recv>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d0d6      	beq.n	80006f8 <StartTcpClientTask+0xc8>
      }

      if (nRead == sizeof(struct time_packet) && packet.type == RESP) //if received length is valid
 800074a:	8bfb      	ldrh	r3, [r7, #30]
 800074c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000750:	d121      	bne.n	8000796 <StartTcpClientTask+0x166>
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <StartTcpClientTask+0x180>)
 8000754:	785b      	ldrb	r3, [r3, #1]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d11d      	bne.n	8000796 <StartTcpClientTask+0x166>
      {
        printf("%04d-%02d-%02d %02d:%02d:%02d\n", packet.year + 2000, packet.month, packet.day, packet.hour, packet.minute, packet.second); //print time information
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <StartTcpClientTask+0x180>)
 800075c:	789b      	ldrb	r3, [r3, #2]
 800075e:	f503 61fa 	add.w	r1, r3, #2000	; 0x7d0
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <StartTcpClientTask+0x180>)
 8000764:	78db      	ldrb	r3, [r3, #3]
 8000766:	461c      	mov	r4, r3
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <StartTcpClientTask+0x180>)
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	461d      	mov	r5, r3
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <StartTcpClientTask+0x180>)
 8000770:	795b      	ldrb	r3, [r3, #5]
 8000772:	461a      	mov	r2, r3
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <StartTcpClientTask+0x180>)
 8000776:	799b      	ldrb	r3, [r3, #6]
 8000778:	4618      	mov	r0, r3
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <StartTcpClientTask+0x180>)
 800077c:	79db      	ldrb	r3, [r3, #7]
 800077e:	9302      	str	r3, [sp, #8]
 8000780:	9001      	str	r0, [sp, #4]
 8000782:	9200      	str	r2, [sp, #0]
 8000784:	462b      	mov	r3, r5
 8000786:	4622      	mov	r2, r4
 8000788:	480a      	ldr	r0, [pc, #40]	; (80007b4 <StartTcpClientTask+0x184>)
 800078a:	f01c f877 	bl	801c87c <iprintf>
        HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin); //toggle data led
 800078e:	2101      	movs	r1, #1
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <StartTcpClientTask+0x188>)
 8000792:	f003 fd55 	bl	8004240 <HAL_GPIO_TogglePin>
      }

      netconn_close(conn); //close session
 8000796:	69b8      	ldr	r0, [r7, #24]
 8000798:	f00f f852 	bl	800f840 <netconn_close>
      netconn_delete(conn); //free memory
 800079c:	69b8      	ldr	r0, [r7, #24]
 800079e:	f00e fd03 	bl	800f1a8 <netconn_delete>
    if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0) //gnetif.gw.addr == 0 system has no valid ip address
 80007a2:	e749      	b.n	8000638 <StartTcpClientTask+0x8>
 80007a4:	20005170 	.word	0x20005170
 80007a8:	20000170 	.word	0x20000170
 80007ac:	64dba8c0 	.word	0x64dba8c0
 80007b0:	20000174 	.word	0x20000174
 80007b4:	0801d700 	.word	0x0801d700
 80007b8:	42020400 	.word	0x42020400

080007bc <vApplicationGetIdleTaskMemory>:

static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	4a07      	ldr	r2, [pc, #28]	; (80007e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80007cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	4a06      	ldr	r2, [pc, #24]	; (80007ec <vApplicationGetIdleTaskMemory+0x30>)
 80007d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007da:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	20000278 	.word	0x20000278
 80007ec:	200002d4 	.word	0x200002d4

080007f0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <HAL_ETH_RxCpltCallback+0x1c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f00b f9e7 	bl	800bbd0 <osSemaphoreRelease>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20005060 	.word	0x20005060

08000810 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <HAL_ETH_TxCpltCallback+0x1c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f00b f9d7 	bl	800bbd0 <osSemaphoreRelease>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20005064 	.word	0x20005064

08000830 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f002 fe17 	bl	800346c <HAL_ETH_GetDMAError>
 800083e:	4603      	mov	r3, r0
 8000840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000844:	2b80      	cmp	r3, #128	; 0x80
 8000846:	d104      	bne.n	8000852 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <HAL_ETH_ErrorCallback+0x2c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f00b f9bf 	bl	800bbd0 <osSemaphoreRelease>
  }
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20005060 	.word	0x20005060

08000860 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b0aa      	sub	sp, #168	; 0xa8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8000868:	2300      	movs	r3, #0
 800086a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	2264      	movs	r2, #100	; 0x64
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f01c f85f 	bl	801c946 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8000888:	4b85      	ldr	r3, [pc, #532]	; (8000aa0 <low_level_init+0x240>)
 800088a:	4a86      	ldr	r2, [pc, #536]	; (8000aa4 <low_level_init+0x244>)
 800088c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800088e:	2300      	movs	r3, #0
 8000890:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8000892:	2380      	movs	r3, #128	; 0x80
 8000894:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8000896:	23e1      	movs	r3, #225	; 0xe1
 8000898:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800089a:	2300      	movs	r3, #0
 800089c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800089e:	2300      	movs	r3, #0
 80008a0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80008a2:	2300      	movs	r3, #0
 80008a4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80008a6:	4a7e      	ldr	r2, [pc, #504]	; (8000aa0 <low_level_init+0x240>)
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008ae:	4b7c      	ldr	r3, [pc, #496]	; (8000aa0 <low_level_init+0x240>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008b4:	4b7a      	ldr	r3, [pc, #488]	; (8000aa0 <low_level_init+0x240>)
 80008b6:	4a7c      	ldr	r2, [pc, #496]	; (8000aa8 <low_level_init+0x248>)
 80008b8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008ba:	4b79      	ldr	r3, [pc, #484]	; (8000aa0 <low_level_init+0x240>)
 80008bc:	4a7b      	ldr	r2, [pc, #492]	; (8000aac <low_level_init+0x24c>)
 80008be:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80008c0:	4b77      	ldr	r3, [pc, #476]	; (8000aa0 <low_level_init+0x240>)
 80008c2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80008c6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80008c8:	4875      	ldr	r0, [pc, #468]	; (8000aa0 <low_level_init+0x240>)
 80008ca:	f001 fddd 	bl	8002488 <HAL_ETH_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008d4:	2238      	movs	r2, #56	; 0x38
 80008d6:	2100      	movs	r1, #0
 80008d8:	4875      	ldr	r0, [pc, #468]	; (8000ab0 <low_level_init+0x250>)
 80008da:	f01c f834 	bl	801c946 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008de:	4b74      	ldr	r3, [pc, #464]	; (8000ab0 <low_level_init+0x250>)
 80008e0:	2221      	movs	r2, #33	; 0x21
 80008e2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008e4:	4b72      	ldr	r3, [pc, #456]	; (8000ab0 <low_level_init+0x250>)
 80008e6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008ea:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008ec:	4b70      	ldr	r3, [pc, #448]	; (8000ab0 <low_level_init+0x250>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80008f2:	4870      	ldr	r0, [pc, #448]	; (8000ab4 <low_level_init+0x254>)
 80008f4:	f011 faaa 	bl	8011e4c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2206      	movs	r2, #6
 80008fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8000900:	4b67      	ldr	r3, [pc, #412]	; (8000aa0 <low_level_init+0x240>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	781a      	ldrb	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800090c:	4b64      	ldr	r3, [pc, #400]	; (8000aa0 <low_level_init+0x240>)
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	785a      	ldrb	r2, [r3, #1]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8000918:	4b61      	ldr	r3, [pc, #388]	; (8000aa0 <low_level_init+0x240>)
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	789a      	ldrb	r2, [r3, #2]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8000924:	4b5e      	ldr	r3, [pc, #376]	; (8000aa0 <low_level_init+0x240>)
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	78da      	ldrb	r2, [r3, #3]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8000930:	4b5b      	ldr	r3, [pc, #364]	; (8000aa0 <low_level_init+0x240>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	791a      	ldrb	r2, [r3, #4]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800093c:	4b58      	ldr	r3, [pc, #352]	; (8000aa0 <low_level_init+0x240>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	795a      	ldrb	r2, [r3, #5]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800094e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000956:	f043 030a 	orr.w	r3, r3, #10
 800095a:	b2da      	uxtb	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8000962:	2200      	movs	r2, #0
 8000964:	2101      	movs	r1, #1
 8000966:	2001      	movs	r0, #1
 8000968:	f00b f85d 	bl	800ba26 <osSemaphoreNew>
 800096c:	4603      	mov	r3, r0
 800096e:	4a52      	ldr	r2, [pc, #328]	; (8000ab8 <low_level_init+0x258>)
 8000970:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8000972:	2200      	movs	r2, #0
 8000974:	2101      	movs	r1, #1
 8000976:	2001      	movs	r0, #1
 8000978:	f00b f855 	bl	800ba26 <osSemaphoreNew>
 800097c:	4603      	mov	r3, r0
 800097e:	4a4f      	ldr	r2, [pc, #316]	; (8000abc <low_level_init+0x25c>)
 8000980:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8000982:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000986:	2224      	movs	r2, #36	; 0x24
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f01b ffdb 	bl	801c946 <memset>
  attributes.name = "EthIf";
 8000990:	4b4b      	ldr	r3, [pc, #300]	; (8000ac0 <low_level_init+0x260>)
 8000992:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8000994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000998:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 800099c:	2330      	movs	r3, #48	; 0x30
 800099e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 80009a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009a6:	461a      	mov	r2, r3
 80009a8:	6879      	ldr	r1, [r7, #4]
 80009aa:	4846      	ldr	r0, [pc, #280]	; (8000ac4 <low_level_init+0x264>)
 80009ac:	f00a fe84 	bl	800b6b8 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80009b0:	4945      	ldr	r1, [pc, #276]	; (8000ac8 <low_level_init+0x268>)
 80009b2:	4846      	ldr	r0, [pc, #280]	; (8000acc <low_level_init+0x26c>)
 80009b4:	f001 facb 	bl	8001f4e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80009b8:	4844      	ldr	r0, [pc, #272]	; (8000acc <low_level_init+0x26c>)
 80009ba:	f001 fafa 	bl	8001fb2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80009be:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d165      	bne.n	8000a92 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80009c6:	4841      	ldr	r0, [pc, #260]	; (8000acc <low_level_init+0x26c>)
 80009c8:	f001 fb9b 	bl	8002102 <LAN8742_GetLinkState>
 80009cc:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80009d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	dc06      	bgt.n	80009e6 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f011 fe11 	bl	8012600 <netif_set_link_down>
      netif_set_down(netif);
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f011 fda8 	bl	8012534 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80009e4:	e057      	b.n	8000a96 <low_level_init+0x236>
      switch (PHYLinkState)
 80009e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80009ea:	3b02      	subs	r3, #2
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	d82b      	bhi.n	8000a48 <low_level_init+0x1e8>
 80009f0:	a201      	add	r2, pc, #4	; (adr r2, 80009f8 <low_level_init+0x198>)
 80009f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f6:	bf00      	nop
 80009f8:	08000a09 	.word	0x08000a09
 80009fc:	08000a1b 	.word	0x08000a1b
 8000a00:	08000a2b 	.word	0x08000a2b
 8000a04:	08000a3b 	.word	0x08000a3b
        duplex = ETH_FULLDUPLEX_MODE;
 8000a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8000a10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8000a18:	e01f      	b.n	8000a5a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8000a20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8000a28:	e017      	b.n	8000a5a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8000a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8000a32:	2300      	movs	r3, #0
 8000a34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8000a38:	e00f      	b.n	8000a5a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8000a40:	2300      	movs	r3, #0
 8000a42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8000a46:	e008      	b.n	8000a5a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8000a48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8000a50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8000a58:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480f      	ldr	r0, [pc, #60]	; (8000aa0 <low_level_init+0x240>)
 8000a62:	f002 faad 	bl	8002fc0 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8000a66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8000a6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8000a72:	f107 0310 	add.w	r3, r7, #16
 8000a76:	4619      	mov	r1, r3
 8000a78:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <low_level_init+0x240>)
 8000a7a:	f002 fc75 	bl	8003368 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8000a7e:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <low_level_init+0x240>)
 8000a80:	f001 fde8 	bl	8002654 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f011 fce9 	bl	801245c <netif_set_up>
    netif_set_link_up(netif);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f011 fd84 	bl	8012598 <netif_set_link_up>
}
 8000a90:	e001      	b.n	8000a96 <low_level_init+0x236>
    Error_Handler();
 8000a92:	f000 ff63 	bl	800195c <Error_Handler>
}
 8000a96:	bf00      	nop
 8000a98:	37a8      	adds	r7, #168	; 0xa8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20005068 	.word	0x20005068
 8000aa4:	40028000 	.word	0x40028000
 8000aa8:	200000f0 	.word	0x200000f0
 8000aac:	20000090 	.word	0x20000090
 8000ab0:	20005118 	.word	0x20005118
 8000ab4:	08020cb4 	.word	0x08020cb4
 8000ab8:	20005060 	.word	0x20005060
 8000abc:	20005064 	.word	0x20005064
 8000ac0:	0801d720 	.word	0x0801d720
 8000ac4:	08000c2d 	.word	0x08000c2d
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20005150 	.word	0x20005150

08000ad0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b092      	sub	sp, #72	; 0x48
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8000ada:	2300      	movs	r3, #0
 8000adc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	2230      	movs	r2, #48	; 0x30
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f01b ff28 	bl	801c946 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	2230      	movs	r2, #48	; 0x30
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f01b ff21 	bl	801c946 <memset>

  for(q = p; q != NULL; q = q->next)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	643b      	str	r3, [r7, #64]	; 0x40
 8000b08:	e045      	b.n	8000b96 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8000b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b0c:	2b03      	cmp	r3, #3
 8000b0e:	d902      	bls.n	8000b16 <low_level_output+0x46>
      return ERR_IF;
 8000b10:	f06f 030b 	mvn.w	r3, #11
 8000b14:	e065      	b.n	8000be2 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8000b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b18:	6859      	ldr	r1, [r3, #4]
 8000b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	3348      	adds	r3, #72	; 0x48
 8000b26:	443b      	add	r3, r7
 8000b28:	3b3c      	subs	r3, #60	; 0x3c
 8000b2a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8000b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b2e:	895b      	ldrh	r3, [r3, #10]
 8000b30:	4619      	mov	r1, r3
 8000b32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b34:	4613      	mov	r3, r2
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	4413      	add	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	3348      	adds	r3, #72	; 0x48
 8000b3e:	443b      	add	r3, r7
 8000b40:	3b38      	subs	r3, #56	; 0x38
 8000b42:	6019      	str	r1, [r3, #0]

    if(i>0)
 8000b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d011      	beq.n	8000b6e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8000b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	f107 000c 	add.w	r0, r7, #12
 8000b52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000b54:	460b      	mov	r3, r1
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	440b      	add	r3, r1
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	18c1      	adds	r1, r0, r3
 8000b5e:	4613      	mov	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	4413      	add	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	3348      	adds	r3, #72	; 0x48
 8000b68:	443b      	add	r3, r7
 8000b6a:	3b34      	subs	r3, #52	; 0x34
 8000b6c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8000b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d109      	bne.n	8000b8a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8000b76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b78:	4613      	mov	r3, r2
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	3348      	adds	r3, #72	; 0x48
 8000b82:	443b      	add	r3, r7
 8000b84:	3b34      	subs	r3, #52	; 0x34
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
    }

    i++;
 8000b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8000b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	643b      	str	r3, [r7, #64]	; 0x40
 8000b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1b6      	bne.n	8000b0a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	891b      	ldrh	r3, [r3, #8]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <low_level_output+0x11c>)
 8000ba4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8000ba6:	4a11      	ldr	r2, [pc, #68]	; (8000bec <low_level_output+0x11c>)
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8000bae:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <low_level_output+0x11c>)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8000bb4:	6838      	ldr	r0, [r7, #0]
 8000bb6:	f012 f9a7 	bl	8012f08 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8000bba:	490c      	ldr	r1, [pc, #48]	; (8000bec <low_level_output+0x11c>)
 8000bbc:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <low_level_output+0x120>)
 8000bbe:	f001 fe4f 	bl	8002860 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8000bc2:	bf00      	nop
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <low_level_output+0x124>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00a ffb3 	bl	800bb38 <osSemaphoreAcquire>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d1f5      	bne.n	8000bc4 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <low_level_output+0x120>)
 8000bda:	f001 ffc0 	bl	8002b5e <HAL_ETH_ReleaseTxPacket>

  return errval;
 8000bde:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3748      	adds	r7, #72	; 0x48
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20005118 	.word	0x20005118
 8000bf0:	20005068 	.word	0x20005068
 8000bf4:	20005064 	.word	0x20005064

08000bf8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <low_level_input+0x2c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d105      	bne.n	8000c18 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4619      	mov	r1, r3
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <low_level_input+0x30>)
 8000c14:	f001 fe75 	bl	8002902 <HAL_ETH_ReadData>
  }

  return p;
 8000c18:	68fb      	ldr	r3, [r7, #12]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000505c 	.word	0x2000505c
 8000c28:	20005068 	.word	0x20005068

08000c2c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <ethernetif_input+0x50>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	4618      	mov	r0, r3
 8000c46:	f00a ff77 	bl	800bb38 <osSemaphoreAcquire>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1f5      	bne.n	8000c3c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8000c50:	68b8      	ldr	r0, [r7, #8]
 8000c52:	f7ff ffd1 	bl	8000bf8 <low_level_input>
 8000c56:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00a      	beq.n	8000c74 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	68b9      	ldr	r1, [r7, #8]
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	4798      	blx	r3
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d002      	beq.n	8000c74 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f012 f8a4 	bl	8012dbc <pbuf_free>
          }
        }
      } while(p!=NULL);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1ea      	bne.n	8000c50 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8000c7a:	e7df      	b.n	8000c3c <ethernetif_input+0x10>
 8000c7c:	20005060 	.word	0x20005060

08000c80 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d106      	bne.n	8000c9c <ethernetif_init+0x1c>
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <ethernetif_init+0x48>)
 8000c90:	f240 12f5 	movw	r2, #501	; 0x1f5
 8000c94:	490d      	ldr	r1, [pc, #52]	; (8000ccc <ethernetif_init+0x4c>)
 8000c96:	480e      	ldr	r0, [pc, #56]	; (8000cd0 <ethernetif_init+0x50>)
 8000c98:	f01b fdf0 	bl	801c87c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2273      	movs	r2, #115	; 0x73
 8000ca0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2274      	movs	r2, #116	; 0x74
 8000ca8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a09      	ldr	r2, [pc, #36]	; (8000cd4 <ethernetif_init+0x54>)
 8000cb0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <ethernetif_init+0x58>)
 8000cb6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff fdd1 	bl	8000860 <low_level_init>

  return ERR_OK;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	0801d728 	.word	0x0801d728
 8000ccc:	0801d744 	.word	0x0801d744
 8000cd0:	0801d754 	.word	0x0801d754
 8000cd4:	0801a5d1 	.word	0x0801a5d1
 8000cd8:	08000ad1 	.word	0x08000ad1

08000cdc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8000ce8:	68f9      	ldr	r1, [r7, #12]
 8000cea:	4809      	ldr	r0, [pc, #36]	; (8000d10 <pbuf_free_custom+0x34>)
 8000cec:	f011 f99e 	bl	801202c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <pbuf_free_custom+0x38>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d107      	bne.n	8000d08 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <pbuf_free_custom+0x38>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <pbuf_free_custom+0x3c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f00a ff64 	bl	800bbd0 <osSemaphoreRelease>
  }
}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	08020cb4 	.word	0x08020cb4
 8000d14:	2000505c 	.word	0x2000505c
 8000d18:	20005060 	.word	0x20005060

08000d1c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000d20:	f001 fab0 	bl	8002284 <HAL_GetTick>
 8000d24:	4603      	mov	r3, r0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08e      	sub	sp, #56	; 0x38
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a61      	ldr	r2, [pc, #388]	; (8000ed0 <HAL_ETH_MspInit+0x1a4>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	f040 80bb 	bne.w	8000ec6 <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
  	__HAL_RCC_ETH_CLK_ENABLE();
 8000d50:	4b60      	ldr	r3, [pc, #384]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d56:	4a5f      	ldr	r2, [pc, #380]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000d58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000d60:	4b5c      	ldr	r3, [pc, #368]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d6a:	623b      	str	r3, [r7, #32]
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 8000d6e:	4b59      	ldr	r3, [pc, #356]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d74:	4a57      	ldr	r2, [pc, #348]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d7a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000d7e:	4b55      	ldr	r3, [pc, #340]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d88:	61fb      	str	r3, [r7, #28]
 8000d8a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 8000d8c:	4b51      	ldr	r3, [pc, #324]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a50      	ldr	r2, [pc, #320]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000d94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000d9c:	4b4d      	ldr	r3, [pc, #308]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da6:	61bb      	str	r3, [r7, #24]
 8000da8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000daa:	4b4a      	ldr	r3, [pc, #296]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000db0:	4a48      	ldr	r2, [pc, #288]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000dba:	4b46      	ldr	r3, [pc, #280]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b42      	ldr	r3, [pc, #264]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dce:	4a41      	ldr	r2, [pc, #260]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000dd8:	4b3e      	ldr	r3, [pc, #248]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de6:	4b3b      	ldr	r3, [pc, #236]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dec:	4a39      	ldr	r2, [pc, #228]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000dee:	f043 0302 	orr.w	r3, r3, #2
 8000df2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000df6:	4b37      	ldr	r3, [pc, #220]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e04:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e0a:	4a32      	ldr	r2, [pc, #200]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e10:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e14:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <HAL_ETH_MspInit+0x1a8>)
 8000e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e22:	2332      	movs	r3, #50	; 0x32
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e32:	230b      	movs	r3, #11
 8000e34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4826      	ldr	r0, [pc, #152]	; (8000ed8 <HAL_ETH_MspInit+0x1ac>)
 8000e3e:	f003 f895 	bl	8003f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e42:	2386      	movs	r3, #134	; 0x86
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e52:	230b      	movs	r3, #11
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	481f      	ldr	r0, [pc, #124]	; (8000edc <HAL_ETH_MspInit+0x1b0>)
 8000e5e:	f003 f885 	bl	8003f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e74:	230b      	movs	r3, #11
 8000e76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4818      	ldr	r0, [pc, #96]	; (8000ee0 <HAL_ETH_MspInit+0x1b4>)
 8000e80:	f003 f874 	bl	8003f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000e84:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e96:	230b      	movs	r3, #11
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4810      	ldr	r0, [pc, #64]	; (8000ee4 <HAL_ETH_MspInit+0x1b8>)
 8000ea2:	f003 f863 	bl	8003f6c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2105      	movs	r1, #5
 8000eaa:	206a      	movs	r0, #106	; 0x6a
 8000eac:	f001 fac4 	bl	8002438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000eb0:	206a      	movs	r0, #106	; 0x6a
 8000eb2:	f001 fadb 	bl	800246c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2105      	movs	r1, #5
 8000eba:	206b      	movs	r0, #107	; 0x6b
 8000ebc:	f001 fabc 	bl	8002438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8000ec0:	206b      	movs	r0, #107	; 0x6b
 8000ec2:	f001 fad3 	bl	800246c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	3738      	adds	r7, #56	; 0x38
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40028000 	.word	0x40028000
 8000ed4:	44020c00 	.word	0x44020c00
 8000ed8:	42020800 	.word	0x42020800
 8000edc:	42020000 	.word	0x42020000
 8000ee0:	42020400 	.word	0x42020400
 8000ee4:	42021800 	.word	0x42021800

08000ee8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <ETH_PHY_IO_Init+0x10>)
 8000eee:	f002 fa55 	bl	800339c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20005068 	.word	0x20005068

08000efc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	68f9      	ldr	r1, [r7, #12]
 8000f1e:	4807      	ldr	r0, [pc, #28]	; (8000f3c <ETH_PHY_IO_ReadReg+0x30>)
 8000f20:	f001 ffa6 	bl	8002e70 <HAL_ETH_ReadPHYRegister>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d002      	beq.n	8000f30 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2e:	e000      	b.n	8000f32 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20005068 	.word	0x20005068

08000f40 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	68f9      	ldr	r1, [r7, #12]
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <ETH_PHY_IO_WriteReg+0x30>)
 8000f54:	f001 ffe0 	bl	8002f18 <HAL_ETH_WritePHYRegister>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d002      	beq.n	8000f64 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	e000      	b.n	8000f66 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20005068 	.word	0x20005068

08000f74 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000f78:	f001 f984 	bl	8002284 <HAL_GetTick>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0a0      	sub	sp, #128	; 0x80
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	2264      	movs	r2, #100	; 0x64
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f01b fcd6 	bl	801c946 <memset>
  int32_t PHYLinkState = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	67bb      	str	r3, [r7, #120]	; 0x78
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000fae:	483a      	ldr	r0, [pc, #232]	; (8001098 <ethernet_link_thread+0x114>)
 8000fb0:	f001 f8a7 	bl	8002102 <LAN8742_GetLinkState>
 8000fb4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8000fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d00c      	beq.n	8000fe2 <ethernet_link_thread+0x5e>
 8000fc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	dc09      	bgt.n	8000fe2 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8000fce:	4833      	ldr	r0, [pc, #204]	; (800109c <ethernet_link_thread+0x118>)
 8000fd0:	f001 fbce 	bl	8002770 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8000fd4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000fd6:	f011 faad 	bl	8012534 <netif_set_down>
    netif_set_link_down(netif);
 8000fda:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000fdc:	f011 fb10 	bl	8012600 <netif_set_link_down>
 8000fe0:	e055      	b.n	800108e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8000fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fe4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d14e      	bne.n	800108e <ethernet_link_thread+0x10a>
 8000ff0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	dd4b      	ble.n	800108e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8000ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ff8:	3b02      	subs	r3, #2
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d82a      	bhi.n	8001054 <ethernet_link_thread+0xd0>
 8000ffe:	a201      	add	r2, pc, #4	; (adr r2, 8001004 <ethernet_link_thread+0x80>)
 8001000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001004:	08001015 	.word	0x08001015
 8001008:	08001027 	.word	0x08001027
 800100c:	08001037 	.word	0x08001037
 8001010:	08001047 	.word	0x08001047
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8001014:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001018:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800101a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800101e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001020:	2301      	movs	r3, #1
 8001022:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001024:	e017      	b.n	8001056 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8001026:	2300      	movs	r3, #0
 8001028:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800102a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800102e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001030:	2301      	movs	r3, #1
 8001032:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001034:	e00f      	b.n	8001056 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8001036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800103c:	2300      	movs	r3, #0
 800103e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001044:	e007      	b.n	8001056 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8001046:	2300      	movs	r3, #0
 8001048:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800104a:	2300      	movs	r3, #0
 800104c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800104e:	2301      	movs	r3, #1
 8001050:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001052:	e000      	b.n	8001056 <ethernet_link_thread+0xd2>
    default:
      break;
 8001054:	bf00      	nop
    }

    if(linkchanged)
 8001056:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001058:	2b00      	cmp	r3, #0
 800105a:	d018      	beq.n	800108e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800105c:	f107 0308 	add.w	r3, r7, #8
 8001060:	4619      	mov	r1, r3
 8001062:	480e      	ldr	r0, [pc, #56]	; (800109c <ethernet_link_thread+0x118>)
 8001064:	f001 ffac 	bl	8002fc0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8001068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800106a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800106c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800106e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	4619      	mov	r1, r3
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <ethernet_link_thread+0x118>)
 8001078:	f002 f976 	bl	8003368 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800107c:	4807      	ldr	r0, [pc, #28]	; (800109c <ethernet_link_thread+0x118>)
 800107e:	f001 fae9 	bl	8002654 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8001082:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001084:	f011 f9ea 	bl	801245c <netif_set_up>
      netif_set_link_up(netif);
 8001088:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800108a:	f011 fa85 	bl	8012598 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800108e:	2064      	movs	r0, #100	; 0x64
 8001090:	f00a fba4 	bl	800b7dc <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8001094:	e78b      	b.n	8000fae <ethernet_link_thread+0x2a>
 8001096:	bf00      	nop
 8001098:	20005150 	.word	0x20005150
 800109c:	20005068 	.word	0x20005068

080010a0 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80010a8:	4812      	ldr	r0, [pc, #72]	; (80010f4 <HAL_ETH_RxAllocateCallback+0x54>)
 80010aa:	f010 ff4b 	bl	8011f44 <memp_malloc_pool>
 80010ae:	60f8      	str	r0, [r7, #12]
  if (p)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d014      	beq.n	80010e0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f103 0220 	add.w	r2, r3, #32
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <HAL_ETH_RxAllocateCallback+0x58>)
 80010c4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80010ce:	9201      	str	r2, [sp, #4]
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2241      	movs	r2, #65	; 0x41
 80010d6:	2100      	movs	r1, #0
 80010d8:	2000      	movs	r0, #0
 80010da:	f011 fcb5 	bl	8012a48 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80010de:	e005      	b.n	80010ec <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_ETH_RxAllocateCallback+0x5c>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
}
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	08020cb4 	.word	0x08020cb4
 80010f8:	08000cdd 	.word	0x08000cdd
 80010fc:	2000505c 	.word	0x2000505c

08001100 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3b20      	subs	r3, #32
 800111e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	2200      	movs	r2, #0
 800112a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d103      	bne.n	8001142 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e003      	b.n	800114a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	69fa      	ldr	r2, [r7, #28]
 800114e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	61fb      	str	r3, [r7, #28]
 8001156:	e009      	b.n	800116c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	891a      	ldrh	r2, [r3, #8]
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	4413      	add	r3, r2
 8001160:	b29a      	uxth	r2, r3
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f2      	bne.n	8001158 <HAL_ETH_RxLinkCallback+0x58>

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
//  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3724      	adds	r7, #36	; 0x24
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f011 fe17 	bl	8012dbc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <MX_LWIP_Init>:
/* FOR RTOS */
/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800119e:	4b98      	ldr	r3, [pc, #608]	; (8001400 <MX_LWIP_Init+0x268>)
 80011a0:	22c0      	movs	r2, #192	; 0xc0
 80011a2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80011a4:	4b96      	ldr	r3, [pc, #600]	; (8001400 <MX_LWIP_Init+0x268>)
 80011a6:	22a8      	movs	r2, #168	; 0xa8
 80011a8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 219;
 80011aa:	4b95      	ldr	r3, [pc, #596]	; (8001400 <MX_LWIP_Init+0x268>)
 80011ac:	22db      	movs	r2, #219	; 0xdb
 80011ae:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 80011b0:	4b93      	ldr	r3, [pc, #588]	; (8001400 <MX_LWIP_Init+0x268>)
 80011b2:	2264      	movs	r2, #100	; 0x64
 80011b4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80011b6:	4b93      	ldr	r3, [pc, #588]	; (8001404 <MX_LWIP_Init+0x26c>)
 80011b8:	22ff      	movs	r2, #255	; 0xff
 80011ba:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80011bc:	4b91      	ldr	r3, [pc, #580]	; (8001404 <MX_LWIP_Init+0x26c>)
 80011be:	22ff      	movs	r2, #255	; 0xff
 80011c0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80011c2:	4b90      	ldr	r3, [pc, #576]	; (8001404 <MX_LWIP_Init+0x26c>)
 80011c4:	22ff      	movs	r2, #255	; 0xff
 80011c6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80011c8:	4b8e      	ldr	r3, [pc, #568]	; (8001404 <MX_LWIP_Init+0x26c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80011ce:	4b8e      	ldr	r3, [pc, #568]	; (8001408 <MX_LWIP_Init+0x270>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80011d4:	4b8c      	ldr	r3, [pc, #560]	; (8001408 <MX_LWIP_Init+0x270>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80011da:	4b8b      	ldr	r3, [pc, #556]	; (8001408 <MX_LWIP_Init+0x270>)
 80011dc:	2200      	movs	r2, #0
 80011de:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80011e0:	4b89      	ldr	r3, [pc, #548]	; (8001408 <MX_LWIP_Init+0x270>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80011e6:	2100      	movs	r1, #0
 80011e8:	2000      	movs	r0, #0
 80011ea:	f010 f8ef 	bl	80113cc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80011ee:	4b84      	ldr	r3, [pc, #528]	; (8001400 <MX_LWIP_Init+0x268>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	061a      	lsls	r2, r3, #24
 80011f4:	4b82      	ldr	r3, [pc, #520]	; (8001400 <MX_LWIP_Init+0x268>)
 80011f6:	785b      	ldrb	r3, [r3, #1]
 80011f8:	041b      	lsls	r3, r3, #16
 80011fa:	431a      	orrs	r2, r3
 80011fc:	4b80      	ldr	r3, [pc, #512]	; (8001400 <MX_LWIP_Init+0x268>)
 80011fe:	789b      	ldrb	r3, [r3, #2]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	4313      	orrs	r3, r2
 8001204:	4a7e      	ldr	r2, [pc, #504]	; (8001400 <MX_LWIP_Init+0x268>)
 8001206:	78d2      	ldrb	r2, [r2, #3]
 8001208:	4313      	orrs	r3, r2
 800120a:	061a      	lsls	r2, r3, #24
 800120c:	4b7c      	ldr	r3, [pc, #496]	; (8001400 <MX_LWIP_Init+0x268>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	0619      	lsls	r1, r3, #24
 8001212:	4b7b      	ldr	r3, [pc, #492]	; (8001400 <MX_LWIP_Init+0x268>)
 8001214:	785b      	ldrb	r3, [r3, #1]
 8001216:	041b      	lsls	r3, r3, #16
 8001218:	4319      	orrs	r1, r3
 800121a:	4b79      	ldr	r3, [pc, #484]	; (8001400 <MX_LWIP_Init+0x268>)
 800121c:	789b      	ldrb	r3, [r3, #2]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	430b      	orrs	r3, r1
 8001222:	4977      	ldr	r1, [pc, #476]	; (8001400 <MX_LWIP_Init+0x268>)
 8001224:	78c9      	ldrb	r1, [r1, #3]
 8001226:	430b      	orrs	r3, r1
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800122e:	431a      	orrs	r2, r3
 8001230:	4b73      	ldr	r3, [pc, #460]	; (8001400 <MX_LWIP_Init+0x268>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	0619      	lsls	r1, r3, #24
 8001236:	4b72      	ldr	r3, [pc, #456]	; (8001400 <MX_LWIP_Init+0x268>)
 8001238:	785b      	ldrb	r3, [r3, #1]
 800123a:	041b      	lsls	r3, r3, #16
 800123c:	4319      	orrs	r1, r3
 800123e:	4b70      	ldr	r3, [pc, #448]	; (8001400 <MX_LWIP_Init+0x268>)
 8001240:	789b      	ldrb	r3, [r3, #2]
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	430b      	orrs	r3, r1
 8001246:	496e      	ldr	r1, [pc, #440]	; (8001400 <MX_LWIP_Init+0x268>)
 8001248:	78c9      	ldrb	r1, [r1, #3]
 800124a:	430b      	orrs	r3, r1
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001252:	431a      	orrs	r2, r3
 8001254:	4b6a      	ldr	r3, [pc, #424]	; (8001400 <MX_LWIP_Init+0x268>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	0619      	lsls	r1, r3, #24
 800125a:	4b69      	ldr	r3, [pc, #420]	; (8001400 <MX_LWIP_Init+0x268>)
 800125c:	785b      	ldrb	r3, [r3, #1]
 800125e:	041b      	lsls	r3, r3, #16
 8001260:	4319      	orrs	r1, r3
 8001262:	4b67      	ldr	r3, [pc, #412]	; (8001400 <MX_LWIP_Init+0x268>)
 8001264:	789b      	ldrb	r3, [r3, #2]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	430b      	orrs	r3, r1
 800126a:	4965      	ldr	r1, [pc, #404]	; (8001400 <MX_LWIP_Init+0x268>)
 800126c:	78c9      	ldrb	r1, [r1, #3]
 800126e:	430b      	orrs	r3, r1
 8001270:	0e1b      	lsrs	r3, r3, #24
 8001272:	4313      	orrs	r3, r2
 8001274:	4a65      	ldr	r2, [pc, #404]	; (800140c <MX_LWIP_Init+0x274>)
 8001276:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8001278:	4b62      	ldr	r3, [pc, #392]	; (8001404 <MX_LWIP_Init+0x26c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	061a      	lsls	r2, r3, #24
 800127e:	4b61      	ldr	r3, [pc, #388]	; (8001404 <MX_LWIP_Init+0x26c>)
 8001280:	785b      	ldrb	r3, [r3, #1]
 8001282:	041b      	lsls	r3, r3, #16
 8001284:	431a      	orrs	r2, r3
 8001286:	4b5f      	ldr	r3, [pc, #380]	; (8001404 <MX_LWIP_Init+0x26c>)
 8001288:	789b      	ldrb	r3, [r3, #2]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	4313      	orrs	r3, r2
 800128e:	4a5d      	ldr	r2, [pc, #372]	; (8001404 <MX_LWIP_Init+0x26c>)
 8001290:	78d2      	ldrb	r2, [r2, #3]
 8001292:	4313      	orrs	r3, r2
 8001294:	061a      	lsls	r2, r3, #24
 8001296:	4b5b      	ldr	r3, [pc, #364]	; (8001404 <MX_LWIP_Init+0x26c>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	0619      	lsls	r1, r3, #24
 800129c:	4b59      	ldr	r3, [pc, #356]	; (8001404 <MX_LWIP_Init+0x26c>)
 800129e:	785b      	ldrb	r3, [r3, #1]
 80012a0:	041b      	lsls	r3, r3, #16
 80012a2:	4319      	orrs	r1, r3
 80012a4:	4b57      	ldr	r3, [pc, #348]	; (8001404 <MX_LWIP_Init+0x26c>)
 80012a6:	789b      	ldrb	r3, [r3, #2]
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	430b      	orrs	r3, r1
 80012ac:	4955      	ldr	r1, [pc, #340]	; (8001404 <MX_LWIP_Init+0x26c>)
 80012ae:	78c9      	ldrb	r1, [r1, #3]
 80012b0:	430b      	orrs	r3, r1
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80012b8:	431a      	orrs	r2, r3
 80012ba:	4b52      	ldr	r3, [pc, #328]	; (8001404 <MX_LWIP_Init+0x26c>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	0619      	lsls	r1, r3, #24
 80012c0:	4b50      	ldr	r3, [pc, #320]	; (8001404 <MX_LWIP_Init+0x26c>)
 80012c2:	785b      	ldrb	r3, [r3, #1]
 80012c4:	041b      	lsls	r3, r3, #16
 80012c6:	4319      	orrs	r1, r3
 80012c8:	4b4e      	ldr	r3, [pc, #312]	; (8001404 <MX_LWIP_Init+0x26c>)
 80012ca:	789b      	ldrb	r3, [r3, #2]
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	430b      	orrs	r3, r1
 80012d0:	494c      	ldr	r1, [pc, #304]	; (8001404 <MX_LWIP_Init+0x26c>)
 80012d2:	78c9      	ldrb	r1, [r1, #3]
 80012d4:	430b      	orrs	r3, r1
 80012d6:	0a1b      	lsrs	r3, r3, #8
 80012d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80012dc:	431a      	orrs	r2, r3
 80012de:	4b49      	ldr	r3, [pc, #292]	; (8001404 <MX_LWIP_Init+0x26c>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	0619      	lsls	r1, r3, #24
 80012e4:	4b47      	ldr	r3, [pc, #284]	; (8001404 <MX_LWIP_Init+0x26c>)
 80012e6:	785b      	ldrb	r3, [r3, #1]
 80012e8:	041b      	lsls	r3, r3, #16
 80012ea:	4319      	orrs	r1, r3
 80012ec:	4b45      	ldr	r3, [pc, #276]	; (8001404 <MX_LWIP_Init+0x26c>)
 80012ee:	789b      	ldrb	r3, [r3, #2]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	430b      	orrs	r3, r1
 80012f4:	4943      	ldr	r1, [pc, #268]	; (8001404 <MX_LWIP_Init+0x26c>)
 80012f6:	78c9      	ldrb	r1, [r1, #3]
 80012f8:	430b      	orrs	r3, r1
 80012fa:	0e1b      	lsrs	r3, r3, #24
 80012fc:	4313      	orrs	r3, r2
 80012fe:	4a44      	ldr	r2, [pc, #272]	; (8001410 <MX_LWIP_Init+0x278>)
 8001300:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8001302:	4b41      	ldr	r3, [pc, #260]	; (8001408 <MX_LWIP_Init+0x270>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	061a      	lsls	r2, r3, #24
 8001308:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <MX_LWIP_Init+0x270>)
 800130a:	785b      	ldrb	r3, [r3, #1]
 800130c:	041b      	lsls	r3, r3, #16
 800130e:	431a      	orrs	r2, r3
 8001310:	4b3d      	ldr	r3, [pc, #244]	; (8001408 <MX_LWIP_Init+0x270>)
 8001312:	789b      	ldrb	r3, [r3, #2]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	4313      	orrs	r3, r2
 8001318:	4a3b      	ldr	r2, [pc, #236]	; (8001408 <MX_LWIP_Init+0x270>)
 800131a:	78d2      	ldrb	r2, [r2, #3]
 800131c:	4313      	orrs	r3, r2
 800131e:	061a      	lsls	r2, r3, #24
 8001320:	4b39      	ldr	r3, [pc, #228]	; (8001408 <MX_LWIP_Init+0x270>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	0619      	lsls	r1, r3, #24
 8001326:	4b38      	ldr	r3, [pc, #224]	; (8001408 <MX_LWIP_Init+0x270>)
 8001328:	785b      	ldrb	r3, [r3, #1]
 800132a:	041b      	lsls	r3, r3, #16
 800132c:	4319      	orrs	r1, r3
 800132e:	4b36      	ldr	r3, [pc, #216]	; (8001408 <MX_LWIP_Init+0x270>)
 8001330:	789b      	ldrb	r3, [r3, #2]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	430b      	orrs	r3, r1
 8001336:	4934      	ldr	r1, [pc, #208]	; (8001408 <MX_LWIP_Init+0x270>)
 8001338:	78c9      	ldrb	r1, [r1, #3]
 800133a:	430b      	orrs	r3, r1
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001342:	431a      	orrs	r2, r3
 8001344:	4b30      	ldr	r3, [pc, #192]	; (8001408 <MX_LWIP_Init+0x270>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	0619      	lsls	r1, r3, #24
 800134a:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <MX_LWIP_Init+0x270>)
 800134c:	785b      	ldrb	r3, [r3, #1]
 800134e:	041b      	lsls	r3, r3, #16
 8001350:	4319      	orrs	r1, r3
 8001352:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <MX_LWIP_Init+0x270>)
 8001354:	789b      	ldrb	r3, [r3, #2]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	430b      	orrs	r3, r1
 800135a:	492b      	ldr	r1, [pc, #172]	; (8001408 <MX_LWIP_Init+0x270>)
 800135c:	78c9      	ldrb	r1, [r1, #3]
 800135e:	430b      	orrs	r3, r1
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001366:	431a      	orrs	r2, r3
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <MX_LWIP_Init+0x270>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	0619      	lsls	r1, r3, #24
 800136e:	4b26      	ldr	r3, [pc, #152]	; (8001408 <MX_LWIP_Init+0x270>)
 8001370:	785b      	ldrb	r3, [r3, #1]
 8001372:	041b      	lsls	r3, r3, #16
 8001374:	4319      	orrs	r1, r3
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <MX_LWIP_Init+0x270>)
 8001378:	789b      	ldrb	r3, [r3, #2]
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	430b      	orrs	r3, r1
 800137e:	4922      	ldr	r1, [pc, #136]	; (8001408 <MX_LWIP_Init+0x270>)
 8001380:	78c9      	ldrb	r1, [r1, #3]
 8001382:	430b      	orrs	r3, r1
 8001384:	0e1b      	lsrs	r3, r3, #24
 8001386:	4313      	orrs	r3, r2
 8001388:	4a22      	ldr	r2, [pc, #136]	; (8001414 <MX_LWIP_Init+0x27c>)
 800138a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <MX_LWIP_Init+0x280>)
 800138e:	9302      	str	r3, [sp, #8]
 8001390:	4b22      	ldr	r3, [pc, #136]	; (800141c <MX_LWIP_Init+0x284>)
 8001392:	9301      	str	r3, [sp, #4]
 8001394:	2300      	movs	r3, #0
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <MX_LWIP_Init+0x27c>)
 800139a:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <MX_LWIP_Init+0x278>)
 800139c:	491b      	ldr	r1, [pc, #108]	; (800140c <MX_LWIP_Init+0x274>)
 800139e:	4820      	ldr	r0, [pc, #128]	; (8001420 <MX_LWIP_Init+0x288>)
 80013a0:	f010 fe9a 	bl	80120d8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80013a4:	481e      	ldr	r0, [pc, #120]	; (8001420 <MX_LWIP_Init+0x288>)
 80013a6:	f011 f849 	bl	801243c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <MX_LWIP_Init+0x288>)
 80013ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80013b0:	089b      	lsrs	r3, r3, #2
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80013bc:	4818      	ldr	r0, [pc, #96]	; (8001420 <MX_LWIP_Init+0x288>)
 80013be:	f011 f84d 	bl	801245c <netif_set_up>
 80013c2:	e002      	b.n	80013ca <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80013c4:	4816      	ldr	r0, [pc, #88]	; (8001420 <MX_LWIP_Init+0x288>)
 80013c6:	f011 f8b5 	bl	8012534 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80013ca:	4916      	ldr	r1, [pc, #88]	; (8001424 <MX_LWIP_Init+0x28c>)
 80013cc:	4814      	ldr	r0, [pc, #80]	; (8001420 <MX_LWIP_Init+0x288>)
 80013ce:	f011 f947 	bl	8012660 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
  /* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80013d2:	2224      	movs	r2, #36	; 0x24
 80013d4:	2100      	movs	r1, #0
 80013d6:	4814      	ldr	r0, [pc, #80]	; (8001428 <MX_LWIP_Init+0x290>)
 80013d8:	f01b fab5 	bl	801c946 <memset>
  attributes.name = "EthLink";
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <MX_LWIP_Init+0x290>)
 80013de:	4a13      	ldr	r2, [pc, #76]	; (800142c <MX_LWIP_Init+0x294>)
 80013e0:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_LWIP_Init+0x290>)
 80013e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013e8:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <MX_LWIP_Init+0x290>)
 80013ec:	2210      	movs	r2, #16
 80013ee:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80013f0:	4a0d      	ldr	r2, [pc, #52]	; (8001428 <MX_LWIP_Init+0x290>)
 80013f2:	490b      	ldr	r1, [pc, #44]	; (8001420 <MX_LWIP_Init+0x288>)
 80013f4:	480e      	ldr	r0, [pc, #56]	; (8001430 <MX_LWIP_Init+0x298>)
 80013f6:	f00a f95f 	bl	800b6b8 <osThreadNew>
  /* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200051b0 	.word	0x200051b0
 8001404:	200051b4 	.word	0x200051b4
 8001408:	200051b8 	.word	0x200051b8
 800140c:	200051a4 	.word	0x200051a4
 8001410:	200051a8 	.word	0x200051a8
 8001414:	200051ac 	.word	0x200051ac
 8001418:	080112dd 	.word	0x080112dd
 800141c:	08000c81 	.word	0x08000c81
 8001420:	20005170 	.word	0x20005170
 8001424:	08001435 	.word	0x08001435
 8001428:	200051bc 	.word	0x200051bc
 800142c:	0801d77c 	.word	0x0801d77c
 8001430:	08000f85 	.word	0x08000f85

08001434 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001450:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001454:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	d013      	beq.n	8001488 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001460:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001464:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001468:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00b      	beq.n	8001488 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001470:	e000      	b.n	8001474 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001472:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001474:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f9      	beq.n	8001472 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800147e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001488:	687b      	ldr	r3, [r7, #4]
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	60f8      	str	r0, [r7, #12]
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	e009      	b.n	80014bc <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	60ba      	str	r2, [r7, #8]
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ffc9 	bl	8001448 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3301      	adds	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	dbf1      	blt.n	80014a8 <_write+0x12>
  }
  return len;
 80014c4:	687b      	ldr	r3, [r7, #4]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d2:	f000 fe9d 	bl	8002210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d6:	f000 f80f 	bl	80014f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014da:	f000 f91b 	bl	8001714 <MX_GPIO_Init>
  //MX_ETH_Init();
  MX_ICACHE_Init();
 80014de:	f000 f871 	bl	80015c4 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80014e2:	f000 f87b 	bl	80015dc <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 80014e6:	f000 f8c3 	bl	8001670 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80014ea:	f00a f881 	bl	800b5f0 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80014ee:	f7ff f86f 	bl	80005d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80014f2:	f00a f8a3 	bl	800b63c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <main+0x28>

080014f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b09c      	sub	sp, #112	; 0x70
 80014fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fe:	f107 0320 	add.w	r3, r7, #32
 8001502:	2250      	movs	r2, #80	; 0x50
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f01b fa1d 	bl	801c946 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800150c:	f107 0308 	add.w	r3, r7, #8
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
 800151c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800151e:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <SystemClock_Config+0xc8>)
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	4a27      	ldr	r2, [pc, #156]	; (80015c0 <SystemClock_Config+0xc8>)
 8001524:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001528:	6113      	str	r3, [r2, #16]
 800152a:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <SystemClock_Config+0xc8>)
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001536:	bf00      	nop
 8001538:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <SystemClock_Config+0xc8>)
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	2b08      	cmp	r3, #8
 8001542:	d1f9      	bne.n	8001538 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001544:	2301      	movs	r3, #1
 8001546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 8001548:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154e:	2302      	movs	r3, #2
 8001550:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001552:	2303      	movs	r3, #3
 8001554:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001556:	2304      	movs	r3, #4
 8001558:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 800155a:	23fa      	movs	r3, #250	; 0xfa
 800155c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800155e:	2302      	movs	r3, #2
 8001560:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001562:	2302      	movs	r3, #2
 8001564:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001566:	2302      	movs	r3, #2
 8001568:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 800156a:	2304      	movs	r3, #4
 800156c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800156e:	2300      	movs	r3, #0
 8001570:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001576:	f107 0320 	add.w	r3, r7, #32
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fe8a 	bl	8004294 <HAL_RCC_OscConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001586:	f000 f9e9 	bl	800195c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158a:	231f      	movs	r3, #31
 800158c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158e:	2303      	movs	r3, #3
 8001590:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	2105      	movs	r1, #5
 80015a8:	4618      	mov	r0, r3
 80015aa:	f003 faab 	bl	8004b04 <HAL_RCC_ClockConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015b4:	f000 f9d2 	bl	800195c <Error_Handler>
  }
}
 80015b8:	bf00      	nop
 80015ba:	3770      	adds	r7, #112	; 0x70
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	44020800 	.word	0x44020800

080015c4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80015c8:	f002 fe54 	bl	8004274 <HAL_ICACHE_Enable>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80015d2:	f000 f9c3 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80015e0:	4b20      	ldr	r3, [pc, #128]	; (8001664 <MX_LPUART1_UART_Init+0x88>)
 80015e2:	4a21      	ldr	r2, [pc, #132]	; (8001668 <MX_LPUART1_UART_Init+0x8c>)
 80015e4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80015e6:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <MX_LPUART1_UART_Init+0x88>)
 80015e8:	4a20      	ldr	r2, [pc, #128]	; (800166c <MX_LPUART1_UART_Init+0x90>)
 80015ea:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <MX_LPUART1_UART_Init+0x88>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <MX_LPUART1_UART_Init+0x88>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_LPUART1_UART_Init+0x88>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <MX_LPUART1_UART_Init+0x88>)
 8001600:	220c      	movs	r2, #12
 8001602:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <MX_LPUART1_UART_Init+0x88>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <MX_LPUART1_UART_Init+0x88>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <MX_LPUART1_UART_Init+0x88>)
 8001612:	2200      	movs	r2, #0
 8001614:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <MX_LPUART1_UART_Init+0x88>)
 8001618:	2200      	movs	r2, #0
 800161a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800161c:	4811      	ldr	r0, [pc, #68]	; (8001664 <MX_LPUART1_UART_Init+0x88>)
 800161e:	f009 fa23 	bl	800aa68 <HAL_UART_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001628:	f000 f998 	bl	800195c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800162c:	2100      	movs	r1, #0
 800162e:	480d      	ldr	r0, [pc, #52]	; (8001664 <MX_LPUART1_UART_Init+0x88>)
 8001630:	f009 feaa 	bl	800b388 <HAL_UARTEx_SetTxFifoThreshold>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800163a:	f000 f98f 	bl	800195c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800163e:	2100      	movs	r1, #0
 8001640:	4808      	ldr	r0, [pc, #32]	; (8001664 <MX_LPUART1_UART_Init+0x88>)
 8001642:	f009 fedf 	bl	800b404 <HAL_UARTEx_SetRxFifoThreshold>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800164c:	f000 f986 	bl	800195c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_LPUART1_UART_Init+0x88>)
 8001652:	f009 fe60 	bl	800b316 <HAL_UARTEx_DisableFifoMode>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800165c:	f000 f97e 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200051e0 	.word	0x200051e0
 8001668:	44002400 	.word	0x44002400
 800166c:	00033324 	.word	0x00033324

08001670 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001674:	4b25      	ldr	r3, [pc, #148]	; (800170c <MX_USART3_UART_Init+0x9c>)
 8001676:	4a26      	ldr	r2, [pc, #152]	; (8001710 <MX_USART3_UART_Init+0xa0>)
 8001678:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <MX_USART3_UART_Init+0x9c>)
 800167c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001680:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b22      	ldr	r3, [pc, #136]	; (800170c <MX_USART3_UART_Init+0x9c>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b20      	ldr	r3, [pc, #128]	; (800170c <MX_USART3_UART_Init+0x9c>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800168e:	4b1f      	ldr	r3, [pc, #124]	; (800170c <MX_USART3_UART_Init+0x9c>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b1d      	ldr	r3, [pc, #116]	; (800170c <MX_USART3_UART_Init+0x9c>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b1c      	ldr	r3, [pc, #112]	; (800170c <MX_USART3_UART_Init+0x9c>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80016a0:	4b1a      	ldr	r3, [pc, #104]	; (800170c <MX_USART3_UART_Init+0x9c>)
 80016a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016a6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <MX_USART3_UART_Init+0x9c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <MX_USART3_UART_Init+0x9c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <MX_USART3_UART_Init+0x9c>)
 80016b6:	2202      	movs	r2, #2
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 80016ba:	4b14      	ldr	r3, [pc, #80]	; (800170c <MX_USART3_UART_Init+0x9c>)
 80016bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016c2:	4812      	ldr	r0, [pc, #72]	; (800170c <MX_USART3_UART_Init+0x9c>)
 80016c4:	f009 f9d0 	bl	800aa68 <HAL_UART_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USART3_UART_Init+0x62>
  {
    Error_Handler();
 80016ce:	f000 f945 	bl	800195c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d2:	2100      	movs	r1, #0
 80016d4:	480d      	ldr	r0, [pc, #52]	; (800170c <MX_USART3_UART_Init+0x9c>)
 80016d6:	f009 fe57 	bl	800b388 <HAL_UARTEx_SetTxFifoThreshold>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_USART3_UART_Init+0x74>
  {
    Error_Handler();
 80016e0:	f000 f93c 	bl	800195c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e4:	2100      	movs	r1, #0
 80016e6:	4809      	ldr	r0, [pc, #36]	; (800170c <MX_USART3_UART_Init+0x9c>)
 80016e8:	f009 fe8c 	bl	800b404 <HAL_UARTEx_SetRxFifoThreshold>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_USART3_UART_Init+0x86>
  {
    Error_Handler();
 80016f2:	f000 f933 	bl	800195c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_USART3_UART_Init+0x9c>)
 80016f8:	f009 fe0d 	bl	800b316 <HAL_UARTEx_DisableFifoMode>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART3_UART_Init+0x96>
  {
    Error_Handler();
 8001702:	f000 f92b 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20005274 	.word	0x20005274
 8001710:	40004800 	.word	0x40004800

08001714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08e      	sub	sp, #56	; 0x38
 8001718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800172a:	4b7c      	ldr	r3, [pc, #496]	; (800191c <MX_GPIO_Init+0x208>)
 800172c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001730:	4a7a      	ldr	r2, [pc, #488]	; (800191c <MX_GPIO_Init+0x208>)
 8001732:	f043 0310 	orr.w	r3, r3, #16
 8001736:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800173a:	4b78      	ldr	r3, [pc, #480]	; (800191c <MX_GPIO_Init+0x208>)
 800173c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	623b      	str	r3, [r7, #32]
 8001746:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001748:	4b74      	ldr	r3, [pc, #464]	; (800191c <MX_GPIO_Init+0x208>)
 800174a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800174e:	4a73      	ldr	r2, [pc, #460]	; (800191c <MX_GPIO_Init+0x208>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001758:	4b70      	ldr	r3, [pc, #448]	; (800191c <MX_GPIO_Init+0x208>)
 800175a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	61fb      	str	r3, [r7, #28]
 8001764:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001766:	4b6d      	ldr	r3, [pc, #436]	; (800191c <MX_GPIO_Init+0x208>)
 8001768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800176c:	4a6b      	ldr	r2, [pc, #428]	; (800191c <MX_GPIO_Init+0x208>)
 800176e:	f043 0320 	orr.w	r3, r3, #32
 8001772:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001776:	4b69      	ldr	r3, [pc, #420]	; (800191c <MX_GPIO_Init+0x208>)
 8001778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800177c:	f003 0320 	and.w	r3, r3, #32
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001784:	4b65      	ldr	r3, [pc, #404]	; (800191c <MX_GPIO_Init+0x208>)
 8001786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800178a:	4a64      	ldr	r2, [pc, #400]	; (800191c <MX_GPIO_Init+0x208>)
 800178c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001790:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001794:	4b61      	ldr	r3, [pc, #388]	; (800191c <MX_GPIO_Init+0x208>)
 8001796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800179a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	4b5e      	ldr	r3, [pc, #376]	; (800191c <MX_GPIO_Init+0x208>)
 80017a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017a8:	4a5c      	ldr	r2, [pc, #368]	; (800191c <MX_GPIO_Init+0x208>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017b2:	4b5a      	ldr	r3, [pc, #360]	; (800191c <MX_GPIO_Init+0x208>)
 80017b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c0:	4b56      	ldr	r3, [pc, #344]	; (800191c <MX_GPIO_Init+0x208>)
 80017c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017c6:	4a55      	ldr	r2, [pc, #340]	; (800191c <MX_GPIO_Init+0x208>)
 80017c8:	f043 0302 	orr.w	r3, r3, #2
 80017cc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017d0:	4b52      	ldr	r3, [pc, #328]	; (800191c <MX_GPIO_Init+0x208>)
 80017d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017de:	4b4f      	ldr	r3, [pc, #316]	; (800191c <MX_GPIO_Init+0x208>)
 80017e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017e4:	4a4d      	ldr	r2, [pc, #308]	; (800191c <MX_GPIO_Init+0x208>)
 80017e6:	f043 0308 	orr.w	r3, r3, #8
 80017ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017ee:	4b4b      	ldr	r3, [pc, #300]	; (800191c <MX_GPIO_Init+0x208>)
 80017f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017fc:	4b47      	ldr	r3, [pc, #284]	; (800191c <MX_GPIO_Init+0x208>)
 80017fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001802:	4a46      	ldr	r2, [pc, #280]	; (800191c <MX_GPIO_Init+0x208>)
 8001804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001808:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800180c:	4b43      	ldr	r3, [pc, #268]	; (800191c <MX_GPIO_Init+0x208>)
 800180e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	2110      	movs	r1, #16
 800181e:	4840      	ldr	r0, [pc, #256]	; (8001920 <MX_GPIO_Init+0x20c>)
 8001820:	f002 fcf6 	bl	8004210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	2101      	movs	r1, #1
 8001828:	483e      	ldr	r0, [pc, #248]	; (8001924 <MX_GPIO_Init+0x210>)
 800182a:	f002 fcf1 	bl	8004210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	2110      	movs	r1, #16
 8001832:	483d      	ldr	r0, [pc, #244]	; (8001928 <MX_GPIO_Init+0x214>)
 8001834:	f002 fcec 	bl	8004210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800183e:	4b3b      	ldr	r3, [pc, #236]	; (800192c <MX_GPIO_Init+0x218>)
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184a:	4619      	mov	r1, r3
 800184c:	4838      	ldr	r0, [pc, #224]	; (8001930 <MX_GPIO_Init+0x21c>)
 800184e:	f002 fb8d 	bl	8003f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED2_YELLOW_Pin;
 8001852:	2310      	movs	r3, #16
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001866:	4619      	mov	r1, r3
 8001868:	482d      	ldr	r0, [pc, #180]	; (8001920 <MX_GPIO_Init+0x20c>)
 800186a:	f002 fb7f 	bl	8003f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800186e:	2310      	movs	r3, #16
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001872:	2303      	movs	r3, #3
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187e:	4619      	mov	r1, r3
 8001880:	482c      	ldr	r0, [pc, #176]	; (8001934 <MX_GPIO_Init+0x220>)
 8001882:	f002 fb73 	bl	8003f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8001886:	2301      	movs	r3, #1
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188a:	2301      	movs	r3, #1
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189a:	4619      	mov	r1, r3
 800189c:	4821      	ldr	r0, [pc, #132]	; (8001924 <MX_GPIO_Init+0x210>)
 800189e:	f002 fb65 	bl	8003f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 80018a2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a8:	2303      	movs	r3, #3
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b4:	4619      	mov	r1, r3
 80018b6:	481b      	ldr	r0, [pc, #108]	; (8001924 <MX_GPIO_Init+0x210>)
 80018b8:	f002 fb58 	bl	8003f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 80018bc:	2310      	movs	r3, #16
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d0:	4619      	mov	r1, r3
 80018d2:	4815      	ldr	r0, [pc, #84]	; (8001928 <MX_GPIO_Init+0x214>)
 80018d4:	f002 fb4a 	bl	8003f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <MX_GPIO_Init+0x218>)
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e8:	4619      	mov	r1, r3
 80018ea:	480f      	ldr	r0, [pc, #60]	; (8001928 <MX_GPIO_Init+0x214>)
 80018ec:	f002 fb3e 	bl	8003f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80018f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001902:	230a      	movs	r3, #10
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	4619      	mov	r1, r3
 800190c:	4809      	ldr	r0, [pc, #36]	; (8001934 <MX_GPIO_Init+0x220>)
 800190e:	f002 fb2d 	bl	8003f6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001912:	bf00      	nop
 8001914:	3738      	adds	r7, #56	; 0x38
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	44020c00 	.word	0x44020c00
 8001920:	42021400 	.word	0x42021400
 8001924:	42020400 	.word	0x42020400
 8001928:	42021800 	.word	0x42021800
 800192c:	10110000 	.word	0x10110000
 8001930:	42020800 	.word	0x42020800
 8001934:	42020000 	.word	0x42020000

08001938 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d101      	bne.n	800194e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800194a:	f000 fc87 	bl	800225c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40013400 	.word	0x40013400

0800195c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
}
 8001962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001964:	e7fe      	b.n	8001964 <Error_Handler+0x8>

08001966 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	210f      	movs	r1, #15
 800196e:	f06f 0001 	mvn.w	r0, #1
 8001972:	f000 fd61 	bl	8002438 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b0ce      	sub	sp, #312	; 0x138
 8001980:	af00      	add	r7, sp, #0
 8001982:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001986:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800198a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800199c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019a4:	4618      	mov	r0, r3
 80019a6:	f44f 7384 	mov.w	r3, #264	; 0x108
 80019aa:	461a      	mov	r2, r3
 80019ac:	2100      	movs	r1, #0
 80019ae:	f01a ffca 	bl	801c946 <memset>
  if(huart->Instance==LPUART1)
 80019b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019b6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a67      	ldr	r2, [pc, #412]	; (8001b5c <HAL_UART_MspInit+0x1e0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d15e      	bne.n	8001a82 <HAL_UART_MspInit+0x106>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80019c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019c8:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80019cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 80019d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019dc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019e0:	2200      	movs	r2, #0
 80019e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e6:	f107 0318 	add.w	r3, r7, #24
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 fc04 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 80019f6:	f7ff ffb1 	bl	800195c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80019fa:	4b59      	ldr	r3, [pc, #356]	; (8001b60 <HAL_UART_MspInit+0x1e4>)
 80019fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001a00:	4a57      	ldr	r2, [pc, #348]	; (8001b60 <HAL_UART_MspInit+0x1e4>)
 8001a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a06:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001a0a:	4b55      	ldr	r3, [pc, #340]	; (8001b60 <HAL_UART_MspInit+0x1e4>)
 8001a0c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001a10:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8001a14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a18:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a22:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a26:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a28:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <HAL_UART_MspInit+0x1e4>)
 8001a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a2e:	4a4c      	ldr	r2, [pc, #304]	; (8001b60 <HAL_UART_MspInit+0x1e4>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a38:	4b49      	ldr	r3, [pc, #292]	; (8001b60 <HAL_UART_MspInit+0x1e4>)
 8001a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a3e:	f003 0202 	and.w	r2, r3, #2
 8001a42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a46:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a50:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001a54:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8001a56:	23c0      	movs	r3, #192	; 0xc0
 8001a58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a6e:	2308      	movs	r3, #8
 8001a70:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a74:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001a78:	4619      	mov	r1, r3
 8001a7a:	483a      	ldr	r0, [pc, #232]	; (8001b64 <HAL_UART_MspInit+0x1e8>)
 8001a7c:	f002 fa76 	bl	8003f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a80:	e066      	b.n	8001b50 <HAL_UART_MspInit+0x1d4>
  else if(huart->Instance==USART3)
 8001a82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a86:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a36      	ldr	r2, [pc, #216]	; (8001b68 <HAL_UART_MspInit+0x1ec>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d15d      	bne.n	8001b50 <HAL_UART_MspInit+0x1d4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a94:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a98:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001a9c:	f04f 0204 	mov.w	r2, #4
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001aa8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001aac:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ab4:	f107 0318 	add.w	r3, r7, #24
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f003 fb9d 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8001ac4:	f7ff ff4a 	bl	800195c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <HAL_UART_MspInit+0x1e4>)
 8001aca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ace:	4a24      	ldr	r2, [pc, #144]	; (8001b60 <HAL_UART_MspInit+0x1e4>)
 8001ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001ad8:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <HAL_UART_MspInit+0x1e4>)
 8001ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ade:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8001ae2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001ae6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001af0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001af4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <HAL_UART_MspInit+0x1e4>)
 8001af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001afc:	4a18      	ldr	r2, [pc, #96]	; (8001b60 <HAL_UART_MspInit+0x1e4>)
 8001afe:	f043 0308 	orr.w	r3, r3, #8
 8001b02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <HAL_UART_MspInit+0x1e4>)
 8001b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b0c:	f003 0208 	and.w	r2, r3, #8
 8001b10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001b1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b22:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8001b24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b3e:	2307      	movs	r3, #7
 8001b40:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b44:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4808      	ldr	r0, [pc, #32]	; (8001b6c <HAL_UART_MspInit+0x1f0>)
 8001b4c:	f002 fa0e 	bl	8003f6c <HAL_GPIO_Init>
}
 8001b50:	bf00      	nop
 8001b52:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	44002400 	.word	0x44002400
 8001b60:	44020c00 	.word	0x44020c00
 8001b64:	42020400 	.word	0x42020400
 8001b68:	40004800 	.word	0x40004800
 8001b6c:	42020c00 	.word	0x42020c00

08001b70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08e      	sub	sp, #56	; 0x38
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8001b78:	4b2e      	ldr	r3, [pc, #184]	; (8001c34 <HAL_InitTick+0xc4>)
 8001b7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001b7e:	4a2d      	ldr	r2, [pc, #180]	; (8001c34 <HAL_InitTick+0xc4>)
 8001b80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b84:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001b88:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <HAL_InitTick+0xc4>)
 8001b8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001b8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b96:	f107 0210 	add.w	r2, r7, #16
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f003 faf1 	bl	8005188 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ba6:	f003 fac3 	bl	8005130 <HAL_RCC_GetPCLK2Freq>
 8001baa:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM8 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8001bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	4a21      	ldr	r2, [pc, #132]	; (8001c38 <HAL_InitTick+0xc8>)
 8001bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb6:	09db      	lsrs	r3, r3, #7
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <HAL_InitTick+0xcc>)
 8001bbe:	4a20      	ldr	r2, [pc, #128]	; (8001c40 <HAL_InitTick+0xd0>)
 8001bc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (100000U / 1000U) - 1U;
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_InitTick+0xcc>)
 8001bc4:	2263      	movs	r2, #99	; 0x63
 8001bc6:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8001bc8:	4a1c      	ldr	r2, [pc, #112]	; (8001c3c <HAL_InitTick+0xcc>)
 8001bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bcc:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_InitTick+0xcc>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_InitTick+0xcc>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim8);
 8001bda:	4818      	ldr	r0, [pc, #96]	; (8001c3c <HAL_InitTick+0xcc>)
 8001bdc:	f008 fb5e 	bl	800a29c <HAL_TIM_Base_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8001be6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d118      	bne.n	8001c20 <HAL_InitTick+0xb0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim8);
 8001bee:	4813      	ldr	r0, [pc, #76]	; (8001c3c <HAL_InitTick+0xcc>)
 8001bf0:	f008 fbb6 	bl	800a360 <HAL_TIM_Base_Start_IT>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8001bfa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10e      	bne.n	8001c20 <HAL_InitTick+0xb0>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b0f      	cmp	r3, #15
 8001c06:	d808      	bhi.n	8001c1a <HAL_InitTick+0xaa>
      {
        /* Enable the TIM8 global Interrupt */
        HAL_NVIC_SetPriority(TIM8_UP_IRQn, TickPriority, 0U);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	2042      	movs	r0, #66	; 0x42
 8001c0e:	f000 fc13 	bl	8002438 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c12:	4a0c      	ldr	r2, [pc, #48]	; (8001c44 <HAL_InitTick+0xd4>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e002      	b.n	8001c20 <HAL_InitTick+0xb0>
      }
      else
      {
        status = HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
}

  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001c20:	2042      	movs	r0, #66	; 0x42
 8001c22:	f000 fc23 	bl	800246c <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8001c26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3738      	adds	r7, #56	; 0x38
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	44020c00 	.word	0x44020c00
 8001c38:	0a7c5ac5 	.word	0x0a7c5ac5
 8001c3c:	20005308 	.word	0x20005308
 8001c40:	40013400 	.word	0x40013400
 8001c44:	20000018 	.word	0x20000018

08001c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c4c:	e7fe      	b.n	8001c4c <NMI_Handler+0x4>

08001c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <HardFault_Handler+0x4>

08001c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <MemManage_Handler+0x4>

08001c5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <BusFault_Handler+0x4>

08001c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <UsageFault_Handler+0x4>

08001c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 Update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <TIM8_UP_IRQHandler+0x10>)
 8001c7a:	f008 fc1f 	bl	800a4bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20005308 	.word	0x20005308

08001c88 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <ETH_IRQHandler+0x10>)
 8001c8e:	f000 ffc1 	bl	8002c14 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20005068 	.word	0x20005068

08001c9c <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet Wakeup global interrupt.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <ETH_WKUP_IRQHandler+0x10>)
 8001ca2:	f000 ffb7 	bl	8002c14 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20005068 	.word	0x20005068

08001cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return 1;
 8001cb4:	2301      	movs	r3, #1
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <_kill>:

int _kill(int pid, int sig)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cca:	f01a fe8b 	bl	801c9e4 <__errno>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2216      	movs	r2, #22
 8001cd2:	601a      	str	r2, [r3, #0]
  return -1;
 8001cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_exit>:

void _exit (int status)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ffe7 	bl	8001cc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cf2:	e7fe      	b.n	8001cf2 <_exit+0x12>

08001cf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	e00a      	b.n	8001d1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d06:	f3af 8000 	nop.w
 8001d0a:	4601      	mov	r1, r0
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	60ba      	str	r2, [r7, #8]
 8001d12:	b2ca      	uxtb	r2, r1
 8001d14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	dbf0      	blt.n	8001d06 <_read+0x12>
  }

  return len;
 8001d24:	687b      	ldr	r3, [r7, #4]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d56:	605a      	str	r2, [r3, #4]
  return 0;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <_isatty>:

int _isatty(int file)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da0:	4a14      	ldr	r2, [pc, #80]	; (8001df4 <_sbrk+0x5c>)
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <_sbrk+0x60>)
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dac:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <_sbrk+0x64>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d102      	bne.n	8001dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <_sbrk+0x64>)
 8001db6:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <_sbrk+0x68>)
 8001db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dba:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <_sbrk+0x64>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d207      	bcs.n	8001dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc8:	f01a fe0c 	bl	801c9e4 <__errno>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	220c      	movs	r2, #12
 8001dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd6:	e009      	b.n	8001dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <_sbrk+0x64>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dde:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <_sbrk+0x64>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	4a05      	ldr	r2, [pc, #20]	; (8001dfc <_sbrk+0x64>)
 8001de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dea:	68fb      	ldr	r3, [r7, #12]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	200a0000 	.word	0x200a0000
 8001df8:	00000800 	.word	0x00000800
 8001dfc:	20005354 	.word	0x20005354
 8001e00:	20011658 	.word	0x20011658

08001e04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e0a:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <SystemInit+0xdc>)
 8001e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e10:	4a33      	ldr	r2, [pc, #204]	; (8001ee0 <SystemInit+0xdc>)
 8001e12:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e16:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001e1a:	4b32      	ldr	r3, [pc, #200]	; (8001ee4 <SystemInit+0xe0>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001e20:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <SystemInit+0xe0>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001e26:	4b2f      	ldr	r3, [pc, #188]	; (8001ee4 <SystemInit+0xe0>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001e2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <SystemInit+0xe0>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	492c      	ldr	r1, [pc, #176]	; (8001ee4 <SystemInit+0xe0>)
 8001e32:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <SystemInit+0xe4>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001e38:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <SystemInit+0xe0>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8001e3e:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <SystemInit+0xe0>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001e44:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <SystemInit+0xe0>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001e4a:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <SystemInit+0xe0>)
 8001e4c:	4a27      	ldr	r2, [pc, #156]	; (8001eec <SystemInit+0xe8>)
 8001e4e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001e50:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <SystemInit+0xe0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001e56:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <SystemInit+0xe0>)
 8001e58:	4a24      	ldr	r2, [pc, #144]	; (8001eec <SystemInit+0xe8>)
 8001e5a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <SystemInit+0xe0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001e62:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <SystemInit+0xe0>)
 8001e64:	4a21      	ldr	r2, [pc, #132]	; (8001eec <SystemInit+0xe8>)
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001e68:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <SystemInit+0xe0>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <SystemInit+0xe0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <SystemInit+0xe0>)
 8001e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <SystemInit+0xe0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <SystemInit+0xdc>)
 8001e82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e86:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <SystemInit+0xec>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001e90:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8001e98:	d003      	beq.n	8001ea2 <SystemInit+0x9e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001ea0:	d117      	bne.n	8001ed2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <SystemInit+0xec>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d005      	beq.n	8001eba <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <SystemInit+0xec>)
 8001eb0:	4a10      	ldr	r2, [pc, #64]	; (8001ef4 <SystemInit+0xf0>)
 8001eb2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <SystemInit+0xec>)
 8001eb6:	4a10      	ldr	r2, [pc, #64]	; (8001ef8 <SystemInit+0xf4>)
 8001eb8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <SystemInit+0xec>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	4a0c      	ldr	r2, [pc, #48]	; (8001ef0 <SystemInit+0xec>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <SystemInit+0xec>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <SystemInit+0xec>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	61d3      	str	r3, [r2, #28]
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00
 8001ee4:	44020c00 	.word	0x44020c00
 8001ee8:	eae2eae3 	.word	0xeae2eae3
 8001eec:	01010280 	.word	0x01010280
 8001ef0:	40022000 	.word	0x40022000
 8001ef4:	08192a3b 	.word	0x08192a3b
 8001ef8:	4c5d6e7f 	.word	0x4c5d6e7f

08001efc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001efc:	480d      	ldr	r0, [pc, #52]	; (8001f34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001efe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f00:	f7ff ff80 	bl	8001e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f04:	480c      	ldr	r0, [pc, #48]	; (8001f38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f06:	490d      	ldr	r1, [pc, #52]	; (8001f3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f08:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <LoopForever+0xe>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f0c:	e002      	b.n	8001f14 <LoopCopyDataInit>

08001f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f12:	3304      	adds	r3, #4

08001f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f18:	d3f9      	bcc.n	8001f0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f1c:	4c0a      	ldr	r4, [pc, #40]	; (8001f48 <LoopForever+0x16>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f20:	e001      	b.n	8001f26 <LoopFillZerobss>

08001f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f24:	3204      	adds	r2, #4

08001f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f28:	d3fb      	bcc.n	8001f22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f2a:	f01a fd61 	bl	801c9f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f2e:	f7ff face 	bl	80014ce <main>

08001f32 <LoopForever>:

LoopForever:
    b LoopForever
 8001f32:	e7fe      	b.n	8001f32 <LoopForever>
  ldr   r0, =_estack
 8001f34:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f3c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001f40:	08020f14 	.word	0x08020f14
  ldr r2, =_sbss
 8001f44:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001f48:	20011654 	.word	0x20011654

08001f4c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f4c:	e7fe      	b.n	8001f4c <ADC1_IRQHandler>

08001f4e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <LAN8742_RegisterBusIO+0x28>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <LAN8742_RegisterBusIO+0x28>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <LAN8742_RegisterBusIO+0x28>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	e014      	b.n	8001fa6 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b086      	sub	sp, #24
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d17c      	bne.n	80020cc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	e01c      	b.n	8002026 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	f107 0208 	add.w	r2, r7, #8
 8001ff4:	2112      	movs	r1, #18
 8001ff6:	6978      	ldr	r0, [r7, #20]
 8001ff8:	4798      	blx	r3
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	da03      	bge.n	8002008 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002000:	f06f 0304 	mvn.w	r3, #4
 8002004:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8002006:	e00b      	b.n	8002020 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f003 031f 	and.w	r3, r3, #31
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	429a      	cmp	r2, r3
 8002012:	d105      	bne.n	8002020 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
         break;
 800201e:	e005      	b.n	800202c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	3301      	adds	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b1f      	cmp	r3, #31
 800202a:	d9df      	bls.n	8001fec <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b1f      	cmp	r3, #31
 8002032:	d902      	bls.n	800203a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002034:	f06f 0302 	mvn.w	r3, #2
 8002038:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d145      	bne.n	80020cc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6810      	ldr	r0, [r2, #0]
 8002048:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800204c:	2100      	movs	r1, #0
 800204e:	4798      	blx	r3
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	db37      	blt.n	80020c6 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6810      	ldr	r0, [r2, #0]
 800205e:	f107 0208 	add.w	r2, r7, #8
 8002062:	2100      	movs	r1, #0
 8002064:	4798      	blx	r3
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	db28      	blt.n	80020be <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4798      	blx	r3
 8002072:	4603      	mov	r3, r0
 8002074:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002076:	e01c      	b.n	80020b2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	4798      	blx	r3
 800207e:	4603      	mov	r3, r0
 8002080:	461a      	mov	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800208a:	d80e      	bhi.n	80020aa <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6810      	ldr	r0, [r2, #0]
 8002094:	f107 0208 	add.w	r2, r7, #8
 8002098:	2100      	movs	r1, #0
 800209a:	4798      	blx	r3
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	da07      	bge.n	80020b2 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 80020a2:	f06f 0304 	mvn.w	r3, #4
 80020a6:	613b      	str	r3, [r7, #16]
                 break;
 80020a8:	e010      	b.n	80020cc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80020aa:	f06f 0301 	mvn.w	r3, #1
 80020ae:	613b      	str	r3, [r7, #16]
               break;
 80020b0:	e00c      	b.n	80020cc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1dd      	bne.n	8002078 <LAN8742_Init+0xc6>
 80020bc:	e006      	b.n	80020cc <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80020be:	f06f 0304 	mvn.w	r3, #4
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	e002      	b.n	80020cc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80020c6:	f06f 0303 	mvn.w	r3, #3
 80020ca:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d112      	bne.n	80020f8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	4798      	blx	r3
 80020d8:	4603      	mov	r3, r0
 80020da:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80020dc:	bf00      	nop
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	4798      	blx	r3
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80020f0:	d9f5      	bls.n	80020de <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	605a      	str	r2, [r3, #4]
   }

   return status;
 80020f8:	693b      	ldr	r3, [r7, #16]
 }
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6810      	ldr	r0, [r2, #0]
 8002116:	f107 020c 	add.w	r2, r7, #12
 800211a:	2101      	movs	r1, #1
 800211c:	4798      	blx	r3
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	da02      	bge.n	800212a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002124:	f06f 0304 	mvn.w	r3, #4
 8002128:	e06e      	b.n	8002208 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6810      	ldr	r0, [r2, #0]
 8002132:	f107 020c 	add.w	r2, r7, #12
 8002136:	2101      	movs	r1, #1
 8002138:	4798      	blx	r3
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	da02      	bge.n	8002146 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002140:	f06f 0304 	mvn.w	r3, #4
 8002144:	e060      	b.n	8002208 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8002150:	2301      	movs	r3, #1
 8002152:	e059      	b.n	8002208 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6810      	ldr	r0, [r2, #0]
 800215c:	f107 020c 	add.w	r2, r7, #12
 8002160:	2100      	movs	r1, #0
 8002162:	4798      	blx	r3
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	da02      	bge.n	8002170 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800216a:	f06f 0304 	mvn.w	r3, #4
 800216e:	e04b      	b.n	8002208 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d11b      	bne.n	80021b2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d006      	beq.n	8002192 <LAN8742_GetLinkState+0x90>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800218e:	2302      	movs	r3, #2
 8002190:	e03a      	b.n	8002208 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800219c:	2303      	movs	r3, #3
 800219e:	e033      	b.n	8002208 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80021aa:	2304      	movs	r3, #4
 80021ac:	e02c      	b.n	8002208 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80021ae:	2305      	movs	r3, #5
 80021b0:	e02a      	b.n	8002208 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6810      	ldr	r0, [r2, #0]
 80021ba:	f107 020c 	add.w	r2, r7, #12
 80021be:	211f      	movs	r1, #31
 80021c0:	4798      	blx	r3
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	da02      	bge.n	80021ce <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80021c8:	f06f 0304 	mvn.w	r3, #4
 80021cc:	e01c      	b.n	8002208 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80021d8:	2306      	movs	r3, #6
 80021da:	e015      	b.n	8002208 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 031c 	and.w	r3, r3, #28
 80021e2:	2b18      	cmp	r3, #24
 80021e4:	d101      	bne.n	80021ea <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80021e6:	2302      	movs	r3, #2
 80021e8:	e00e      	b.n	8002208 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f003 031c 	and.w	r3, r3, #28
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d101      	bne.n	80021f8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e007      	b.n	8002208 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 031c 	and.w	r3, r3, #28
 80021fe:	2b14      	cmp	r3, #20
 8002200:	d101      	bne.n	8002206 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002202:	2304      	movs	r3, #4
 8002204:	e000      	b.n	8002208 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002206:	2305      	movs	r3, #5
    }
  }
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002214:	2003      	movs	r0, #3
 8002216:	f000 f904 	bl	8002422 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800221a:	f002 fe2b 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 800221e:	4602      	mov	r2, r0
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_Init+0x40>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	490a      	ldr	r1, [pc, #40]	; (8002254 <HAL_Init+0x44>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
 8002230:	4a09      	ldr	r2, [pc, #36]	; (8002258 <HAL_Init+0x48>)
 8002232:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002234:	200f      	movs	r0, #15
 8002236:	f7ff fc9b 	bl	8001b70 <HAL_InitTick>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e002      	b.n	800224a <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002244:	f7ff fb8f 	bl	8001966 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	44020c00 	.word	0x44020c00
 8002254:	08020cc0 	.word	0x08020cc0
 8002258:	20000014 	.word	0x20000014

0800225c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_IncTick+0x20>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_IncTick+0x24>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4413      	add	r3, r2
 800226c:	4a04      	ldr	r2, [pc, #16]	; (8002280 <HAL_IncTick+0x24>)
 800226e:	6013      	str	r3, [r2, #0]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	2000001c 	.word	0x2000001c
 8002280:	20005358 	.word	0x20005358

08002284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return uwTick;
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_GetTick+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20005358 	.word	0x20005358

0800229c <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 80022a4:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <HAL_SBS_ETHInterfaceSelect+0x28>)
 80022a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80022aa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80022ae:	4905      	ldr	r1, [pc, #20]	; (80022c4 <HAL_SBS_ETHInterfaceSelect+0x28>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	44000400 	.word	0x44000400

080022c8 <__NVIC_SetPriorityGrouping>:
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e4:	4013      	ands	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fa:	4a04      	ldr	r2, [pc, #16]	; (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	60d3      	str	r3, [r2, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <__NVIC_GetPriorityGrouping>:
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <__NVIC_GetPriorityGrouping+0x18>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	f003 0307 	and.w	r3, r3, #7
}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_EnableIRQ>:
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800233a:	2b00      	cmp	r3, #0
 800233c:	db0b      	blt.n	8002356 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	4907      	ldr	r1, [pc, #28]	; (8002364 <__NVIC_EnableIRQ+0x38>)
 8002346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	2001      	movs	r0, #1
 800234e:	fa00 f202 	lsl.w	r2, r0, r2
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000e100 	.word	0xe000e100

08002368 <__NVIC_SetPriority>:
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	6039      	str	r1, [r7, #0]
 8002372:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002374:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002378:	2b00      	cmp	r3, #0
 800237a:	db0a      	blt.n	8002392 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	b2da      	uxtb	r2, r3
 8002380:	490c      	ldr	r1, [pc, #48]	; (80023b4 <__NVIC_SetPriority+0x4c>)
 8002382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002386:	0112      	lsls	r2, r2, #4
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	440b      	add	r3, r1
 800238c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002390:	e00a      	b.n	80023a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4908      	ldr	r1, [pc, #32]	; (80023b8 <__NVIC_SetPriority+0x50>)
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	3b04      	subs	r3, #4
 80023a0:	0112      	lsls	r2, r2, #4
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	440b      	add	r3, r1
 80023a6:	761a      	strb	r2, [r3, #24]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000e100 	.word	0xe000e100
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <NVIC_EncodePriority>:
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f1c3 0307 	rsb	r3, r3, #7
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	bf28      	it	cs
 80023da:	2304      	movcs	r3, #4
 80023dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3304      	adds	r3, #4
 80023e2:	2b06      	cmp	r3, #6
 80023e4:	d902      	bls.n	80023ec <NVIC_EncodePriority+0x30>
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3b03      	subs	r3, #3
 80023ea:	e000      	b.n	80023ee <NVIC_EncodePriority+0x32>
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	f04f 32ff 	mov.w	r2, #4294967295
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43da      	mvns	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	401a      	ands	r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002404:	f04f 31ff 	mov.w	r1, #4294967295
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	43d9      	mvns	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	4313      	orrs	r3, r2
}
 8002416:	4618      	mov	r0, r3
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ff4c 	bl	80022c8 <__NVIC_SetPriorityGrouping>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002446:	f7ff ff63 	bl	8002310 <__NVIC_GetPriorityGrouping>
 800244a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	6978      	ldr	r0, [r7, #20]
 8002452:	f7ff ffb3 	bl	80023bc <NVIC_EncodePriority>
 8002456:	4602      	mov	r2, r0
 8002458:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ff82 	bl	8002368 <__NVIC_SetPriority>
}
 8002464:	bf00      	nop
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff ff56 	bl	800232c <__NVIC_EnableIRQ>
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e0d2      	b.n	8002640 <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d106      	bne.n	80024b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2223      	movs	r2, #35	; 0x23
 80024a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7fe fc3d 	bl	8000d2c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 80024b2:	4b65      	ldr	r3, [pc, #404]	; (8002648 <HAL_ETH_Init+0x1c0>)
 80024b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80024b8:	4a63      	ldr	r2, [pc, #396]	; (8002648 <HAL_ETH_Init+0x1c0>)
 80024ba:	f043 0302 	orr.w	r3, r3, #2
 80024be:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80024c2:	4b61      	ldr	r3, [pc, #388]	; (8002648 <HAL_ETH_Init+0x1c0>)
 80024c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	7a1b      	ldrb	r3, [r3, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d103      	bne.n	80024e0 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 80024d8:	2000      	movs	r0, #0
 80024da:	f7ff fedf 	bl	800229c <HAL_SBS_ETHInterfaceSelect>
 80024de:	e003      	b.n	80024e8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 80024e0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80024e4:	f7ff feda 	bl	800229c <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 80024e8:	4b58      	ldr	r3, [pc, #352]	; (800264c <HAL_ETH_Init+0x1c4>)
 80024ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002504:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002506:	f7ff febd 	bl	8002284 <HAL_GetTick>
 800250a:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800250c:	e011      	b.n	8002532 <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800250e:	f7ff feb9 	bl	8002284 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800251c:	d909      	bls.n	8002532 <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2204      	movs	r2, #4
 8002522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	22e0      	movs	r2, #224	; 0xe0
 800252a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e086      	b.n	8002640 <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1e4      	bne.n	800250e <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 ff29 	bl	800339c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800254a:	f002 fdbf 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 800254e:	4603      	mov	r3, r0
 8002550:	4a3f      	ldr	r2, [pc, #252]	; (8002650 <HAL_ETH_Init+0x1c8>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	0c9a      	lsrs	r2, r3, #18
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3a01      	subs	r2, #1
 800255e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f001 f932 	bl	80037cc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002570:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002574:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002580:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002584:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d009      	beq.n	80025a8 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	22e0      	movs	r2, #224	; 0xe0
 80025a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e04b      	b.n	8002640 <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025b4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80025b8:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6952      	ldr	r2, [r2, #20]
 80025c0:	0051      	lsls	r1, r2, #1
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	430b      	orrs	r3, r1
 80025c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025cc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f001 f998 	bl	8003906 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f001 f9de 	bl	8003998 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	3305      	adds	r3, #5
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	021a      	lsls	r2, r3, #8
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	3304      	adds	r3, #4
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	4619      	mov	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	3303      	adds	r3, #3
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	061a      	lsls	r2, r3, #24
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	3302      	adds	r3, #2
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	041b      	lsls	r3, r3, #16
 800260e:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	3301      	adds	r3, #1
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800261a:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002628:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800262a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2210      	movs	r2, #16
 800263a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	44020c00 	.word	0x44020c00
 800264c:	44000400 	.word	0x44000400
 8002650:	431bde83 	.word	0x431bde83

08002654 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002662:	2b10      	cmp	r3, #16
 8002664:	d17c      	bne.n	8002760 <HAL_ETH_Start_IT+0x10c>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2223      	movs	r2, #35	; 0x23
 800266a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b3a      	ldr	r3, [pc, #232]	; (800276c <HAL_ETH_Start_IT+0x118>)
 8002682:	430b      	orrs	r3, r1
 8002684:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	f043 6342 	orr.w	r3, r3, #203423744	; 0xc200000
 8002698:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800269c:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2204      	movs	r2, #4
 80026a4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f9eb 	bl	8002a82 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0202 	orr.w	r2, r2, #2
 80026ba:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0201 	orr.w	r2, r2, #1
 80026dc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026f8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002704:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002714:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002720:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800272c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002730:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800273c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	f443 4350 	orr.w	r3, r3, #53248	; 0xd000
 8002748:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 800274c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002750:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2223      	movs	r2, #35	; 0x23
 8002758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	e000      	b.n	8002762 <HAL_ETH_Start_IT+0x10e>
  }
  else
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
  }
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	0c020060 	.word	0x0c020060

08002770 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800277e:	2b23      	cmp	r3, #35	; 0x23
 8002780:	d167      	bne.n	8002852 <HAL_ETH_Stop_IT+0xe2>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2223      	movs	r2, #35	; 0x23
 8002786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002792:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 800279e:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 80027a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027a6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	f023 0301 	bic.w	r3, r3, #1
 80027be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027c2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	f023 0301 	bic.w	r3, r3, #1
 80027da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027de:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0202 	bic.w	r2, r2, #2
 8002814:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	e00e      	b.n	800283a <HAL_ETH_Stop_IT+0xca>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	3212      	adds	r2, #18
 8002822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002826:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3301      	adds	r3, #1
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2b03      	cmp	r3, #3
 800283e:	d9ed      	bls.n	800281c <HAL_ETH_Stop_IT+0xac>
    }

    heth->RxDescList.ItMode = 0U;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2210      	movs	r2, #16
 800284a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	e000      	b.n	8002854 <HAL_ETH_Stop_IT+0xe4>
  }
  else
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
  }
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d109      	bne.n	8002884 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	f043 0201 	orr.w	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e03a      	b.n	80028fa <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800288a:	2b23      	cmp	r3, #35	; 0x23
 800288c:	d134      	bne.n	80028f8 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002896:	2201      	movs	r2, #1
 8002898:	6839      	ldr	r1, [r7, #0]
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f001 f8d9 	bl	8003a52 <ETH_Prepare_Tx_Descriptors>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ac:	f043 0202 	orr.w	r2, r3, #2
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e01f      	b.n	80028fa <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80028ba:	f3bf 8f4f 	dsb	sy
}
 80028be:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	629a      	str	r2, [r3, #40]	; 0x28
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d904      	bls.n	80028dc <HAL_ETH_Transmit_IT+0x7c>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	1f1a      	subs	r2, r3, #4
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3106      	adds	r1, #6
 80028e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80028ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028f0:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	e000      	b.n	80028fa <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
  }
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b088      	sub	sp, #32
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002920:	f043 0201 	orr.w	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e0a5      	b.n	8002a7a <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002934:	2b23      	cmp	r3, #35	; 0x23
 8002936:	d001      	beq.n	800293c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e09e      	b.n	8002a7a <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002940:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69fa      	ldr	r2, [r7, #28]
 8002946:	3212      	adds	r2, #18
 8002948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800294c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002952:	f1c3 0304 	rsb	r3, r3, #4
 8002956:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002958:	e067      	b.n	8002a2a <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d103      	bne.n	800298a <HAL_ETH_ReadData+0x88>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002986:	2b00      	cmp	r3, #0
 8002988:	d03d      	beq.n	8002a06 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00d      	beq.n	80029d0 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80029e0:	461a      	mov	r2, r3
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f7fe fb8b 	bl	8001100 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	441a      	add	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	61fb      	str	r3, [r7, #28]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d902      	bls.n	8002a18 <HAL_ETH_ReadData+0x116>
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3b04      	subs	r3, #4
 8002a16:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	3212      	adds	r2, #18
 8002a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a22:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	3301      	adds	r3, #1
 8002a28:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	db06      	blt.n	8002a40 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d202      	bcs.n	8002a40 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d08c      	beq.n	800295a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	441a      	add	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f814 	bl	8002a82 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d108      	bne.n	8002a78 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	e000      	b.n	8002a7a <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3720      	adds	r7, #32
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b088      	sub	sp, #32
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a96:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	3212      	adds	r2, #18
 8002a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa2:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aa8:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002aaa:	e03b      	b.n	8002b24 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d112      	bne.n	8002ada <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002ab4:	f107 030c 	add.w	r3, r7, #12
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe faf1 	bl	80010a0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d102      	bne.n	8002aca <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	74fb      	strb	r3, [r7, #19]
 8002ac8:	e007      	b.n	8002ada <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	461a      	mov	r2, r3
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8002ada:	7cfb      	ldrb	r3, [r7, #19]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d021      	beq.n	8002b24 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002ae0:	f3bf 8f5f 	dmb	sy
}
 8002ae4:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d004      	beq.n	8002af8 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	e003      	b.n	8002b00 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8002afe:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	3301      	adds	r3, #1
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d902      	bls.n	8002b12 <ETH_UpdateDescriptor+0x90>
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	3b04      	subs	r3, #4
 8002b10:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	3212      	adds	r2, #18
 8002b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b1c:	617b      	str	r3, [r7, #20]
      desccount--;
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	3b01      	subs	r3, #1
 8002b22:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <ETH_UpdateDescriptor+0xae>
 8002b2a:	7cfb      	ldrb	r3, [r7, #19]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1bd      	bne.n	8002aac <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d00d      	beq.n	8002b56 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0U);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b42:	461a      	mov	r2, r3
 8002b44:	2300      	movs	r3, #0
 8002b46:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002b56:	bf00      	nop
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b086      	sub	sp, #24
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3318      	adds	r3, #24
 8002b6a:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002b7c:	e03f      	b.n	8002bfe <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	3b01      	subs	r3, #1
 8002b86:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d106      	bne.n	8002ba6 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002ba6:	7bbb      	ldrb	r3, [r7, #14]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d028      	beq.n	8002bfe <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68d9      	ldr	r1, [r3, #12]
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	db1b      	blt.n	8002bfa <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe fad6 	bl	8001180 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	2200      	movs	r2, #0
 8002be0:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	3301      	adds	r3, #1
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bf8:	e001      	b.n	8002bfe <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <HAL_ETH_ReleaseTxPacket+0xac>
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1b9      	bne.n	8002b7e <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;

  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c24:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2c:	2b40      	cmp	r3, #64	; 0x40
 8002c2e:	d115      	bne.n	8002c5c <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c38:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c40:	2b40      	cmp	r3, #64	; 0x40
 8002c42:	d10b      	bne.n	8002c5c <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f248 0340 	movw	r3, #32832	; 0x8040
 8002c52:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fd fdca 	bl	80007f0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c64:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d115      	bne.n	8002c9c <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c78:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d10b      	bne.n	8002c9c <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f248 0301 	movw	r3, #32769	; 0x8001
 8002c92:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fd fdba 	bl	8000810 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ca4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cb0:	d153      	bne.n	8002d5a <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cba:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cc6:	d148      	bne.n	8002d5a <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	f043 0208 	orr.w	r2, r3, #8
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ce0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cec:	d11e      	bne.n	8002d2c <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cf6:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8002cfa:	f241 1302 	movw	r3, #4354	; 0x1102
 8002cfe:	4013      	ands	r3, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d0e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d1e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	22e0      	movs	r2, #224	; 0xe0
 8002d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002d2a:	e013      	b.n	8002d54 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d34:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002d38:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8002d50:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7fd fd6b 	bl	8000830 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d62:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d104      	bne.n	8002d78 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d019      	beq.n	8002dac <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	f043 0210 	orr.w	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	22e0      	movs	r2, #224	; 0xe0
 8002d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fd fd46 	bl	8000830 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b10      	cmp	r3, #16
 8002dba:	d10f      	bne.n	8002ddc <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002dc4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f830 	bl	8002e34 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b20      	cmp	r3, #32
 8002dea:	d10f      	bne.n	8002e0c <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002df4:	f003 020f 	and.w	r2, r3, #15
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f822 	bl	8002e48 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002e0c:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <HAL_ETH_IRQHandler+0x21c>)
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d006      	beq.n	8002e26 <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_ETH_IRQHandler+0x21c>)
 8002e1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e1e:	62da      	str	r2, [r3, #44]	; 0x2c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f81b 	bl	8002e5c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	44022000 	.word	0x44022000

08002e34 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e03e      	b.n	8002f10 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e9a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	055b      	lsls	r3, r3, #21
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	041b      	lsls	r3, r3, #16
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f043 030c 	orr.w	r3, r3, #12
 8002ebe:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002ed2:	f7ff f9d7 	bl	8002284 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002ed8:	e009      	b.n	8002eee <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002eda:	f7ff f9d3 	bl	8002284 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ee8:	d901      	bls.n	8002eee <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e010      	b.n	8002f10 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1ed      	bne.n	8002eda <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	461a      	mov	r2, r3
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e03c      	b.n	8002fb4 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f42:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	055b      	lsls	r3, r3, #21
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	041b      	lsls	r3, r3, #16
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f023 030c 	bic.w	r3, r3, #12
 8002f66:	f043 0304 	orr.w	r3, r3, #4
 8002f6a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <HAL_ETH_WritePHYRegister+0xa4>)
 8002f7a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002f7e:	4a0f      	ldr	r2, [pc, #60]	; (8002fbc <HAL_ETH_WritePHYRegister+0xa4>)
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002f86:	f7ff f97d 	bl	8002284 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002f8c:	e009      	b.n	8002fa2 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002f8e:	f7ff f979 	bl	8002284 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f9c:	d901      	bls.n	8002fa2 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e008      	b.n	8002fb4 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1ed      	bne.n	8002f8e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40028000 	.word	0x40028000

08002fc0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e1c3      	b.n	800335c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 020c 	and.w	r2, r3, #12
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf14      	ite	ne
 8002ff0:	2301      	movne	r3, #1
 8002ff2:	2300      	moveq	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	bf0c      	ite	eq
 800301a:	2301      	moveq	r3, #1
 800301c:	2300      	movne	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8003032:	2b00      	cmp	r3, #0
 8003034:	bf14      	ite	ne
 8003036:	2301      	movne	r3, #1
 8003038:	2300      	moveq	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304c:	2b00      	cmp	r3, #0
 800304e:	bf0c      	ite	eq
 8003050:	2301      	moveq	r3, #1
 8003052:	2300      	movne	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8003062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003066:	2b00      	cmp	r3, #0
 8003068:	bf14      	ite	ne
 800306a:	2301      	movne	r3, #1
 800306c:	2300      	moveq	r3, #0
 800306e:	b2db      	uxtb	r3, r3
 8003070:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf14      	ite	ne
 8003084:	2301      	movne	r3, #1
 8003086:	2300      	moveq	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	bf14      	ite	ne
 80030ba:	2301      	movne	r3, #1
 80030bc:	2300      	moveq	r3, #0
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	461a      	mov	r2, r3
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	bf0c      	ite	eq
 80030ee:	2301      	moveq	r3, #1
 80030f0:	2300      	movne	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	461a      	mov	r2, r3
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	461a      	mov	r2, r3
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800311e:	2b00      	cmp	r3, #0
 8003120:	bf14      	ite	ne
 8003122:	2301      	movne	r3, #1
 8003124:	2300      	moveq	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	461a      	mov	r2, r3
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf14      	ite	ne
 800313c:	2301      	movne	r3, #1
 800313e:	2300      	moveq	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	461a      	mov	r2, r3
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800314e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003152:	2b00      	cmp	r3, #0
 8003154:	bf14      	ite	ne
 8003156:	2301      	movne	r3, #1
 8003158:	2300      	moveq	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	bf14      	ite	ne
 800317e:	2301      	movne	r3, #1
 8003180:	2300      	moveq	r3, #0
 8003182:	b2db      	uxtb	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf0c      	ite	eq
 80031b4:	2301      	moveq	r3, #1
 80031b6:	2300      	movne	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf14      	ite	ne
 80031d0:	2301      	movne	r3, #1
 80031d2:	2300      	moveq	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80031e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf14      	ite	ne
 80031ec:	2301      	movne	r3, #1
 80031ee:	2300      	moveq	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8003204:	2b00      	cmp	r3, #0
 8003206:	bf14      	ite	ne
 8003208:	2301      	movne	r3, #1
 800320a:	2300      	moveq	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	0e5b      	lsrs	r3, r3, #25
 800321e:	f003 021f 	and.w	r2, r3, #31
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	63da      	str	r2, [r3, #60]	; 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 020f 	and.w	r2, r3, #15
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf14      	ite	ne
 800325e:	2301      	movne	r3, #1
 8003260:	2300      	moveq	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003276:	2b00      	cmp	r3, #0
 8003278:	bf0c      	ite	eq
 800327a:	2301      	moveq	r3, #1
 800327c:	2300      	movne	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	0c1b      	lsrs	r3, r3, #16
 800329e:	b29a      	uxth	r2, r3
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf14      	ite	ne
 80032b4:	2301      	movne	r3, #1
 80032b6:	2300      	moveq	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	461a      	mov	r2, r3
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ca:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	bf14      	ite	ne
 80032d2:	2301      	movne	r3, #1
 80032d4:	2300      	moveq	r3, #0
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80032e8:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80032f8:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf14      	ite	ne
 8003310:	2301      	movne	r3, #1
 8003312:	2300      	moveq	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b00      	cmp	r3, #0
 800332c:	bf14      	ite	ne
 800332e:	2301      	movne	r3, #1
 8003330:	2300      	moveq	r3, #0
 8003332:	b2db      	uxtb	r3, r3
 8003334:	461a      	mov	r2, r3
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003348:	2b00      	cmp	r3, #0
 800334a:	bf0c      	ite	eq
 800334c:	2301      	moveq	r3, #1
 800334e:	2300      	movne	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e00b      	b.n	8003394 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003382:	2b10      	cmp	r3, #16
 8003384:	d105      	bne.n	8003392 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003386:	6839      	ldr	r1, [r7, #0]
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f87d 	bl	8003488 <ETH_SetMACConfig>

    return HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	e000      	b.n	8003394 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
  }
}
 8003394:	4618      	mov	r0, r3
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80033b6:	f001 fe89 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 80033ba:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4a25      	ldr	r2, [pc, #148]	; (8003454 <HAL_ETH_SetMDIOClockRange+0xb8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d908      	bls.n	80033d6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4a24      	ldr	r2, [pc, #144]	; (8003458 <HAL_ETH_SetMDIOClockRange+0xbc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d804      	bhi.n	80033d6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	e034      	b.n	8003440 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4a1f      	ldr	r2, [pc, #124]	; (8003458 <HAL_ETH_SetMDIOClockRange+0xbc>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d908      	bls.n	80033f0 <HAL_ETH_SetMDIOClockRange+0x54>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	4a1e      	ldr	r2, [pc, #120]	; (800345c <HAL_ETH_SetMDIOClockRange+0xc0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d204      	bcs.n	80033f0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	e027      	b.n	8003440 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4a1a      	ldr	r2, [pc, #104]	; (800345c <HAL_ETH_SetMDIOClockRange+0xc0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d303      	bcc.n	8003400 <HAL_ETH_SetMDIOClockRange+0x64>
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	4a19      	ldr	r2, [pc, #100]	; (8003460 <HAL_ETH_SetMDIOClockRange+0xc4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d91e      	bls.n	800343e <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4a17      	ldr	r2, [pc, #92]	; (8003460 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d908      	bls.n	800341a <HAL_ETH_SetMDIOClockRange+0x7e>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4a16      	ldr	r2, [pc, #88]	; (8003464 <HAL_ETH_SetMDIOClockRange+0xc8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d804      	bhi.n	800341a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e012      	b.n	8003440 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4a11      	ldr	r2, [pc, #68]	; (8003464 <HAL_ETH_SetMDIOClockRange+0xc8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d908      	bls.n	8003434 <HAL_ETH_SetMDIOClockRange+0x98>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	4a10      	ldr	r2, [pc, #64]	; (8003468 <HAL_ETH_SetMDIOClockRange+0xcc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d804      	bhi.n	8003434 <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	e005      	b.n	8003440 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	e000      	b.n	8003440 <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800343e:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800344a:	bf00      	nop
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	01312cff 	.word	0x01312cff
 8003458:	02160ebf 	.word	0x02160ebf
 800345c:	03938700 	.word	0x03938700
 8003460:	05f5e0ff 	.word	0x05f5e0ff
 8003464:	08f0d17f 	.word	0x08f0d17f
 8003468:	0ee6b280 	.word	0x0ee6b280

0800346c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800349a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	791b      	ldrb	r3, [r3, #4]
 80034a0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80034a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	7b1b      	ldrb	r3, [r3, #12]
 80034a8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80034aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	7b5b      	ldrb	r3, [r3, #13]
 80034b0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80034b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	7b9b      	ldrb	r3, [r3, #14]
 80034b8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80034ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	7bdb      	ldrb	r3, [r3, #15]
 80034c0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80034c2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	7c12      	ldrb	r2, [r2, #16]
 80034c8:	2a00      	cmp	r2, #0
 80034ca:	d102      	bne.n	80034d2 <ETH_SetMACConfig+0x4a>
 80034cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80034d0:	e000      	b.n	80034d4 <ETH_SetMACConfig+0x4c>
 80034d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80034d4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	7c52      	ldrb	r2, [r2, #17]
 80034da:	2a00      	cmp	r2, #0
 80034dc:	d102      	bne.n	80034e4 <ETH_SetMACConfig+0x5c>
 80034de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034e2:	e000      	b.n	80034e6 <ETH_SetMACConfig+0x5e>
 80034e4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80034e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	7c9b      	ldrb	r3, [r3, #18]
 80034ec:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80034ee:	431a      	orrs	r2, r3
               macconf->Speed |
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80034f4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80034fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	7f1b      	ldrb	r3, [r3, #28]
 8003500:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003502:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	7f5b      	ldrb	r3, [r3, #29]
 8003508:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800350a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	7f92      	ldrb	r2, [r2, #30]
 8003510:	2a00      	cmp	r2, #0
 8003512:	d102      	bne.n	800351a <ETH_SetMACConfig+0x92>
 8003514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003518:	e000      	b.n	800351c <ETH_SetMACConfig+0x94>
 800351a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800351c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	7fdb      	ldrb	r3, [r3, #31]
 8003522:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003524:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	f892 2020 	ldrb.w	r2, [r2, #32]
 800352c:	2a00      	cmp	r2, #0
 800352e:	d102      	bne.n	8003536 <ETH_SetMACConfig+0xae>
 8003530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003534:	e000      	b.n	8003538 <ETH_SetMACConfig+0xb0>
 8003536:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003538:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800353e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003546:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003548:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	4b57      	ldr	r3, [pc, #348]	; (80036b8 <ETH_SetMACConfig+0x230>)
 800355a:	4013      	ands	r3, r2
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	68f9      	ldr	r1, [r7, #12]
 8003562:	430b      	orrs	r3, r1
 8003564:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003572:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003574:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800357c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800357e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003586:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003588:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003590:	2a00      	cmp	r2, #0
 8003592:	d102      	bne.n	800359a <ETH_SetMACConfig+0x112>
 8003594:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003598:	e000      	b.n	800359c <ETH_SetMACConfig+0x114>
 800359a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800359c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	4b43      	ldr	r3, [pc, #268]	; (80036bc <ETH_SetMACConfig+0x234>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	68f9      	ldr	r1, [r7, #12]
 80035b6:	430b      	orrs	r3, r1
 80035b8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035c0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 80035d4:	f023 0301 	bic.w	r3, r3, #1
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	68f9      	ldr	r1, [r7, #12]
 80035de:	430b      	orrs	r3, r1
 80035e0:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80035e8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80035ee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80035f6:	2a00      	cmp	r2, #0
 80035f8:	d101      	bne.n	80035fe <ETH_SetMACConfig+0x176>
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	e000      	b.n	8003600 <ETH_SetMACConfig+0x178>
 80035fe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003600:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003606:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003612:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003616:	4013      	ands	r3, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	68f9      	ldr	r1, [r7, #12]
 800361e:	430b      	orrs	r3, r1
 8003620:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003628:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003630:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363e:	f023 0103 	bic.w	r1, r3, #3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	430a      	orrs	r2, r1
 800364a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003656:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003672:	2a00      	cmp	r2, #0
 8003674:	d101      	bne.n	800367a <ETH_SetMACConfig+0x1f2>
 8003676:	2240      	movs	r2, #64	; 0x40
 8003678:	e000      	b.n	800367c <ETH_SetMACConfig+0x1f4>
 800367a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800367c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003684:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003686:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800368e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003690:	4313      	orrs	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800369c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	00048083 	.word	0x00048083
 80036bc:	c0f88000 	.word	0xc0f88000

080036c0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80036d8:	f023 0302 	bic.w	r3, r3, #2
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	6811      	ldr	r1, [r2, #0]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	430b      	orrs	r3, r1
 80036e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036ea:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	791b      	ldrb	r3, [r3, #4]
 80036f0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80036f6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	7b1b      	ldrb	r3, [r3, #12]
 80036fc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	68f9      	ldr	r1, [r7, #12]
 800371a:	430b      	orrs	r3, r1
 800371c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003720:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	7b5b      	ldrb	r3, [r3, #13]
 8003726:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003738:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800373c:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <ETH_SetDMAConfig+0x104>)
 800373e:	4013      	ands	r3, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	68f9      	ldr	r1, [r7, #12]
 8003746:	430b      	orrs	r3, r1
 8003748:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800374c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	7d1b      	ldrb	r3, [r3, #20]
 8003758:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800375a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	7f5b      	ldrb	r3, [r3, #29]
 8003760:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800376e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <ETH_SetDMAConfig+0x108>)
 8003774:	4013      	ands	r3, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6812      	ldr	r2, [r2, #0]
 800377a:	68f9      	ldr	r1, [r7, #12]
 800377c:	430b      	orrs	r3, r1
 800377e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003782:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	7f1b      	ldrb	r3, [r3, #28]
 800378a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800379c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80037a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037a4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	68f9      	ldr	r1, [r7, #12]
 80037ae:	430b      	orrs	r3, r1
 80037b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037b4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80037b8:	bf00      	nop
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	fffec000 	.word	0xfffec000
 80037c8:	ffc0efef 	.word	0xffc0efef

080037cc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b0a4      	sub	sp, #144	; 0x90
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80037d4:	2301      	movs	r3, #1
 80037d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80037da:	2300      	movs	r3, #0
 80037dc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80037de:	2300      	movs	r3, #0
 80037e0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80037e4:	2300      	movs	r3, #0
 80037e6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80037ea:	2301      	movs	r3, #1
 80037ec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003802:	2301      	movs	r3, #1
 8003804:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800380c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800380e:	2300      	movs	r3, #0
 8003810:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003814:	2300      	movs	r3, #0
 8003816:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003818:	2300      	movs	r3, #0
 800381a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800381e:	2300      	movs	r3, #0
 8003820:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003824:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003828:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800382a:	2300      	movs	r3, #0
 800382c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003830:	2300      	movs	r3, #0
 8003832:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003834:	2301      	movs	r3, #1
 8003836:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800383a:	2300      	movs	r3, #0
 800383c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003840:	2300      	movs	r3, #0
 8003842:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003846:	2300      	movs	r3, #0
 8003848:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800384a:	2300      	movs	r3, #0
 800384c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800384e:	2300      	movs	r3, #0
 8003850:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003852:	2300      	movs	r3, #0
 8003854:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003858:	2300      	movs	r3, #0
 800385a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800385e:	2301      	movs	r3, #1
 8003860:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003864:	2320      	movs	r3, #32
 8003866:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800386a:	2301      	movs	r3, #1
 800386c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003870:	2300      	movs	r3, #0
 8003872:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003876:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800387a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800387c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003880:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003882:	2300      	movs	r3, #0
 8003884:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003888:	2302      	movs	r3, #2
 800388a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800388e:	2300      	movs	r3, #0
 8003890:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003894:	2300      	movs	r3, #0
 8003896:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800389a:	2300      	movs	r3, #0
 800389c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80038a0:	2301      	movs	r3, #1
 80038a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80038a6:	2300      	movs	r3, #0
 80038a8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80038b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038b4:	4619      	mov	r1, r3
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7ff fde6 	bl	8003488 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80038bc:	2301      	movs	r3, #1
 80038be:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80038c0:	2301      	movs	r3, #1
 80038c2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80038c8:	2300      	movs	r3, #0
 80038ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80038ce:	2300      	movs	r3, #0
 80038d0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80038d2:	2300      	movs	r3, #0
 80038d4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80038d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80038da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80038dc:	2300      	movs	r3, #0
 80038de:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80038e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80038e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80038ec:	f44f 7306 	mov.w	r3, #536	; 0x218
 80038f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80038f2:	f107 0308 	add.w	r3, r7, #8
 80038f6:	4619      	mov	r1, r3
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff fee1 	bl	80036c0 <ETH_SetDMAConfig>
}
 80038fe:	bf00      	nop
 8003900:	3790      	adds	r7, #144	; 0x90
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003906:	b480      	push	{r7}
 8003908:	b085      	sub	sp, #20
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e01d      	b.n	8003950 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68d9      	ldr	r1, [r3, #12]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4613      	mov	r3, r2
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	4413      	add	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	440b      	add	r3, r1
 8003924:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2200      	movs	r2, #0
 8003930:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2200      	movs	r2, #0
 8003936:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2200      	movs	r2, #0
 800393c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	3206      	adds	r2, #6
 8003946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3301      	adds	r3, #1
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b03      	cmp	r3, #3
 8003954:	d9de      	bls.n	8003914 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003964:	461a      	mov	r2, r3
 8003966:	2303      	movs	r3, #3
 8003968:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003978:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003988:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	e023      	b.n	80039ee <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6919      	ldr	r1, [r3, #16]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4613      	mov	r3, r2
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	4413      	add	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	440b      	add	r3, r1
 80039b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2200      	movs	r2, #0
 80039c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2200      	movs	r2, #0
 80039c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2200      	movs	r2, #0
 80039ce:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2200      	movs	r2, #0
 80039d4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2200      	movs	r2, #0
 80039da:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80039dc:	68b9      	ldr	r1, [r7, #8]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	3212      	adds	r2, #18
 80039e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3301      	adds	r3, #1
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d9d8      	bls.n	80039a6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a2e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a42:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b08d      	sub	sp, #52	; 0x34
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3318      	adds	r3, #24
 8003a62:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a7c:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a94:	d007      	beq.n	8003aa6 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e25a      	b.n	8003f60 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d044      	beq.n	8003b40 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	0c1b      	lsrs	r3, r3, #16
 8003abc:	041b      	lsls	r3, r3, #16
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003ae2:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d027      	beq.n	8003b40 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afa:	041b      	lsls	r3, r3, #16
 8003afc:	431a      	orrs	r2, r3
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003b2e:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003b3e:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d010      	beq.n	8003b6e <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	6992      	ldr	r2, [r2, #24]
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d105      	bne.n	8003b86 <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d036      	beq.n	8003bf4 <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003b92:	f3bf 8f5f 	dmb	sy
}
 8003b96:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d902      	bls.n	8003bb6 <ETH_Prepare_Tx_Descriptors+0x164>
 8003bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb2:	3b04      	subs	r3, #4
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bbe:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bd2:	d10f      	bne.n	8003bf4 <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bdc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8003bde:	f3bf 8f5f 	dmb	sy
}
 8003be2:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e1b5      	b.n	8003f60 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	6852      	ldr	r2, [r2, #4]
 8003c14:	431a      	orrs	r2, r3
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d014      	beq.n	8003c4c <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8003c3a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	6852      	ldr	r2, [r2, #4]
 8003c42:	0412      	lsls	r2, r2, #16
 8003c44:	431a      	orrs	r2, r3
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	609a      	str	r2, [r3, #8]
 8003c4a:	e00a      	b.n	8003c62 <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8003c5a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003c5e:	6a3a      	ldr	r2, [r7, #32]
 8003c60:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d019      	beq.n	8003ca2 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	04db      	lsls	r3, r3, #19
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	0c9b      	lsrs	r3, r3, #18
 8003c88:	049b      	lsls	r3, r3, #18
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	69d2      	ldr	r2, [r2, #28]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	60da      	str	r2, [r3, #12]
 8003ca0:	e028      	b.n	8003cf4 <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003caa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	6852      	ldr	r2, [r2, #4]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d008      	beq.n	8003cf4 <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003d2a:	f3bf 8f5f 	dmb	sy
}
 8003d2e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 80d9 	beq.w	8003efc <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003d5c:	e0ce      	b.n	8003efc <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d902      	bls.n	8003d7c <ETH_Prepare_Tx_Descriptors+0x32a>
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	3b04      	subs	r3, #4
 8003d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d84:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d9e:	d007      	beq.n	8003db0 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da4:	3304      	adds	r3, #4
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d029      	beq.n	8003e04 <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dbc:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc2:	e019      	b.n	8003df8 <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 8003dc4:	f3bf 8f5f 	dmb	sy
}
 8003dc8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd8:	3301      	adds	r3, #1
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d902      	bls.n	8003de8 <ETH_Prepare_Tx_Descriptors+0x396>
 8003de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de4:	3b04      	subs	r3, #4
 8003de6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003df0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	3301      	adds	r3, #1
 8003df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d3e1      	bcc.n	8003dc4 <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 8003e00:	2302      	movs	r3, #2
 8003e02:	e0ad      	b.n	8003f60 <ETH_Prepare_Tx_Descriptors+0x50e>
    }

    descnbr += 1U;
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	3301      	adds	r3, #1
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003e22:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e26:	69fa      	ldr	r2, [r7, #28]
 8003e28:	6852      	ldr	r2, [r2, #4]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d014      	beq.n	8003e62 <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8003e50:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	6852      	ldr	r2, [r2, #4]
 8003e58:	0412      	lsls	r2, r2, #16
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	609a      	str	r2, [r3, #8]
 8003e60:	e00a      	b.n	8003e78 <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	2200      	movs	r2, #0
 8003e66:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8003e70:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003e74:	6a3a      	ldr	r2, [r7, #32]
 8003e76:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00f      	beq.n	8003ea4 <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	0c9b      	lsrs	r3, r3, #18
 8003e8a:	049b      	lsls	r3, r3, #18
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	69d2      	ldr	r2, [r2, #28]
 8003e90:	431a      	orrs	r2, r3
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	60da      	str	r2, [r3, #12]
 8003ea2:	e019      	b.n	8003ed8 <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003eac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	6852      	ldr	r2, [r2, #4]
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d008      	beq.n	8003ed8 <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	3301      	adds	r3, #1
 8003edc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003ede:	f3bf 8f5f 	dmb	sy
}
 8003ee2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f47f af2c 	bne.w	8003d5e <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d006      	beq.n	8003f1a <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	609a      	str	r2, [r3, #8]
 8003f18:	e005      	b.n	8003f26 <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f36:	6979      	ldr	r1, [r7, #20]
 8003f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	440b      	add	r3, r1
 8003f40:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f46:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f48:	b672      	cpsid	i
}
 8003f4a:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	4413      	add	r3, r2
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003f5a:	b662      	cpsie	i
}
 8003f5c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3734      	adds	r7, #52	; 0x34
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003f7a:	e136      	b.n	80041ea <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	2101      	movs	r1, #1
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	fa01 f303 	lsl.w	r3, r1, r3
 8003f88:	4013      	ands	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 8128 	beq.w	80041e4 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d003      	beq.n	8003fa4 <HAL_GPIO_Init+0x38>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b12      	cmp	r3, #18
 8003fa2:	d125      	bne.n	8003ff0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	08da      	lsrs	r2, r3, #3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3208      	adds	r2, #8
 8003fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	220f      	movs	r2, #15
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	f003 020f 	and.w	r2, r3, #15
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	08da      	lsrs	r2, r3, #3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3208      	adds	r2, #8
 8003fea:	6979      	ldr	r1, [r7, #20]
 8003fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4013      	ands	r3, r2
 8004006:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 0203 	and.w	r2, r3, #3
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d00b      	beq.n	8004044 <HAL_GPIO_Init+0xd8>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b02      	cmp	r3, #2
 8004032:	d007      	beq.n	8004044 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004038:	2b11      	cmp	r3, #17
 800403a:	d003      	beq.n	8004044 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b12      	cmp	r3, #18
 8004042:	d130      	bne.n	80040a6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	2203      	movs	r2, #3
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4013      	ands	r3, r2
 800405a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800407a:	2201      	movs	r2, #1
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	43db      	mvns	r3, r3
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4013      	ands	r3, r2
 8004088:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	f003 0201 	and.w	r2, r3, #1
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d017      	beq.n	80040de <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	2203      	movs	r2, #3
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43db      	mvns	r3, r3
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	4013      	ands	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d07c      	beq.n	80041e4 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80040ea:	4a47      	ldr	r2, [pc, #284]	; (8004208 <HAL_GPIO_Init+0x29c>)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	089b      	lsrs	r3, r3, #2
 80040f0:	3318      	adds	r3, #24
 80040f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	220f      	movs	r2, #15
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43db      	mvns	r3, r3
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	4013      	ands	r3, r2
 800410c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	0a9a      	lsrs	r2, r3, #10
 8004112:	4b3e      	ldr	r3, [pc, #248]	; (800420c <HAL_GPIO_Init+0x2a0>)
 8004114:	4013      	ands	r3, r2
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	f002 0203 	and.w	r2, r2, #3
 800411c:	00d2      	lsls	r2, r2, #3
 800411e:	4093      	lsls	r3, r2
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004126:	4938      	ldr	r1, [pc, #224]	; (8004208 <HAL_GPIO_Init+0x29c>)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	089b      	lsrs	r3, r3, #2
 800412c:	3318      	adds	r3, #24
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004134:	4b34      	ldr	r3, [pc, #208]	; (8004208 <HAL_GPIO_Init+0x29c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	43db      	mvns	r3, r3
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4013      	ands	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004158:	4a2b      	ldr	r2, [pc, #172]	; (8004208 <HAL_GPIO_Init+0x29c>)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800415e:	4b2a      	ldr	r3, [pc, #168]	; (8004208 <HAL_GPIO_Init+0x29c>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	43db      	mvns	r3, r3
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4013      	ands	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8004182:	4a21      	ldr	r2, [pc, #132]	; (8004208 <HAL_GPIO_Init+0x29c>)
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004188:	4b1f      	ldr	r3, [pc, #124]	; (8004208 <HAL_GPIO_Init+0x29c>)
 800418a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800418e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	43db      	mvns	r3, r3
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4013      	ands	r3, r2
 8004198:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80041ae:	4a16      	ldr	r2, [pc, #88]	; (8004208 <HAL_GPIO_Init+0x29c>)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80041b6:	4b14      	ldr	r3, [pc, #80]	; (8004208 <HAL_GPIO_Init+0x29c>)
 80041b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041bc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	43db      	mvns	r3, r3
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4013      	ands	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80041dc:	4a0a      	ldr	r2, [pc, #40]	; (8004208 <HAL_GPIO_Init+0x29c>)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	3301      	adds	r3, #1
 80041e8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	fa22 f303 	lsr.w	r3, r2, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f47f aec1 	bne.w	8003f7c <HAL_GPIO_Init+0x10>
  }
}
 80041fa:	bf00      	nop
 80041fc:	bf00      	nop
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	44022000 	.word	0x44022000
 800420c:	002f7f7f 	.word	0x002f7f7f

08004210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	807b      	strh	r3, [r7, #2]
 800421c:	4613      	mov	r3, r2
 800421e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004220:	787b      	ldrb	r3, [r7, #1]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004226:	887a      	ldrh	r2, [r7, #2]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800422c:	e002      	b.n	8004234 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800422e:	887a      	ldrh	r2, [r7, #2]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004252:	887a      	ldrh	r2, [r7, #2]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4013      	ands	r3, r2
 8004258:	041a      	lsls	r2, r3, #16
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	43d9      	mvns	r1, r3
 800425e:	887b      	ldrh	r3, [r7, #2]
 8004260:	400b      	ands	r3, r1
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	619a      	str	r2, [r3, #24]
}
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004278:	4b05      	ldr	r3, [pc, #20]	; (8004290 <HAL_ICACHE_Enable+0x1c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a04      	ldr	r2, [pc, #16]	; (8004290 <HAL_ICACHE_Enable+0x1c>)
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	40030400 	.word	0x40030400

08004294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d102      	bne.n	80042a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	f000 bc28 	b.w	8004af8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042a8:	4b94      	ldr	r3, [pc, #592]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f003 0318 	and.w	r3, r3, #24
 80042b0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80042b2:	4b92      	ldr	r3, [pc, #584]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 80042b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0310 	and.w	r3, r3, #16
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d05b      	beq.n	8004380 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d005      	beq.n	80042da <HAL_RCC_OscConfig+0x46>
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	2b18      	cmp	r3, #24
 80042d2:	d114      	bne.n	80042fe <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d111      	bne.n	80042fe <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d102      	bne.n	80042e8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f000 bc08 	b.w	8004af8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80042e8:	4b84      	ldr	r3, [pc, #528]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	041b      	lsls	r3, r3, #16
 80042f6:	4981      	ldr	r1, [pc, #516]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80042fc:	e040      	b.n	8004380 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d023      	beq.n	800434e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004306:	4b7d      	ldr	r3, [pc, #500]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a7c      	ldr	r2, [pc, #496]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 800430c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004312:	f7fd ffb7 	bl	8002284 <HAL_GetTick>
 8004316:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800431a:	f7fd ffb3 	bl	8002284 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e3e5      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800432c:	4b73      	ldr	r3, [pc, #460]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0f0      	beq.n	800431a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004338:	4b70      	ldr	r3, [pc, #448]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	041b      	lsls	r3, r3, #16
 8004346:	496d      	ldr	r1, [pc, #436]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 8004348:	4313      	orrs	r3, r2
 800434a:	618b      	str	r3, [r1, #24]
 800434c:	e018      	b.n	8004380 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800434e:	4b6b      	ldr	r3, [pc, #428]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a6a      	ldr	r2, [pc, #424]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 8004354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435a:	f7fd ff93 	bl	8002284 <HAL_GetTick>
 800435e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004362:	f7fd ff8f 	bl	8002284 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e3c1      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004374:	4b61      	ldr	r3, [pc, #388]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1f0      	bne.n	8004362 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80a0 	beq.w	80044ce <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	2b10      	cmp	r3, #16
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_OscConfig+0x10c>
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	2b18      	cmp	r3, #24
 8004398:	d109      	bne.n	80043ae <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b03      	cmp	r3, #3
 800439e:	d106      	bne.n	80043ae <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f040 8092 	bne.w	80044ce <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e3a4      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b6:	d106      	bne.n	80043c6 <HAL_RCC_OscConfig+0x132>
 80043b8:	4b50      	ldr	r3, [pc, #320]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a4f      	ldr	r2, [pc, #316]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 80043be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	e058      	b.n	8004478 <HAL_RCC_OscConfig+0x1e4>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d112      	bne.n	80043f4 <HAL_RCC_OscConfig+0x160>
 80043ce:	4b4b      	ldr	r3, [pc, #300]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a4a      	ldr	r2, [pc, #296]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 80043d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	4b48      	ldr	r3, [pc, #288]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a47      	ldr	r2, [pc, #284]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 80043e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	4b45      	ldr	r3, [pc, #276]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a44      	ldr	r2, [pc, #272]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 80043ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	e041      	b.n	8004478 <HAL_RCC_OscConfig+0x1e4>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043fc:	d112      	bne.n	8004424 <HAL_RCC_OscConfig+0x190>
 80043fe:	4b3f      	ldr	r3, [pc, #252]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a3e      	ldr	r2, [pc, #248]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 8004404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	4b3c      	ldr	r3, [pc, #240]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a3b      	ldr	r2, [pc, #236]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 8004410:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	4b39      	ldr	r3, [pc, #228]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a38      	ldr	r2, [pc, #224]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 800441c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	e029      	b.n	8004478 <HAL_RCC_OscConfig+0x1e4>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800442c:	d112      	bne.n	8004454 <HAL_RCC_OscConfig+0x1c0>
 800442e:	4b33      	ldr	r3, [pc, #204]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a32      	ldr	r2, [pc, #200]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 8004434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	4b30      	ldr	r3, [pc, #192]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a2f      	ldr	r2, [pc, #188]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 8004440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	4b2d      	ldr	r3, [pc, #180]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a2c      	ldr	r2, [pc, #176]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 800444c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	e011      	b.n	8004478 <HAL_RCC_OscConfig+0x1e4>
 8004454:	4b29      	ldr	r3, [pc, #164]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a28      	ldr	r2, [pc, #160]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 800445a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	4b26      	ldr	r3, [pc, #152]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a25      	ldr	r2, [pc, #148]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 8004466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	4b23      	ldr	r3, [pc, #140]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a22      	ldr	r2, [pc, #136]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 8004472:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d013      	beq.n	80044a8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fd ff00 	bl	8002284 <HAL_GetTick>
 8004484:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004488:	f7fd fefc 	bl	8002284 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b64      	cmp	r3, #100	; 0x64
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e32e      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800449a:	4b18      	ldr	r3, [pc, #96]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x1f4>
 80044a6:	e012      	b.n	80044ce <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fd feec 	bl	8002284 <HAL_GetTick>
 80044ac:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80044b0:	f7fd fee8 	bl	8002284 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	; 0x64
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e31a      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044c2:	4b0e      	ldr	r3, [pc, #56]	; (80044fc <HAL_RCC_OscConfig+0x268>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 809a 	beq.w	8004610 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <HAL_RCC_OscConfig+0x25a>
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	2b18      	cmp	r3, #24
 80044e6:	d149      	bne.n	800457c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d146      	bne.n	800457c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d104      	bne.n	8004500 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e2fe      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
 80044fa:	bf00      	nop
 80044fc:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d11c      	bne.n	8004540 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8004506:	4b9a      	ldr	r3, [pc, #616]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0218 	and.w	r2, r3, #24
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	429a      	cmp	r2, r3
 8004514:	d014      	beq.n	8004540 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004516:	4b96      	ldr	r3, [pc, #600]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f023 0218 	bic.w	r2, r3, #24
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	4993      	ldr	r1, [pc, #588]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004524:	4313      	orrs	r3, r2
 8004526:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8004528:	f000 fdd0 	bl	80050cc <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800452c:	4b91      	ldr	r3, [pc, #580]	; (8004774 <HAL_RCC_OscConfig+0x4e0>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f7fd fb1d 	bl	8001b70 <HAL_InitTick>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e2db      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fd fea0 	bl	8002284 <HAL_GetTick>
 8004544:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004548:	f7fd fe9c 	bl	8002284 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e2ce      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800455a:	4b85      	ldr	r3, [pc, #532]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004566:	4b82      	ldr	r3, [pc, #520]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	041b      	lsls	r3, r3, #16
 8004574:	497e      	ldr	r1, [pc, #504]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004576:	4313      	orrs	r3, r2
 8004578:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800457a:	e049      	b.n	8004610 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d02c      	beq.n	80045de <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004584:	4b7a      	ldr	r3, [pc, #488]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f023 0218 	bic.w	r2, r3, #24
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	4977      	ldr	r1, [pc, #476]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004592:	4313      	orrs	r3, r2
 8004594:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004596:	4b76      	ldr	r3, [pc, #472]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a75      	ldr	r2, [pc, #468]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a2:	f7fd fe6f 	bl	8002284 <HAL_GetTick>
 80045a6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80045aa:	f7fd fe6b 	bl	8002284 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e29d      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045bc:	4b6c      	ldr	r3, [pc, #432]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80045c8:	4b69      	ldr	r3, [pc, #420]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	041b      	lsls	r3, r3, #16
 80045d6:	4966      	ldr	r1, [pc, #408]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	610b      	str	r3, [r1, #16]
 80045dc:	e018      	b.n	8004610 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045de:	4b64      	ldr	r3, [pc, #400]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a63      	ldr	r2, [pc, #396]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ea:	f7fd fe4b 	bl	8002284 <HAL_GetTick>
 80045ee:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80045f2:	f7fd fe47 	bl	8002284 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e279      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004604:	4b5a      	ldr	r3, [pc, #360]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1f0      	bne.n	80045f2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d03c      	beq.n	8004696 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01c      	beq.n	800465e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004624:	4b52      	ldr	r3, [pc, #328]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800462a:	4a51      	ldr	r2, [pc, #324]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 800462c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004630:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004634:	f7fd fe26 	bl	8002284 <HAL_GetTick>
 8004638:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800463c:	f7fd fe22 	bl	8002284 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e254      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800464e:	4b48      	ldr	r3, [pc, #288]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004650:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0ef      	beq.n	800463c <HAL_RCC_OscConfig+0x3a8>
 800465c:	e01b      	b.n	8004696 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800465e:	4b44      	ldr	r3, [pc, #272]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004664:	4a42      	ldr	r2, [pc, #264]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004666:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800466a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466e:	f7fd fe09 	bl	8002284 <HAL_GetTick>
 8004672:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004676:	f7fd fe05 	bl	8002284 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e237      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004688:	4b39      	ldr	r3, [pc, #228]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 800468a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800468e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1ef      	bne.n	8004676 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80d2 	beq.w	8004848 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80046a4:	4b34      	ldr	r3, [pc, #208]	; (8004778 <HAL_RCC_OscConfig+0x4e4>)
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d118      	bne.n	80046e2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80046b0:	4b31      	ldr	r3, [pc, #196]	; (8004778 <HAL_RCC_OscConfig+0x4e4>)
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	4a30      	ldr	r2, [pc, #192]	; (8004778 <HAL_RCC_OscConfig+0x4e4>)
 80046b6:	f043 0301 	orr.w	r3, r3, #1
 80046ba:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046bc:	f7fd fde2 	bl	8002284 <HAL_GetTick>
 80046c0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c4:	f7fd fdde 	bl	8002284 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e210      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80046d6:	4b28      	ldr	r3, [pc, #160]	; (8004778 <HAL_RCC_OscConfig+0x4e4>)
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d108      	bne.n	80046fc <HAL_RCC_OscConfig+0x468>
 80046ea:	4b21      	ldr	r3, [pc, #132]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 80046ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046f0:	4a1f      	ldr	r2, [pc, #124]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80046fa:	e074      	b.n	80047e6 <HAL_RCC_OscConfig+0x552>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d118      	bne.n	8004736 <HAL_RCC_OscConfig+0x4a2>
 8004704:	4b1a      	ldr	r3, [pc, #104]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004706:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800470a:	4a19      	ldr	r2, [pc, #100]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 800470c:	f023 0301 	bic.w	r3, r3, #1
 8004710:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004714:	4b16      	ldr	r3, [pc, #88]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004716:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800471a:	4a15      	ldr	r2, [pc, #84]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 800471c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004720:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004724:	4b12      	ldr	r3, [pc, #72]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004726:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800472a:	4a11      	ldr	r2, [pc, #68]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 800472c:	f023 0304 	bic.w	r3, r3, #4
 8004730:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004734:	e057      	b.n	80047e6 <HAL_RCC_OscConfig+0x552>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b05      	cmp	r3, #5
 800473c:	d11e      	bne.n	800477c <HAL_RCC_OscConfig+0x4e8>
 800473e:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004744:	4a0a      	ldr	r2, [pc, #40]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004746:	f043 0304 	orr.w	r3, r3, #4
 800474a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800474e:	4b08      	ldr	r3, [pc, #32]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004750:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004754:	4a06      	ldr	r2, [pc, #24]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800475a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800475e:	4b04      	ldr	r3, [pc, #16]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004764:	4a02      	ldr	r2, [pc, #8]	; (8004770 <HAL_RCC_OscConfig+0x4dc>)
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800476e:	e03a      	b.n	80047e6 <HAL_RCC_OscConfig+0x552>
 8004770:	44020c00 	.word	0x44020c00
 8004774:	20000018 	.word	0x20000018
 8004778:	44020800 	.word	0x44020800
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b85      	cmp	r3, #133	; 0x85
 8004782:	d118      	bne.n	80047b6 <HAL_RCC_OscConfig+0x522>
 8004784:	4ba2      	ldr	r3, [pc, #648]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 8004786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800478a:	4aa1      	ldr	r2, [pc, #644]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 800478c:	f043 0304 	orr.w	r3, r3, #4
 8004790:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004794:	4b9e      	ldr	r3, [pc, #632]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 8004796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800479a:	4a9d      	ldr	r2, [pc, #628]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 800479c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80047a4:	4b9a      	ldr	r3, [pc, #616]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 80047a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047aa:	4a99      	ldr	r2, [pc, #612]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 80047ac:	f043 0301 	orr.w	r3, r3, #1
 80047b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80047b4:	e017      	b.n	80047e6 <HAL_RCC_OscConfig+0x552>
 80047b6:	4b96      	ldr	r3, [pc, #600]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 80047b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047bc:	4a94      	ldr	r2, [pc, #592]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 80047be:	f023 0301 	bic.w	r3, r3, #1
 80047c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80047c6:	4b92      	ldr	r3, [pc, #584]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 80047c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047cc:	4a90      	ldr	r2, [pc, #576]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 80047ce:	f023 0304 	bic.w	r3, r3, #4
 80047d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80047d6:	4b8e      	ldr	r3, [pc, #568]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 80047d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047dc:	4a8c      	ldr	r2, [pc, #560]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 80047de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d016      	beq.n	800481c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ee:	f7fd fd49 	bl	8002284 <HAL_GetTick>
 80047f2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047f4:	e00a      	b.n	800480c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f6:	f7fd fd45 	bl	8002284 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	f241 3288 	movw	r2, #5000	; 0x1388
 8004804:	4293      	cmp	r3, r2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e175      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800480c:	4b80      	ldr	r3, [pc, #512]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 800480e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0ed      	beq.n	80047f6 <HAL_RCC_OscConfig+0x562>
 800481a:	e015      	b.n	8004848 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481c:	f7fd fd32 	bl	8002284 <HAL_GetTick>
 8004820:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004822:	e00a      	b.n	800483a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004824:	f7fd fd2e 	bl	8002284 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004832:	4293      	cmp	r3, r2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e15e      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800483a:	4b75      	ldr	r3, [pc, #468]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 800483c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1ed      	bne.n	8004824 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0320 	and.w	r3, r3, #32
 8004850:	2b00      	cmp	r3, #0
 8004852:	d036      	beq.n	80048c2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	2b00      	cmp	r3, #0
 800485a:	d019      	beq.n	8004890 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800485c:	4b6c      	ldr	r3, [pc, #432]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a6b      	ldr	r2, [pc, #428]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 8004862:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004866:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004868:	f7fd fd0c 	bl	8002284 <HAL_GetTick>
 800486c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004870:	f7fd fd08 	bl	8002284 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e13a      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004882:	4b63      	ldr	r3, [pc, #396]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0x5dc>
 800488e:	e018      	b.n	80048c2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004890:	4b5f      	ldr	r3, [pc, #380]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a5e      	ldr	r2, [pc, #376]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 8004896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800489a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489c:	f7fd fcf2 	bl	8002284 <HAL_GetTick>
 80048a0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80048a4:	f7fd fcee 	bl	8002284 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e120      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80048b6:	4b56      	ldr	r3, [pc, #344]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f0      	bne.n	80048a4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 8115 	beq.w	8004af6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	2b18      	cmp	r3, #24
 80048d0:	f000 80af 	beq.w	8004a32 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	2b02      	cmp	r3, #2
 80048da:	f040 8086 	bne.w	80049ea <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80048de:	4b4c      	ldr	r3, [pc, #304]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a4b      	ldr	r2, [pc, #300]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 80048e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ea:	f7fd fccb 	bl	8002284 <HAL_GetTick>
 80048ee:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80048f2:	f7fd fcc7 	bl	8002284 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e0f9      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004904:	4b42      	ldr	r3, [pc, #264]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1f0      	bne.n	80048f2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004910:	4b3f      	ldr	r3, [pc, #252]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 8004912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004914:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004918:	f023 0303 	bic.w	r3, r3, #3
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004924:	0212      	lsls	r2, r2, #8
 8004926:	430a      	orrs	r2, r1
 8004928:	4939      	ldr	r1, [pc, #228]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 800492a:	4313      	orrs	r3, r2
 800492c:	628b      	str	r3, [r1, #40]	; 0x28
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004932:	3b01      	subs	r3, #1
 8004934:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493c:	3b01      	subs	r3, #1
 800493e:	025b      	lsls	r3, r3, #9
 8004940:	b29b      	uxth	r3, r3
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004948:	3b01      	subs	r3, #1
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	3b01      	subs	r3, #1
 8004958:	061b      	lsls	r3, r3, #24
 800495a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800495e:	492c      	ldr	r1, [pc, #176]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 8004960:	4313      	orrs	r3, r2
 8004962:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004964:	4b2a      	ldr	r3, [pc, #168]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	4a29      	ldr	r2, [pc, #164]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 800496a:	f023 0310 	bic.w	r3, r3, #16
 800496e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004974:	4a26      	ldr	r2, [pc, #152]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800497a:	4b25      	ldr	r3, [pc, #148]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	4a24      	ldr	r2, [pc, #144]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 8004980:	f043 0310 	orr.w	r3, r3, #16
 8004984:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004986:	4b22      	ldr	r3, [pc, #136]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	f023 020c 	bic.w	r2, r3, #12
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004992:	491f      	ldr	r1, [pc, #124]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 8004994:	4313      	orrs	r3, r2
 8004996:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004998:	4b1d      	ldr	r3, [pc, #116]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 800499a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499c:	f023 0220 	bic.w	r2, r3, #32
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a4:	491a      	ldr	r1, [pc, #104]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80049aa:	4b19      	ldr	r3, [pc, #100]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	4a18      	ldr	r2, [pc, #96]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 80049b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80049b6:	4b16      	ldr	r3, [pc, #88]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a15      	ldr	r2, [pc, #84]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 80049bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c2:	f7fd fc5f 	bl	8002284 <HAL_GetTick>
 80049c6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80049ca:	f7fd fc5b 	bl	8002284 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e08d      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80049dc:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0f0      	beq.n	80049ca <HAL_RCC_OscConfig+0x736>
 80049e8:	e085      	b.n	8004af6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80049ea:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a08      	ldr	r2, [pc, #32]	; (8004a10 <HAL_RCC_OscConfig+0x77c>)
 80049f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f6:	f7fd fc45 	bl	8002284 <HAL_GetTick>
 80049fa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80049fc:	e00a      	b.n	8004a14 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80049fe:	f7fd fc41 	bl	8002284 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d903      	bls.n	8004a14 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e073      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
 8004a10:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004a14:	4b3a      	ldr	r3, [pc, #232]	; (8004b00 <HAL_RCC_OscConfig+0x86c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1ee      	bne.n	80049fe <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004a20:	4b37      	ldr	r3, [pc, #220]	; (8004b00 <HAL_RCC_OscConfig+0x86c>)
 8004a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a24:	4a36      	ldr	r2, [pc, #216]	; (8004b00 <HAL_RCC_OscConfig+0x86c>)
 8004a26:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004a2a:	f023 0303 	bic.w	r3, r3, #3
 8004a2e:	6293      	str	r3, [r2, #40]	; 0x28
 8004a30:	e061      	b.n	8004af6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004a32:	4b33      	ldr	r3, [pc, #204]	; (8004b00 <HAL_RCC_OscConfig+0x86c>)
 8004a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a36:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a38:	4b31      	ldr	r3, [pc, #196]	; (8004b00 <HAL_RCC_OscConfig+0x86c>)
 8004a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d031      	beq.n	8004aaa <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f003 0203 	and.w	r2, r3, #3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d12a      	bne.n	8004aaa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	0a1b      	lsrs	r3, r3, #8
 8004a58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d122      	bne.n	8004aaa <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d11a      	bne.n	8004aaa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	0a5b      	lsrs	r3, r3, #9
 8004a78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d111      	bne.n	8004aaa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	0c1b      	lsrs	r3, r3, #16
 8004a8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a92:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d108      	bne.n	8004aaa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	0e1b      	lsrs	r3, r3, #24
 8004a9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d001      	beq.n	8004aae <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e024      	b.n	8004af8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004aae:	4b14      	ldr	r3, [pc, #80]	; (8004b00 <HAL_RCC_OscConfig+0x86c>)
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	08db      	lsrs	r3, r3, #3
 8004ab4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d01a      	beq.n	8004af6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <HAL_RCC_OscConfig+0x86c>)
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac4:	4a0e      	ldr	r2, [pc, #56]	; (8004b00 <HAL_RCC_OscConfig+0x86c>)
 8004ac6:	f023 0310 	bic.w	r3, r3, #16
 8004aca:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004acc:	f7fd fbda 	bl	8002284 <HAL_GetTick>
 8004ad0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004ad2:	bf00      	nop
 8004ad4:	f7fd fbd6 	bl	8002284 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d0f9      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae4:	4a06      	ldr	r2, [pc, #24]	; (8004b00 <HAL_RCC_OscConfig+0x86c>)
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004aea:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <HAL_RCC_OscConfig+0x86c>)
 8004aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aee:	4a04      	ldr	r2, [pc, #16]	; (8004b00 <HAL_RCC_OscConfig+0x86c>)
 8004af0:	f043 0310 	orr.w	r3, r3, #16
 8004af4:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3720      	adds	r7, #32
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	44020c00 	.word	0x44020c00

08004b04 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e19e      	b.n	8004e56 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b18:	4b83      	ldr	r3, [pc, #524]	; (8004d28 <HAL_RCC_ClockConfig+0x224>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d910      	bls.n	8004b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b26:	4b80      	ldr	r3, [pc, #512]	; (8004d28 <HAL_RCC_ClockConfig+0x224>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f023 020f 	bic.w	r2, r3, #15
 8004b2e:	497e      	ldr	r1, [pc, #504]	; (8004d28 <HAL_RCC_ClockConfig+0x224>)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b36:	4b7c      	ldr	r3, [pc, #496]	; (8004d28 <HAL_RCC_ClockConfig+0x224>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d001      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e186      	b.n	8004e56 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0310 	and.w	r3, r3, #16
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d012      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	695a      	ldr	r2, [r3, #20]
 8004b58:	4b74      	ldr	r3, [pc, #464]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	0a1b      	lsrs	r3, r3, #8
 8004b5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d909      	bls.n	8004b7a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004b66:	4b71      	ldr	r3, [pc, #452]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	021b      	lsls	r3, r3, #8
 8004b74:	496d      	ldr	r1, [pc, #436]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d012      	beq.n	8004bac <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	4b68      	ldr	r3, [pc, #416]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	091b      	lsrs	r3, r3, #4
 8004b90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d909      	bls.n	8004bac <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004b98:	4b64      	ldr	r3, [pc, #400]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	4961      	ldr	r1, [pc, #388]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d010      	beq.n	8004bda <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	4b5b      	ldr	r3, [pc, #364]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d908      	bls.n	8004bda <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004bc8:	4b58      	ldr	r3, [pc, #352]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	4955      	ldr	r1, [pc, #340]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d010      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	4b50      	ldr	r3, [pc, #320]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d908      	bls.n	8004c08 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004bf6:	4b4d      	ldr	r3, [pc, #308]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f023 020f 	bic.w	r2, r3, #15
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	494a      	ldr	r1, [pc, #296]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 8093 	beq.w	8004d3c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d107      	bne.n	8004c2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004c1e:	4b43      	ldr	r3, [pc, #268]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d121      	bne.n	8004c6e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e113      	b.n	8004e56 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d107      	bne.n	8004c46 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c36:	4b3d      	ldr	r3, [pc, #244]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d115      	bne.n	8004c6e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e107      	b.n	8004e56 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d107      	bne.n	8004c5e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004c4e:	4b37      	ldr	r3, [pc, #220]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d109      	bne.n	8004c6e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e0fb      	b.n	8004e56 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c5e:	4b33      	ldr	r3, [pc, #204]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e0f3      	b.n	8004e56 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004c6e:	4b2f      	ldr	r3, [pc, #188]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f023 0203 	bic.w	r2, r3, #3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	492c      	ldr	r1, [pc, #176]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c80:	f7fd fb00 	bl	8002284 <HAL_GetTick>
 8004c84:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d112      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c8e:	e00a      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004c90:	f7fd faf8 	bl	8002284 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e0d7      	b.n	8004e56 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ca6:	4b21      	ldr	r3, [pc, #132]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f003 0318 	and.w	r3, r3, #24
 8004cae:	2b18      	cmp	r3, #24
 8004cb0:	d1ee      	bne.n	8004c90 <HAL_RCC_ClockConfig+0x18c>
 8004cb2:	e043      	b.n	8004d3c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d112      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cbc:	e00a      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004cbe:	f7fd fae1 	bl	8002284 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e0c0      	b.n	8004e56 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cd4:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	f003 0318 	and.w	r3, r3, #24
 8004cdc:	2b10      	cmp	r3, #16
 8004cde:	d1ee      	bne.n	8004cbe <HAL_RCC_ClockConfig+0x1ba>
 8004ce0:	e02c      	b.n	8004d3c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d122      	bne.n	8004d30 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004cea:	e00a      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004cec:	f7fd faca 	bl	8002284 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e0a9      	b.n	8004e56 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004d02:	4b0a      	ldr	r3, [pc, #40]	; (8004d2c <HAL_RCC_ClockConfig+0x228>)
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	f003 0318 	and.w	r3, r3, #24
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	d1ee      	bne.n	8004cec <HAL_RCC_ClockConfig+0x1e8>
 8004d0e:	e015      	b.n	8004d3c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004d10:	f7fd fab8 	bl	8002284 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d906      	bls.n	8004d30 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e097      	b.n	8004e56 <HAL_RCC_ClockConfig+0x352>
 8004d26:	bf00      	nop
 8004d28:	40022000 	.word	0x40022000
 8004d2c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d30:	4b4b      	ldr	r3, [pc, #300]	; (8004e60 <HAL_RCC_ClockConfig+0x35c>)
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	f003 0318 	and.w	r3, r3, #24
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e9      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d010      	beq.n	8004d6a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	4b44      	ldr	r3, [pc, #272]	; (8004e60 <HAL_RCC_ClockConfig+0x35c>)
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d208      	bcs.n	8004d6a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004d58:	4b41      	ldr	r3, [pc, #260]	; (8004e60 <HAL_RCC_ClockConfig+0x35c>)
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	f023 020f 	bic.w	r2, r3, #15
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	493e      	ldr	r1, [pc, #248]	; (8004e60 <HAL_RCC_ClockConfig+0x35c>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d6a:	4b3e      	ldr	r3, [pc, #248]	; (8004e64 <HAL_RCC_ClockConfig+0x360>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d210      	bcs.n	8004d9a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d78:	4b3a      	ldr	r3, [pc, #232]	; (8004e64 <HAL_RCC_ClockConfig+0x360>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f023 020f 	bic.w	r2, r3, #15
 8004d80:	4938      	ldr	r1, [pc, #224]	; (8004e64 <HAL_RCC_ClockConfig+0x360>)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d88:	4b36      	ldr	r3, [pc, #216]	; (8004e64 <HAL_RCC_ClockConfig+0x360>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 030f 	and.w	r3, r3, #15
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d001      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e05d      	b.n	8004e56 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d010      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	4b2d      	ldr	r3, [pc, #180]	; (8004e60 <HAL_RCC_ClockConfig+0x35c>)
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d208      	bcs.n	8004dc8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004db6:	4b2a      	ldr	r3, [pc, #168]	; (8004e60 <HAL_RCC_ClockConfig+0x35c>)
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	4927      	ldr	r1, [pc, #156]	; (8004e60 <HAL_RCC_ClockConfig+0x35c>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d012      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	4b21      	ldr	r3, [pc, #132]	; (8004e60 <HAL_RCC_ClockConfig+0x35c>)
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	091b      	lsrs	r3, r3, #4
 8004dde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d209      	bcs.n	8004dfa <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004de6:	4b1e      	ldr	r3, [pc, #120]	; (8004e60 <HAL_RCC_ClockConfig+0x35c>)
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	491a      	ldr	r1, [pc, #104]	; (8004e60 <HAL_RCC_ClockConfig+0x35c>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0310 	and.w	r3, r3, #16
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d012      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695a      	ldr	r2, [r3, #20]
 8004e0a:	4b15      	ldr	r3, [pc, #84]	; (8004e60 <HAL_RCC_ClockConfig+0x35c>)
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	0a1b      	lsrs	r3, r3, #8
 8004e10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d209      	bcs.n	8004e2c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004e18:	4b11      	ldr	r3, [pc, #68]	; (8004e60 <HAL_RCC_ClockConfig+0x35c>)
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	021b      	lsls	r3, r3, #8
 8004e26:	490e      	ldr	r1, [pc, #56]	; (8004e60 <HAL_RCC_ClockConfig+0x35c>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004e2c:	f000 f822 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8004e30:	4602      	mov	r2, r0
 8004e32:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <HAL_RCC_ClockConfig+0x35c>)
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	490b      	ldr	r1, [pc, #44]	; (8004e68 <HAL_RCC_ClockConfig+0x364>)
 8004e3c:	5ccb      	ldrb	r3, [r1, r3]
 8004e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e42:	4a0a      	ldr	r2, [pc, #40]	; (8004e6c <HAL_RCC_ClockConfig+0x368>)
 8004e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004e46:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <HAL_RCC_ClockConfig+0x36c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fc fe90 	bl	8001b70 <HAL_InitTick>
 8004e50:	4603      	mov	r3, r0
 8004e52:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004e54:	7afb      	ldrb	r3, [r7, #11]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	44020c00 	.word	0x44020c00
 8004e64:	40022000 	.word	0x40022000
 8004e68:	08020cc0 	.word	0x08020cc0
 8004e6c:	20000014 	.word	0x20000014
 8004e70:	20000018 	.word	0x20000018

08004e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b089      	sub	sp, #36	; 0x24
 8004e78:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004e7a:	4b8c      	ldr	r3, [pc, #560]	; (80050ac <HAL_RCC_GetSysClockFreq+0x238>)
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f003 0318 	and.w	r3, r3, #24
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d102      	bne.n	8004e8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004e86:	4b8a      	ldr	r3, [pc, #552]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004e88:	61fb      	str	r3, [r7, #28]
 8004e8a:	e107      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e8c:	4b87      	ldr	r3, [pc, #540]	; (80050ac <HAL_RCC_GetSysClockFreq+0x238>)
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	f003 0318 	and.w	r3, r3, #24
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d112      	bne.n	8004ebe <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004e98:	4b84      	ldr	r3, [pc, #528]	; (80050ac <HAL_RCC_GetSysClockFreq+0x238>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0320 	and.w	r3, r3, #32
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d009      	beq.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ea4:	4b81      	ldr	r3, [pc, #516]	; (80050ac <HAL_RCC_GetSysClockFreq+0x238>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	08db      	lsrs	r3, r3, #3
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	4a81      	ldr	r2, [pc, #516]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x240>)
 8004eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	e0f1      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004eb8:	4b7e      	ldr	r3, [pc, #504]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x240>)
 8004eba:	61fb      	str	r3, [r7, #28]
 8004ebc:	e0ee      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ebe:	4b7b      	ldr	r3, [pc, #492]	; (80050ac <HAL_RCC_GetSysClockFreq+0x238>)
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	f003 0318 	and.w	r3, r3, #24
 8004ec6:	2b10      	cmp	r3, #16
 8004ec8:	d102      	bne.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004eca:	4b7b      	ldr	r3, [pc, #492]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x244>)
 8004ecc:	61fb      	str	r3, [r7, #28]
 8004ece:	e0e5      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ed0:	4b76      	ldr	r3, [pc, #472]	; (80050ac <HAL_RCC_GetSysClockFreq+0x238>)
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	f003 0318 	and.w	r3, r3, #24
 8004ed8:	2b18      	cmp	r3, #24
 8004eda:	f040 80dd 	bne.w	8005098 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004ede:	4b73      	ldr	r3, [pc, #460]	; (80050ac <HAL_RCC_GetSysClockFreq+0x238>)
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004ee8:	4b70      	ldr	r3, [pc, #448]	; (80050ac <HAL_RCC_GetSysClockFreq+0x238>)
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	0a1b      	lsrs	r3, r3, #8
 8004eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ef2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004ef4:	4b6d      	ldr	r3, [pc, #436]	; (80050ac <HAL_RCC_GetSysClockFreq+0x238>)
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	091b      	lsrs	r3, r3, #4
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004f00:	4b6a      	ldr	r3, [pc, #424]	; (80050ac <HAL_RCC_GetSysClockFreq+0x238>)
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004f04:	08db      	lsrs	r3, r3, #3
 8004f06:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	fb02 f303 	mul.w	r3, r2, r3
 8004f10:	ee07 3a90 	vmov	s15, r3
 8004f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f18:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f000 80b7 	beq.w	8005092 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d003      	beq.n	8004f32 <HAL_RCC_GetSysClockFreq+0xbe>
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d056      	beq.n	8004fde <HAL_RCC_GetSysClockFreq+0x16a>
 8004f30:	e077      	b.n	8005022 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004f32:	4b5e      	ldr	r3, [pc, #376]	; (80050ac <HAL_RCC_GetSysClockFreq+0x238>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d02d      	beq.n	8004f9a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f3e:	4b5b      	ldr	r3, [pc, #364]	; (80050ac <HAL_RCC_GetSysClockFreq+0x238>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	08db      	lsrs	r3, r3, #3
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	4a5a      	ldr	r2, [pc, #360]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x240>)
 8004f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	ee07 3a90 	vmov	s15, r3
 8004f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	ee07 3a90 	vmov	s15, r3
 8004f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f68:	4b50      	ldr	r3, [pc, #320]	; (80050ac <HAL_RCC_GetSysClockFreq+0x238>)
 8004f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f70:	ee07 3a90 	vmov	s15, r3
 8004f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f78:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f7c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80050bc <HAL_RCC_GetSysClockFreq+0x248>
 8004f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f94:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004f98:	e065      	b.n	8005066 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	ee07 3a90 	vmov	s15, r3
 8004fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa4:	eddf 6a46 	vldr	s13, [pc, #280]	; 80050c0 <HAL_RCC_GetSysClockFreq+0x24c>
 8004fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fac:	4b3f      	ldr	r3, [pc, #252]	; (80050ac <HAL_RCC_GetSysClockFreq+0x238>)
 8004fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb4:	ee07 3a90 	vmov	s15, r3
 8004fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fbc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fc0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80050bc <HAL_RCC_GetSysClockFreq+0x248>
 8004fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004fdc:	e043      	b.n	8005066 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	ee07 3a90 	vmov	s15, r3
 8004fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe8:	eddf 6a36 	vldr	s13, [pc, #216]	; 80050c4 <HAL_RCC_GetSysClockFreq+0x250>
 8004fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ff0:	4b2e      	ldr	r3, [pc, #184]	; (80050ac <HAL_RCC_GetSysClockFreq+0x238>)
 8004ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff8:	ee07 3a90 	vmov	s15, r3
 8004ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005000:	ed97 6a02 	vldr	s12, [r7, #8]
 8005004:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80050bc <HAL_RCC_GetSysClockFreq+0x248>
 8005008:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800500c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005014:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8005020:	e021      	b.n	8005066 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	ee07 3a90 	vmov	s15, r3
 8005028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502c:	eddf 6a26 	vldr	s13, [pc, #152]	; 80050c8 <HAL_RCC_GetSysClockFreq+0x254>
 8005030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005034:	4b1d      	ldr	r3, [pc, #116]	; (80050ac <HAL_RCC_GetSysClockFreq+0x238>)
 8005036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503c:	ee07 3a90 	vmov	s15, r3
 8005040:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005044:	ed97 6a02 	vldr	s12, [r7, #8]
 8005048:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80050bc <HAL_RCC_GetSysClockFreq+0x248>
 800504c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005050:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005054:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005058:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800505c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005060:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005064:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8005066:	4b11      	ldr	r3, [pc, #68]	; (80050ac <HAL_RCC_GetSysClockFreq+0x238>)
 8005068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506a:	0a5b      	lsrs	r3, r3, #9
 800506c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005070:	3301      	adds	r3, #1
 8005072:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800507e:	edd7 6a06 	vldr	s13, [r7, #24]
 8005082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800508a:	ee17 3a90 	vmov	r3, s15
 800508e:	61fb      	str	r3, [r7, #28]
 8005090:	e004      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8005092:	2300      	movs	r3, #0
 8005094:	61fb      	str	r3, [r7, #28]
 8005096:	e001      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8005098:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x240>)
 800509a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800509c:	69fb      	ldr	r3, [r7, #28]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3724      	adds	r7, #36	; 0x24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	44020c00 	.word	0x44020c00
 80050b0:	003d0900 	.word	0x003d0900
 80050b4:	03d09000 	.word	0x03d09000
 80050b8:	007a1200 	.word	0x007a1200
 80050bc:	46000000 	.word	0x46000000
 80050c0:	4c742400 	.word	0x4c742400
 80050c4:	4af42400 	.word	0x4af42400
 80050c8:	4a742400 	.word	0x4a742400

080050cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80050d0:	f7ff fed0 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 80050d4:	4602      	mov	r2, r0
 80050d6:	4b08      	ldr	r3, [pc, #32]	; (80050f8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80050d8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80050da:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80050de:	4907      	ldr	r1, [pc, #28]	; (80050fc <HAL_RCC_GetHCLKFreq+0x30>)
 80050e0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80050e2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80050e6:	fa22 f303 	lsr.w	r3, r2, r3
 80050ea:	4a05      	ldr	r2, [pc, #20]	; (8005100 <HAL_RCC_GetHCLKFreq+0x34>)
 80050ec:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80050ee:	4b04      	ldr	r3, [pc, #16]	; (8005100 <HAL_RCC_GetHCLKFreq+0x34>)
 80050f0:	681b      	ldr	r3, [r3, #0]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	44020c00 	.word	0x44020c00
 80050fc:	08020cc0 	.word	0x08020cc0
 8005100:	20000014 	.word	0x20000014

08005104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8005108:	f7ff ffe0 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 800510c:	4602      	mov	r2, r0
 800510e:	4b06      	ldr	r3, [pc, #24]	; (8005128 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	091b      	lsrs	r3, r3, #4
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	4904      	ldr	r1, [pc, #16]	; (800512c <HAL_RCC_GetPCLK1Freq+0x28>)
 800511a:	5ccb      	ldrb	r3, [r1, r3]
 800511c:	f003 031f 	and.w	r3, r3, #31
 8005120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005124:	4618      	mov	r0, r3
 8005126:	bd80      	pop	{r7, pc}
 8005128:	44020c00 	.word	0x44020c00
 800512c:	08020cd0 	.word	0x08020cd0

08005130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8005134:	f7ff ffca 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 8005138:	4602      	mov	r2, r0
 800513a:	4b06      	ldr	r3, [pc, #24]	; (8005154 <HAL_RCC_GetPCLK2Freq+0x24>)
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	0a1b      	lsrs	r3, r3, #8
 8005140:	f003 0307 	and.w	r3, r3, #7
 8005144:	4904      	ldr	r1, [pc, #16]	; (8005158 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005146:	5ccb      	ldrb	r3, [r1, r3]
 8005148:	f003 031f 	and.w	r3, r3, #31
 800514c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005150:	4618      	mov	r0, r3
 8005152:	bd80      	pop	{r7, pc}
 8005154:	44020c00 	.word	0x44020c00
 8005158:	08020cd0 	.word	0x08020cd0

0800515c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8005160:	f7ff ffb4 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 8005164:	4602      	mov	r2, r0
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	0b1b      	lsrs	r3, r3, #12
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	4904      	ldr	r1, [pc, #16]	; (8005184 <HAL_RCC_GetPCLK3Freq+0x28>)
 8005172:	5ccb      	ldrb	r3, [r1, r3]
 8005174:	f003 031f 	and.w	r3, r3, #31
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800517c:	4618      	mov	r0, r3
 800517e:	bd80      	pop	{r7, pc}
 8005180:	44020c00 	.word	0x44020c00
 8005184:	08020cd0 	.word	0x08020cd0

08005188 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	221f      	movs	r2, #31
 8005196:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8005198:	4b15      	ldr	r3, [pc, #84]	; (80051f0 <HAL_RCC_GetClockConfig+0x68>)
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f003 0203 	and.w	r2, r3, #3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 80051a4:	4b12      	ldr	r3, [pc, #72]	; (80051f0 <HAL_RCC_GetClockConfig+0x68>)
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f003 020f 	and.w	r2, r3, #15
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	091b      	lsrs	r3, r3, #4
 80051c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	0a1b      	lsrs	r3, r3, #8
 80051ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80051d6:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <HAL_RCC_GetClockConfig+0x6c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 020f 	and.w	r2, r3, #15
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	601a      	str	r2, [r3, #0]
}
 80051e2:	bf00      	nop
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	44020c00 	.word	0x44020c00
 80051f4:	40022000 	.word	0x40022000

080051f8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80051f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051fc:	b0d8      	sub	sp, #352	; 0x160
 80051fe:	af00      	add	r7, sp, #0
 8005200:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005204:	2300      	movs	r3, #0
 8005206:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800520a:	2300      	movs	r3, #0
 800520c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005210:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 800521c:	2500      	movs	r5, #0
 800521e:	ea54 0305 	orrs.w	r3, r4, r5
 8005222:	d00b      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8005224:	4bcd      	ldr	r3, [pc, #820]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800522a:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 800522e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005234:	4ac9      	ldr	r2, [pc, #804]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005236:	430b      	orrs	r3, r1
 8005238:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800523c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	f002 0801 	and.w	r8, r2, #1
 8005248:	f04f 0900 	mov.w	r9, #0
 800524c:	ea58 0309 	orrs.w	r3, r8, r9
 8005250:	d042      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8005252:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005258:	2b05      	cmp	r3, #5
 800525a:	d823      	bhi.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800525c:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	080052ad 	.word	0x080052ad
 8005268:	0800527d 	.word	0x0800527d
 800526c:	08005291 	.word	0x08005291
 8005270:	080052ad 	.word	0x080052ad
 8005274:	080052ad 	.word	0x080052ad
 8005278:	080052ad 	.word	0x080052ad
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800527c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005280:	3308      	adds	r3, #8
 8005282:	4618      	mov	r0, r3
 8005284:	f004 feda 	bl	800a03c <RCCEx_PLL2_Config>
 8005288:	4603      	mov	r3, r0
 800528a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800528e:	e00e      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005290:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005294:	3330      	adds	r3, #48	; 0x30
 8005296:	4618      	mov	r0, r3
 8005298:	f004 ff68 	bl	800a16c <RCCEx_PLL3_Config>
 800529c:	4603      	mov	r3, r0
 800529e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80052a2:	e004      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80052aa:	e000      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80052ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10c      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80052b6:	4ba9      	ldr	r3, [pc, #676]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80052b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80052bc:	f023 0107 	bic.w	r1, r3, #7
 80052c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c6:	4aa5      	ldr	r2, [pc, #660]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80052c8:	430b      	orrs	r3, r1
 80052ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80052ce:	e003      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80052d4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	f002 0a02 	and.w	sl, r2, #2
 80052e4:	f04f 0b00 	mov.w	fp, #0
 80052e8:	ea5a 030b 	orrs.w	r3, sl, fp
 80052ec:	f000 8088 	beq.w	8005400 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80052f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f6:	2b28      	cmp	r3, #40	; 0x28
 80052f8:	d868      	bhi.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80052fa:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80052fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005300:	080053d5 	.word	0x080053d5
 8005304:	080053cd 	.word	0x080053cd
 8005308:	080053cd 	.word	0x080053cd
 800530c:	080053cd 	.word	0x080053cd
 8005310:	080053cd 	.word	0x080053cd
 8005314:	080053cd 	.word	0x080053cd
 8005318:	080053cd 	.word	0x080053cd
 800531c:	080053cd 	.word	0x080053cd
 8005320:	080053a5 	.word	0x080053a5
 8005324:	080053cd 	.word	0x080053cd
 8005328:	080053cd 	.word	0x080053cd
 800532c:	080053cd 	.word	0x080053cd
 8005330:	080053cd 	.word	0x080053cd
 8005334:	080053cd 	.word	0x080053cd
 8005338:	080053cd 	.word	0x080053cd
 800533c:	080053cd 	.word	0x080053cd
 8005340:	080053b9 	.word	0x080053b9
 8005344:	080053cd 	.word	0x080053cd
 8005348:	080053cd 	.word	0x080053cd
 800534c:	080053cd 	.word	0x080053cd
 8005350:	080053cd 	.word	0x080053cd
 8005354:	080053cd 	.word	0x080053cd
 8005358:	080053cd 	.word	0x080053cd
 800535c:	080053cd 	.word	0x080053cd
 8005360:	080053d5 	.word	0x080053d5
 8005364:	080053cd 	.word	0x080053cd
 8005368:	080053cd 	.word	0x080053cd
 800536c:	080053cd 	.word	0x080053cd
 8005370:	080053cd 	.word	0x080053cd
 8005374:	080053cd 	.word	0x080053cd
 8005378:	080053cd 	.word	0x080053cd
 800537c:	080053cd 	.word	0x080053cd
 8005380:	080053d5 	.word	0x080053d5
 8005384:	080053cd 	.word	0x080053cd
 8005388:	080053cd 	.word	0x080053cd
 800538c:	080053cd 	.word	0x080053cd
 8005390:	080053cd 	.word	0x080053cd
 8005394:	080053cd 	.word	0x080053cd
 8005398:	080053cd 	.word	0x080053cd
 800539c:	080053cd 	.word	0x080053cd
 80053a0:	080053d5 	.word	0x080053d5
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053a8:	3308      	adds	r3, #8
 80053aa:	4618      	mov	r0, r3
 80053ac:	f004 fe46 	bl	800a03c <RCCEx_PLL2_Config>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80053b6:	e00e      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053bc:	3330      	adds	r3, #48	; 0x30
 80053be:	4618      	mov	r0, r3
 80053c0:	f004 fed4 	bl	800a16c <RCCEx_PLL3_Config>
 80053c4:	4603      	mov	r3, r0
 80053c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80053ca:	e004      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80053d2:	e000      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80053d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10c      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80053de:	4b5f      	ldr	r3, [pc, #380]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80053e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80053e4:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80053e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ee:	4a5b      	ldr	r2, [pc, #364]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80053f0:	430b      	orrs	r3, r1
 80053f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80053f6:	e003      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053fc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005400:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	f002 0304 	and.w	r3, r2, #4
 800540c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8005410:	2300      	movs	r3, #0
 8005412:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005416:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800541a:	460b      	mov	r3, r1
 800541c:	4313      	orrs	r3, r2
 800541e:	d04e      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8005420:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005426:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800542a:	d02c      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800542c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005430:	d825      	bhi.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005436:	d028      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800543c:	d81f      	bhi.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800543e:	2bc0      	cmp	r3, #192	; 0xc0
 8005440:	d025      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005442:	2bc0      	cmp	r3, #192	; 0xc0
 8005444:	d81b      	bhi.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005446:	2b80      	cmp	r3, #128	; 0x80
 8005448:	d00f      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x272>
 800544a:	2b80      	cmp	r3, #128	; 0x80
 800544c:	d817      	bhi.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01f      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8005452:	2b40      	cmp	r3, #64	; 0x40
 8005454:	d113      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005456:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800545a:	3308      	adds	r3, #8
 800545c:	4618      	mov	r0, r3
 800545e:	f004 fded 	bl	800a03c <RCCEx_PLL2_Config>
 8005462:	4603      	mov	r3, r0
 8005464:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005468:	e014      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800546a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800546e:	3330      	adds	r3, #48	; 0x30
 8005470:	4618      	mov	r0, r3
 8005472:	f004 fe7b 	bl	800a16c <RCCEx_PLL3_Config>
 8005476:	4603      	mov	r3, r0
 8005478:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800547c:	e00a      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005484:	e006      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005486:	bf00      	nop
 8005488:	e004      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800548a:	bf00      	nop
 800548c:	e002      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800548e:	bf00      	nop
 8005490:	e000      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005494:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10c      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800549c:	4b2f      	ldr	r3, [pc, #188]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800549e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054a2:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80054a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ac:	4a2b      	ldr	r2, [pc, #172]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80054ae:	430b      	orrs	r3, r1
 80054b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80054b4:	e003      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80054ba:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c6:	f002 0308 	and.w	r3, r2, #8
 80054ca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80054ce:	2300      	movs	r3, #0
 80054d0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80054d4:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 80054d8:	460b      	mov	r3, r1
 80054da:	4313      	orrs	r3, r2
 80054dc:	d056      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80054de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054e4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80054e8:	d031      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x356>
 80054ea:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80054ee:	d82a      	bhi.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80054f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f4:	d02d      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80054f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054fa:	d824      	bhi.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80054fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005500:	d029      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005502:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005506:	d81e      	bhi.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550c:	d011      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800550e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005512:	d818      	bhi.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005514:	2b00      	cmp	r3, #0
 8005516:	d023      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800551c:	d113      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800551e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005522:	3308      	adds	r3, #8
 8005524:	4618      	mov	r0, r3
 8005526:	f004 fd89 	bl	800a03c <RCCEx_PLL2_Config>
 800552a:	4603      	mov	r3, r0
 800552c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005530:	e017      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005532:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005536:	3330      	adds	r3, #48	; 0x30
 8005538:	4618      	mov	r0, r3
 800553a:	f004 fe17 	bl	800a16c <RCCEx_PLL3_Config>
 800553e:	4603      	mov	r3, r0
 8005540:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005544:	e00d      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800554c:	e009      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800554e:	bf00      	nop
 8005550:	e007      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005552:	bf00      	nop
 8005554:	e005      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005556:	bf00      	nop
 8005558:	e003      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800555a:	bf00      	nop
 800555c:	44020c00 	.word	0x44020c00
        break;
 8005560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005562:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10c      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800556a:	4bbb      	ldr	r3, [pc, #748]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800556c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005570:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005574:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800557a:	4ab7      	ldr	r2, [pc, #732]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800557c:	430b      	orrs	r3, r1
 800557e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005582:	e003      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005584:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005588:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800558c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005594:	f002 0310 	and.w	r3, r2, #16
 8005598:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800559c:	2300      	movs	r3, #0
 800559e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80055a2:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 80055a6:	460b      	mov	r3, r1
 80055a8:	4313      	orrs	r3, r2
 80055aa:	d053      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80055ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055b2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80055b6:	d031      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x424>
 80055b8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80055bc:	d82a      	bhi.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80055be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055c2:	d02d      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80055c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055c8:	d824      	bhi.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80055ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055ce:	d029      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80055d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055d4:	d81e      	bhi.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80055d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055da:	d011      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80055dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e0:	d818      	bhi.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d020      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80055e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ea:	d113      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055f0:	3308      	adds	r3, #8
 80055f2:	4618      	mov	r0, r3
 80055f4:	f004 fd22 	bl	800a03c <RCCEx_PLL2_Config>
 80055f8:	4603      	mov	r3, r0
 80055fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80055fe:	e014      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005600:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005604:	3330      	adds	r3, #48	; 0x30
 8005606:	4618      	mov	r0, r3
 8005608:	f004 fdb0 	bl	800a16c <RCCEx_PLL3_Config>
 800560c:	4603      	mov	r3, r0
 800560e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8005612:	e00a      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800561a:	e006      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800561c:	bf00      	nop
 800561e:	e004      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005620:	bf00      	nop
 8005622:	e002      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005624:	bf00      	nop
 8005626:	e000      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800562a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10c      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005632:	4b89      	ldr	r3, [pc, #548]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005634:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005638:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800563c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005642:	4a85      	ldr	r2, [pc, #532]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005644:	430b      	orrs	r3, r1
 8005646:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800564a:	e003      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005650:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005654:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	f002 0320 	and.w	r3, r2, #32
 8005660:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005664:	2300      	movs	r3, #0
 8005666:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800566a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 800566e:	460b      	mov	r3, r1
 8005670:	4313      	orrs	r3, r2
 8005672:	d053      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8005674:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800567e:	d031      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8005680:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005684:	d82a      	bhi.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005686:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800568a:	d02d      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800568c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005690:	d824      	bhi.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005692:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005696:	d029      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005698:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800569c:	d81e      	bhi.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800569e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a2:	d011      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80056a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a8:	d818      	bhi.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d020      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80056ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056b2:	d113      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056b8:	3308      	adds	r3, #8
 80056ba:	4618      	mov	r0, r3
 80056bc:	f004 fcbe 	bl	800a03c <RCCEx_PLL2_Config>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80056c6:	e014      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056cc:	3330      	adds	r3, #48	; 0x30
 80056ce:	4618      	mov	r0, r3
 80056d0:	f004 fd4c 	bl	800a16c <RCCEx_PLL3_Config>
 80056d4:	4603      	mov	r3, r0
 80056d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80056da:	e00a      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80056e2:	e006      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80056e4:	bf00      	nop
 80056e6:	e004      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80056e8:	bf00      	nop
 80056ea:	e002      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80056ec:	bf00      	nop
 80056ee:	e000      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80056f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10c      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80056fa:	4b57      	ldr	r3, [pc, #348]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80056fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005700:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8005704:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	4a53      	ldr	r2, [pc, #332]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800570c:	430b      	orrs	r3, r1
 800570e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005712:	e003      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005714:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005718:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800571c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005728:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800572c:	2300      	movs	r3, #0
 800572e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005732:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8005736:	460b      	mov	r3, r1
 8005738:	4313      	orrs	r3, r2
 800573a:	d053      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800573c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005742:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005746:	d031      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005748:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800574c:	d82a      	bhi.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800574e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005752:	d02d      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8005754:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005758:	d824      	bhi.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800575a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800575e:	d029      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005760:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005764:	d81e      	bhi.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005766:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800576a:	d011      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800576c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005770:	d818      	bhi.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d020      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005776:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800577a:	d113      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800577c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005780:	3308      	adds	r3, #8
 8005782:	4618      	mov	r0, r3
 8005784:	f004 fc5a 	bl	800a03c <RCCEx_PLL2_Config>
 8005788:	4603      	mov	r3, r0
 800578a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800578e:	e014      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005790:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005794:	3330      	adds	r3, #48	; 0x30
 8005796:	4618      	mov	r0, r3
 8005798:	f004 fce8 	bl	800a16c <RCCEx_PLL3_Config>
 800579c:	4603      	mov	r3, r0
 800579e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80057a2:	e00a      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80057aa:	e006      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80057ac:	bf00      	nop
 80057ae:	e004      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80057b0:	bf00      	nop
 80057b2:	e002      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80057b4:	bf00      	nop
 80057b6:	e000      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80057b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10c      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80057c2:	4b25      	ldr	r3, [pc, #148]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80057c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80057c8:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 80057cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d2:	4a21      	ldr	r2, [pc, #132]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80057d4:	430b      	orrs	r3, r1
 80057d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80057da:	e003      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057dc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057e0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80057e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ec:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80057f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80057f4:	2300      	movs	r3, #0
 80057f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80057fa:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 80057fe:	460b      	mov	r3, r1
 8005800:	4313      	orrs	r3, r2
 8005802:	d055      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8005804:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800580a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800580e:	d033      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8005810:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005814:	d82c      	bhi.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005816:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800581a:	d02f      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x684>
 800581c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005820:	d826      	bhi.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005822:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005826:	d02b      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005828:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800582c:	d820      	bhi.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800582e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005832:	d013      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005838:	d81a      	bhi.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800583a:	2b00      	cmp	r3, #0
 800583c:	d022      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800583e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005842:	d115      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005844:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005848:	3308      	adds	r3, #8
 800584a:	4618      	mov	r0, r3
 800584c:	f004 fbf6 	bl	800a03c <RCCEx_PLL2_Config>
 8005850:	4603      	mov	r3, r0
 8005852:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005856:	e016      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005858:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800585c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005860:	3330      	adds	r3, #48	; 0x30
 8005862:	4618      	mov	r0, r3
 8005864:	f004 fc82 	bl	800a16c <RCCEx_PLL3_Config>
 8005868:	4603      	mov	r3, r0
 800586a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800586e:	e00a      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005876:	e006      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005878:	bf00      	nop
 800587a:	e004      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800587c:	bf00      	nop
 800587e:	e002      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005880:	bf00      	nop
 8005882:	e000      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005886:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10c      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800588e:	4bbb      	ldr	r3, [pc, #748]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005890:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005894:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005898:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800589c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800589e:	4ab7      	ldr	r2, [pc, #732]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80058a0:	430b      	orrs	r3, r1
 80058a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80058a6:	e003      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80058ac:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80058b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80058bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80058c0:	2300      	movs	r3, #0
 80058c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80058c6:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80058ca:	460b      	mov	r3, r1
 80058cc:	4313      	orrs	r3, r2
 80058ce:	d053      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80058d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058d6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80058da:	d031      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80058dc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80058e0:	d82a      	bhi.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80058e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058e6:	d02d      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80058e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058ec:	d824      	bhi.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80058ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058f2:	d029      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80058f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058f8:	d81e      	bhi.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80058fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058fe:	d011      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8005900:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005904:	d818      	bhi.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d020      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x754>
 800590a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800590e:	d113      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005910:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005914:	3308      	adds	r3, #8
 8005916:	4618      	mov	r0, r3
 8005918:	f004 fb90 	bl	800a03c <RCCEx_PLL2_Config>
 800591c:	4603      	mov	r3, r0
 800591e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005922:	e014      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005924:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005928:	3330      	adds	r3, #48	; 0x30
 800592a:	4618      	mov	r0, r3
 800592c:	f004 fc1e 	bl	800a16c <RCCEx_PLL3_Config>
 8005930:	4603      	mov	r3, r0
 8005932:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005936:	e00a      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800593e:	e006      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005940:	bf00      	nop
 8005942:	e004      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005944:	bf00      	nop
 8005946:	e002      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005948:	bf00      	nop
 800594a:	e000      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800594c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800594e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10c      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8005956:	4b89      	ldr	r3, [pc, #548]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005958:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800595c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005960:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005966:	4a85      	ldr	r2, [pc, #532]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005968:	430b      	orrs	r3, r1
 800596a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800596e:	e003      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005970:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005974:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8005978:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800597c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005980:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8005984:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005988:	2300      	movs	r3, #0
 800598a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800598e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005992:	460b      	mov	r3, r1
 8005994:	4313      	orrs	r3, r2
 8005996:	d055      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8005998:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800599c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059a0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80059a4:	d031      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x812>
 80059a6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80059aa:	d82a      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80059ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059b0:	d02d      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x816>
 80059b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059b6:	d824      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80059b8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80059bc:	d029      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80059be:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80059c2:	d81e      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80059c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059c8:	d011      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80059ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059ce:	d818      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d020      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80059d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059d8:	d113      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059de:	3308      	adds	r3, #8
 80059e0:	4618      	mov	r0, r3
 80059e2:	f004 fb2b 	bl	800a03c <RCCEx_PLL2_Config>
 80059e6:	4603      	mov	r3, r0
 80059e8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80059ec:	e014      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059f2:	3330      	adds	r3, #48	; 0x30
 80059f4:	4618      	mov	r0, r3
 80059f6:	f004 fbb9 	bl	800a16c <RCCEx_PLL3_Config>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005a00:	e00a      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005a08:	e006      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005a0a:	bf00      	nop
 8005a0c:	e004      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005a0e:	bf00      	nop
 8005a10:	e002      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005a12:	bf00      	nop
 8005a14:	e000      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a18:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10d      	bne.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8005a20:	4b56      	ldr	r3, [pc, #344]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005a22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005a26:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8005a2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a32:	4a52      	ldr	r2, [pc, #328]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005a34:	430b      	orrs	r3, r1
 8005a36:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005a3a:	e003      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a3c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a40:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8005a44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005a50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a54:	2300      	movs	r3, #0
 8005a56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a5a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4313      	orrs	r3, r2
 8005a62:	d044      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8005a64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a6c:	2b05      	cmp	r3, #5
 8005a6e:	d823      	bhi.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005a70:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8005a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a76:	bf00      	nop
 8005a78:	08005ac1 	.word	0x08005ac1
 8005a7c:	08005a91 	.word	0x08005a91
 8005a80:	08005aa5 	.word	0x08005aa5
 8005a84:	08005ac1 	.word	0x08005ac1
 8005a88:	08005ac1 	.word	0x08005ac1
 8005a8c:	08005ac1 	.word	0x08005ac1
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a94:	3308      	adds	r3, #8
 8005a96:	4618      	mov	r0, r3
 8005a98:	f004 fad0 	bl	800a03c <RCCEx_PLL2_Config>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005aa2:	e00e      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005aa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005aa8:	3330      	adds	r3, #48	; 0x30
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f004 fb5e 	bl	800a16c <RCCEx_PLL3_Config>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005ab6:	e004      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005abe:	e000      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8005ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ac2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10d      	bne.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8005aca:	4b2c      	ldr	r3, [pc, #176]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005acc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005ad0:	f023 0107 	bic.w	r1, r3, #7
 8005ad4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005adc:	4a27      	ldr	r2, [pc, #156]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005ade:	430b      	orrs	r3, r1
 8005ae0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005ae4:	e003      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005aea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8005aee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005afa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005afe:	2300      	movs	r3, #0
 8005b00:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b04:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	d04f      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8005b0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b16:	2b50      	cmp	r3, #80	; 0x50
 8005b18:	d029      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005b1a:	2b50      	cmp	r3, #80	; 0x50
 8005b1c:	d823      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005b1e:	2b40      	cmp	r3, #64	; 0x40
 8005b20:	d027      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8005b22:	2b40      	cmp	r3, #64	; 0x40
 8005b24:	d81f      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005b26:	2b30      	cmp	r3, #48	; 0x30
 8005b28:	d025      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8005b2a:	2b30      	cmp	r3, #48	; 0x30
 8005b2c:	d81b      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005b2e:	2b20      	cmp	r3, #32
 8005b30:	d00f      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	d817      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d022      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005b3a:	2b10      	cmp	r3, #16
 8005b3c:	d113      	bne.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b42:	3308      	adds	r3, #8
 8005b44:	4618      	mov	r0, r3
 8005b46:	f004 fa79 	bl	800a03c <RCCEx_PLL2_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005b50:	e017      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b56:	3330      	adds	r3, #48	; 0x30
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f004 fb07 	bl	800a16c <RCCEx_PLL3_Config>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005b64:	e00d      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005b6c:	e009      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005b6e:	bf00      	nop
 8005b70:	e007      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005b72:	bf00      	nop
 8005b74:	e005      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005b76:	bf00      	nop
 8005b78:	e003      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8005b7a:	bf00      	nop
 8005b7c:	44020c00 	.word	0x44020c00
        break;
 8005b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b82:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10d      	bne.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8005b8a:	4baf      	ldr	r3, [pc, #700]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005b8c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005b90:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005b94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9c:	4aaa      	ldr	r2, [pc, #680]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005b9e:	430b      	orrs	r3, r1
 8005ba0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005ba4:	e003      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005baa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005bba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005bc4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	d055      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8005bce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005bda:	d031      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8005bdc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005be0:	d82a      	bhi.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005be2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005be6:	d02d      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005be8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bec:	d824      	bhi.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005bee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005bf2:	d029      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005bf4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005bf8:	d81e      	bhi.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005bfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bfe:	d011      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8005c00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c04:	d818      	bhi.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d020      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8005c0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c0e:	d113      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c14:	3308      	adds	r3, #8
 8005c16:	4618      	mov	r0, r3
 8005c18:	f004 fa10 	bl	800a03c <RCCEx_PLL2_Config>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005c22:	e014      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c28:	3330      	adds	r3, #48	; 0x30
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f004 fa9e 	bl	800a16c <RCCEx_PLL3_Config>
 8005c30:	4603      	mov	r3, r0
 8005c32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005c36:	e00a      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005c3e:	e006      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005c40:	bf00      	nop
 8005c42:	e004      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005c44:	bf00      	nop
 8005c46:	e002      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005c48:	bf00      	nop
 8005c4a:	e000      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c4e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10d      	bne.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005c56:	4b7c      	ldr	r3, [pc, #496]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c5c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005c60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c68:	4a77      	ldr	r2, [pc, #476]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005c6a:	430b      	orrs	r3, r1
 8005c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c70:	e003      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c76:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c82:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005c86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c90:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005c94:	460b      	mov	r3, r1
 8005c96:	4313      	orrs	r3, r2
 8005c98:	d03d      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8005c9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ca6:	d01b      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8005ca8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cac:	d814      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005cae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cb2:	d017      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8005cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cb8:	d80e      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d014      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8005cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc2:	d109      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cc8:	3330      	adds	r3, #48	; 0x30
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f004 fa4e 	bl	800a16c <RCCEx_PLL3_Config>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8005cd6:	e008      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005cde:	e004      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005ce0:	bf00      	nop
 8005ce2:	e002      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005ce4:	bf00      	nop
 8005ce6:	e000      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10d      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005cf2:	4b55      	ldr	r3, [pc, #340]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005cf4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005cf8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005cfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d04:	4a50      	ldr	r2, [pc, #320]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005d06:	430b      	orrs	r3, r1
 8005d08:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005d0c:	e003      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d12:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005d22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d26:	2300      	movs	r3, #0
 8005d28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d2c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005d30:	460b      	mov	r3, r1
 8005d32:	4313      	orrs	r3, r2
 8005d34:	d03d      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005d36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d42:	d01b      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8005d44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d48:	d814      	bhi.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005d4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d4e:	d017      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8005d50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d54:	d80e      	bhi.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d014      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8005d5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d5e:	d109      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d64:	3330      	adds	r3, #48	; 0x30
 8005d66:	4618      	mov	r0, r3
 8005d68:	f004 fa00 	bl	800a16c <RCCEx_PLL3_Config>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005d72:	e008      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005d7a:	e004      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005d7c:	bf00      	nop
 8005d7e:	e002      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005d80:	bf00      	nop
 8005d82:	e000      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d86:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10d      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005d8e:	4b2e      	ldr	r3, [pc, #184]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005d90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005d94:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8005d98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005da0:	4a29      	ldr	r2, [pc, #164]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005da2:	430b      	orrs	r3, r1
 8005da4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005da8:	e003      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005daa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005dae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005db2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005dc8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	d040      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8005dd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dde:	d01b      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8005de0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005de4:	d814      	bhi.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005de6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dea:	d017      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005dec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005df0:	d80e      	bhi.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d014      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dfa:	d109      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005dfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e00:	3330      	adds	r3, #48	; 0x30
 8005e02:	4618      	mov	r0, r3
 8005e04:	f004 f9b2 	bl	800a16c <RCCEx_PLL3_Config>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8005e0e:	e008      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005e16:	e004      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005e18:	bf00      	nop
 8005e1a:	e002      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005e1c:	bf00      	nop
 8005e1e:	e000      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d110      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005e2a:	4b07      	ldr	r3, [pc, #28]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005e2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e30:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005e34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e3c:	4a02      	ldr	r2, [pc, #8]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005e3e:	430b      	orrs	r3, r1
 8005e40:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005e44:	e006      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8005e46:	bf00      	nop
 8005e48:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e50:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005e6a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4313      	orrs	r3, r2
 8005e72:	d03d      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8005e74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e80:	d01b      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005e82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e86:	d814      	bhi.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005e88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e8c:	d017      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8005e8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e92:	d80e      	bhi.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d014      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8005e98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e9c:	d109      	bne.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ea2:	3330      	adds	r3, #48	; 0x30
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f004 f961 	bl	800a16c <RCCEx_PLL3_Config>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8005eb0:	e008      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005eb8:	e004      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005eba:	bf00      	nop
 8005ebc:	e002      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005ebe:	bf00      	nop
 8005ec0:	e000      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10d      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005ecc:	4bbe      	ldr	r3, [pc, #760]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005ece:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005ed2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005ed6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ede:	4aba      	ldr	r2, [pc, #744]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005ee0:	430b      	orrs	r3, r1
 8005ee2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005ee6:	e003      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005eec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005ef0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005efc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f00:	2300      	movs	r3, #0
 8005f02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	d035      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f1c:	d015      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8005f1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f22:	d80e      	bhi.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d012      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8005f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f2c:	d109      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f32:	3330      	adds	r3, #48	; 0x30
 8005f34:	4618      	mov	r0, r3
 8005f36:	f004 f919 	bl	800a16c <RCCEx_PLL3_Config>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005f40:	e006      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005f48:	e002      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005f4a:	bf00      	nop
 8005f4c:	e000      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f50:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10d      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005f58:	4b9b      	ldr	r3, [pc, #620]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005f5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f5e:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8005f62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f6a:	4a97      	ldr	r2, [pc, #604]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005f6c:	430b      	orrs	r3, r1
 8005f6e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005f72:	e003      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f74:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f78:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	2100      	movs	r1, #0
 8005f86:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8005f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f92:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	d00e      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005f9c:	4b8a      	ldr	r3, [pc, #552]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	4a89      	ldr	r2, [pc, #548]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005fa2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fa6:	61d3      	str	r3, [r2, #28]
 8005fa8:	4b87      	ldr	r3, [pc, #540]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005faa:	69d9      	ldr	r1, [r3, #28]
 8005fac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fb0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005fb4:	4a84      	ldr	r2, [pc, #528]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005fb6:	430b      	orrs	r3, r1
 8005fb8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005fba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005fc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005fd0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	d055      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005fda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005fe2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005fe6:	d031      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8005fe8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005fec:	d82a      	bhi.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff2:	d02d      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff8:	d824      	bhi.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005ffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ffe:	d029      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006004:	d81e      	bhi.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800600a:	d011      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 800600c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006010:	d818      	bhi.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006012:	2b00      	cmp	r3, #0
 8006014:	d020      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800601a:	d113      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800601c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006020:	3308      	adds	r3, #8
 8006022:	4618      	mov	r0, r3
 8006024:	f004 f80a 	bl	800a03c <RCCEx_PLL2_Config>
 8006028:	4603      	mov	r3, r0
 800602a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800602e:	e014      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006030:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006034:	3330      	adds	r3, #48	; 0x30
 8006036:	4618      	mov	r0, r3
 8006038:	f004 f898 	bl	800a16c <RCCEx_PLL3_Config>
 800603c:	4603      	mov	r3, r0
 800603e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006042:	e00a      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800604a:	e006      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800604c:	bf00      	nop
 800604e:	e004      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006050:	bf00      	nop
 8006052:	e002      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006054:	bf00      	nop
 8006056:	e000      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800605a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10d      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006062:	4b59      	ldr	r3, [pc, #356]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006064:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006068:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800606c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006070:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006074:	4a54      	ldr	r2, [pc, #336]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006076:	430b      	orrs	r3, r1
 8006078:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800607c:	e003      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800607e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006082:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006086:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006092:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006096:	2300      	movs	r3, #0
 8006098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800609c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80060a0:	460b      	mov	r3, r1
 80060a2:	4313      	orrs	r3, r2
 80060a4:	d055      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80060a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060ae:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80060b2:	d031      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80060b4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80060b8:	d82a      	bhi.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80060ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060be:	d02d      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80060c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060c4:	d824      	bhi.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80060c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060ca:	d029      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80060cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060d0:	d81e      	bhi.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80060d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060d6:	d011      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80060d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060dc:	d818      	bhi.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d020      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80060e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e6:	d113      	bne.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060ec:	3308      	adds	r3, #8
 80060ee:	4618      	mov	r0, r3
 80060f0:	f003 ffa4 	bl	800a03c <RCCEx_PLL2_Config>
 80060f4:	4603      	mov	r3, r0
 80060f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80060fa:	e014      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80060fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006100:	3330      	adds	r3, #48	; 0x30
 8006102:	4618      	mov	r0, r3
 8006104:	f004 f832 	bl	800a16c <RCCEx_PLL3_Config>
 8006108:	4603      	mov	r3, r0
 800610a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800610e:	e00a      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006116:	e006      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006118:	bf00      	nop
 800611a:	e004      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800611c:	bf00      	nop
 800611e:	e002      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006120:	bf00      	nop
 8006122:	e000      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006126:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10d      	bne.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800612e:	4b26      	ldr	r3, [pc, #152]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006130:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006134:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006138:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800613c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006140:	4a21      	ldr	r2, [pc, #132]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006142:	430b      	orrs	r3, r1
 8006144:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8006148:	e003      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800614a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800614e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8006152:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	2100      	movs	r1, #0
 800615c:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006168:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800616c:	460b      	mov	r3, r1
 800616e:	4313      	orrs	r3, r2
 8006170:	d057      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8006172:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006176:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800617a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800617e:	d033      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8006180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006184:	d82c      	bhi.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006186:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800618a:	d02f      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800618c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006190:	d826      	bhi.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006192:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006196:	d02b      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8006198:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800619c:	d820      	bhi.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800619e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061a2:	d013      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80061a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061a8:	d81a      	bhi.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d022      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80061ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b2:	d115      	bne.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061b8:	3308      	adds	r3, #8
 80061ba:	4618      	mov	r0, r3
 80061bc:	f003 ff3e 	bl	800a03c <RCCEx_PLL2_Config>
 80061c0:	4603      	mov	r3, r0
 80061c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80061c6:	e016      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80061c8:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061d0:	3330      	adds	r3, #48	; 0x30
 80061d2:	4618      	mov	r0, r3
 80061d4:	f003 ffca 	bl	800a16c <RCCEx_PLL3_Config>
 80061d8:	4603      	mov	r3, r0
 80061da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80061de:	e00a      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80061e6:	e006      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80061e8:	bf00      	nop
 80061ea:	e004      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80061ec:	bf00      	nop
 80061ee:	e002      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80061f0:	bf00      	nop
 80061f2:	e000      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80061f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061f6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10d      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80061fe:	4bbb      	ldr	r3, [pc, #748]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006200:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006204:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006208:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800620c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006210:	4ab6      	ldr	r2, [pc, #728]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006212:	430b      	orrs	r3, r1
 8006214:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8006218:	e003      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800621e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8006222:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	2100      	movs	r1, #0
 800622c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8006230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006238:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800623c:	460b      	mov	r3, r1
 800623e:	4313      	orrs	r3, r2
 8006240:	d055      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8006242:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006246:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800624a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800624e:	d031      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006250:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8006254:	d82a      	bhi.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800625a:	d02d      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800625c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006260:	d824      	bhi.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006262:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006266:	d029      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8006268:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800626c:	d81e      	bhi.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800626e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006272:	d011      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8006274:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006278:	d818      	bhi.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800627a:	2b00      	cmp	r3, #0
 800627c:	d020      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800627e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006282:	d113      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006284:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006288:	3308      	adds	r3, #8
 800628a:	4618      	mov	r0, r3
 800628c:	f003 fed6 	bl	800a03c <RCCEx_PLL2_Config>
 8006290:	4603      	mov	r3, r0
 8006292:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8006296:	e014      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006298:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800629c:	3330      	adds	r3, #48	; 0x30
 800629e:	4618      	mov	r0, r3
 80062a0:	f003 ff64 	bl	800a16c <RCCEx_PLL3_Config>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80062aa:	e00a      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80062b2:	e006      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80062b4:	bf00      	nop
 80062b6:	e004      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80062b8:	bf00      	nop
 80062ba:	e002      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80062bc:	bf00      	nop
 80062be:	e000      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80062c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062c2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10d      	bne.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80062ca:	4b88      	ldr	r3, [pc, #544]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80062cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80062d0:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 80062d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80062d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062dc:	4a83      	ldr	r2, [pc, #524]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80062de:	430b      	orrs	r3, r1
 80062e0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80062e4:	e003      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80062ea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80062ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80062f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f6:	2100      	movs	r1, #0
 80062f8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80062fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006300:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006304:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006308:	460b      	mov	r3, r1
 800630a:	4313      	orrs	r3, r2
 800630c:	d055      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800630e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006312:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006316:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800631a:	d031      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800631c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006320:	d82a      	bhi.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006322:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006326:	d02d      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8006328:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800632c:	d824      	bhi.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800632e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006332:	d029      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8006334:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006338:	d81e      	bhi.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800633a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800633e:	d011      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8006340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006344:	d818      	bhi.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006346:	2b00      	cmp	r3, #0
 8006348:	d020      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800634a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800634e:	d113      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006350:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006354:	3308      	adds	r3, #8
 8006356:	4618      	mov	r0, r3
 8006358:	f003 fe70 	bl	800a03c <RCCEx_PLL2_Config>
 800635c:	4603      	mov	r3, r0
 800635e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8006362:	e014      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006364:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006368:	3330      	adds	r3, #48	; 0x30
 800636a:	4618      	mov	r0, r3
 800636c:	f003 fefe 	bl	800a16c <RCCEx_PLL3_Config>
 8006370:	4603      	mov	r3, r0
 8006372:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8006376:	e00a      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800637e:	e006      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006380:	bf00      	nop
 8006382:	e004      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006384:	bf00      	nop
 8006386:	e002      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006388:	bf00      	nop
 800638a:	e000      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800638c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800638e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10d      	bne.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8006396:	4b55      	ldr	r3, [pc, #340]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006398:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800639c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80063a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80063a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80063a8:	4a50      	ldr	r2, [pc, #320]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80063aa:	430b      	orrs	r3, r1
 80063ac:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80063b0:	e003      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80063b6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80063ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80063be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c2:	2100      	movs	r1, #0
 80063c4:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80063c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80063d0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80063d4:	460b      	mov	r3, r1
 80063d6:	4313      	orrs	r3, r2
 80063d8:	d055      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80063da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80063de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80063e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063e6:	d031      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80063e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063ec:	d82a      	bhi.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80063ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f2:	d02d      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80063f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f8:	d824      	bhi.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80063fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063fe:	d029      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8006400:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006404:	d81e      	bhi.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800640a:	d011      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800640c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006410:	d818      	bhi.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006412:	2b00      	cmp	r3, #0
 8006414:	d020      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8006416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800641a:	d113      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800641c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006420:	3308      	adds	r3, #8
 8006422:	4618      	mov	r0, r3
 8006424:	f003 fe0a 	bl	800a03c <RCCEx_PLL2_Config>
 8006428:	4603      	mov	r3, r0
 800642a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800642e:	e014      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006430:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006434:	3330      	adds	r3, #48	; 0x30
 8006436:	4618      	mov	r0, r3
 8006438:	f003 fe98 	bl	800a16c <RCCEx_PLL3_Config>
 800643c:	4603      	mov	r3, r0
 800643e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006442:	e00a      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800644a:	e006      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800644c:	bf00      	nop
 800644e:	e004      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006450:	bf00      	nop
 8006452:	e002      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006454:	bf00      	nop
 8006456:	e000      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800645a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10d      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8006462:	4b22      	ldr	r3, [pc, #136]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006464:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006468:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800646c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006470:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006474:	4a1d      	ldr	r2, [pc, #116]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006476:	430b      	orrs	r3, r1
 8006478:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800647c:	e003      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006482:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006486:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006492:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006496:	2300      	movs	r3, #0
 8006498:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800649c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80064a0:	460b      	mov	r3, r1
 80064a2:	4313      	orrs	r3, r2
 80064a4:	d055      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80064a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80064aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80064ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064b2:	d035      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80064b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064b8:	d82e      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80064ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064be:	d031      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80064c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064c4:	d828      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80064c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064ca:	d01b      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80064cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064d0:	d822      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80064d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064da:	d009      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80064dc:	e01c      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064de:	4b03      	ldr	r3, [pc, #12]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80064e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e2:	4a02      	ldr	r2, [pc, #8]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80064e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064e8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80064ea:	e01c      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80064ec:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80064f4:	3308      	adds	r3, #8
 80064f6:	4618      	mov	r0, r3
 80064f8:	f003 fda0 	bl	800a03c <RCCEx_PLL2_Config>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006502:	e010      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006504:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006508:	3330      	adds	r3, #48	; 0x30
 800650a:	4618      	mov	r0, r3
 800650c:	f003 fe2e 	bl	800a16c <RCCEx_PLL3_Config>
 8006510:	4603      	mov	r3, r0
 8006512:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006516:	e006      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800651e:	e002      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006520:	bf00      	nop
 8006522:	e000      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006526:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10d      	bne.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800652e:	4bc3      	ldr	r3, [pc, #780]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006534:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006538:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800653c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006540:	4abe      	ldr	r2, [pc, #760]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006542:	430b      	orrs	r3, r1
 8006544:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006548:	e003      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800654e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8006552:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655a:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800655e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006562:	2300      	movs	r3, #0
 8006564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006568:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800656c:	460b      	mov	r3, r1
 800656e:	4313      	orrs	r3, r2
 8006570:	d051      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006572:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006576:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800657a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800657e:	d033      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006580:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006584:	d82c      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006586:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800658a:	d02d      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800658c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006590:	d826      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006596:	d019      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8006598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800659c:	d820      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80065a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80065a6:	d007      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80065a8:	e01a      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065aa:	4ba4      	ldr	r3, [pc, #656]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80065ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ae:	4aa3      	ldr	r2, [pc, #652]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80065b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065b4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80065b6:	e018      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80065b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80065bc:	3308      	adds	r3, #8
 80065be:	4618      	mov	r0, r3
 80065c0:	f003 fd3c 	bl	800a03c <RCCEx_PLL2_Config>
 80065c4:	4603      	mov	r3, r0
 80065c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80065ca:	e00e      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80065d0:	3330      	adds	r3, #48	; 0x30
 80065d2:	4618      	mov	r0, r3
 80065d4:	f003 fdca 	bl	800a16c <RCCEx_PLL3_Config>
 80065d8:	4603      	mov	r3, r0
 80065da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80065de:	e004      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80065e6:	e000      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80065e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10d      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80065f2:	4b92      	ldr	r3, [pc, #584]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80065f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065f8:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 80065fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006600:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006604:	4a8d      	ldr	r2, [pc, #564]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006606:	430b      	orrs	r3, r1
 8006608:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800660c:	e003      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006612:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006616:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006622:	67bb      	str	r3, [r7, #120]	; 0x78
 8006624:	2300      	movs	r3, #0
 8006626:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006628:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800662c:	460b      	mov	r3, r1
 800662e:	4313      	orrs	r3, r2
 8006630:	d032      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006632:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006636:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800663a:	2b05      	cmp	r3, #5
 800663c:	d80f      	bhi.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800663e:	2b03      	cmp	r3, #3
 8006640:	d211      	bcs.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8006642:	2b01      	cmp	r3, #1
 8006644:	d911      	bls.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8006646:	2b02      	cmp	r3, #2
 8006648:	d109      	bne.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800664a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800664e:	3308      	adds	r3, #8
 8006650:	4618      	mov	r0, r3
 8006652:	f003 fcf3 	bl	800a03c <RCCEx_PLL2_Config>
 8006656:	4603      	mov	r3, r0
 8006658:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800665c:	e006      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006664:	e002      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8006666:	bf00      	nop
 8006668:	e000      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800666a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800666c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10d      	bne.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006674:	4b71      	ldr	r3, [pc, #452]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006676:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800667a:	f023 0107 	bic.w	r1, r3, #7
 800667e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006682:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006686:	4a6d      	ldr	r2, [pc, #436]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006688:	430b      	orrs	r3, r1
 800668a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800668e:	e003      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006690:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006694:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006698:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a0:	2100      	movs	r1, #0
 80066a2:	6739      	str	r1, [r7, #112]	; 0x70
 80066a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066a8:	677b      	str	r3, [r7, #116]	; 0x74
 80066aa:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80066ae:	460b      	mov	r3, r1
 80066b0:	4313      	orrs	r3, r2
 80066b2:	d024      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80066b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80066b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d005      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	d005      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80066ca:	e002      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80066cc:	bf00      	nop
 80066ce:	e000      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80066d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066d2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10d      	bne.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80066da:	4b58      	ldr	r3, [pc, #352]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80066dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066e0:	f023 0108 	bic.w	r1, r3, #8
 80066e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80066e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80066ec:	4a53      	ldr	r2, [pc, #332]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80066ee:	430b      	orrs	r3, r1
 80066f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80066f4:	e003      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80066fa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006706:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800670a:	66bb      	str	r3, [r7, #104]	; 0x68
 800670c:	2300      	movs	r3, #0
 800670e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006710:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006714:	460b      	mov	r3, r1
 8006716:	4313      	orrs	r3, r2
 8006718:	f000 80b9 	beq.w	800688e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800671c:	4b48      	ldr	r3, [pc, #288]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	4a47      	ldr	r2, [pc, #284]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006722:	f043 0301 	orr.w	r3, r3, #1
 8006726:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006728:	f7fb fdac 	bl	8002284 <HAL_GetTick>
 800672c:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006730:	e00b      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006732:	f7fb fda7 	bl	8002284 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b02      	cmp	r3, #2
 8006740:	d903      	bls.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006748:	e005      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800674a:	4b3d      	ldr	r3, [pc, #244]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0ed      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8006756:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800675a:	2b00      	cmp	r3, #0
 800675c:	f040 8093 	bne.w	8006886 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006760:	4b36      	ldr	r3, [pc, #216]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006762:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800676a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800676e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006772:	2b00      	cmp	r3, #0
 8006774:	d023      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8006776:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800677a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800677e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006782:	4293      	cmp	r3, r2
 8006784:	d01b      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006786:	4b2d      	ldr	r3, [pc, #180]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800678c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006790:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006794:	4b29      	ldr	r3, [pc, #164]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800679a:	4a28      	ldr	r2, [pc, #160]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800679c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80067a4:	4b25      	ldr	r3, [pc, #148]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80067a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067aa:	4a24      	ldr	r2, [pc, #144]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80067ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80067b4:	4a21      	ldr	r2, [pc, #132]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80067b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80067ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80067be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d019      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ca:	f7fb fd5b 	bl	8002284 <HAL_GetTick>
 80067ce:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067d2:	e00d      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067d4:	f7fb fd56 	bl	8002284 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80067de:	1ad2      	subs	r2, r2, r3
 80067e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d903      	bls.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 80067ee:	e006      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067f0:	4b12      	ldr	r3, [pc, #72]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80067f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0ea      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80067fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006802:	2b00      	cmp	r3, #0
 8006804:	d13a      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006806:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800680a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800680e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006816:	d115      	bne.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006818:	4b08      	ldr	r3, [pc, #32]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006820:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006824:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8006828:	091b      	lsrs	r3, r3, #4
 800682a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800682e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006832:	4a02      	ldr	r2, [pc, #8]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006834:	430b      	orrs	r3, r1
 8006836:	61d3      	str	r3, [r2, #28]
 8006838:	e00a      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800683a:	bf00      	nop
 800683c:	44020c00 	.word	0x44020c00
 8006840:	44020800 	.word	0x44020800
 8006844:	4b9f      	ldr	r3, [pc, #636]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	4a9e      	ldr	r2, [pc, #632]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800684a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800684e:	61d3      	str	r3, [r2, #28]
 8006850:	4b9c      	ldr	r3, [pc, #624]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006856:	4a9b      	ldr	r2, [pc, #620]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800685c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006860:	4b98      	ldr	r3, [pc, #608]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006862:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8006866:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800686a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800686e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006872:	4a94      	ldr	r2, [pc, #592]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006874:	430b      	orrs	r3, r1
 8006876:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800687a:	e008      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800687c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006880:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8006884:	e003      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006886:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800688a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800688e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800689a:	663b      	str	r3, [r7, #96]	; 0x60
 800689c:	2300      	movs	r3, #0
 800689e:	667b      	str	r3, [r7, #100]	; 0x64
 80068a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80068a4:	460b      	mov	r3, r1
 80068a6:	4313      	orrs	r3, r2
 80068a8:	d035      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80068aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80068ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80068b2:	2b30      	cmp	r3, #48	; 0x30
 80068b4:	d014      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80068b6:	2b30      	cmp	r3, #48	; 0x30
 80068b8:	d80e      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80068ba:	2b20      	cmp	r3, #32
 80068bc:	d012      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80068be:	2b20      	cmp	r3, #32
 80068c0:	d80a      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d010      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80068c6:	2b10      	cmp	r3, #16
 80068c8:	d106      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068ca:	4b7e      	ldr	r3, [pc, #504]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	4a7d      	ldr	r2, [pc, #500]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80068d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068d4:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80068d6:	e008      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80068de:	e004      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80068e0:	bf00      	nop
 80068e2:	e002      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80068e4:	bf00      	nop
 80068e6:	e000      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80068e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10d      	bne.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80068f2:	4b74      	ldr	r3, [pc, #464]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80068f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068f8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80068fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006900:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006904:	4a6f      	ldr	r2, [pc, #444]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006906:	430b      	orrs	r3, r1
 8006908:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800690c:	e003      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800690e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006912:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006916:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691e:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006922:	65bb      	str	r3, [r7, #88]	; 0x58
 8006924:	2300      	movs	r3, #0
 8006926:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006928:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800692c:	460b      	mov	r3, r1
 800692e:	4313      	orrs	r3, r2
 8006930:	d033      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006932:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006936:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800693a:	2b00      	cmp	r3, #0
 800693c:	d002      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800693e:	2b40      	cmp	r3, #64	; 0x40
 8006940:	d007      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8006942:	e010      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006944:	4b5f      	ldr	r3, [pc, #380]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006948:	4a5e      	ldr	r2, [pc, #376]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800694a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800694e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006950:	e00d      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006952:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006956:	3308      	adds	r3, #8
 8006958:	4618      	mov	r0, r3
 800695a:	f003 fb6f 	bl	800a03c <RCCEx_PLL2_Config>
 800695e:	4603      	mov	r3, r0
 8006960:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006964:	e003      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800696c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800696e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10d      	bne.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8006976:	4b53      	ldr	r3, [pc, #332]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006978:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800697c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8006980:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006984:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8006988:	4a4e      	ldr	r2, [pc, #312]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800698a:	430b      	orrs	r3, r1
 800698c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006990:	e003      	b.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006992:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006996:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800699a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80069a6:	653b      	str	r3, [r7, #80]	; 0x50
 80069a8:	2300      	movs	r3, #0
 80069aa:	657b      	str	r3, [r7, #84]	; 0x54
 80069ac:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80069b0:	460b      	mov	r3, r1
 80069b2:	4313      	orrs	r3, r2
 80069b4:	d033      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80069b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80069ba:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80069c2:	2b80      	cmp	r3, #128	; 0x80
 80069c4:	d007      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80069c6:	e010      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c8:	4b3e      	ldr	r3, [pc, #248]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80069ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069cc:	4a3d      	ldr	r2, [pc, #244]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80069ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069d2:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80069d4:	e00d      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80069da:	3308      	adds	r3, #8
 80069dc:	4618      	mov	r0, r3
 80069de:	f003 fb2d 	bl	800a03c <RCCEx_PLL2_Config>
 80069e2:	4603      	mov	r3, r0
 80069e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80069e8:	e003      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80069f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069f2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10d      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80069fa:	4b32      	ldr	r3, [pc, #200]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80069fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a00:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006a04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a08:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8006a0c:	4a2d      	ldr	r2, [pc, #180]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006a0e:	430b      	orrs	r3, r1
 8006a10:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006a14:	e003      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a16:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006a1a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006a1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8006a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a30:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006a34:	460b      	mov	r3, r1
 8006a36:	4313      	orrs	r3, r2
 8006a38:	d04a      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006a3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d827      	bhi.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8006a46:	a201      	add	r2, pc, #4	; (adr r2, 8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8006a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4c:	08006a61 	.word	0x08006a61
 8006a50:	08006a6f 	.word	0x08006a6f
 8006a54:	08006a83 	.word	0x08006a83
 8006a58:	08006a9f 	.word	0x08006a9f
 8006a5c:	08006a9f 	.word	0x08006a9f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a60:	4b18      	ldr	r3, [pc, #96]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	4a17      	ldr	r2, [pc, #92]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a6a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006a6c:	e018      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a72:	3308      	adds	r3, #8
 8006a74:	4618      	mov	r0, r3
 8006a76:	f003 fae1 	bl	800a03c <RCCEx_PLL2_Config>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006a80:	e00e      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a86:	3330      	adds	r3, #48	; 0x30
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f003 fb6f 	bl	800a16c <RCCEx_PLL3_Config>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006a94:	e004      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006a9c:	e000      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8006a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aa0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10f      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006aa8:	4b06      	ldr	r3, [pc, #24]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006aae:	f023 0107 	bic.w	r1, r3, #7
 8006ab2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006aba:	4a02      	ldr	r2, [pc, #8]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006abc:	430b      	orrs	r3, r1
 8006abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ac2:	e005      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8006ac4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006acc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006ad0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006adc:	643b      	str	r3, [r7, #64]	; 0x40
 8006ade:	2300      	movs	r3, #0
 8006ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ae2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	f000 8081 	beq.w	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8006aee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006af2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006af6:	2b20      	cmp	r3, #32
 8006af8:	d85f      	bhi.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8006afa:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8006afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b00:	08006b85 	.word	0x08006b85
 8006b04:	08006bbb 	.word	0x08006bbb
 8006b08:	08006bbb 	.word	0x08006bbb
 8006b0c:	08006bbb 	.word	0x08006bbb
 8006b10:	08006bbb 	.word	0x08006bbb
 8006b14:	08006bbb 	.word	0x08006bbb
 8006b18:	08006bbb 	.word	0x08006bbb
 8006b1c:	08006bbb 	.word	0x08006bbb
 8006b20:	08006b93 	.word	0x08006b93
 8006b24:	08006bbb 	.word	0x08006bbb
 8006b28:	08006bbb 	.word	0x08006bbb
 8006b2c:	08006bbb 	.word	0x08006bbb
 8006b30:	08006bbb 	.word	0x08006bbb
 8006b34:	08006bbb 	.word	0x08006bbb
 8006b38:	08006bbb 	.word	0x08006bbb
 8006b3c:	08006bbb 	.word	0x08006bbb
 8006b40:	08006ba7 	.word	0x08006ba7
 8006b44:	08006bbb 	.word	0x08006bbb
 8006b48:	08006bbb 	.word	0x08006bbb
 8006b4c:	08006bbb 	.word	0x08006bbb
 8006b50:	08006bbb 	.word	0x08006bbb
 8006b54:	08006bbb 	.word	0x08006bbb
 8006b58:	08006bbb 	.word	0x08006bbb
 8006b5c:	08006bbb 	.word	0x08006bbb
 8006b60:	08006bc3 	.word	0x08006bc3
 8006b64:	08006bbb 	.word	0x08006bbb
 8006b68:	08006bbb 	.word	0x08006bbb
 8006b6c:	08006bbb 	.word	0x08006bbb
 8006b70:	08006bbb 	.word	0x08006bbb
 8006b74:	08006bbb 	.word	0x08006bbb
 8006b78:	08006bbb 	.word	0x08006bbb
 8006b7c:	08006bbb 	.word	0x08006bbb
 8006b80:	08006bc3 	.word	0x08006bc3
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b84:	4bab      	ldr	r3, [pc, #684]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b88:	4aaa      	ldr	r2, [pc, #680]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b8e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006b90:	e018      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006b96:	3308      	adds	r3, #8
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f003 fa4f 	bl	800a03c <RCCEx_PLL2_Config>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006ba4:	e00e      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ba6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006baa:	3330      	adds	r3, #48	; 0x30
 8006bac:	4618      	mov	r0, r3
 8006bae:	f003 fadd 	bl	800a16c <RCCEx_PLL3_Config>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006bb8:	e004      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006bc0:	e000      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8006bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10d      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006bcc:	4b99      	ldr	r3, [pc, #612]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bd2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006bd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006bda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006bde:	4a95      	ldr	r2, [pc, #596]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006be0:	430b      	orrs	r3, r1
 8006be2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006be6:	e003      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006bec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006bfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bfe:	2300      	movs	r3, #0
 8006c00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c02:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006c06:	460b      	mov	r3, r1
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	d04e      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006c0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c18:	d02e      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8006c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c1e:	d827      	bhi.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006c20:	2bc0      	cmp	r3, #192	; 0xc0
 8006c22:	d02b      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8006c24:	2bc0      	cmp	r3, #192	; 0xc0
 8006c26:	d823      	bhi.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006c28:	2b80      	cmp	r3, #128	; 0x80
 8006c2a:	d017      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8006c2c:	2b80      	cmp	r3, #128	; 0x80
 8006c2e:	d81f      	bhi.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8006c34:	2b40      	cmp	r3, #64	; 0x40
 8006c36:	d007      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8006c38:	e01a      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c3a:	4b7e      	ldr	r3, [pc, #504]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3e:	4a7d      	ldr	r2, [pc, #500]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c44:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006c46:	e01a      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f003 f9f4 	bl	800a03c <RCCEx_PLL2_Config>
 8006c54:	4603      	mov	r3, r0
 8006c56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006c5a:	e010      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c60:	3330      	adds	r3, #48	; 0x30
 8006c62:	4618      	mov	r0, r3
 8006c64:	f003 fa82 	bl	800a16c <RCCEx_PLL3_Config>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006c6e:	e006      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006c76:	e002      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006c78:	bf00      	nop
 8006c7a:	e000      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c7e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10d      	bne.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006c86:	4b6b      	ldr	r3, [pc, #428]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c8c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c98:	4a66      	ldr	r2, [pc, #408]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006c9a:	430b      	orrs	r3, r1
 8006c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ca0:	e003      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006ca6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8006caa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006cb6:	633b      	str	r3, [r7, #48]	; 0x30
 8006cb8:	2300      	movs	r3, #0
 8006cba:	637b      	str	r3, [r7, #52]	; 0x34
 8006cbc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	d055      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8006cc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006cca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006cce:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006cd2:	d031      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8006cd4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006cd8:	d82a      	bhi.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cde:	d02d      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8006ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ce4:	d824      	bhi.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006ce6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006cea:	d029      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8006cec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006cf0:	d81e      	bhi.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cf6:	d011      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8006cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cfc:	d818      	bhi.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d020      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8006d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d06:	d113      	bne.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d0c:	3308      	adds	r3, #8
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f003 f994 	bl	800a03c <RCCEx_PLL2_Config>
 8006d14:	4603      	mov	r3, r0
 8006d16:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006d1a:	e014      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d20:	3330      	adds	r3, #48	; 0x30
 8006d22:	4618      	mov	r0, r3
 8006d24:	f003 fa22 	bl	800a16c <RCCEx_PLL3_Config>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006d2e:	e00a      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006d36:	e006      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006d38:	bf00      	nop
 8006d3a:	e004      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006d3c:	bf00      	nop
 8006d3e:	e002      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006d40:	bf00      	nop
 8006d42:	e000      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d46:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10d      	bne.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8006d4e:	4b39      	ldr	r3, [pc, #228]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d54:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8006d58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d5c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006d60:	4a34      	ldr	r2, [pc, #208]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006d62:	430b      	orrs	r3, r1
 8006d64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d68:	e003      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d6a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006d6e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8006d72:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d80:	2300      	movs	r3, #0
 8006d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d84:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	d058      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8006d8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d96:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006d9a:	d031      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8006d9c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006da0:	d82a      	bhi.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006da2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006da6:	d02d      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8006da8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dac:	d824      	bhi.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006dae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006db2:	d029      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8006db4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006db8:	d81e      	bhi.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dbe:	d011      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8006dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dc4:	d818      	bhi.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d020      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8006dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dce:	d113      	bne.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006dd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006dd4:	3308      	adds	r3, #8
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f003 f930 	bl	800a03c <RCCEx_PLL2_Config>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006de2:	e014      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006de4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006de8:	3330      	adds	r3, #48	; 0x30
 8006dea:	4618      	mov	r0, r3
 8006dec:	f003 f9be 	bl	800a16c <RCCEx_PLL3_Config>
 8006df0:	4603      	mov	r3, r0
 8006df2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006df6:	e00a      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006dfe:	e006      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006e00:	bf00      	nop
 8006e02:	e004      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006e04:	bf00      	nop
 8006e06:	e002      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006e08:	bf00      	nop
 8006e0a:	e000      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e0e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d110      	bne.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8006e16:	4b07      	ldr	r3, [pc, #28]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e1c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006e20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006e24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e28:	4902      	ldr	r1, [pc, #8]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006e30:	e006      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8006e32:	bf00      	nop
 8006e34:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e38:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006e3c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e48:	2100      	movs	r1, #0
 8006e4a:	6239      	str	r1, [r7, #32]
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	627b      	str	r3, [r7, #36]	; 0x24
 8006e52:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006e56:	460b      	mov	r3, r1
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	d055      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8006e5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006e60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e64:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006e68:	d031      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8006e6a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006e6e:	d82a      	bhi.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006e70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e74:	d02d      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8006e76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e7a:	d824      	bhi.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006e7c:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8006e80:	d029      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8006e82:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8006e86:	d81e      	bhi.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e8c:	d011      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8006e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e92:	d818      	bhi.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d020      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8006e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e9c:	d113      	bne.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006ea2:	3308      	adds	r3, #8
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f003 f8c9 	bl	800a03c <RCCEx_PLL2_Config>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006eb0:	e014      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006eb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006eb6:	3330      	adds	r3, #48	; 0x30
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f003 f957 	bl	800a16c <RCCEx_PLL3_Config>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ec4:	e00a      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006ecc:	e006      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006ece:	bf00      	nop
 8006ed0:	e004      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006ed2:	bf00      	nop
 8006ed4:	e002      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006ed6:	bf00      	nop
 8006ed8:	e000      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006eda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006edc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10d      	bne.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8006ee4:	4b88      	ldr	r3, [pc, #544]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006eea:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8006eee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006ef2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ef6:	4984      	ldr	r1, [pc, #528]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006efe:	e003      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f00:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006f04:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006f08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f10:	2100      	movs	r1, #0
 8006f12:	61b9      	str	r1, [r7, #24]
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	61fb      	str	r3, [r7, #28]
 8006f1a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006f1e:	460b      	mov	r3, r1
 8006f20:	4313      	orrs	r3, r2
 8006f22:	d03d      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8006f24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006f28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d81c      	bhi.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8006f30:	a201      	add	r2, pc, #4	; (adr r2, 8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8006f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f36:	bf00      	nop
 8006f38:	08006f73 	.word	0x08006f73
 8006f3c:	08006f49 	.word	0x08006f49
 8006f40:	08006f57 	.word	0x08006f57
 8006f44:	08006f73 	.word	0x08006f73
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f48:	4b6f      	ldr	r3, [pc, #444]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4c:	4a6e      	ldr	r2, [pc, #440]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f52:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006f54:	e00e      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f003 f86d 	bl	800a03c <RCCEx_PLL2_Config>
 8006f62:	4603      	mov	r3, r0
 8006f64:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8006f68:	e004      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006f70:	e000      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8006f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f74:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10d      	bne.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006f7c:	4b62      	ldr	r3, [pc, #392]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006f7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006f82:	f023 0203 	bic.w	r2, r3, #3
 8006f86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006f8a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006f8e:	495e      	ldr	r1, [pc, #376]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006f96:	e003      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f98:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006f9c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006fa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	2100      	movs	r1, #0
 8006faa:	6139      	str	r1, [r7, #16]
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	617b      	str	r3, [r7, #20]
 8006fb2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	d03a      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8006fbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006fc0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fc8:	d00e      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8006fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fce:	d815      	bhi.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d017      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8006fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd8:	d110      	bne.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fda:	4b4b      	ldr	r3, [pc, #300]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fde:	4a4a      	ldr	r2, [pc, #296]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fe4:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006fe6:	e00e      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006fe8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006fec:	3308      	adds	r3, #8
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f003 f824 	bl	800a03c <RCCEx_PLL2_Config>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006ffa:	e004      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007002:	e000      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8007004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007006:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10d      	bne.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800700e:	4b3e      	ldr	r3, [pc, #248]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007010:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007018:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800701c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007020:	4939      	ldr	r1, [pc, #228]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007022:	4313      	orrs	r3, r2
 8007024:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8007028:	e003      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800702a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800702e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007032:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	2100      	movs	r1, #0
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	f003 0310 	and.w	r3, r3, #16
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007048:	460b      	mov	r3, r1
 800704a:	4313      	orrs	r3, r2
 800704c:	d038      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800704e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007052:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007056:	2b30      	cmp	r3, #48	; 0x30
 8007058:	d01b      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800705a:	2b30      	cmp	r3, #48	; 0x30
 800705c:	d815      	bhi.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800705e:	2b10      	cmp	r3, #16
 8007060:	d002      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8007062:	2b20      	cmp	r3, #32
 8007064:	d007      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8007066:	e010      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007068:	4b27      	ldr	r3, [pc, #156]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800706a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706c:	4a26      	ldr	r2, [pc, #152]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800706e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007072:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8007074:	e00e      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007076:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800707a:	3330      	adds	r3, #48	; 0x30
 800707c:	4618      	mov	r0, r3
 800707e:	f003 f875 	bl	800a16c <RCCEx_PLL3_Config>
 8007082:	4603      	mov	r3, r0
 8007084:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8007088:	e004      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007090:	e000      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8007092:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007094:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10d      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800709c:	4b1a      	ldr	r3, [pc, #104]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800709e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80070a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80070aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80070ae:	4916      	ldr	r1, [pc, #88]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80070b6:	e003      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80070bc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80070c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c8:	2100      	movs	r1, #0
 80070ca:	6039      	str	r1, [r7, #0]
 80070cc:	f003 0308 	and.w	r3, r3, #8
 80070d0:	607b      	str	r3, [r7, #4]
 80070d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80070d6:	460b      	mov	r3, r1
 80070d8:	4313      	orrs	r3, r2
 80070da:	d00c      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80070dc:	4b0a      	ldr	r3, [pc, #40]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80070de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80070e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80070ea:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80070ee:	4906      	ldr	r1, [pc, #24]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 80070f6:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8007100:	46bd      	mov	sp, r7
 8007102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007106:	bf00      	nop
 8007108:	44020c00 	.word	0x44020c00

0800710c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 800710c:	b480      	push	{r7}
 800710e:	b08b      	sub	sp, #44	; 0x2c
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007114:	4bad      	ldr	r3, [pc, #692]	; (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800711e:	4bab      	ldr	r3, [pc, #684]	; (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007122:	f003 0303 	and.w	r3, r3, #3
 8007126:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007128:	4ba8      	ldr	r3, [pc, #672]	; (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800712a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712c:	0a1b      	lsrs	r3, r3, #8
 800712e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007132:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8007134:	4ba5      	ldr	r3, [pc, #660]	; (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007138:	f003 0310 	and.w	r3, r3, #16
 800713c:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800713e:	4ba3      	ldr	r3, [pc, #652]	; (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007142:	08db      	lsrs	r3, r3, #3
 8007144:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	fb02 f303 	mul.w	r3, r2, r3
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007156:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 8126 	beq.w	80073ae <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	2b03      	cmp	r3, #3
 8007166:	d053      	beq.n	8007210 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	2b03      	cmp	r3, #3
 800716c:	d86f      	bhi.n	800724e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d003      	beq.n	800717c <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	2b02      	cmp	r3, #2
 8007178:	d02b      	beq.n	80071d2 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800717a:	e068      	b.n	800724e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800717c:	4b93      	ldr	r3, [pc, #588]	; (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	08db      	lsrs	r3, r3, #3
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	4a92      	ldr	r2, [pc, #584]	; (80073d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007188:	fa22 f303 	lsr.w	r3, r2, r3
 800718c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	ee07 3a90 	vmov	s15, r3
 8007194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b0:	ed97 6a04 	vldr	s12, [r7, #16]
 80071b4:	eddf 5a87 	vldr	s11, [pc, #540]	; 80073d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80071b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071cc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80071d0:	e068      	b.n	80072a4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	ee07 3a90 	vmov	s15, r3
 80071d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071dc:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80073d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80071e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ee:	ed97 6a04 	vldr	s12, [r7, #16]
 80071f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80073d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80071f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800720e:	e049      	b.n	80072a4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721a:	eddf 6a70 	vldr	s13, [pc, #448]	; 80073dc <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800721e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	ee07 3a90 	vmov	s15, r3
 8007228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800722c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007230:	eddf 5a68 	vldr	s11, [pc, #416]	; 80073d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007234:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800723c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007248:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800724c:	e02a      	b.n	80072a4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800724e:	4b5f      	ldr	r3, [pc, #380]	; (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	08db      	lsrs	r3, r3, #3
 8007254:	f003 0303 	and.w	r3, r3, #3
 8007258:	4a5d      	ldr	r2, [pc, #372]	; (80073d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800725a:	fa22 f303 	lsr.w	r3, r2, r3
 800725e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	ee07 3a90 	vmov	s15, r3
 8007270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007274:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007282:	ed97 6a04 	vldr	s12, [r7, #16]
 8007286:	eddf 5a53 	vldr	s11, [pc, #332]	; 80073d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800728a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800729a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80072a2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80072a4:	4b49      	ldr	r3, [pc, #292]	; (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072b0:	d121      	bne.n	80072f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80072b2:	4b46      	ldr	r3, [pc, #280]	; (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80072b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d017      	beq.n	80072ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80072be:	4b43      	ldr	r3, [pc, #268]	; (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80072c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c2:	0a5b      	lsrs	r3, r3, #9
 80072c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072c8:	ee07 3a90 	vmov	s15, r3
 80072cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80072d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072d4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80072d8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80072dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072e4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	e006      	b.n	80072fc <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	e002      	b.n	80072fc <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80072fc:	4b33      	ldr	r3, [pc, #204]	; (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007304:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007308:	d121      	bne.n	800734e <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800730a:	4b30      	ldr	r3, [pc, #192]	; (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800730c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d017      	beq.n	8007346 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007316:	4b2d      	ldr	r3, [pc, #180]	; (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731a:	0c1b      	lsrs	r3, r3, #16
 800731c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007320:	ee07 3a90 	vmov	s15, r3
 8007324:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007328:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800732c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007330:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800733c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	605a      	str	r2, [r3, #4]
 8007344:	e006      	b.n	8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	605a      	str	r2, [r3, #4]
 800734c:	e002      	b.n	8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007354:	4b1d      	ldr	r3, [pc, #116]	; (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800735c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007360:	d121      	bne.n	80073a6 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007362:	4b1a      	ldr	r3, [pc, #104]	; (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d017      	beq.n	800739e <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800736e:	4b17      	ldr	r3, [pc, #92]	; (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007372:	0e1b      	lsrs	r3, r3, #24
 8007374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007378:	ee07 3a90 	vmov	s15, r3
 800737c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8007380:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007384:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007388:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800738c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007394:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800739c:	e010      	b.n	80073c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	609a      	str	r2, [r3, #8]
}
 80073a4:	e00c      	b.n	80073c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	609a      	str	r2, [r3, #8]
}
 80073ac:	e008      	b.n	80073c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	609a      	str	r2, [r3, #8]
}
 80073c0:	bf00      	nop
 80073c2:	372c      	adds	r7, #44	; 0x2c
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	44020c00 	.word	0x44020c00
 80073d0:	03d09000 	.word	0x03d09000
 80073d4:	46000000 	.word	0x46000000
 80073d8:	4a742400 	.word	0x4a742400
 80073dc:	4af42400 	.word	0x4af42400

080073e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b08b      	sub	sp, #44	; 0x2c
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80073e8:	4bad      	ldr	r3, [pc, #692]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f0:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80073f2:	4bab      	ldr	r3, [pc, #684]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f6:	f003 0303 	and.w	r3, r3, #3
 80073fa:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80073fc:	4ba8      	ldr	r3, [pc, #672]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007400:	0a1b      	lsrs	r3, r3, #8
 8007402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007406:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8007408:	4ba5      	ldr	r3, [pc, #660]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740c:	f003 0310 	and.w	r3, r3, #16
 8007410:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007412:	4ba3      	ldr	r3, [pc, #652]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	08db      	lsrs	r3, r3, #3
 8007418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	fb02 f303 	mul.w	r3, r2, r3
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 8126 	beq.w	8007682 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	2b03      	cmp	r3, #3
 800743a:	d053      	beq.n	80074e4 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	2b03      	cmp	r3, #3
 8007440:	d86f      	bhi.n	8007522 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d003      	beq.n	8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	2b02      	cmp	r3, #2
 800744c:	d02b      	beq.n	80074a6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800744e:	e068      	b.n	8007522 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007450:	4b93      	ldr	r3, [pc, #588]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	08db      	lsrs	r3, r3, #3
 8007456:	f003 0303 	and.w	r3, r3, #3
 800745a:	4a92      	ldr	r2, [pc, #584]	; (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800745c:	fa22 f303 	lsr.w	r3, r2, r3
 8007460:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	ee07 3a90 	vmov	s15, r3
 8007468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	ee07 3a90 	vmov	s15, r3
 8007472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	ee07 3a90 	vmov	s15, r3
 8007480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007484:	ed97 6a04 	vldr	s12, [r7, #16]
 8007488:	eddf 5a87 	vldr	s11, [pc, #540]	; 80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800748c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007490:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007494:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007498:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800749c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074a0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80074a4:	e068      	b.n	8007578 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	ee07 3a90 	vmov	s15, r3
 80074ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b0:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80074b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c2:	ed97 6a04 	vldr	s12, [r7, #16]
 80074c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80074ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074de:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80074e2:	e049      	b.n	8007578 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ee:	eddf 6a70 	vldr	s13, [pc, #448]	; 80076b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80074f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	ee07 3a90 	vmov	s15, r3
 80074fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007500:	ed97 6a04 	vldr	s12, [r7, #16]
 8007504:	eddf 5a68 	vldr	s11, [pc, #416]	; 80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007508:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800750c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007510:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007514:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8007520:	e02a      	b.n	8007578 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007522:	4b5f      	ldr	r3, [pc, #380]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	08db      	lsrs	r3, r3, #3
 8007528:	f003 0303 	and.w	r3, r3, #3
 800752c:	4a5d      	ldr	r2, [pc, #372]	; (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800752e:	fa22 f303 	lsr.w	r3, r2, r3
 8007532:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	ee07 3a90 	vmov	s15, r3
 800753a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	ee07 3a90 	vmov	s15, r3
 8007544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007548:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	ee07 3a90 	vmov	s15, r3
 8007552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007556:	ed97 6a04 	vldr	s12, [r7, #16]
 800755a:	eddf 5a53 	vldr	s11, [pc, #332]	; 80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800755e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800756a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800756e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007572:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8007576:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007578:	4b49      	ldr	r3, [pc, #292]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007584:	d121      	bne.n	80075ca <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007586:	4b46      	ldr	r3, [pc, #280]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d017      	beq.n	80075c2 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007592:	4b43      	ldr	r3, [pc, #268]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007596:	0a5b      	lsrs	r3, r3, #9
 8007598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800759c:	ee07 3a90 	vmov	s15, r3
 80075a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80075a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075a8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80075ac:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80075b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075b8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	601a      	str	r2, [r3, #0]
 80075c0:	e006      	b.n	80075d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	601a      	str	r2, [r3, #0]
 80075c8:	e002      	b.n	80075d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075d0:	4b33      	ldr	r3, [pc, #204]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075dc:	d121      	bne.n	8007622 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80075de:	4b30      	ldr	r3, [pc, #192]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80075e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d017      	beq.n	800761a <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80075ea:	4b2d      	ldr	r3, [pc, #180]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80075ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ee:	0c1b      	lsrs	r3, r3, #16
 80075f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075f4:	ee07 3a90 	vmov	s15, r3
 80075f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80075fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007600:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007604:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800760c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007610:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	605a      	str	r2, [r3, #4]
 8007618:	e006      	b.n	8007628 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	605a      	str	r2, [r3, #4]
 8007620:	e002      	b.n	8007628 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007628:	4b1d      	ldr	r3, [pc, #116]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007634:	d121      	bne.n	800767a <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007636:	4b1a      	ldr	r3, [pc, #104]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d017      	beq.n	8007672 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007642:	4b17      	ldr	r3, [pc, #92]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007646:	0e1b      	lsrs	r3, r3, #24
 8007648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800764c:	ee07 3a90 	vmov	s15, r3
 8007650:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007658:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800765c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007668:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007670:	e010      	b.n	8007694 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	609a      	str	r2, [r3, #8]
}
 8007678:	e00c      	b.n	8007694 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	609a      	str	r2, [r3, #8]
}
 8007680:	e008      	b.n	8007694 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	609a      	str	r2, [r3, #8]
}
 8007694:	bf00      	nop
 8007696:	372c      	adds	r7, #44	; 0x2c
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	44020c00 	.word	0x44020c00
 80076a4:	03d09000 	.word	0x03d09000
 80076a8:	46000000 	.word	0x46000000
 80076ac:	4a742400 	.word	0x4a742400
 80076b0:	4af42400 	.word	0x4af42400

080076b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b08b      	sub	sp, #44	; 0x2c
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80076bc:	4bad      	ldr	r3, [pc, #692]	; (8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80076be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c4:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80076c6:	4bab      	ldr	r3, [pc, #684]	; (8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80076c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ca:	f003 0303 	and.w	r3, r3, #3
 80076ce:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80076d0:	4ba8      	ldr	r3, [pc, #672]	; (8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80076d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d4:	0a1b      	lsrs	r3, r3, #8
 80076d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076da:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80076dc:	4ba5      	ldr	r3, [pc, #660]	; (8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80076de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e0:	f003 0310 	and.w	r3, r3, #16
 80076e4:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80076e6:	4ba3      	ldr	r3, [pc, #652]	; (8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80076e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ea:	08db      	lsrs	r3, r3, #3
 80076ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	fb02 f303 	mul.w	r3, r2, r3
 80076f6:	ee07 3a90 	vmov	s15, r3
 80076fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fe:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 8126 	beq.w	8007956 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	2b03      	cmp	r3, #3
 800770e:	d053      	beq.n	80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	2b03      	cmp	r3, #3
 8007714:	d86f      	bhi.n	80077f6 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d003      	beq.n	8007724 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	2b02      	cmp	r3, #2
 8007720:	d02b      	beq.n	800777a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8007722:	e068      	b.n	80077f6 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007724:	4b93      	ldr	r3, [pc, #588]	; (8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	08db      	lsrs	r3, r3, #3
 800772a:	f003 0303 	and.w	r3, r3, #3
 800772e:	4a92      	ldr	r2, [pc, #584]	; (8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007730:	fa22 f303 	lsr.w	r3, r2, r3
 8007734:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	ee07 3a90 	vmov	s15, r3
 800773c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	ee07 3a90 	vmov	s15, r3
 8007746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	ee07 3a90 	vmov	s15, r3
 8007754:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007758:	ed97 6a04 	vldr	s12, [r7, #16]
 800775c:	eddf 5a87 	vldr	s11, [pc, #540]	; 800797c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007760:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007764:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007768:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800776c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007774:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8007778:	e068      	b.n	800784c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	ee07 3a90 	vmov	s15, r3
 8007780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007784:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8007980 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007788:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	ee07 3a90 	vmov	s15, r3
 8007792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007796:	ed97 6a04 	vldr	s12, [r7, #16]
 800779a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800797c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800779e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80077b6:	e049      	b.n	800784c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	ee07 3a90 	vmov	s15, r3
 80077be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c2:	eddf 6a70 	vldr	s13, [pc, #448]	; 8007984 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80077c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	ee07 3a90 	vmov	s15, r3
 80077d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d4:	ed97 6a04 	vldr	s12, [r7, #16]
 80077d8:	eddf 5a68 	vldr	s11, [pc, #416]	; 800797c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80077dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80077f4:	e02a      	b.n	800784c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077f6:	4b5f      	ldr	r3, [pc, #380]	; (8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	08db      	lsrs	r3, r3, #3
 80077fc:	f003 0303 	and.w	r3, r3, #3
 8007800:	4a5d      	ldr	r2, [pc, #372]	; (8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007802:	fa22 f303 	lsr.w	r3, r2, r3
 8007806:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	ee07 3a90 	vmov	s15, r3
 8007818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	ee07 3a90 	vmov	s15, r3
 8007826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800782a:	ed97 6a04 	vldr	s12, [r7, #16]
 800782e:	eddf 5a53 	vldr	s11, [pc, #332]	; 800797c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800783a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800783e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007846:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800784a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800784c:	4b49      	ldr	r3, [pc, #292]	; (8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007858:	d121      	bne.n	800789e <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800785a:	4b46      	ldr	r3, [pc, #280]	; (8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800785c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d017      	beq.n	8007896 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007866:	4b43      	ldr	r3, [pc, #268]	; (8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800786a:	0a5b      	lsrs	r3, r3, #9
 800786c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007870:	ee07 3a90 	vmov	s15, r3
 8007874:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8007878:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800787c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007880:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800788c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	e006      	b.n	80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	e002      	b.n	80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078a4:	4b33      	ldr	r3, [pc, #204]	; (8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078b0:	d121      	bne.n	80078f6 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80078b2:	4b30      	ldr	r3, [pc, #192]	; (8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80078b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d017      	beq.n	80078ee <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80078be:	4b2d      	ldr	r3, [pc, #180]	; (8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80078c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c2:	0c1b      	lsrs	r3, r3, #16
 80078c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c8:	ee07 3a90 	vmov	s15, r3
 80078cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80078d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078d4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80078d8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80078dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078e4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	605a      	str	r2, [r3, #4]
 80078ec:	e006      	b.n	80078fc <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	605a      	str	r2, [r3, #4]
 80078f4:	e002      	b.n	80078fc <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078fc:	4b1d      	ldr	r3, [pc, #116]	; (8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007908:	d121      	bne.n	800794e <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800790a:	4b1a      	ldr	r3, [pc, #104]	; (8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800790c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d017      	beq.n	8007946 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007916:	4b17      	ldr	r3, [pc, #92]	; (8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800791a:	0e1b      	lsrs	r3, r3, #24
 800791c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007920:	ee07 3a90 	vmov	s15, r3
 8007924:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007928:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800792c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007930:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800793c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007944:	e010      	b.n	8007968 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	609a      	str	r2, [r3, #8]
}
 800794c:	e00c      	b.n	8007968 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	609a      	str	r2, [r3, #8]
}
 8007954:	e008      	b.n	8007968 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	609a      	str	r2, [r3, #8]
}
 8007968:	bf00      	nop
 800796a:	372c      	adds	r7, #44	; 0x2c
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	44020c00 	.word	0x44020c00
 8007978:	03d09000 	.word	0x03d09000
 800797c:	46000000 	.word	0x46000000
 8007980:	4a742400 	.word	0x4a742400
 8007984:	4af42400 	.word	0x4af42400

08007988 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007988:	b590      	push	{r4, r7, lr}
 800798a:	b08f      	sub	sp, #60	; 0x3c
 800798c:	af00      	add	r7, sp, #0
 800798e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007992:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007996:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 800799a:	4321      	orrs	r1, r4
 800799c:	d150      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800799e:	4b26      	ldr	r3, [pc, #152]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80079a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079a8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80079aa:	4b23      	ldr	r3, [pc, #140]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80079ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079b0:	f003 0302 	and.w	r3, r3, #2
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d108      	bne.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079be:	d104      	bne.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80079c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079c4:	637b      	str	r3, [r7, #52]	; 0x34
 80079c6:	f002 bb2a 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80079ca:	4b1b      	ldr	r3, [pc, #108]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80079cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079d8:	d108      	bne.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80079da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079e0:	d104      	bne.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80079e2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80079e6:	637b      	str	r3, [r7, #52]	; 0x34
 80079e8:	f002 bb19 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80079ec:	4b12      	ldr	r3, [pc, #72]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079f8:	d119      	bne.n	8007a2e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80079fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a00:	d115      	bne.n	8007a2e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007a02:	4b0d      	ldr	r3, [pc, #52]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8007a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a0e:	d30a      	bcc.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8007a10:	4b09      	ldr	r3, [pc, #36]	; (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007a12:	69db      	ldr	r3, [r3, #28]
 8007a14:	0a1b      	lsrs	r3, r3, #8
 8007a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a1a:	4a08      	ldr	r2, [pc, #32]	; (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a20:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007a22:	f002 bafc 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007a2a:	f002 baf8 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	637b      	str	r3, [r7, #52]	; 0x34
 8007a32:	f002 baf4 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a36:	bf00      	nop
 8007a38:	44020c00 	.word	0x44020c00
 8007a3c:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007a40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a44:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 8007a48:	ea50 0104 	orrs.w	r1, r0, r4
 8007a4c:	f001 8275 	beq.w	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8007a50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a54:	2801      	cmp	r0, #1
 8007a56:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 8007a5a:	f082 82dd 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a62:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 8007a66:	ea50 0104 	orrs.w	r1, r0, r4
 8007a6a:	f001 816c 	beq.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8007a6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a72:	2801      	cmp	r0, #1
 8007a74:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 8007a78:	f082 82ce 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a80:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 8007a84:	ea50 0104 	orrs.w	r1, r0, r4
 8007a88:	f001 8602 	beq.w	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8007a8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a90:	2801      	cmp	r0, #1
 8007a92:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 8007a96:	f082 82bf 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a9e:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 8007aa2:	ea50 0104 	orrs.w	r1, r0, r4
 8007aa6:	f001 854c 	beq.w	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8007aaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007aae:	2801      	cmp	r0, #1
 8007ab0:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8007ab4:	f082 82b0 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007abc:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8007ac0:	ea50 0104 	orrs.w	r1, r0, r4
 8007ac4:	f001 849e 	beq.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8007ac8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007acc:	2801      	cmp	r0, #1
 8007ace:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 8007ad2:	f082 82a1 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ad6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ada:	f1a1 0420 	sub.w	r4, r1, #32
 8007ade:	ea50 0104 	orrs.w	r1, r0, r4
 8007ae2:	f001 83e8 	beq.w	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8007ae6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007aea:	2801      	cmp	r0, #1
 8007aec:	f171 0120 	sbcs.w	r1, r1, #32
 8007af0:	f082 8292 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007af4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007af8:	f1a1 0410 	sub.w	r4, r1, #16
 8007afc:	ea50 0104 	orrs.w	r1, r0, r4
 8007b00:	f002 8256 	beq.w	8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007b04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b08:	2801      	cmp	r0, #1
 8007b0a:	f171 0110 	sbcs.w	r1, r1, #16
 8007b0e:	f082 8283 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b16:	f1a1 0408 	sub.w	r4, r1, #8
 8007b1a:	ea50 0104 	orrs.w	r1, r0, r4
 8007b1e:	f002 81cc 	beq.w	8009eba <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8007b22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b26:	2801      	cmp	r0, #1
 8007b28:	f171 0108 	sbcs.w	r1, r1, #8
 8007b2c:	f082 8274 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b34:	1f0c      	subs	r4, r1, #4
 8007b36:	ea50 0104 	orrs.w	r1, r0, r4
 8007b3a:	f001 8648 	beq.w	80097ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8007b3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b42:	2801      	cmp	r0, #1
 8007b44:	f171 0104 	sbcs.w	r1, r1, #4
 8007b48:	f082 8266 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b50:	1e8c      	subs	r4, r1, #2
 8007b52:	ea50 0104 	orrs.w	r1, r0, r4
 8007b56:	f002 8143 	beq.w	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8007b5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b5e:	2801      	cmp	r0, #1
 8007b60:	f171 0102 	sbcs.w	r1, r1, #2
 8007b64:	f082 8258 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b6c:	1e4c      	subs	r4, r1, #1
 8007b6e:	ea50 0104 	orrs.w	r1, r0, r4
 8007b72:	f002 80ce 	beq.w	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8007b76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b7a:	2801      	cmp	r0, #1
 8007b7c:	f171 0101 	sbcs.w	r1, r1, #1
 8007b80:	f082 824a 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b88:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8007b8c:	4321      	orrs	r1, r4
 8007b8e:	f002 8059 	beq.w	8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8007b92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b96:	4cd9      	ldr	r4, [pc, #868]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007b98:	42a0      	cmp	r0, r4
 8007b9a:	f171 0100 	sbcs.w	r1, r1, #0
 8007b9e:	f082 823b 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ba2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ba6:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8007baa:	4321      	orrs	r1, r4
 8007bac:	f001 87d9 	beq.w	8009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8007bb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bb4:	4cd2      	ldr	r4, [pc, #840]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007bb6:	42a0      	cmp	r0, r4
 8007bb8:	f171 0100 	sbcs.w	r1, r1, #0
 8007bbc:	f082 822c 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007bc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bc4:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8007bc8:	4321      	orrs	r1, r4
 8007bca:	f001 8751 	beq.w	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8007bce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bd2:	4ccc      	ldr	r4, [pc, #816]	; (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007bd4:	42a0      	cmp	r0, r4
 8007bd6:	f171 0100 	sbcs.w	r1, r1, #0
 8007bda:	f082 821d 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007bde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007be2:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8007be6:	4321      	orrs	r1, r4
 8007be8:	f001 869a 	beq.w	8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8007bec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bf0:	4cc5      	ldr	r4, [pc, #788]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8007bf2:	42a0      	cmp	r0, r4
 8007bf4:	f171 0100 	sbcs.w	r1, r1, #0
 8007bf8:	f082 820e 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007bfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c00:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8007c04:	4321      	orrs	r1, r4
 8007c06:	f001 8612 	beq.w	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8007c0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c0e:	4cbf      	ldr	r4, [pc, #764]	; (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8007c10:	42a0      	cmp	r0, r4
 8007c12:	f171 0100 	sbcs.w	r1, r1, #0
 8007c16:	f082 81ff 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c1e:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 8007c22:	4321      	orrs	r1, r4
 8007c24:	f002 817e 	beq.w	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8007c28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c2c:	4cb8      	ldr	r4, [pc, #736]	; (8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c2e:	42a0      	cmp	r0, r4
 8007c30:	f171 0100 	sbcs.w	r1, r1, #0
 8007c34:	f082 81f0 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c3c:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8007c40:	4321      	orrs	r1, r4
 8007c42:	f000 829e 	beq.w	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8007c46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c4a:	4cb2      	ldr	r4, [pc, #712]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007c4c:	42a0      	cmp	r0, r4
 8007c4e:	f171 0100 	sbcs.w	r1, r1, #0
 8007c52:	f082 81e1 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c5a:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8007c5e:	4321      	orrs	r1, r4
 8007c60:	f000 826d 	beq.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8007c64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c68:	4cab      	ldr	r4, [pc, #684]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007c6a:	42a0      	cmp	r0, r4
 8007c6c:	f171 0100 	sbcs.w	r1, r1, #0
 8007c70:	f082 81d2 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c78:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8007c7c:	4321      	orrs	r1, r4
 8007c7e:	f001 800d 	beq.w	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8007c82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c86:	4ca5      	ldr	r4, [pc, #660]	; (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007c88:	42a0      	cmp	r0, r4
 8007c8a:	f171 0100 	sbcs.w	r1, r1, #0
 8007c8e:	f082 81c3 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c96:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8007c9a:	4321      	orrs	r1, r4
 8007c9c:	f000 81d0 	beq.w	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8007ca0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ca4:	4c9e      	ldr	r4, [pc, #632]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007ca6:	42a0      	cmp	r0, r4
 8007ca8:	f171 0100 	sbcs.w	r1, r1, #0
 8007cac:	f082 81b4 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007cb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cb4:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8007cb8:	4321      	orrs	r1, r4
 8007cba:	f000 8142 	beq.w	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8007cbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cc2:	4c98      	ldr	r4, [pc, #608]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007cc4:	42a0      	cmp	r0, r4
 8007cc6:	f171 0100 	sbcs.w	r1, r1, #0
 8007cca:	f082 81a5 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007cce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cd2:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8007cd6:	4321      	orrs	r1, r4
 8007cd8:	f001 824e 	beq.w	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8007cdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ce0:	4c91      	ldr	r4, [pc, #580]	; (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007ce2:	42a0      	cmp	r0, r4
 8007ce4:	f171 0100 	sbcs.w	r1, r1, #0
 8007ce8:	f082 8196 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007cec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cf0:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8007cf4:	4321      	orrs	r1, r4
 8007cf6:	f001 8197 	beq.w	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8007cfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cfe:	4c8b      	ldr	r4, [pc, #556]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007d00:	42a0      	cmp	r0, r4
 8007d02:	f171 0100 	sbcs.w	r1, r1, #0
 8007d06:	f082 8187 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d0e:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8007d12:	4321      	orrs	r1, r4
 8007d14:	f001 8154 	beq.w	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8007d18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d1c:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8007d20:	f171 0100 	sbcs.w	r1, r1, #0
 8007d24:	f082 8178 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d2c:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8007d30:	4321      	orrs	r1, r4
 8007d32:	f001 80b7 	beq.w	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007d36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d3a:	f248 0401 	movw	r4, #32769	; 0x8001
 8007d3e:	42a0      	cmp	r0, r4
 8007d40:	f171 0100 	sbcs.w	r1, r1, #0
 8007d44:	f082 8168 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d4c:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8007d50:	4321      	orrs	r1, r4
 8007d52:	f001 8064 	beq.w	8008e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8007d56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d5a:	f244 0401 	movw	r4, #16385	; 0x4001
 8007d5e:	42a0      	cmp	r0, r4
 8007d60:	f171 0100 	sbcs.w	r1, r1, #0
 8007d64:	f082 8158 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d6c:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8007d70:	4321      	orrs	r1, r4
 8007d72:	f001 8011 	beq.w	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8007d76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d7a:	f242 0401 	movw	r4, #8193	; 0x2001
 8007d7e:	42a0      	cmp	r0, r4
 8007d80:	f171 0100 	sbcs.w	r1, r1, #0
 8007d84:	f082 8148 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d8c:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8007d90:	4321      	orrs	r1, r4
 8007d92:	f000 871e 	beq.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8007d96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d9a:	f241 0401 	movw	r4, #4097	; 0x1001
 8007d9e:	42a0      	cmp	r0, r4
 8007da0:	f171 0100 	sbcs.w	r1, r1, #0
 8007da4:	f082 8138 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007da8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dac:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8007db0:	4321      	orrs	r1, r4
 8007db2:	f000 86a8 	beq.w	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8007db6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dba:	f640 0401 	movw	r4, #2049	; 0x801
 8007dbe:	42a0      	cmp	r0, r4
 8007dc0:	f171 0100 	sbcs.w	r1, r1, #0
 8007dc4:	f082 8128 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007dc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dcc:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8007dd0:	4321      	orrs	r1, r4
 8007dd2:	f000 8632 	beq.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8007dd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dda:	f240 4401 	movw	r4, #1025	; 0x401
 8007dde:	42a0      	cmp	r0, r4
 8007de0:	f171 0100 	sbcs.w	r1, r1, #0
 8007de4:	f082 8118 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007de8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dec:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8007df0:	4321      	orrs	r1, r4
 8007df2:	f000 85b0 	beq.w	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8007df6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dfa:	f240 2401 	movw	r4, #513	; 0x201
 8007dfe:	42a0      	cmp	r0, r4
 8007e00:	f171 0100 	sbcs.w	r1, r1, #0
 8007e04:	f082 8108 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e0c:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8007e10:	4321      	orrs	r1, r4
 8007e12:	f000 8535 	beq.w	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8007e16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e1a:	f240 1401 	movw	r4, #257	; 0x101
 8007e1e:	42a0      	cmp	r0, r4
 8007e20:	f171 0100 	sbcs.w	r1, r1, #0
 8007e24:	f082 80f8 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e2c:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8007e30:	4321      	orrs	r1, r4
 8007e32:	f000 84ba 	beq.w	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8007e36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e3a:	2881      	cmp	r0, #129	; 0x81
 8007e3c:	f171 0100 	sbcs.w	r1, r1, #0
 8007e40:	f082 80ea 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e48:	2821      	cmp	r0, #33	; 0x21
 8007e4a:	f171 0100 	sbcs.w	r1, r1, #0
 8007e4e:	d26f      	bcs.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007e50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e54:	4301      	orrs	r1, r0
 8007e56:	f002 80df 	beq.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e5e:	1e42      	subs	r2, r0, #1
 8007e60:	f141 33ff 	adc.w	r3, r1, #4294967295
 8007e64:	2a20      	cmp	r2, #32
 8007e66:	f173 0100 	sbcs.w	r1, r3, #0
 8007e6a:	f082 80d5 	bcs.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e6e:	2a1f      	cmp	r2, #31
 8007e70:	f202 80d2 	bhi.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e74:	a101      	add	r1, pc, #4	; (adr r1, 8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8007e76:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007e7a:	bf00      	nop
 8007e7c:	080081dd 	.word	0x080081dd
 8007e80:	080082a9 	.word	0x080082a9
 8007e84:	0800a019 	.word	0x0800a019
 8007e88:	08008369 	.word	0x08008369
 8007e8c:	0800a019 	.word	0x0800a019
 8007e90:	0800a019 	.word	0x0800a019
 8007e94:	0800a019 	.word	0x0800a019
 8007e98:	08008439 	.word	0x08008439
 8007e9c:	0800a019 	.word	0x0800a019
 8007ea0:	0800a019 	.word	0x0800a019
 8007ea4:	0800a019 	.word	0x0800a019
 8007ea8:	0800a019 	.word	0x0800a019
 8007eac:	0800a019 	.word	0x0800a019
 8007eb0:	0800a019 	.word	0x0800a019
 8007eb4:	0800a019 	.word	0x0800a019
 8007eb8:	0800851b 	.word	0x0800851b
 8007ebc:	0800a019 	.word	0x0800a019
 8007ec0:	0800a019 	.word	0x0800a019
 8007ec4:	0800a019 	.word	0x0800a019
 8007ec8:	0800a019 	.word	0x0800a019
 8007ecc:	0800a019 	.word	0x0800a019
 8007ed0:	0800a019 	.word	0x0800a019
 8007ed4:	0800a019 	.word	0x0800a019
 8007ed8:	0800a019 	.word	0x0800a019
 8007edc:	0800a019 	.word	0x0800a019
 8007ee0:	0800a019 	.word	0x0800a019
 8007ee4:	0800a019 	.word	0x0800a019
 8007ee8:	0800a019 	.word	0x0800a019
 8007eec:	0800a019 	.word	0x0800a019
 8007ef0:	0800a019 	.word	0x0800a019
 8007ef4:	0800a019 	.word	0x0800a019
 8007ef8:	080085f1 	.word	0x080085f1
 8007efc:	80000001 	.word	0x80000001
 8007f00:	40000001 	.word	0x40000001
 8007f04:	20000001 	.word	0x20000001
 8007f08:	10000001 	.word	0x10000001
 8007f0c:	08000001 	.word	0x08000001
 8007f10:	04000001 	.word	0x04000001
 8007f14:	00800001 	.word	0x00800001
 8007f18:	00400001 	.word	0x00400001
 8007f1c:	00200001 	.word	0x00200001
 8007f20:	00100001 	.word	0x00100001
 8007f24:	00080001 	.word	0x00080001
 8007f28:	00040001 	.word	0x00040001
 8007f2c:	00020001 	.word	0x00020001
 8007f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f34:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	f000 83c4 	beq.w	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007f3e:	f002 b86b 	b.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007f42:	4ba1      	ldr	r3, [pc, #644]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f48:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f54:	d036      	beq.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8007f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f5c:	d86b      	bhi.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f64:	d02b      	beq.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f6c:	d863      	bhi.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f74:	d01b      	beq.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f7c:	d85b      	bhi.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d004      	beq.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8007f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f8a:	d008      	beq.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8007f8c:	e053      	b.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f8e:	f107 0320 	add.w	r3, r7, #32
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7ff f8ba 	bl	800710c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f9c:	e04e      	b.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f9e:	f107 0314 	add.w	r3, r7, #20
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7ff fa1c 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007fac:	e046      	b.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fae:	f107 0308 	add.w	r3, r7, #8
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7ff fb7e 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007fbc:	e03e      	b.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007fbe:	4b83      	ldr	r3, [pc, #524]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007fc0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007fc2:	e03b      	b.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fc4:	4b80      	ldr	r3, [pc, #512]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007fc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007fca:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007fce:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fd0:	4b7d      	ldr	r3, [pc, #500]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0302 	and.w	r3, r3, #2
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d10c      	bne.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8007fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d109      	bne.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007fe2:	4b79      	ldr	r3, [pc, #484]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	08db      	lsrs	r3, r3, #3
 8007fe8:	f003 0303 	and.w	r3, r3, #3
 8007fec:	4a78      	ldr	r2, [pc, #480]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007fee:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ff4:	e01e      	b.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ff6:	4b74      	ldr	r3, [pc, #464]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008002:	d106      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800800a:	d102      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800800c:	4b71      	ldr	r3, [pc, #452]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800800e:	637b      	str	r3, [r7, #52]	; 0x34
 8008010:	e010      	b.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008012:	4b6d      	ldr	r3, [pc, #436]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800801a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800801e:	d106      	bne.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8008020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008022:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008026:	d102      	bne.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008028:	4b6b      	ldr	r3, [pc, #428]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800802a:	637b      	str	r3, [r7, #52]	; 0x34
 800802c:	e002      	b.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800802e:	2300      	movs	r3, #0
 8008030:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008032:	e003      	b.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8008034:	e002      	b.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8008036:	2300      	movs	r3, #0
 8008038:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800803a:	bf00      	nop
          }
        }
        break;
 800803c:	f001 bfef 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008040:	4b61      	ldr	r3, [pc, #388]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008042:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008046:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800804a:	633b      	str	r3, [r7, #48]	; 0x30
 800804c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008052:	d036      	beq.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8008054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008056:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800805a:	d86b      	bhi.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800805c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008062:	d02b      	beq.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008066:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800806a:	d863      	bhi.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800806c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008072:	d01b      	beq.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800807a:	d85b      	bhi.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800807c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807e:	2b00      	cmp	r3, #0
 8008080:	d004      	beq.n	800808c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008084:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008088:	d008      	beq.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800808a:	e053      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800808c:	f107 0320 	add.w	r3, r7, #32
 8008090:	4618      	mov	r0, r3
 8008092:	f7ff f83b 	bl	800710c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008098:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800809a:	e04e      	b.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800809c:	f107 0314 	add.w	r3, r7, #20
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7ff f99d 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80080aa:	e046      	b.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080ac:	f107 0308 	add.w	r3, r7, #8
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7ff faff 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80080ba:	e03e      	b.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80080bc:	4b43      	ldr	r3, [pc, #268]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80080be:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80080c0:	e03b      	b.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080c2:	4b41      	ldr	r3, [pc, #260]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80080c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80080c8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80080cc:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080ce:	4b3e      	ldr	r3, [pc, #248]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 0302 	and.w	r3, r3, #2
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d10c      	bne.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80080da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d109      	bne.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80080e0:	4b39      	ldr	r3, [pc, #228]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	08db      	lsrs	r3, r3, #3
 80080e6:	f003 0303 	and.w	r3, r3, #3
 80080ea:	4a39      	ldr	r2, [pc, #228]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80080ec:	fa22 f303 	lsr.w	r3, r2, r3
 80080f0:	637b      	str	r3, [r7, #52]	; 0x34
 80080f2:	e01e      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080f4:	4b34      	ldr	r3, [pc, #208]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008100:	d106      	bne.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008108:	d102      	bne.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800810a:	4b32      	ldr	r3, [pc, #200]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800810c:	637b      	str	r3, [r7, #52]	; 0x34
 800810e:	e010      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008110:	4b2d      	ldr	r3, [pc, #180]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800811c:	d106      	bne.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800811e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008124:	d102      	bne.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008126:	4b2c      	ldr	r3, [pc, #176]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008128:	637b      	str	r3, [r7, #52]	; 0x34
 800812a:	e002      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800812c:	2300      	movs	r3, #0
 800812e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008130:	e003      	b.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8008132:	e002      	b.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8008134:	2300      	movs	r3, #0
 8008136:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008138:	bf00      	nop
          }
        }
        break;
 800813a:	f001 bf70 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800813e:	4b22      	ldr	r3, [pc, #136]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008140:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008148:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	2b00      	cmp	r3, #0
 800814e:	d108      	bne.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008150:	f107 0320 	add.w	r3, r7, #32
 8008154:	4618      	mov	r0, r3
 8008156:	f7fe ffd9 	bl	800710c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800815e:	f001 bf5e 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8008162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008164:	2b40      	cmp	r3, #64	; 0x40
 8008166:	d108      	bne.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008168:	f107 0314 	add.w	r3, r7, #20
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff f937 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008176:	f001 bf52 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800817a:	2300      	movs	r3, #0
 800817c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800817e:	f001 bf4e 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8008182:	4b11      	ldr	r3, [pc, #68]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008184:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800818c:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	2b00      	cmp	r3, #0
 8008192:	d108      	bne.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008194:	f107 0320 	add.w	r3, r7, #32
 8008198:	4618      	mov	r0, r3
 800819a:	f7fe ffb7 	bl	800710c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80081a2:	f001 bf3c 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	2b80      	cmp	r3, #128	; 0x80
 80081aa:	d108      	bne.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081ac:	f107 0314 	add.w	r3, r7, #20
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff f915 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081ba:	f001 bf30 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081c2:	f001 bf2c 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80081c6:	bf00      	nop
 80081c8:	44020c00 	.word	0x44020c00
 80081cc:	00bb8000 	.word	0x00bb8000
 80081d0:	03d09000 	.word	0x03d09000
 80081d4:	003d0900 	.word	0x003d0900
 80081d8:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80081dc:	4b9d      	ldr	r3, [pc, #628]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80081de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80081e2:	f003 0307 	and.w	r3, r3, #7
 80081e6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d104      	bne.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80081ee:	f7fc ff9f 	bl	8005130 <HAL_RCC_GetPCLK2Freq>
 80081f2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80081f4:	f001 bf13 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80081f8:	4b96      	ldr	r3, [pc, #600]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008200:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008204:	d10a      	bne.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8008206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008208:	2b01      	cmp	r3, #1
 800820a:	d107      	bne.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800820c:	f107 0314 	add.w	r3, r7, #20
 8008210:	4618      	mov	r0, r3
 8008212:	f7ff f8e5 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	637b      	str	r3, [r7, #52]	; 0x34
 800821a:	e043      	b.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800821c:	4b8d      	ldr	r3, [pc, #564]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008228:	d10a      	bne.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	2b02      	cmp	r3, #2
 800822e:	d107      	bne.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008230:	f107 0308 	add.w	r3, r7, #8
 8008234:	4618      	mov	r0, r3
 8008236:	f7ff fa3d 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	637b      	str	r3, [r7, #52]	; 0x34
 800823e:	e031      	b.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008240:	4b84      	ldr	r3, [pc, #528]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0302 	and.w	r3, r3, #2
 8008248:	2b02      	cmp	r3, #2
 800824a:	d10c      	bne.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	2b03      	cmp	r3, #3
 8008250:	d109      	bne.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008252:	4b80      	ldr	r3, [pc, #512]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	08db      	lsrs	r3, r3, #3
 8008258:	f003 0303 	and.w	r3, r3, #3
 800825c:	4a7e      	ldr	r2, [pc, #504]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800825e:	fa22 f303 	lsr.w	r3, r2, r3
 8008262:	637b      	str	r3, [r7, #52]	; 0x34
 8008264:	e01e      	b.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8008266:	4b7b      	ldr	r3, [pc, #492]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800826e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008272:	d105      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8008274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008276:	2b04      	cmp	r3, #4
 8008278:	d102      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800827a:	4b78      	ldr	r3, [pc, #480]	; (800845c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800827c:	637b      	str	r3, [r7, #52]	; 0x34
 800827e:	e011      	b.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008280:	4b74      	ldr	r3, [pc, #464]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b02      	cmp	r3, #2
 800828c:	d106      	bne.n	800829c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800828e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008290:	2b05      	cmp	r3, #5
 8008292:	d103      	bne.n	800829c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8008294:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008298:	637b      	str	r3, [r7, #52]	; 0x34
 800829a:	e003      	b.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082a0:	f001 bebd 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80082a4:	f001 bebb 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80082a8:	4b6a      	ldr	r3, [pc, #424]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80082aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80082ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082b2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80082b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d104      	bne.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80082ba:	f7fc ff23 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 80082be:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80082c0:	f001 bead 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80082c4:	4b63      	ldr	r3, [pc, #396]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082d0:	d10a      	bne.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80082d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d4:	2b08      	cmp	r3, #8
 80082d6:	d107      	bne.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082d8:	f107 0314 	add.w	r3, r7, #20
 80082dc:	4618      	mov	r0, r3
 80082de:	f7ff f87f 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	637b      	str	r3, [r7, #52]	; 0x34
 80082e6:	e03d      	b.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80082e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ea:	2b10      	cmp	r3, #16
 80082ec:	d108      	bne.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082ee:	f107 0308 	add.w	r3, r7, #8
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7ff f9de 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082fc:	f001 be8f 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008300:	4b54      	ldr	r3, [pc, #336]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0302 	and.w	r3, r3, #2
 8008308:	2b02      	cmp	r3, #2
 800830a:	d10c      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800830c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830e:	2b18      	cmp	r3, #24
 8008310:	d109      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008312:	4b50      	ldr	r3, [pc, #320]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	08db      	lsrs	r3, r3, #3
 8008318:	f003 0303 	and.w	r3, r3, #3
 800831c:	4a4e      	ldr	r2, [pc, #312]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800831e:	fa22 f303 	lsr.w	r3, r2, r3
 8008322:	637b      	str	r3, [r7, #52]	; 0x34
 8008324:	e01e      	b.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8008326:	4b4b      	ldr	r3, [pc, #300]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800832e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008332:	d105      	bne.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008336:	2b20      	cmp	r3, #32
 8008338:	d102      	bne.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800833a:	4b48      	ldr	r3, [pc, #288]	; (800845c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800833c:	637b      	str	r3, [r7, #52]	; 0x34
 800833e:	e011      	b.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008340:	4b44      	ldr	r3, [pc, #272]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008342:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	2b02      	cmp	r3, #2
 800834c:	d106      	bne.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008350:	2b28      	cmp	r3, #40	; 0x28
 8008352:	d103      	bne.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8008354:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008358:	637b      	str	r3, [r7, #52]	; 0x34
 800835a:	e003      	b.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800835c:	2300      	movs	r3, #0
 800835e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008360:	f001 be5d 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008364:	f001 be5b 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008368:	4b3a      	ldr	r3, [pc, #232]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800836a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800836e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008372:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008376:	2b00      	cmp	r3, #0
 8008378:	d104      	bne.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800837a:	f7fc fec3 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 800837e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008380:	f001 be4d 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008384:	4b33      	ldr	r3, [pc, #204]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800838c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008390:	d10a      	bne.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8008392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008394:	2b40      	cmp	r3, #64	; 0x40
 8008396:	d107      	bne.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008398:	f107 0314 	add.w	r3, r7, #20
 800839c:	4618      	mov	r0, r3
 800839e:	f7ff f81f 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	637b      	str	r3, [r7, #52]	; 0x34
 80083a6:	e045      	b.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80083a8:	4b2a      	ldr	r3, [pc, #168]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083b4:	d10a      	bne.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80083b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b8:	2b80      	cmp	r3, #128	; 0x80
 80083ba:	d107      	bne.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083bc:	f107 0308 	add.w	r3, r7, #8
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7ff f977 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	637b      	str	r3, [r7, #52]	; 0x34
 80083ca:	e033      	b.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80083cc:	4b21      	ldr	r3, [pc, #132]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 0302 	and.w	r3, r3, #2
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d10c      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80083d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083da:	2bc0      	cmp	r3, #192	; 0xc0
 80083dc:	d109      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083de:	4b1d      	ldr	r3, [pc, #116]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	08db      	lsrs	r3, r3, #3
 80083e4:	f003 0303 	and.w	r3, r3, #3
 80083e8:	4a1b      	ldr	r2, [pc, #108]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80083ea:	fa22 f303 	lsr.w	r3, r2, r3
 80083ee:	637b      	str	r3, [r7, #52]	; 0x34
 80083f0:	e020      	b.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80083f2:	4b18      	ldr	r3, [pc, #96]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083fe:	d106      	bne.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8008400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008406:	d102      	bne.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8008408:	4b14      	ldr	r3, [pc, #80]	; (800845c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800840a:	637b      	str	r3, [r7, #52]	; 0x34
 800840c:	e012      	b.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800840e:	4b11      	ldr	r3, [pc, #68]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008414:	f003 0302 	and.w	r3, r3, #2
 8008418:	2b02      	cmp	r3, #2
 800841a:	d107      	bne.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800841c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008422:	d103      	bne.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8008424:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008428:	637b      	str	r3, [r7, #52]	; 0x34
 800842a:	e003      	b.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800842c:	2300      	movs	r3, #0
 800842e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008430:	f001 bdf5 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008434:	f001 bdf3 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008438:	4b06      	ldr	r3, [pc, #24]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800843a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800843e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8008442:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10a      	bne.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800844a:	f7fc fe5b 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 800844e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008450:	f001 bde5 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008454:	44020c00 	.word	0x44020c00
 8008458:	03d09000 	.word	0x03d09000
 800845c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008460:	4ba0      	ldr	r3, [pc, #640]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800846c:	d10b      	bne.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008474:	d107      	bne.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008476:	f107 0314 	add.w	r3, r7, #20
 800847a:	4618      	mov	r0, r3
 800847c:	f7fe ffb0 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	637b      	str	r3, [r7, #52]	; 0x34
 8008484:	e047      	b.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8008486:	4b97      	ldr	r3, [pc, #604]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800848e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008492:	d10b      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800849a:	d107      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800849c:	f107 0308 	add.w	r3, r7, #8
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7ff f907 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	637b      	str	r3, [r7, #52]	; 0x34
 80084aa:	e034      	b.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80084ac:	4b8d      	ldr	r3, [pc, #564]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0302 	and.w	r3, r3, #2
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	d10d      	bne.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80084b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ba:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80084be:	d109      	bne.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084c0:	4b88      	ldr	r3, [pc, #544]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	08db      	lsrs	r3, r3, #3
 80084c6:	f003 0303 	and.w	r3, r3, #3
 80084ca:	4a87      	ldr	r2, [pc, #540]	; (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80084cc:	fa22 f303 	lsr.w	r3, r2, r3
 80084d0:	637b      	str	r3, [r7, #52]	; 0x34
 80084d2:	e020      	b.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80084d4:	4b83      	ldr	r3, [pc, #524]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084e0:	d106      	bne.n	80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80084e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084e8:	d102      	bne.n	80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 80084ea:	4b80      	ldr	r3, [pc, #512]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80084ec:	637b      	str	r3, [r7, #52]	; 0x34
 80084ee:	e012      	b.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80084f0:	4b7c      	ldr	r3, [pc, #496]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80084f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084f6:	f003 0302 	and.w	r3, r3, #2
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d107      	bne.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008504:	d103      	bne.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8008506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800850a:	637b      	str	r3, [r7, #52]	; 0x34
 800850c:	e003      	b.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800850e:	2300      	movs	r3, #0
 8008510:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008512:	f001 bd84 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008516:	f001 bd82 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800851a:	4b72      	ldr	r3, [pc, #456]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800851c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008520:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008524:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008528:	2b00      	cmp	r3, #0
 800852a:	d104      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800852c:	f7fc fdea 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 8008530:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8008532:	f001 bd74 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8008536:	4b6b      	ldr	r3, [pc, #428]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800853e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008542:	d10b      	bne.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8008544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800854a:	d107      	bne.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800854c:	f107 0314 	add.w	r3, r7, #20
 8008550:	4618      	mov	r0, r3
 8008552:	f7fe ff45 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	637b      	str	r3, [r7, #52]	; 0x34
 800855a:	e047      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800855c:	4b61      	ldr	r3, [pc, #388]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008568:	d10b      	bne.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008570:	d107      	bne.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008572:	f107 0308 	add.w	r3, r7, #8
 8008576:	4618      	mov	r0, r3
 8008578:	f7ff f89c 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	637b      	str	r3, [r7, #52]	; 0x34
 8008580:	e034      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008582:	4b58      	ldr	r3, [pc, #352]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b02      	cmp	r3, #2
 800858c:	d10d      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008594:	d109      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008596:	4b53      	ldr	r3, [pc, #332]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	08db      	lsrs	r3, r3, #3
 800859c:	f003 0303 	and.w	r3, r3, #3
 80085a0:	4a51      	ldr	r2, [pc, #324]	; (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80085a2:	fa22 f303 	lsr.w	r3, r2, r3
 80085a6:	637b      	str	r3, [r7, #52]	; 0x34
 80085a8:	e020      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80085aa:	4b4e      	ldr	r3, [pc, #312]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085b6:	d106      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80085b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085be:	d102      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 80085c0:	4b4a      	ldr	r3, [pc, #296]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80085c2:	637b      	str	r3, [r7, #52]	; 0x34
 80085c4:	e012      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80085c6:	4b47      	ldr	r3, [pc, #284]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80085c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085cc:	f003 0302 	and.w	r3, r3, #2
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d107      	bne.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80085d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80085da:	d103      	bne.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 80085dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085e0:	637b      	str	r3, [r7, #52]	; 0x34
 80085e2:	e003      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085e8:	f001 bd19 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80085ec:	f001 bd17 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80085f0:	4b3c      	ldr	r3, [pc, #240]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80085f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80085f6:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 80085fa:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80085fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d104      	bne.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008602:	f7fc fd7f 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 8008606:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8008608:	f001 bd09 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800860c:	4b35      	ldr	r3, [pc, #212]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008614:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008618:	d10b      	bne.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800861a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008620:	d107      	bne.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008622:	f107 0314 	add.w	r3, r7, #20
 8008626:	4618      	mov	r0, r3
 8008628:	f7fe feda 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	637b      	str	r3, [r7, #52]	; 0x34
 8008630:	e047      	b.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8008632:	4b2c      	ldr	r3, [pc, #176]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800863a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800863e:	d10b      	bne.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8008640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008646:	d107      	bne.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008648:	f107 0308 	add.w	r3, r7, #8
 800864c:	4618      	mov	r0, r3
 800864e:	f7ff f831 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	637b      	str	r3, [r7, #52]	; 0x34
 8008656:	e034      	b.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008658:	4b22      	ldr	r3, [pc, #136]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 0302 	and.w	r3, r3, #2
 8008660:	2b02      	cmp	r3, #2
 8008662:	d10d      	bne.n	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8008664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008666:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800866a:	d109      	bne.n	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800866c:	4b1d      	ldr	r3, [pc, #116]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	08db      	lsrs	r3, r3, #3
 8008672:	f003 0303 	and.w	r3, r3, #3
 8008676:	4a1c      	ldr	r2, [pc, #112]	; (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008678:	fa22 f303 	lsr.w	r3, r2, r3
 800867c:	637b      	str	r3, [r7, #52]	; 0x34
 800867e:	e020      	b.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8008680:	4b18      	ldr	r3, [pc, #96]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800868c:	d106      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008694:	d102      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8008696:	4b15      	ldr	r3, [pc, #84]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008698:	637b      	str	r3, [r7, #52]	; 0x34
 800869a:	e012      	b.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800869c:	4b11      	ldr	r3, [pc, #68]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800869e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80086a2:	f003 0302 	and.w	r3, r3, #2
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d107      	bne.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ac:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80086b0:	d103      	bne.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 80086b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086b6:	637b      	str	r3, [r7, #52]	; 0x34
 80086b8:	e003      	b.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 80086ba:	2300      	movs	r3, #0
 80086bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086be:	f001 bcae 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086c2:	f001 bcac 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80086c6:	4b07      	ldr	r3, [pc, #28]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80086c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80086cc:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 80086d0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10b      	bne.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80086d8:	f7fc fd14 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 80086dc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 80086de:	f001 bc9e 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086e2:	bf00      	nop
 80086e4:	44020c00 	.word	0x44020c00
 80086e8:	03d09000 	.word	0x03d09000
 80086ec:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 80086f0:	4ba0      	ldr	r3, [pc, #640]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086fc:	d10b      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008704:	d107      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008706:	f107 0314 	add.w	r3, r7, #20
 800870a:	4618      	mov	r0, r3
 800870c:	f7fe fe68 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	637b      	str	r3, [r7, #52]	; 0x34
 8008714:	e047      	b.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8008716:	4b97      	ldr	r3, [pc, #604]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800871e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008722:	d10b      	bne.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8008724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008726:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800872a:	d107      	bne.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800872c:	f107 0308 	add.w	r3, r7, #8
 8008730:	4618      	mov	r0, r3
 8008732:	f7fe ffbf 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	637b      	str	r3, [r7, #52]	; 0x34
 800873a:	e034      	b.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800873c:	4b8d      	ldr	r3, [pc, #564]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0302 	and.w	r3, r3, #2
 8008744:	2b02      	cmp	r3, #2
 8008746:	d10d      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800874e:	d109      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008750:	4b88      	ldr	r3, [pc, #544]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	08db      	lsrs	r3, r3, #3
 8008756:	f003 0303 	and.w	r3, r3, #3
 800875a:	4a87      	ldr	r2, [pc, #540]	; (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800875c:	fa22 f303 	lsr.w	r3, r2, r3
 8008760:	637b      	str	r3, [r7, #52]	; 0x34
 8008762:	e020      	b.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8008764:	4b83      	ldr	r3, [pc, #524]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800876c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008770:	d106      	bne.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8008772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008778:	d102      	bne.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800877a:	4b80      	ldr	r3, [pc, #512]	; (800897c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800877c:	637b      	str	r3, [r7, #52]	; 0x34
 800877e:	e012      	b.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8008780:	4b7c      	ldr	r3, [pc, #496]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008786:	f003 0302 	and.w	r3, r3, #2
 800878a:	2b02      	cmp	r3, #2
 800878c:	d107      	bne.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800878e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008790:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008794:	d103      	bne.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8008796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800879a:	637b      	str	r3, [r7, #52]	; 0x34
 800879c:	e003      	b.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80087a2:	f001 bc3c 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80087a6:	f001 bc3a 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80087aa:	4b72      	ldr	r3, [pc, #456]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80087ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80087b0:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80087b4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d104      	bne.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80087bc:	f7fc fca2 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 80087c0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80087c2:	f001 bc2c 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80087c6:	4b6b      	ldr	r3, [pc, #428]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087d2:	d10b      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80087d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087da:	d107      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087dc:	f107 0314 	add.w	r3, r7, #20
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fe fdfd 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	637b      	str	r3, [r7, #52]	; 0x34
 80087ea:	e047      	b.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 80087ec:	4b61      	ldr	r3, [pc, #388]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087f8:	d10b      	bne.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 80087fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008800:	d107      	bne.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008802:	f107 0308 	add.w	r3, r7, #8
 8008806:	4618      	mov	r0, r3
 8008808:	f7fe ff54 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	637b      	str	r3, [r7, #52]	; 0x34
 8008810:	e034      	b.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8008812:	4b58      	ldr	r3, [pc, #352]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0302 	and.w	r3, r3, #2
 800881a:	2b02      	cmp	r3, #2
 800881c:	d10d      	bne.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008820:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008824:	d109      	bne.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008826:	4b53      	ldr	r3, [pc, #332]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	08db      	lsrs	r3, r3, #3
 800882c:	f003 0303 	and.w	r3, r3, #3
 8008830:	4a51      	ldr	r2, [pc, #324]	; (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008832:	fa22 f303 	lsr.w	r3, r2, r3
 8008836:	637b      	str	r3, [r7, #52]	; 0x34
 8008838:	e020      	b.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800883a:	4b4e      	ldr	r3, [pc, #312]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008846:	d106      	bne.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8008848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800884e:	d102      	bne.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8008850:	4b4a      	ldr	r3, [pc, #296]	; (800897c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008852:	637b      	str	r3, [r7, #52]	; 0x34
 8008854:	e012      	b.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8008856:	4b47      	ldr	r3, [pc, #284]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800885c:	f003 0302 	and.w	r3, r3, #2
 8008860:	2b02      	cmp	r3, #2
 8008862:	d107      	bne.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8008864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008866:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800886a:	d103      	bne.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800886c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008870:	637b      	str	r3, [r7, #52]	; 0x34
 8008872:	e003      	b.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8008874:	2300      	movs	r3, #0
 8008876:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008878:	f001 bbd1 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800887c:	f001 bbcf 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8008880:	4b3c      	ldr	r3, [pc, #240]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008882:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008886:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800888a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800888c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888e:	2b00      	cmp	r3, #0
 8008890:	d104      	bne.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008892:	f7fc fc37 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 8008896:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8008898:	f001 bbc1 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800889c:	4b35      	ldr	r3, [pc, #212]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088a8:	d10b      	bne.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088b0:	d107      	bne.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088b2:	f107 0314 	add.w	r3, r7, #20
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fe fd92 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	637b      	str	r3, [r7, #52]	; 0x34
 80088c0:	e047      	b.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80088c2:	4b2c      	ldr	r3, [pc, #176]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088ce:	d10b      	bne.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80088d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088d6:	d107      	bne.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088d8:	f107 0308 	add.w	r3, r7, #8
 80088dc:	4618      	mov	r0, r3
 80088de:	f7fe fee9 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	637b      	str	r3, [r7, #52]	; 0x34
 80088e6:	e034      	b.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80088e8:	4b22      	ldr	r3, [pc, #136]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0302 	and.w	r3, r3, #2
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d10d      	bne.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 80088f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80088fa:	d109      	bne.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088fc:	4b1d      	ldr	r3, [pc, #116]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	08db      	lsrs	r3, r3, #3
 8008902:	f003 0303 	and.w	r3, r3, #3
 8008906:	4a1c      	ldr	r2, [pc, #112]	; (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008908:	fa22 f303 	lsr.w	r3, r2, r3
 800890c:	637b      	str	r3, [r7, #52]	; 0x34
 800890e:	e020      	b.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8008910:	4b18      	ldr	r3, [pc, #96]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800891c:	d106      	bne.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008924:	d102      	bne.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8008926:	4b15      	ldr	r3, [pc, #84]	; (800897c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008928:	637b      	str	r3, [r7, #52]	; 0x34
 800892a:	e012      	b.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800892c:	4b11      	ldr	r3, [pc, #68]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800892e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	2b02      	cmp	r3, #2
 8008938:	d107      	bne.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800893a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008940:	d103      	bne.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8008942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008946:	637b      	str	r3, [r7, #52]	; 0x34
 8008948:	e003      	b.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800894a:	2300      	movs	r3, #0
 800894c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800894e:	f001 bb66 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008952:	f001 bb64 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8008956:	4b07      	ldr	r3, [pc, #28]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008958:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800895c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8008960:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8008962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008964:	2b00      	cmp	r3, #0
 8008966:	d10b      	bne.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008968:	f7fc fbcc 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 800896c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800896e:	f001 bb56 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008972:	bf00      	nop
 8008974:	44020c00 	.word	0x44020c00
 8008978:	03d09000 	.word	0x03d09000
 800897c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8008980:	4ba1      	ldr	r3, [pc, #644]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008988:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800898c:	d10b      	bne.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800898e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008990:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008994:	d107      	bne.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008996:	f107 0314 	add.w	r3, r7, #20
 800899a:	4618      	mov	r0, r3
 800899c:	f7fe fd20 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	637b      	str	r3, [r7, #52]	; 0x34
 80089a4:	e047      	b.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80089a6:	4b98      	ldr	r3, [pc, #608]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089b2:	d10b      	bne.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80089b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089ba:	d107      	bne.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089bc:	f107 0308 	add.w	r3, r7, #8
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe fe77 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	637b      	str	r3, [r7, #52]	; 0x34
 80089ca:	e034      	b.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80089cc:	4b8e      	ldr	r3, [pc, #568]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d10d      	bne.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80089d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089da:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80089de:	d109      	bne.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089e0:	4b89      	ldr	r3, [pc, #548]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	08db      	lsrs	r3, r3, #3
 80089e6:	f003 0303 	and.w	r3, r3, #3
 80089ea:	4a88      	ldr	r2, [pc, #544]	; (8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80089ec:	fa22 f303 	lsr.w	r3, r2, r3
 80089f0:	637b      	str	r3, [r7, #52]	; 0x34
 80089f2:	e020      	b.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80089f4:	4b84      	ldr	r3, [pc, #528]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a00:	d106      	bne.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a08:	d102      	bne.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8008a0a:	4b81      	ldr	r3, [pc, #516]	; (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a0e:	e012      	b.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8008a10:	4b7d      	ldr	r3, [pc, #500]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008a12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a16:	f003 0302 	and.w	r3, r3, #2
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d107      	bne.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8008a24:	d103      	bne.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8008a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a2c:	e003      	b.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a32:	f001 baf4 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a36:	f001 baf2 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8008a3a:	4b73      	ldr	r3, [pc, #460]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008a3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008a40:	f003 0307 	and.w	r3, r3, #7
 8008a44:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8008a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d104      	bne.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a4c:	f7fc fb5a 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 8008a50:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a52:	f001 bae4 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8008a56:	4b6c      	ldr	r3, [pc, #432]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a62:	d10a      	bne.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8008a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d107      	bne.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a6a:	f107 0314 	add.w	r3, r7, #20
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fcb6 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	637b      	str	r3, [r7, #52]	; 0x34
 8008a78:	e043      	b.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8008a7a:	4b63      	ldr	r3, [pc, #396]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a86:	d10a      	bne.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8008a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d107      	bne.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a8e:	f107 0308 	add.w	r3, r7, #8
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fe fe0e 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a9c:	e031      	b.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8008a9e:	4b5a      	ldr	r3, [pc, #360]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0302 	and.w	r3, r3, #2
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d10c      	bne.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	d109      	bne.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ab0:	4b55      	ldr	r3, [pc, #340]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	08db      	lsrs	r3, r3, #3
 8008ab6:	f003 0303 	and.w	r3, r3, #3
 8008aba:	4a54      	ldr	r2, [pc, #336]	; (8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008abc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ac2:	e01e      	b.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8008ac4:	4b50      	ldr	r3, [pc, #320]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ad0:	d105      	bne.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad4:	2b04      	cmp	r3, #4
 8008ad6:	d102      	bne.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8008ad8:	4b4d      	ldr	r3, [pc, #308]	; (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008ada:	637b      	str	r3, [r7, #52]	; 0x34
 8008adc:	e011      	b.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8008ade:	4b4a      	ldr	r3, [pc, #296]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008ae0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ae4:	f003 0302 	and.w	r3, r3, #2
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d106      	bne.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	2b05      	cmp	r3, #5
 8008af0:	d103      	bne.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8008af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008af6:	637b      	str	r3, [r7, #52]	; 0x34
 8008af8:	e003      	b.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8008afa:	2300      	movs	r3, #0
 8008afc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008afe:	f001 ba8e 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b02:	f001 ba8c 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8008b06:	4b40      	ldr	r3, [pc, #256]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008b08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008b0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b10:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8008b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d104      	bne.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b18:	f7fc faf4 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 8008b1c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8008b1e:	f001 ba7e 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8008b22:	4b39      	ldr	r3, [pc, #228]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b2e:	d10a      	bne.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8008b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b32:	2b10      	cmp	r3, #16
 8008b34:	d107      	bne.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b36:	f107 0314 	add.w	r3, r7, #20
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe fc50 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	637b      	str	r3, [r7, #52]	; 0x34
 8008b44:	e043      	b.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8008b46:	4b30      	ldr	r3, [pc, #192]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b52:	d10a      	bne.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b56:	2b20      	cmp	r3, #32
 8008b58:	d107      	bne.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b5a:	f107 0308 	add.w	r3, r7, #8
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe fda8 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	637b      	str	r3, [r7, #52]	; 0x34
 8008b68:	e031      	b.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8008b6a:	4b27      	ldr	r3, [pc, #156]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0302 	and.w	r3, r3, #2
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d10c      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	2b30      	cmp	r3, #48	; 0x30
 8008b7a:	d109      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b7c:	4b22      	ldr	r3, [pc, #136]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	08db      	lsrs	r3, r3, #3
 8008b82:	f003 0303 	and.w	r3, r3, #3
 8008b86:	4a21      	ldr	r2, [pc, #132]	; (8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008b88:	fa22 f303 	lsr.w	r3, r2, r3
 8008b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b8e:	e01e      	b.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8008b90:	4b1d      	ldr	r3, [pc, #116]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b9c:	d105      	bne.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba0:	2b40      	cmp	r3, #64	; 0x40
 8008ba2:	d102      	bne.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8008ba4:	4b1a      	ldr	r3, [pc, #104]	; (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ba8:	e011      	b.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8008baa:	4b17      	ldr	r3, [pc, #92]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008bb0:	f003 0302 	and.w	r3, r3, #2
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d106      	bne.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bba:	2b50      	cmp	r3, #80	; 0x50
 8008bbc:	d103      	bne.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8008bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8008bc4:	e003      	b.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008bca:	f001 ba28 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bce:	f001 ba26 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008bd2:	4b0d      	ldr	r3, [pc, #52]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008bd8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008bdc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d104      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008be4:	f7fc faba 	bl	800515c <HAL_RCC_GetPCLK3Freq>
 8008be8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008bea:	f001 ba18 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8008bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008bf4:	d10e      	bne.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bf6:	f107 0314 	add.w	r3, r7, #20
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fe fbf0 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c04:	f001 ba0b 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c08:	44020c00 	.word	0x44020c00
 8008c0c:	03d09000 	.word	0x03d09000
 8008c10:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c1a:	d108      	bne.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c1c:	f107 0308 	add.w	r3, r7, #8
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fe fd47 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c2a:	f001 b9f8 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008c2e:	4ba4      	ldr	r3, [pc, #656]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0302 	and.w	r3, r3, #2
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d10d      	bne.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c40:	d109      	bne.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c42:	4b9f      	ldr	r3, [pc, #636]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	08db      	lsrs	r3, r3, #3
 8008c48:	f003 0303 	and.w	r3, r3, #3
 8008c4c:	4a9d      	ldr	r2, [pc, #628]	; (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c52:	637b      	str	r3, [r7, #52]	; 0x34
 8008c54:	e020      	b.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008c56:	4b9a      	ldr	r3, [pc, #616]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c62:	d106      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8008c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c6a:	d102      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8008c6c:	4b96      	ldr	r3, [pc, #600]	; (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c70:	e012      	b.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008c72:	4b93      	ldr	r3, [pc, #588]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c78:	f003 0302 	and.w	r3, r3, #2
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d107      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8008c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c82:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008c86:	d103      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8008c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c8e:	e003      	b.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8008c90:	2300      	movs	r3, #0
 8008c92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c94:	f001 b9c3 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c98:	f001 b9c1 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008c9c:	4b88      	ldr	r3, [pc, #544]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008ca2:	f003 0307 	and.w	r3, r3, #7
 8008ca6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d104      	bne.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8008cae:	f7fc fa0d 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 8008cb2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8008cb4:	f001 b9b3 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d104      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8008cbe:	f7fc f8d9 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8008cc2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008cc4:	f001 b9ab 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8008cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d108      	bne.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cce:	f107 0314 	add.w	r3, r7, #20
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe fb84 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008cdc:	f001 b99f 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008ce0:	4b77      	ldr	r3, [pc, #476]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ce8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cec:	d105      	bne.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8008cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf0:	2b03      	cmp	r3, #3
 8008cf2:	d102      	bne.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8008cf4:	4b75      	ldr	r3, [pc, #468]	; (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8008cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8008cf8:	e023      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008cfa:	4b71      	ldr	r3, [pc, #452]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0302 	and.w	r3, r3, #2
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d10c      	bne.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	2b04      	cmp	r3, #4
 8008d0a:	d109      	bne.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d0c:	4b6c      	ldr	r3, [pc, #432]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	08db      	lsrs	r3, r3, #3
 8008d12:	f003 0303 	and.w	r3, r3, #3
 8008d16:	4a6b      	ldr	r2, [pc, #428]	; (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008d18:	fa22 f303 	lsr.w	r3, r2, r3
 8008d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d1e:	e010      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008d20:	4b67      	ldr	r3, [pc, #412]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d2c:	d105      	bne.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8008d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d30:	2b05      	cmp	r3, #5
 8008d32:	d102      	bne.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8008d34:	4b64      	ldr	r3, [pc, #400]	; (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008d36:	637b      	str	r3, [r7, #52]	; 0x34
 8008d38:	e003      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d3e:	f001 b96e 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d42:	f001 b96c 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008d46:	4b5e      	ldr	r3, [pc, #376]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008d48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008d4c:	f003 0308 	and.w	r3, r3, #8
 8008d50:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008d52:	4b5b      	ldr	r3, [pc, #364]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d58:	f003 0302 	and.w	r3, r3, #2
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d106      	bne.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8008d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d103      	bne.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8008d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8008d6c:	e012      	b.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008d6e:	4b54      	ldr	r3, [pc, #336]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d7c:	d106      	bne.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d80:	2b08      	cmp	r3, #8
 8008d82:	d103      	bne.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8008d84:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008d88:	637b      	str	r3, [r7, #52]	; 0x34
 8008d8a:	e003      	b.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008d90:	f001 b945 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d94:	f001 b943 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008d98:	4b49      	ldr	r3, [pc, #292]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008d9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008d9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008da2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d104      	bne.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008daa:	f7fc f9ab 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 8008dae:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008db0:	f001 b935 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8008db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dba:	d108      	bne.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dbc:	f107 0308 	add.w	r3, r7, #8
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fe fc77 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008dca:	f001 b928 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008dce:	4b3c      	ldr	r3, [pc, #240]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0302 	and.w	r3, r3, #2
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d10d      	bne.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008de0:	d109      	bne.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008de2:	4b37      	ldr	r3, [pc, #220]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	08db      	lsrs	r3, r3, #3
 8008de8:	f003 0303 	and.w	r3, r3, #3
 8008dec:	4a35      	ldr	r2, [pc, #212]	; (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008dee:	fa22 f303 	lsr.w	r3, r2, r3
 8008df2:	637b      	str	r3, [r7, #52]	; 0x34
 8008df4:	e011      	b.n	8008e1a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8008df6:	4b32      	ldr	r3, [pc, #200]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e02:	d106      	bne.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e0a:	d102      	bne.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8008e0c:	4b2e      	ldr	r3, [pc, #184]	; (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8008e10:	e003      	b.n	8008e1a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8008e12:	2300      	movs	r3, #0
 8008e14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e16:	f001 b902 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e1a:	f001 b900 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008e1e:	4b28      	ldr	r3, [pc, #160]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008e20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008e24:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008e28:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d104      	bne.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e30:	f7fc f968 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 8008e34:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008e36:	f001 b8f2 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e40:	d108      	bne.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e42:	f107 0308 	add.w	r3, r7, #8
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fe fc34 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e50:	f001 b8e5 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008e54:	4b1a      	ldr	r3, [pc, #104]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 0302 	and.w	r3, r3, #2
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d10d      	bne.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8008e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008e66:	d109      	bne.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e68:	4b15      	ldr	r3, [pc, #84]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	08db      	lsrs	r3, r3, #3
 8008e6e:	f003 0303 	and.w	r3, r3, #3
 8008e72:	4a14      	ldr	r2, [pc, #80]	; (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008e74:	fa22 f303 	lsr.w	r3, r2, r3
 8008e78:	637b      	str	r3, [r7, #52]	; 0x34
 8008e7a:	e011      	b.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008e7c:	4b10      	ldr	r3, [pc, #64]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e88:	d106      	bne.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008e90:	d102      	bne.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8008e92:	4b0d      	ldr	r3, [pc, #52]	; (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008e94:	637b      	str	r3, [r7, #52]	; 0x34
 8008e96:	e003      	b.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e9c:	f001 b8bf 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ea0:	f001 b8bd 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008ea4:	4b06      	ldr	r3, [pc, #24]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ea6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008eaa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008eae:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10c      	bne.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008eb6:	f7fc f951 	bl	800515c <HAL_RCC_GetPCLK3Freq>
 8008eba:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008ebc:	f001 b8af 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ec0:	44020c00 	.word	0x44020c00
 8008ec4:	03d09000 	.word	0x03d09000
 8008ec8:	003d0900 	.word	0x003d0900
 8008ecc:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ed6:	d108      	bne.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ed8:	f107 0308 	add.w	r3, r7, #8
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fe fbe9 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ee6:	f001 b89a 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8008eea:	4b9f      	ldr	r3, [pc, #636]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 0302 	and.w	r3, r3, #2
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d10d      	bne.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008efc:	d109      	bne.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008efe:	4b9a      	ldr	r3, [pc, #616]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	08db      	lsrs	r3, r3, #3
 8008f04:	f003 0303 	and.w	r3, r3, #3
 8008f08:	4a98      	ldr	r2, [pc, #608]	; (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f10:	e011      	b.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8008f12:	4b95      	ldr	r3, [pc, #596]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f1e:	d106      	bne.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8008f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f26:	d102      	bne.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8008f28:	4b91      	ldr	r3, [pc, #580]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8008f2c:	e003      	b.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f32:	f001 b874 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008f36:	f001 b872 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008f3a:	4b8b      	ldr	r3, [pc, #556]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008f40:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008f44:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8008f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d104      	bne.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008f4c:	f7fc f906 	bl	800515c <HAL_RCC_GetPCLK3Freq>
 8008f50:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008f52:	f001 b864 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8008f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f5c:	d108      	bne.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f5e:	f107 0308 	add.w	r3, r7, #8
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fe fba6 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f6c:	f001 b857 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008f70:	4b7d      	ldr	r3, [pc, #500]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0302 	and.w	r3, r3, #2
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d10d      	bne.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f82:	d109      	bne.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f84:	4b78      	ldr	r3, [pc, #480]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	08db      	lsrs	r3, r3, #3
 8008f8a:	f003 0303 	and.w	r3, r3, #3
 8008f8e:	4a77      	ldr	r2, [pc, #476]	; (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008f90:	fa22 f303 	lsr.w	r3, r2, r3
 8008f94:	637b      	str	r3, [r7, #52]	; 0x34
 8008f96:	e011      	b.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8008f98:	4b73      	ldr	r3, [pc, #460]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fa4:	d106      	bne.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008fac:	d102      	bne.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8008fae:	4b70      	ldr	r3, [pc, #448]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8008fb2:	e003      	b.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008fb8:	f001 b831 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008fbc:	f001 b82f 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008fc0:	4b69      	ldr	r3, [pc, #420]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008fc2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008fc6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008fca:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d104      	bne.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008fd2:	f7fc f897 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 8008fd6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008fd8:	f001 b821 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8008fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008fe2:	d108      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fe4:	f107 0308 	add.w	r3, r7, #8
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fe fb63 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ff2:	f001 b814 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8008ff6:	4b5c      	ldr	r3, [pc, #368]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 0302 	and.w	r3, r3, #2
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d10e      	bne.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8009002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009004:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009008:	d10a      	bne.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800900a:	4b57      	ldr	r3, [pc, #348]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	08db      	lsrs	r3, r3, #3
 8009010:	f003 0303 	and.w	r3, r3, #3
 8009014:	4a55      	ldr	r2, [pc, #340]	; (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009016:	fa22 f303 	lsr.w	r3, r2, r3
 800901a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800901c:	f000 bfff 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009020:	2300      	movs	r3, #0
 8009022:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009024:	f000 bffb 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009028:	4b4f      	ldr	r3, [pc, #316]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800902a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800902e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009032:	633b      	str	r3, [r7, #48]	; 0x30
 8009034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009036:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800903a:	d056      	beq.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800903c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009042:	f200 808b 	bhi.w	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800904c:	d03e      	beq.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800904e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009054:	f200 8082 	bhi.w	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800905e:	d027      	beq.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8009060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009066:	d879      	bhi.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800906e:	d017      	beq.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8009070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009076:	d871      	bhi.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907a:	2b00      	cmp	r3, #0
 800907c:	d004      	beq.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009084:	d004      	beq.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8009086:	e069      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009088:	f7fc f868 	bl	800515c <HAL_RCC_GetPCLK3Freq>
 800908c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800908e:	e068      	b.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009090:	f107 0314 	add.w	r3, r7, #20
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe f9a3 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800909e:	e060      	b.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090a0:	f107 0308 	add.w	r3, r7, #8
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fe fb05 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80090ae:	e058      	b.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80090b0:	4b2d      	ldr	r3, [pc, #180]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80090b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d103      	bne.n	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 80090be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090c2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80090c4:	e04d      	b.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80090c6:	2300      	movs	r3, #0
 80090c8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80090ca:	e04a      	b.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80090cc:	4b26      	ldr	r3, [pc, #152]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80090ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80090d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090da:	d103      	bne.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 80090dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80090e0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80090e2:	e03e      	b.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80090e4:	2300      	movs	r3, #0
 80090e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80090e8:	e03b      	b.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090ea:	4b1f      	ldr	r3, [pc, #124]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80090ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80090f0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80090f4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090f6:	4b1c      	ldr	r3, [pc, #112]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 0302 	and.w	r3, r3, #2
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d10c      	bne.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8009102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009104:	2b00      	cmp	r3, #0
 8009106:	d109      	bne.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009108:	4b17      	ldr	r3, [pc, #92]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	08db      	lsrs	r3, r3, #3
 800910e:	f003 0303 	and.w	r3, r3, #3
 8009112:	4a16      	ldr	r2, [pc, #88]	; (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009114:	fa22 f303 	lsr.w	r3, r2, r3
 8009118:	637b      	str	r3, [r7, #52]	; 0x34
 800911a:	e01e      	b.n	800915a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800911c:	4b12      	ldr	r3, [pc, #72]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009128:	d106      	bne.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800912a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009130:	d102      	bne.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009132:	4b0f      	ldr	r3, [pc, #60]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009134:	637b      	str	r3, [r7, #52]	; 0x34
 8009136:	e010      	b.n	800915a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009138:	4b0b      	ldr	r3, [pc, #44]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009144:	d106      	bne.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8009146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800914c:	d102      	bne.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800914e:	4b09      	ldr	r3, [pc, #36]	; (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8009150:	637b      	str	r3, [r7, #52]	; 0x34
 8009152:	e002      	b.n	800915a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009154:	2300      	movs	r3, #0
 8009156:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009158:	e003      	b.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800915a:	e002      	b.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800915c:	2300      	movs	r3, #0
 800915e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009160:	bf00      	nop
          }
        }
        break;
 8009162:	f000 bf5c 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009166:	bf00      	nop
 8009168:	44020c00 	.word	0x44020c00
 800916c:	03d09000 	.word	0x03d09000
 8009170:	003d0900 	.word	0x003d0900
 8009174:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009178:	4b9e      	ldr	r3, [pc, #632]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800917a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800917e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009182:	633b      	str	r3, [r7, #48]	; 0x30
 8009184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009186:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800918a:	d056      	beq.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800918c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009192:	f200 808b 	bhi.w	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800919c:	d03e      	beq.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091a4:	f200 8082 	bhi.w	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80091a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80091ae:	d027      	beq.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 80091b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80091b6:	d879      	bhi.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80091b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091be:	d017      	beq.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80091c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091c6:	d871      	bhi.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80091c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d004      	beq.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 80091ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091d4:	d004      	beq.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 80091d6:	e069      	b.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80091d8:	f7fb ff94 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 80091dc:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80091de:	e068      	b.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091e0:	f107 0314 	add.w	r3, r7, #20
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7fe f8fb 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80091ee:	e060      	b.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091f0:	f107 0308 	add.w	r3, r7, #8
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7fe fa5d 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80091fe:	e058      	b.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009200:	4b7c      	ldr	r3, [pc, #496]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009206:	f003 0302 	and.w	r3, r3, #2
 800920a:	2b02      	cmp	r3, #2
 800920c:	d103      	bne.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800920e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009212:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009214:	e04d      	b.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8009216:	2300      	movs	r3, #0
 8009218:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800921a:	e04a      	b.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800921c:	4b75      	ldr	r3, [pc, #468]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800921e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009226:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800922a:	d103      	bne.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800922c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009230:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009232:	e03e      	b.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8009234:	2300      	movs	r3, #0
 8009236:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009238:	e03b      	b.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800923a:	4b6e      	ldr	r3, [pc, #440]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800923c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009240:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009244:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009246:	4b6b      	ldr	r3, [pc, #428]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 0302 	and.w	r3, r3, #2
 800924e:	2b02      	cmp	r3, #2
 8009250:	d10c      	bne.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8009252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009254:	2b00      	cmp	r3, #0
 8009256:	d109      	bne.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009258:	4b66      	ldr	r3, [pc, #408]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	08db      	lsrs	r3, r3, #3
 800925e:	f003 0303 	and.w	r3, r3, #3
 8009262:	4a65      	ldr	r2, [pc, #404]	; (80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8009264:	fa22 f303 	lsr.w	r3, r2, r3
 8009268:	637b      	str	r3, [r7, #52]	; 0x34
 800926a:	e01e      	b.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800926c:	4b61      	ldr	r3, [pc, #388]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009278:	d106      	bne.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800927a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009280:	d102      	bne.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009282:	4b5e      	ldr	r3, [pc, #376]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8009284:	637b      	str	r3, [r7, #52]	; 0x34
 8009286:	e010      	b.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009288:	4b5a      	ldr	r3, [pc, #360]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009290:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009294:	d106      	bne.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8009296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009298:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800929c:	d102      	bne.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800929e:	4b58      	ldr	r3, [pc, #352]	; (8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80092a0:	637b      	str	r3, [r7, #52]	; 0x34
 80092a2:	e002      	b.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80092a4:	2300      	movs	r3, #0
 80092a6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80092a8:	e003      	b.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 80092aa:	e002      	b.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 80092ac:	2300      	movs	r3, #0
 80092ae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80092b0:	bf00      	nop
          }
        }
        break;
 80092b2:	f000 beb4 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80092b6:	4b4f      	ldr	r3, [pc, #316]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80092b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80092bc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80092c0:	633b      	str	r3, [r7, #48]	; 0x30
 80092c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092c8:	d056      	beq.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092d0:	f200 808b 	bhi.w	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80092d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80092da:	d03e      	beq.n	800935a <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 80092dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80092e2:	f200 8082 	bhi.w	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80092e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80092ec:	d027      	beq.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 80092ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80092f4:	d879      	bhi.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80092f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092fc:	d017      	beq.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 80092fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009300:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009304:	d871      	bhi.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009308:	2b00      	cmp	r3, #0
 800930a:	d004      	beq.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800930c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009312:	d004      	beq.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8009314:	e069      	b.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009316:	f7fb ff21 	bl	800515c <HAL_RCC_GetPCLK3Freq>
 800931a:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800931c:	e068      	b.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800931e:	f107 0314 	add.w	r3, r7, #20
 8009322:	4618      	mov	r0, r3
 8009324:	f7fe f85c 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800932c:	e060      	b.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800932e:	f107 0308 	add.w	r3, r7, #8
 8009332:	4618      	mov	r0, r3
 8009334:	f7fe f9be 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800933c:	e058      	b.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800933e:	4b2d      	ldr	r3, [pc, #180]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009344:	f003 0302 	and.w	r3, r3, #2
 8009348:	2b02      	cmp	r3, #2
 800934a:	d103      	bne.n	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800934c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009350:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009352:	e04d      	b.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009354:	2300      	movs	r3, #0
 8009356:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009358:	e04a      	b.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800935a:	4b26      	ldr	r3, [pc, #152]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800935c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009364:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009368:	d103      	bne.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800936a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800936e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009370:	e03e      	b.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009372:	2300      	movs	r3, #0
 8009374:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009376:	e03b      	b.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009378:	4b1e      	ldr	r3, [pc, #120]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800937a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800937e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009382:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009384:	4b1b      	ldr	r3, [pc, #108]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f003 0302 	and.w	r3, r3, #2
 800938c:	2b02      	cmp	r3, #2
 800938e:	d10c      	bne.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8009390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009392:	2b00      	cmp	r3, #0
 8009394:	d109      	bne.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009396:	4b17      	ldr	r3, [pc, #92]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	08db      	lsrs	r3, r3, #3
 800939c:	f003 0303 	and.w	r3, r3, #3
 80093a0:	4a15      	ldr	r2, [pc, #84]	; (80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80093a2:	fa22 f303 	lsr.w	r3, r2, r3
 80093a6:	637b      	str	r3, [r7, #52]	; 0x34
 80093a8:	e01e      	b.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093aa:	4b12      	ldr	r3, [pc, #72]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093b6:	d106      	bne.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 80093b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093be:	d102      	bne.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80093c0:	4b0e      	ldr	r3, [pc, #56]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80093c2:	637b      	str	r3, [r7, #52]	; 0x34
 80093c4:	e010      	b.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093c6:	4b0b      	ldr	r3, [pc, #44]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093d2:	d106      	bne.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 80093d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093da:	d102      	bne.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80093dc:	4b08      	ldr	r3, [pc, #32]	; (8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80093de:	637b      	str	r3, [r7, #52]	; 0x34
 80093e0:	e002      	b.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80093e6:	e003      	b.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 80093e8:	e002      	b.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 80093ea:	2300      	movs	r3, #0
 80093ec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80093ee:	bf00      	nop
          }
        }
        break;
 80093f0:	f000 be15 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80093f4:	44020c00 	.word	0x44020c00
 80093f8:	03d09000 	.word	0x03d09000
 80093fc:	003d0900 	.word	0x003d0900
 8009400:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009404:	4b9e      	ldr	r3, [pc, #632]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009406:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800940a:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 800940e:	633b      	str	r3, [r7, #48]	; 0x30
 8009410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009412:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8009416:	d056      	beq.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8009418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800941e:	f200 808b 	bhi.w	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009424:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009428:	d03e      	beq.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800942a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009430:	f200 8082 	bhi.w	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009436:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800943a:	d027      	beq.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800943c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009442:	d879      	bhi.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800944a:	d017      	beq.n	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800944c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009452:	d871      	bhi.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009456:	2b00      	cmp	r3, #0
 8009458:	d004      	beq.n	8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800945a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009460:	d004      	beq.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8009462:	e069      	b.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009464:	f7fb fe7a 	bl	800515c <HAL_RCC_GetPCLK3Freq>
 8009468:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800946a:	e068      	b.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800946c:	f107 0314 	add.w	r3, r7, #20
 8009470:	4618      	mov	r0, r3
 8009472:	f7fd ffb5 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800947a:	e060      	b.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800947c:	f107 0308 	add.w	r3, r7, #8
 8009480:	4618      	mov	r0, r3
 8009482:	f7fe f917 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800948a:	e058      	b.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800948c:	4b7c      	ldr	r3, [pc, #496]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800948e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009492:	f003 0302 	and.w	r3, r3, #2
 8009496:	2b02      	cmp	r3, #2
 8009498:	d103      	bne.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800949a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800949e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80094a0:	e04d      	b.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80094a2:	2300      	movs	r3, #0
 80094a4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80094a6:	e04a      	b.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80094a8:	4b75      	ldr	r3, [pc, #468]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80094aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80094ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094b6:	d103      	bne.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 80094b8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80094bc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80094be:	e03e      	b.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80094c0:	2300      	movs	r3, #0
 80094c2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80094c4:	e03b      	b.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094c6:	4b6e      	ldr	r3, [pc, #440]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80094c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80094cc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80094d0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094d2:	4b6b      	ldr	r3, [pc, #428]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 0302 	and.w	r3, r3, #2
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d10c      	bne.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 80094de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d109      	bne.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80094e4:	4b66      	ldr	r3, [pc, #408]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	08db      	lsrs	r3, r3, #3
 80094ea:	f003 0303 	and.w	r3, r3, #3
 80094ee:	4a65      	ldr	r2, [pc, #404]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80094f0:	fa22 f303 	lsr.w	r3, r2, r3
 80094f4:	637b      	str	r3, [r7, #52]	; 0x34
 80094f6:	e01e      	b.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094f8:	4b61      	ldr	r3, [pc, #388]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009504:	d106      	bne.n	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8009506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800950c:	d102      	bne.n	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800950e:	4b5e      	ldr	r3, [pc, #376]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009510:	637b      	str	r3, [r7, #52]	; 0x34
 8009512:	e010      	b.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009514:	4b5a      	ldr	r3, [pc, #360]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800951c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009520:	d106      	bne.n	8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8009522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009524:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009528:	d102      	bne.n	8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800952a:	4b58      	ldr	r3, [pc, #352]	; (800968c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800952c:	637b      	str	r3, [r7, #52]	; 0x34
 800952e:	e002      	b.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009530:	2300      	movs	r3, #0
 8009532:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009534:	e003      	b.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8009536:	e002      	b.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8009538:	2300      	movs	r3, #0
 800953a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800953c:	bf00      	nop
          }
        }
        break;
 800953e:	f000 bd6e 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009542:	4b4f      	ldr	r3, [pc, #316]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009544:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009548:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800954c:	633b      	str	r3, [r7, #48]	; 0x30
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009554:	d056      	beq.n	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8009556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009558:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800955c:	f200 808b 	bhi.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009562:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009566:	d03e      	beq.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8009568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800956e:	f200 8082 	bhi.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009574:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009578:	d027      	beq.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800957a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009580:	d879      	bhi.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009588:	d017      	beq.n	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800958a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009590:	d871      	bhi.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	2b00      	cmp	r3, #0
 8009596:	d004      	beq.n	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8009598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800959e:	d004      	beq.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 80095a0:	e069      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80095a2:	f7fb fddb 	bl	800515c <HAL_RCC_GetPCLK3Freq>
 80095a6:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80095a8:	e068      	b.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095aa:	f107 0314 	add.w	r3, r7, #20
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7fd ff16 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80095b8:	e060      	b.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095ba:	f107 0308 	add.w	r3, r7, #8
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fe f878 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80095c8:	e058      	b.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80095ca:	4b2d      	ldr	r3, [pc, #180]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80095cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095d0:	f003 0302 	and.w	r3, r3, #2
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d103      	bne.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 80095d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095dc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80095de:	e04d      	b.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80095e0:	2300      	movs	r3, #0
 80095e2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80095e4:	e04a      	b.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80095e6:	4b26      	ldr	r3, [pc, #152]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80095e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095f4:	d103      	bne.n	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 80095f6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80095fa:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80095fc:	e03e      	b.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009602:	e03b      	b.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009604:	4b1e      	ldr	r3, [pc, #120]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800960a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800960e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009610:	4b1b      	ldr	r3, [pc, #108]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f003 0302 	and.w	r3, r3, #2
 8009618:	2b02      	cmp	r3, #2
 800961a:	d10c      	bne.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800961c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961e:	2b00      	cmp	r3, #0
 8009620:	d109      	bne.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009622:	4b17      	ldr	r3, [pc, #92]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	08db      	lsrs	r3, r3, #3
 8009628:	f003 0303 	and.w	r3, r3, #3
 800962c:	4a15      	ldr	r2, [pc, #84]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800962e:	fa22 f303 	lsr.w	r3, r2, r3
 8009632:	637b      	str	r3, [r7, #52]	; 0x34
 8009634:	e01e      	b.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009636:	4b12      	ldr	r3, [pc, #72]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800963e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009642:	d106      	bne.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8009644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800964a:	d102      	bne.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800964c:	4b0e      	ldr	r3, [pc, #56]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800964e:	637b      	str	r3, [r7, #52]	; 0x34
 8009650:	e010      	b.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009652:	4b0b      	ldr	r3, [pc, #44]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800965a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800965e:	d106      	bne.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8009660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009666:	d102      	bne.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009668:	4b08      	ldr	r3, [pc, #32]	; (800968c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800966a:	637b      	str	r3, [r7, #52]	; 0x34
 800966c:	e002      	b.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009672:	e003      	b.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8009674:	e002      	b.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8009676:	2300      	movs	r3, #0
 8009678:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800967a:	bf00      	nop
          }
        }
        break;
 800967c:	f000 bccf 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009680:	44020c00 	.word	0x44020c00
 8009684:	03d09000 	.word	0x03d09000
 8009688:	003d0900 	.word	0x003d0900
 800968c:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8009690:	4b9e      	ldr	r3, [pc, #632]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009692:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009696:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800969a:	633b      	str	r3, [r7, #48]	; 0x30
 800969c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096a2:	d056      	beq.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 80096a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096aa:	f200 808b 	bhi.w	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096b4:	d03e      	beq.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 80096b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096bc:	f200 8082 	bhi.w	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80096c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096c6:	d027      	beq.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 80096c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096ce:	d879      	bhi.n	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80096d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096d6:	d017      	beq.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 80096d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096de:	d871      	bhi.n	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80096e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d004      	beq.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 80096e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096ec:	d004      	beq.n	80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 80096ee:	e069      	b.n	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80096f0:	f7fb fd34 	bl	800515c <HAL_RCC_GetPCLK3Freq>
 80096f4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80096f6:	e068      	b.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096f8:	f107 0314 	add.w	r3, r7, #20
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fd fe6f 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009706:	e060      	b.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009708:	f107 0308 	add.w	r3, r7, #8
 800970c:	4618      	mov	r0, r3
 800970e:	f7fd ffd1 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009716:	e058      	b.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009718:	4b7c      	ldr	r3, [pc, #496]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800971a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800971e:	f003 0302 	and.w	r3, r3, #2
 8009722:	2b02      	cmp	r3, #2
 8009724:	d103      	bne.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8009726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800972a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800972c:	e04d      	b.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800972e:	2300      	movs	r3, #0
 8009730:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009732:	e04a      	b.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009734:	4b75      	ldr	r3, [pc, #468]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800973a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800973e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009742:	d103      	bne.n	800974c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8009744:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009748:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800974a:	e03e      	b.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800974c:	2300      	movs	r3, #0
 800974e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009750:	e03b      	b.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009752:	4b6e      	ldr	r3, [pc, #440]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009754:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009758:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800975c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800975e:	4b6b      	ldr	r3, [pc, #428]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f003 0302 	and.w	r3, r3, #2
 8009766:	2b02      	cmp	r3, #2
 8009768:	d10c      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800976a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976c:	2b00      	cmp	r3, #0
 800976e:	d109      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009770:	4b66      	ldr	r3, [pc, #408]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	08db      	lsrs	r3, r3, #3
 8009776:	f003 0303 	and.w	r3, r3, #3
 800977a:	4a65      	ldr	r2, [pc, #404]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800977c:	fa22 f303 	lsr.w	r3, r2, r3
 8009780:	637b      	str	r3, [r7, #52]	; 0x34
 8009782:	e01e      	b.n	80097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009784:	4b61      	ldr	r3, [pc, #388]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800978c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009790:	d106      	bne.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8009792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009798:	d102      	bne.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800979a:	4b5e      	ldr	r3, [pc, #376]	; (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800979c:	637b      	str	r3, [r7, #52]	; 0x34
 800979e:	e010      	b.n	80097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097a0:	4b5a      	ldr	r3, [pc, #360]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097ac:	d106      	bne.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 80097ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097b4:	d102      	bne.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80097b6:	4b58      	ldr	r3, [pc, #352]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80097b8:	637b      	str	r3, [r7, #52]	; 0x34
 80097ba:	e002      	b.n	80097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80097bc:	2300      	movs	r3, #0
 80097be:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80097c0:	e003      	b.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 80097c2:	e002      	b.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 80097c4:	2300      	movs	r3, #0
 80097c6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80097c8:	bf00      	nop
          }
        }
        break;
 80097ca:	f000 bc28 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80097ce:	4b4f      	ldr	r3, [pc, #316]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80097d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80097d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097d8:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80097da:	4b4c      	ldr	r3, [pc, #304]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097e6:	d106      	bne.n	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 80097e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d103      	bne.n	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 80097ee:	4b4a      	ldr	r3, [pc, #296]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80097f0:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80097f2:	f000 bc14 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80097f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097fc:	d108      	bne.n	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097fe:	f107 0320 	add.w	r3, r7, #32
 8009802:	4618      	mov	r0, r3
 8009804:	f7fd fc82 	bl	800710c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800980c:	f000 bc07 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009816:	d107      	bne.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009818:	f107 0314 	add.w	r3, r7, #20
 800981c:	4618      	mov	r0, r3
 800981e:	f7fd fddf 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009826:	e3fa      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009828:	2300      	movs	r3, #0
 800982a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800982c:	e3f7      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800982e:	4b37      	ldr	r3, [pc, #220]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009834:	f003 0307 	and.w	r3, r3, #7
 8009838:	633b      	str	r3, [r7, #48]	; 0x30
 800983a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983c:	2b04      	cmp	r3, #4
 800983e:	d861      	bhi.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8009840:	a201      	add	r2, pc, #4	; (adr r2, 8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8009842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009846:	bf00      	nop
 8009848:	0800985d 	.word	0x0800985d
 800984c:	0800986d 	.word	0x0800986d
 8009850:	0800987d 	.word	0x0800987d
 8009854:	0800988d 	.word	0x0800988d
 8009858:	08009893 	.word	0x08009893
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800985c:	f107 0320 	add.w	r3, r7, #32
 8009860:	4618      	mov	r0, r3
 8009862:	f7fd fc53 	bl	800710c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800986a:	e04e      	b.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800986c:	f107 0314 	add.w	r3, r7, #20
 8009870:	4618      	mov	r0, r3
 8009872:	f7fd fdb5 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800987a:	e046      	b.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800987c:	f107 0308 	add.w	r3, r7, #8
 8009880:	4618      	mov	r0, r3
 8009882:	f7fd ff17 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800988a:	e03e      	b.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800988c:	4b23      	ldr	r3, [pc, #140]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800988e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009890:	e03b      	b.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009892:	4b1e      	ldr	r3, [pc, #120]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009894:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009898:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800989c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800989e:	4b1b      	ldr	r3, [pc, #108]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 0302 	and.w	r3, r3, #2
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	d10c      	bne.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 80098aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d109      	bne.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80098b0:	4b16      	ldr	r3, [pc, #88]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	08db      	lsrs	r3, r3, #3
 80098b6:	f003 0303 	and.w	r3, r3, #3
 80098ba:	4a15      	ldr	r2, [pc, #84]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80098bc:	fa22 f303 	lsr.w	r3, r2, r3
 80098c0:	637b      	str	r3, [r7, #52]	; 0x34
 80098c2:	e01e      	b.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098c4:	4b11      	ldr	r3, [pc, #68]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098d0:	d106      	bne.n	80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80098d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098d8:	d102      	bne.n	80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80098da:	4b0e      	ldr	r3, [pc, #56]	; (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80098dc:	637b      	str	r3, [r7, #52]	; 0x34
 80098de:	e010      	b.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098e0:	4b0a      	ldr	r3, [pc, #40]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098ec:	d106      	bne.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 80098ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098f4:	d102      	bne.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80098f6:	4b08      	ldr	r3, [pc, #32]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80098f8:	637b      	str	r3, [r7, #52]	; 0x34
 80098fa:	e002      	b.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80098fc:	2300      	movs	r3, #0
 80098fe:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009900:	e003      	b.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8009902:	e002      	b.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8009904:	2300      	movs	r3, #0
 8009906:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009908:	bf00      	nop
          }
        }
        break;
 800990a:	e388      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800990c:	44020c00 	.word	0x44020c00
 8009910:	03d09000 	.word	0x03d09000
 8009914:	003d0900 	.word	0x003d0900
 8009918:	007a1200 	.word	0x007a1200
 800991c:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009920:	4ba9      	ldr	r3, [pc, #676]	; (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009926:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800992a:	633b      	str	r3, [r7, #48]	; 0x30
 800992c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992e:	2b20      	cmp	r3, #32
 8009930:	f200 809a 	bhi.w	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8009934:	a201      	add	r2, pc, #4	; (adr r2, 800993c <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8009936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993a:	bf00      	nop
 800993c:	080099c1 	.word	0x080099c1
 8009940:	08009a69 	.word	0x08009a69
 8009944:	08009a69 	.word	0x08009a69
 8009948:	08009a69 	.word	0x08009a69
 800994c:	08009a69 	.word	0x08009a69
 8009950:	08009a69 	.word	0x08009a69
 8009954:	08009a69 	.word	0x08009a69
 8009958:	08009a69 	.word	0x08009a69
 800995c:	080099d1 	.word	0x080099d1
 8009960:	08009a69 	.word	0x08009a69
 8009964:	08009a69 	.word	0x08009a69
 8009968:	08009a69 	.word	0x08009a69
 800996c:	08009a69 	.word	0x08009a69
 8009970:	08009a69 	.word	0x08009a69
 8009974:	08009a69 	.word	0x08009a69
 8009978:	08009a69 	.word	0x08009a69
 800997c:	080099e1 	.word	0x080099e1
 8009980:	08009a69 	.word	0x08009a69
 8009984:	08009a69 	.word	0x08009a69
 8009988:	08009a69 	.word	0x08009a69
 800998c:	08009a69 	.word	0x08009a69
 8009990:	08009a69 	.word	0x08009a69
 8009994:	08009a69 	.word	0x08009a69
 8009998:	08009a69 	.word	0x08009a69
 800999c:	080099f1 	.word	0x080099f1
 80099a0:	08009a69 	.word	0x08009a69
 80099a4:	08009a69 	.word	0x08009a69
 80099a8:	08009a69 	.word	0x08009a69
 80099ac:	08009a69 	.word	0x08009a69
 80099b0:	08009a69 	.word	0x08009a69
 80099b4:	08009a69 	.word	0x08009a69
 80099b8:	08009a69 	.word	0x08009a69
 80099bc:	080099f7 	.word	0x080099f7
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099c0:	f107 0320 	add.w	r3, r7, #32
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7fd fba1 	bl	800710c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80099ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80099ce:	e04e      	b.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099d0:	f107 0314 	add.w	r3, r7, #20
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7fd fd03 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80099de:	e046      	b.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099e0:	f107 0308 	add.w	r3, r7, #8
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7fd fe65 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80099ee:	e03e      	b.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80099f0:	4b76      	ldr	r3, [pc, #472]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80099f2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80099f4:	e03b      	b.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099f6:	4b74      	ldr	r3, [pc, #464]	; (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80099f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80099fc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009a00:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a02:	4b71      	ldr	r3, [pc, #452]	; (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 0302 	and.w	r3, r3, #2
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d10c      	bne.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8009a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d109      	bne.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a14:	4b6c      	ldr	r3, [pc, #432]	; (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	08db      	lsrs	r3, r3, #3
 8009a1a:	f003 0303 	and.w	r3, r3, #3
 8009a1e:	4a6c      	ldr	r2, [pc, #432]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009a20:	fa22 f303 	lsr.w	r3, r2, r3
 8009a24:	637b      	str	r3, [r7, #52]	; 0x34
 8009a26:	e01e      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a28:	4b67      	ldr	r3, [pc, #412]	; (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a34:	d106      	bne.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8009a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a3c:	d102      	bne.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009a3e:	4b65      	ldr	r3, [pc, #404]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009a40:	637b      	str	r3, [r7, #52]	; 0x34
 8009a42:	e010      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a44:	4b60      	ldr	r3, [pc, #384]	; (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a50:	d106      	bne.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8009a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a58:	d102      	bne.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009a5a:	4b5f      	ldr	r3, [pc, #380]	; (8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8009a5e:	e002      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009a60:	2300      	movs	r3, #0
 8009a62:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009a64:	e003      	b.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8009a66:	e002      	b.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009a6c:	bf00      	nop
          }
        }
        break;
 8009a6e:	e2d6      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009a70:	4b55      	ldr	r3, [pc, #340]	; (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a76:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8009a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a82:	d031      	beq.n	8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8009a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a8a:	d866      	bhi.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8e:	2bc0      	cmp	r3, #192	; 0xc0
 8009a90:	d027      	beq.n	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8009a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a94:	2bc0      	cmp	r3, #192	; 0xc0
 8009a96:	d860      	bhi.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9a:	2b80      	cmp	r3, #128	; 0x80
 8009a9c:	d019      	beq.n	8009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa0:	2b80      	cmp	r3, #128	; 0x80
 8009aa2:	d85a      	bhi.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d003      	beq.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aac:	2b40      	cmp	r3, #64	; 0x40
 8009aae:	d008      	beq.n	8009ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8009ab0:	e053      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ab2:	f107 0320 	add.w	r3, r7, #32
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7fd fb28 	bl	800710c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009ac0:	e04e      	b.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ac2:	f107 0314 	add.w	r3, r7, #20
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fd fc8a 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009ad0:	e046      	b.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ad2:	f107 0308 	add.w	r3, r7, #8
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7fd fdec 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009ae0:	e03e      	b.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009ae2:	4b3a      	ldr	r3, [pc, #232]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009ae4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009ae6:	e03b      	b.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009ae8:	4b37      	ldr	r3, [pc, #220]	; (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009aea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009aee:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009af2:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009af4:	4b34      	ldr	r3, [pc, #208]	; (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 0302 	and.w	r3, r3, #2
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d10c      	bne.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8009b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d109      	bne.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b06:	4b30      	ldr	r3, [pc, #192]	; (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	08db      	lsrs	r3, r3, #3
 8009b0c:	f003 0303 	and.w	r3, r3, #3
 8009b10:	4a2f      	ldr	r2, [pc, #188]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009b12:	fa22 f303 	lsr.w	r3, r2, r3
 8009b16:	637b      	str	r3, [r7, #52]	; 0x34
 8009b18:	e01e      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b1a:	4b2b      	ldr	r3, [pc, #172]	; (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b26:	d106      	bne.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8009b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b2e:	d102      	bne.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009b30:	4b28      	ldr	r3, [pc, #160]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009b32:	637b      	str	r3, [r7, #52]	; 0x34
 8009b34:	e010      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b36:	4b24      	ldr	r3, [pc, #144]	; (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b42:	d106      	bne.n	8009b52 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8009b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b4a:	d102      	bne.n	8009b52 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009b4c:	4b22      	ldr	r3, [pc, #136]	; (8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8009b50:	e002      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009b52:	2300      	movs	r3, #0
 8009b54:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009b56:	e003      	b.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8009b58:	e002      	b.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009b5e:	bf00      	nop
          }
        }
        break;
 8009b60:	e25d      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8009b62:	4b19      	ldr	r3, [pc, #100]	; (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b68:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8009b6c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8009b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d103      	bne.n	8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009b74:	f7fb fadc 	bl	8005130 <HAL_RCC_GetPCLK2Freq>
 8009b78:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009b7a:	e250      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8009b7c:	4b12      	ldr	r3, [pc, #72]	; (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b88:	d10b      	bne.n	8009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b90:	d107      	bne.n	8009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b92:	f107 0314 	add.w	r3, r7, #20
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fd fc22 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8009ba0:	e04f      	b.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8009ba2:	4b09      	ldr	r3, [pc, #36]	; (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009baa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bae:	d115      	bne.n	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bb6:	d111      	bne.n	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bb8:	f107 0308 	add.w	r3, r7, #8
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7fd fd79 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8009bc6:	e03c      	b.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8009bc8:	44020c00 	.word	0x44020c00
 8009bcc:	00bb8000 	.word	0x00bb8000
 8009bd0:	03d09000 	.word	0x03d09000
 8009bd4:	003d0900 	.word	0x003d0900
 8009bd8:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009bdc:	4b94      	ldr	r3, [pc, #592]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 0302 	and.w	r3, r3, #2
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d10d      	bne.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8009be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bea:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009bee:	d109      	bne.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009bf0:	4b8f      	ldr	r3, [pc, #572]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	08db      	lsrs	r3, r3, #3
 8009bf6:	f003 0303 	and.w	r3, r3, #3
 8009bfa:	4a8e      	ldr	r2, [pc, #568]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8009c00:	637b      	str	r3, [r7, #52]	; 0x34
 8009c02:	e01e      	b.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009c04:	4b8a      	ldr	r3, [pc, #552]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c10:	d106      	bne.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8009c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c18:	d102      	bne.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8009c1a:	4b87      	ldr	r3, [pc, #540]	; (8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8009c1e:	e010      	b.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009c20:	4b83      	ldr	r3, [pc, #524]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c2c:	d106      	bne.n	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c30:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009c34:	d102      	bne.n	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8009c36:	4b81      	ldr	r3, [pc, #516]	; (8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009c38:	637b      	str	r3, [r7, #52]	; 0x34
 8009c3a:	e002      	b.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c40:	e1ed      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009c42:	e1ec      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8009c44:	4b7a      	ldr	r3, [pc, #488]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c4a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009c4e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8009c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d103      	bne.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009c56:	f7fb fa81 	bl	800515c <HAL_RCC_GetPCLK3Freq>
 8009c5a:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009c5c:	e1df      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8009c5e:	4b74      	ldr	r3, [pc, #464]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c6a:	d10b      	bne.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c72:	d107      	bne.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c74:	f107 0314 	add.w	r3, r7, #20
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7fd fbb1 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	637b      	str	r3, [r7, #52]	; 0x34
 8009c82:	e045      	b.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8009c84:	4b6a      	ldr	r3, [pc, #424]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c90:	d10b      	bne.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8009c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c98:	d107      	bne.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c9a:	f107 0308 	add.w	r3, r7, #8
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fd fd08 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ca8:	e032      	b.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8009caa:	4b61      	ldr	r3, [pc, #388]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 0302 	and.w	r3, r3, #2
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d10d      	bne.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8009cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009cbc:	d109      	bne.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009cbe:	4b5c      	ldr	r3, [pc, #368]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	08db      	lsrs	r3, r3, #3
 8009cc4:	f003 0303 	and.w	r3, r3, #3
 8009cc8:	4a5a      	ldr	r2, [pc, #360]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009cca:	fa22 f303 	lsr.w	r3, r2, r3
 8009cce:	637b      	str	r3, [r7, #52]	; 0x34
 8009cd0:	e01e      	b.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8009cd2:	4b57      	ldr	r3, [pc, #348]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cde:	d106      	bne.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8009ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ce6:	d102      	bne.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8009ce8:	4b53      	ldr	r3, [pc, #332]	; (8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009cea:	637b      	str	r3, [r7, #52]	; 0x34
 8009cec:	e010      	b.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8009cee:	4b50      	ldr	r3, [pc, #320]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cfa:	d106      	bne.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfe:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009d02:	d102      	bne.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8009d04:	4b4d      	ldr	r3, [pc, #308]	; (8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009d06:	637b      	str	r3, [r7, #52]	; 0x34
 8009d08:	e002      	b.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d0e:	e186      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d10:	e185      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009d12:	4b47      	ldr	r3, [pc, #284]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d18:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8009d1c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d103      	bne.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009d24:	f7fb fa04 	bl	8005130 <HAL_RCC_GetPCLK2Freq>
 8009d28:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009d2a:	e178      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009d2c:	4b40      	ldr	r3, [pc, #256]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d38:	d10b      	bne.n	8009d52 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d40:	d107      	bne.n	8009d52 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d42:	f107 0314 	add.w	r3, r7, #20
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fd fb4a 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8009d50:	e045      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8009d52:	4b37      	ldr	r3, [pc, #220]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d5e:	d10b      	bne.n	8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8009d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d66:	d107      	bne.n	8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d68:	f107 0308 	add.w	r3, r7, #8
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fd fca1 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	637b      	str	r3, [r7, #52]	; 0x34
 8009d76:	e032      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8009d78:	4b2d      	ldr	r3, [pc, #180]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f003 0302 	and.w	r3, r3, #2
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d10d      	bne.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8009d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d86:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8009d8a:	d109      	bne.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d8c:	4b28      	ldr	r3, [pc, #160]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	08db      	lsrs	r3, r3, #3
 8009d92:	f003 0303 	and.w	r3, r3, #3
 8009d96:	4a27      	ldr	r2, [pc, #156]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009d98:	fa22 f303 	lsr.w	r3, r2, r3
 8009d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8009d9e:	e01e      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8009da0:	4b23      	ldr	r3, [pc, #140]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dac:	d106      	bne.n	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8009dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009db4:	d102      	bne.n	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8009db6:	4b20      	ldr	r3, [pc, #128]	; (8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009db8:	637b      	str	r3, [r7, #52]	; 0x34
 8009dba:	e010      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8009dbc:	4b1c      	ldr	r3, [pc, #112]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009dc8:	d106      	bne.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8009dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dcc:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8009dd0:	d102      	bne.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8009dd2:	4b1a      	ldr	r3, [pc, #104]	; (8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8009dd6:	e002      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ddc:	e11f      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009dde:	e11e      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009de0:	4b13      	ldr	r3, [pc, #76]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009de2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009de6:	f003 0303 	and.w	r3, r3, #3
 8009dea:	633b      	str	r3, [r7, #48]	; 0x30
 8009dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dee:	2b03      	cmp	r3, #3
 8009df0:	d85f      	bhi.n	8009eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8009df2:	a201      	add	r2, pc, #4	; (adr r2, 8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8009df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df8:	08009e09 	.word	0x08009e09
 8009dfc:	08009e11 	.word	0x08009e11
 8009e00:	08009e21 	.word	0x08009e21
 8009e04:	08009e41 	.word	0x08009e41

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8009e08:	f7fb f960 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 8009e0c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8009e0e:	e053      	b.n	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e10:	f107 0320 	add.w	r3, r7, #32
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7fd f979 	bl	800710c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009e1e:	e04b      	b.n	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e20:	f107 0314 	add.w	r3, r7, #20
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fd fadb 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009e2e:	e043      	b.n	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009e30:	44020c00 	.word	0x44020c00
 8009e34:	03d09000 	.word	0x03d09000
 8009e38:	003d0900 	.word	0x003d0900
 8009e3c:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e40:	4b79      	ldr	r3, [pc, #484]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009e46:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009e4a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e4c:	4b76      	ldr	r3, [pc, #472]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f003 0302 	and.w	r3, r3, #2
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d10c      	bne.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8009e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d109      	bne.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e5e:	4b72      	ldr	r3, [pc, #456]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	08db      	lsrs	r3, r3, #3
 8009e64:	f003 0303 	and.w	r3, r3, #3
 8009e68:	4a70      	ldr	r2, [pc, #448]	; (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8009e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8009e70:	e01e      	b.n	8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e72:	4b6d      	ldr	r3, [pc, #436]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e7e:	d106      	bne.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8009e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e86:	d102      	bne.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009e88:	4b69      	ldr	r3, [pc, #420]	; (800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8009e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8009e8c:	e010      	b.n	8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e8e:	4b66      	ldr	r3, [pc, #408]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e9a:	d106      	bne.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8009e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ea2:	d102      	bne.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009ea4:	4b63      	ldr	r3, [pc, #396]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8009ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ea8:	e002      	b.n	8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009eae:	e003      	b.n	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009eb0:	e002      	b.n	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009eb6:	bf00      	nop
          }
        }
        break;
 8009eb8:	e0b1      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8009eba:	4b5b      	ldr	r3, [pc, #364]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009ec0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009ec4:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8009ec6:	4b58      	ldr	r3, [pc, #352]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009ecc:	f003 0302 	and.w	r3, r3, #2
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d106      	bne.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d103      	bne.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8009eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ede:	637b      	str	r3, [r7, #52]	; 0x34
 8009ee0:	e01f      	b.n	8009f22 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8009ee2:	4b51      	ldr	r3, [pc, #324]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009eec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ef0:	d106      	bne.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef4:	2b40      	cmp	r3, #64	; 0x40
 8009ef6:	d103      	bne.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8009ef8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009efc:	637b      	str	r3, [r7, #52]	; 0x34
 8009efe:	e010      	b.n	8009f22 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8009f00:	4b49      	ldr	r3, [pc, #292]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f0c:	d106      	bne.n	8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f10:	2b80      	cmp	r3, #128	; 0x80
 8009f12:	d103      	bne.n	8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8009f14:	f248 0312 	movw	r3, #32786	; 0x8012
 8009f18:	637b      	str	r3, [r7, #52]	; 0x34
 8009f1a:	e002      	b.n	8009f22 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8009f20:	e07d      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009f22:	e07c      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009f24:	4b40      	ldr	r3, [pc, #256]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009f26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009f2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009f2e:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009f30:	4b3d      	ldr	r3, [pc, #244]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f3c:	d105      	bne.n	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d102      	bne.n	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8009f44:	4b3c      	ldr	r3, [pc, #240]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009f46:	637b      	str	r3, [r7, #52]	; 0x34
 8009f48:	e031      	b.n	8009fae <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009f4a:	4b37      	ldr	r3, [pc, #220]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f56:	d10a      	bne.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8009f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5a:	2b10      	cmp	r3, #16
 8009f5c:	d107      	bne.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f5e:	f107 0320 	add.w	r3, r7, #32
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7fd f8d2 	bl	800710c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8009f6c:	e01f      	b.n	8009fae <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8009f6e:	4b2e      	ldr	r3, [pc, #184]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009f70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009f74:	f003 0302 	and.w	r3, r3, #2
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d106      	bne.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8009f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7e:	2b20      	cmp	r3, #32
 8009f80:	d103      	bne.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8009f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f86:	637b      	str	r3, [r7, #52]	; 0x34
 8009f88:	e011      	b.n	8009fae <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009f8a:	4b27      	ldr	r3, [pc, #156]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f98:	d106      	bne.n	8009fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8009f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9c:	2b30      	cmp	r3, #48	; 0x30
 8009f9e:	d103      	bne.n	8009fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8009fa0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8009fa6:	e002      	b.n	8009fae <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8009fac:	e037      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009fae:	e036      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009fb0:	4b1d      	ldr	r3, [pc, #116]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009fb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009fb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009fba:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbe:	2b10      	cmp	r3, #16
 8009fc0:	d107      	bne.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fc2:	f107 0320 	add.w	r3, r7, #32
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7fd f8a0 	bl	800710c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fce:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009fd0:	e025      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009fd2:	4b15      	ldr	r3, [pc, #84]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fde:	d10a      	bne.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8009fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe2:	2b20      	cmp	r3, #32
 8009fe4:	d107      	bne.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fe6:	f107 0308 	add.w	r3, r7, #8
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7fd fb62 	bl	80076b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8009ff4:	e00f      	b.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8009ff6:	4b0c      	ldr	r3, [pc, #48]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a002:	d105      	bne.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800a004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a006:	2b30      	cmp	r3, #48	; 0x30
 800a008:	d102      	bne.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800a00a:	4b0b      	ldr	r3, [pc, #44]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a00c:	637b      	str	r3, [r7, #52]	; 0x34
 800a00e:	e002      	b.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800a010:	2300      	movs	r3, #0
 800a012:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 800a014:	e003      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a016:	e002      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800a018:	2300      	movs	r3, #0
 800a01a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a01c:	bf00      	nop
    }
  }

  return (frequency);
 800a01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a020:	4618      	mov	r0, r3
 800a022:	373c      	adds	r7, #60	; 0x3c
 800a024:	46bd      	mov	sp, r7
 800a026:	bd90      	pop	{r4, r7, pc}
 800a028:	44020c00 	.word	0x44020c00
 800a02c:	03d09000 	.word	0x03d09000
 800a030:	003d0900 	.word	0x003d0900
 800a034:	007a1200 	.word	0x007a1200
 800a038:	02dc6c00 	.word	0x02dc6c00

0800a03c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800a044:	4b48      	ldr	r3, [pc, #288]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a47      	ldr	r2, [pc, #284]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a04a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a04e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a050:	f7f8 f918 	bl	8002284 <HAL_GetTick>
 800a054:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a056:	e008      	b.n	800a06a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a058:	f7f8 f914 	bl	8002284 <HAL_GetTick>
 800a05c:	4602      	mov	r2, r0
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	2b02      	cmp	r3, #2
 800a064:	d901      	bls.n	800a06a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a066:	2303      	movs	r3, #3
 800a068:	e07a      	b.n	800a160 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a06a:	4b3f      	ldr	r3, [pc, #252]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1f0      	bne.n	800a058 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a076:	4b3c      	ldr	r3, [pc, #240]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a07e:	f023 0303 	bic.w	r3, r3, #3
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	6811      	ldr	r1, [r2, #0]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	6852      	ldr	r2, [r2, #4]
 800a08a:	0212      	lsls	r2, r2, #8
 800a08c:	430a      	orrs	r2, r1
 800a08e:	4936      	ldr	r1, [pc, #216]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a090:	4313      	orrs	r3, r2
 800a092:	62cb      	str	r3, [r1, #44]	; 0x2c
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	3b01      	subs	r3, #1
 800a09a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	025b      	lsls	r3, r3, #9
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	431a      	orrs	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	041b      	lsls	r3, r3, #16
 800a0b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a0b6:	431a      	orrs	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	695b      	ldr	r3, [r3, #20]
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	061b      	lsls	r3, r3, #24
 800a0c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a0c4:	4928      	ldr	r1, [pc, #160]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a0ca:	4b27      	ldr	r3, [pc, #156]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ce:	f023 020c 	bic.w	r2, r3, #12
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	4924      	ldr	r1, [pc, #144]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800a0dc:	4b22      	ldr	r3, [pc, #136]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e0:	f023 0220 	bic.w	r2, r3, #32
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	69db      	ldr	r3, [r3, #28]
 800a0e8:	491f      	ldr	r1, [pc, #124]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a0ee:	4b1e      	ldr	r3, [pc, #120]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f6:	491c      	ldr	r1, [pc, #112]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800a0fc:	4b1a      	ldr	r3, [pc, #104]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a100:	4a19      	ldr	r2, [pc, #100]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a102:	f023 0310 	bic.w	r3, r3, #16
 800a106:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800a108:	4b17      	ldr	r3, [pc, #92]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a10c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a110:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	6a12      	ldr	r2, [r2, #32]
 800a118:	00d2      	lsls	r2, r2, #3
 800a11a:	4913      	ldr	r1, [pc, #76]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a11c:	4313      	orrs	r3, r2
 800a11e:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800a120:	4b11      	ldr	r3, [pc, #68]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a124:	4a10      	ldr	r2, [pc, #64]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a126:	f043 0310 	orr.w	r3, r3, #16
 800a12a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800a12c:	4b0e      	ldr	r3, [pc, #56]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a0d      	ldr	r2, [pc, #52]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a132:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a136:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a138:	f7f8 f8a4 	bl	8002284 <HAL_GetTick>
 800a13c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a13e:	e008      	b.n	800a152 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a140:	f7f8 f8a0 	bl	8002284 <HAL_GetTick>
 800a144:	4602      	mov	r2, r0
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d901      	bls.n	800a152 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a14e:	2303      	movs	r3, #3
 800a150:	e006      	b.n	800a160 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a152:	4b05      	ldr	r3, [pc, #20]	; (800a168 <RCCEx_PLL2_Config+0x12c>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d0f0      	beq.n	800a140 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800a15e:	2300      	movs	r3, #0

}
 800a160:	4618      	mov	r0, r3
 800a162:	3710      	adds	r7, #16
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	44020c00 	.word	0x44020c00

0800a16c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800a174:	4b48      	ldr	r3, [pc, #288]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a47      	ldr	r2, [pc, #284]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a17a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a17e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a180:	f7f8 f880 	bl	8002284 <HAL_GetTick>
 800a184:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a186:	e008      	b.n	800a19a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a188:	f7f8 f87c 	bl	8002284 <HAL_GetTick>
 800a18c:	4602      	mov	r2, r0
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	2b02      	cmp	r3, #2
 800a194:	d901      	bls.n	800a19a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a196:	2303      	movs	r3, #3
 800a198:	e07a      	b.n	800a290 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a19a:	4b3f      	ldr	r3, [pc, #252]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1f0      	bne.n	800a188 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a1a6:	4b3c      	ldr	r3, [pc, #240]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a1ae:	f023 0303 	bic.w	r3, r3, #3
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	6811      	ldr	r1, [r2, #0]
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	6852      	ldr	r2, [r2, #4]
 800a1ba:	0212      	lsls	r2, r2, #8
 800a1bc:	430a      	orrs	r2, r1
 800a1be:	4936      	ldr	r1, [pc, #216]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	630b      	str	r3, [r1, #48]	; 0x30
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	025b      	lsls	r3, r3, #9
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	431a      	orrs	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	691b      	ldr	r3, [r3, #16]
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	041b      	lsls	r3, r3, #16
 800a1e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a1e6:	431a      	orrs	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	695b      	ldr	r3, [r3, #20]
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	061b      	lsls	r3, r3, #24
 800a1f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a1f4:	4928      	ldr	r1, [pc, #160]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a1fa:	4b27      	ldr	r3, [pc, #156]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1fe:	f023 020c 	bic.w	r2, r3, #12
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	699b      	ldr	r3, [r3, #24]
 800a206:	4924      	ldr	r1, [pc, #144]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a208:	4313      	orrs	r3, r2
 800a20a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800a20c:	4b22      	ldr	r3, [pc, #136]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a20e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a210:	f023 0220 	bic.w	r2, r3, #32
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	69db      	ldr	r3, [r3, #28]
 800a218:	491f      	ldr	r1, [pc, #124]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a21a:	4313      	orrs	r3, r2
 800a21c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a21e:	4b1e      	ldr	r3, [pc, #120]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a226:	491c      	ldr	r1, [pc, #112]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a228:	4313      	orrs	r3, r2
 800a22a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800a22c:	4b1a      	ldr	r3, [pc, #104]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a230:	4a19      	ldr	r2, [pc, #100]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a232:	f023 0310 	bic.w	r3, r3, #16
 800a236:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800a238:	4b17      	ldr	r3, [pc, #92]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a23a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a23c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a240:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	6a12      	ldr	r2, [r2, #32]
 800a248:	00d2      	lsls	r2, r2, #3
 800a24a:	4913      	ldr	r1, [pc, #76]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a24c:	4313      	orrs	r3, r2
 800a24e:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800a250:	4b11      	ldr	r3, [pc, #68]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a254:	4a10      	ldr	r2, [pc, #64]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a256:	f043 0310 	orr.w	r3, r3, #16
 800a25a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800a25c:	4b0e      	ldr	r3, [pc, #56]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a0d      	ldr	r2, [pc, #52]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a266:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a268:	f7f8 f80c 	bl	8002284 <HAL_GetTick>
 800a26c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a26e:	e008      	b.n	800a282 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a270:	f7f8 f808 	bl	8002284 <HAL_GetTick>
 800a274:	4602      	mov	r2, r0
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	1ad3      	subs	r3, r2, r3
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	d901      	bls.n	800a282 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a27e:	2303      	movs	r3, #3
 800a280:	e006      	b.n	800a290 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a282:	4b05      	ldr	r3, [pc, #20]	; (800a298 <RCCEx_PLL3_Config+0x12c>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d0f0      	beq.n	800a270 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	44020c00 	.word	0x44020c00

0800a29c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d101      	bne.n	800a2ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e049      	b.n	800a342 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d106      	bne.n	800a2c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 f841 	bl	800a34a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2202      	movs	r2, #2
 800a2cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	4619      	mov	r1, r3
 800a2da:	4610      	mov	r0, r2
 800a2dc:	f000 fa60 	bl	800a7a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3708      	adds	r7, #8
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a34a:	b480      	push	{r7}
 800a34c:	b083      	sub	sp, #12
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a352:	bf00      	nop
 800a354:	370c      	adds	r7, #12
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
	...

0800a360 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	2b01      	cmp	r3, #1
 800a372:	d001      	beq.n	800a378 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	e07c      	b.n	800a472 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2202      	movs	r2, #2
 800a37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	68da      	ldr	r2, [r3, #12]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f042 0201 	orr.w	r2, r2, #1
 800a38e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a3a      	ldr	r2, [pc, #232]	; (800a480 <HAL_TIM_Base_Start_IT+0x120>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d04a      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0xd0>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a39      	ldr	r2, [pc, #228]	; (800a484 <HAL_TIM_Base_Start_IT+0x124>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d045      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0xd0>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3ac:	d040      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0xd0>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3b6:	d03b      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0xd0>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a32      	ldr	r2, [pc, #200]	; (800a488 <HAL_TIM_Base_Start_IT+0x128>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d036      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0xd0>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a31      	ldr	r2, [pc, #196]	; (800a48c <HAL_TIM_Base_Start_IT+0x12c>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d031      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0xd0>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a2f      	ldr	r2, [pc, #188]	; (800a490 <HAL_TIM_Base_Start_IT+0x130>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d02c      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0xd0>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a2e      	ldr	r2, [pc, #184]	; (800a494 <HAL_TIM_Base_Start_IT+0x134>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d027      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0xd0>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a2c      	ldr	r2, [pc, #176]	; (800a498 <HAL_TIM_Base_Start_IT+0x138>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d022      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0xd0>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a2b      	ldr	r2, [pc, #172]	; (800a49c <HAL_TIM_Base_Start_IT+0x13c>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d01d      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0xd0>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a29      	ldr	r2, [pc, #164]	; (800a4a0 <HAL_TIM_Base_Start_IT+0x140>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d018      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0xd0>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a28      	ldr	r2, [pc, #160]	; (800a4a4 <HAL_TIM_Base_Start_IT+0x144>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d013      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0xd0>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a26      	ldr	r2, [pc, #152]	; (800a4a8 <HAL_TIM_Base_Start_IT+0x148>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d00e      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0xd0>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a25      	ldr	r2, [pc, #148]	; (800a4ac <HAL_TIM_Base_Start_IT+0x14c>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d009      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0xd0>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a23      	ldr	r2, [pc, #140]	; (800a4b0 <HAL_TIM_Base_Start_IT+0x150>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d004      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0xd0>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a22      	ldr	r2, [pc, #136]	; (800a4b4 <HAL_TIM_Base_Start_IT+0x154>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d115      	bne.n	800a45c <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	689a      	ldr	r2, [r3, #8]
 800a436:	4b20      	ldr	r3, [pc, #128]	; (800a4b8 <HAL_TIM_Base_Start_IT+0x158>)
 800a438:	4013      	ands	r3, r2
 800a43a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2b06      	cmp	r3, #6
 800a440:	d015      	beq.n	800a46e <HAL_TIM_Base_Start_IT+0x10e>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a448:	d011      	beq.n	800a46e <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f042 0201 	orr.w	r2, r2, #1
 800a458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a45a:	e008      	b.n	800a46e <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f042 0201 	orr.w	r2, r2, #1
 800a46a:	601a      	str	r2, [r3, #0]
 800a46c:	e000      	b.n	800a470 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a46e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3714      	adds	r7, #20
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop
 800a480:	40012c00 	.word	0x40012c00
 800a484:	50012c00 	.word	0x50012c00
 800a488:	40000400 	.word	0x40000400
 800a48c:	50000400 	.word	0x50000400
 800a490:	40000800 	.word	0x40000800
 800a494:	50000800 	.word	0x50000800
 800a498:	40000c00 	.word	0x40000c00
 800a49c:	50000c00 	.word	0x50000c00
 800a4a0:	40013400 	.word	0x40013400
 800a4a4:	50013400 	.word	0x50013400
 800a4a8:	40001800 	.word	0x40001800
 800a4ac:	50001800 	.word	0x50001800
 800a4b0:	40014000 	.word	0x40014000
 800a4b4:	50014000 	.word	0x50014000
 800a4b8:	00010007 	.word	0x00010007

0800a4bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	f003 0302 	and.w	r3, r3, #2
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d020      	beq.n	800a520 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f003 0302 	and.w	r3, r3, #2
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d01b      	beq.n	800a520 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f06f 0202 	mvn.w	r2, #2
 800a4f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	f003 0303 	and.w	r3, r3, #3
 800a502:	2b00      	cmp	r3, #0
 800a504:	d003      	beq.n	800a50e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f92c 	bl	800a764 <HAL_TIM_IC_CaptureCallback>
 800a50c:	e005      	b.n	800a51a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f91e 	bl	800a750 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f92f 	bl	800a778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	f003 0304 	and.w	r3, r3, #4
 800a526:	2b00      	cmp	r3, #0
 800a528:	d020      	beq.n	800a56c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f003 0304 	and.w	r3, r3, #4
 800a530:	2b00      	cmp	r3, #0
 800a532:	d01b      	beq.n	800a56c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f06f 0204 	mvn.w	r2, #4
 800a53c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2202      	movs	r2, #2
 800a542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	699b      	ldr	r3, [r3, #24]
 800a54a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d003      	beq.n	800a55a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f906 	bl	800a764 <HAL_TIM_IC_CaptureCallback>
 800a558:	e005      	b.n	800a566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 f8f8 	bl	800a750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 f909 	bl	800a778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	f003 0308 	and.w	r3, r3, #8
 800a572:	2b00      	cmp	r3, #0
 800a574:	d020      	beq.n	800a5b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f003 0308 	and.w	r3, r3, #8
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d01b      	beq.n	800a5b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f06f 0208 	mvn.w	r2, #8
 800a588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2204      	movs	r2, #4
 800a58e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	69db      	ldr	r3, [r3, #28]
 800a596:	f003 0303 	and.w	r3, r3, #3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d003      	beq.n	800a5a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 f8e0 	bl	800a764 <HAL_TIM_IC_CaptureCallback>
 800a5a4:	e005      	b.n	800a5b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f8d2 	bl	800a750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 f8e3 	bl	800a778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	f003 0310 	and.w	r3, r3, #16
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d020      	beq.n	800a604 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f003 0310 	and.w	r3, r3, #16
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d01b      	beq.n	800a604 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f06f 0210 	mvn.w	r2, #16
 800a5d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2208      	movs	r2, #8
 800a5da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	69db      	ldr	r3, [r3, #28]
 800a5e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d003      	beq.n	800a5f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 f8ba 	bl	800a764 <HAL_TIM_IC_CaptureCallback>
 800a5f0:	e005      	b.n	800a5fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f8ac 	bl	800a750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 f8bd 	bl	800a778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	f003 0301 	and.w	r3, r3, #1
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00c      	beq.n	800a628 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f003 0301 	and.w	r3, r3, #1
 800a614:	2b00      	cmp	r3, #0
 800a616:	d007      	beq.n	800a628 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f06f 0201 	mvn.w	r2, #1
 800a620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f7f7 f988 	bl	8001938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00c      	beq.n	800a64c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d007      	beq.n	800a64c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 f9d2 	bl	800a9f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00c      	beq.n	800a670 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d007      	beq.n	800a670 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 f9ca 	bl	800aa04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00c      	beq.n	800a694 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a680:	2b00      	cmp	r3, #0
 800a682:	d007      	beq.n	800a694 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a68c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f87c 	bl	800a78c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	f003 0320 	and.w	r3, r3, #32
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00c      	beq.n	800a6b8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f003 0320 	and.w	r3, r3, #32
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d007      	beq.n	800a6b8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f06f 0220 	mvn.w	r2, #32
 800a6b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f992 	bl	800a9dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00c      	beq.n	800a6dc <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d007      	beq.n	800a6dc <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a6d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f99e 	bl	800aa18 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00c      	beq.n	800a700 <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d007      	beq.n	800a700 <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a6f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f996 	bl	800aa2c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00c      	beq.n	800a724 <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a710:	2b00      	cmp	r3, #0
 800a712:	d007      	beq.n	800a724 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a71c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 f98e 	bl	800aa40 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00c      	beq.n	800a748 <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a734:	2b00      	cmp	r3, #0
 800a736:	d007      	beq.n	800a748 <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 f986 	bl	800aa54 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a748:	bf00      	nop
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a758:	bf00      	nop
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a76c:	bf00      	nop
 800a76e:	370c      	adds	r7, #12
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a780:	bf00      	nop
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a794:	bf00      	nop
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a74      	ldr	r2, [pc, #464]	; (800a984 <TIM_Base_SetConfig+0x1e4>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d02b      	beq.n	800a810 <TIM_Base_SetConfig+0x70>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a73      	ldr	r2, [pc, #460]	; (800a988 <TIM_Base_SetConfig+0x1e8>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d027      	beq.n	800a810 <TIM_Base_SetConfig+0x70>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7c6:	d023      	beq.n	800a810 <TIM_Base_SetConfig+0x70>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7ce:	d01f      	beq.n	800a810 <TIM_Base_SetConfig+0x70>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a6e      	ldr	r2, [pc, #440]	; (800a98c <TIM_Base_SetConfig+0x1ec>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d01b      	beq.n	800a810 <TIM_Base_SetConfig+0x70>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a6d      	ldr	r2, [pc, #436]	; (800a990 <TIM_Base_SetConfig+0x1f0>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d017      	beq.n	800a810 <TIM_Base_SetConfig+0x70>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a6c      	ldr	r2, [pc, #432]	; (800a994 <TIM_Base_SetConfig+0x1f4>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d013      	beq.n	800a810 <TIM_Base_SetConfig+0x70>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a6b      	ldr	r2, [pc, #428]	; (800a998 <TIM_Base_SetConfig+0x1f8>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d00f      	beq.n	800a810 <TIM_Base_SetConfig+0x70>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a6a      	ldr	r2, [pc, #424]	; (800a99c <TIM_Base_SetConfig+0x1fc>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d00b      	beq.n	800a810 <TIM_Base_SetConfig+0x70>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a69      	ldr	r2, [pc, #420]	; (800a9a0 <TIM_Base_SetConfig+0x200>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d007      	beq.n	800a810 <TIM_Base_SetConfig+0x70>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4a68      	ldr	r2, [pc, #416]	; (800a9a4 <TIM_Base_SetConfig+0x204>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d003      	beq.n	800a810 <TIM_Base_SetConfig+0x70>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a67      	ldr	r2, [pc, #412]	; (800a9a8 <TIM_Base_SetConfig+0x208>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d108      	bne.n	800a822 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	4313      	orrs	r3, r2
 800a820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a57      	ldr	r2, [pc, #348]	; (800a984 <TIM_Base_SetConfig+0x1e4>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d05b      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a56      	ldr	r2, [pc, #344]	; (800a988 <TIM_Base_SetConfig+0x1e8>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d057      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a838:	d053      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a840:	d04f      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a51      	ldr	r2, [pc, #324]	; (800a98c <TIM_Base_SetConfig+0x1ec>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d04b      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a50      	ldr	r2, [pc, #320]	; (800a990 <TIM_Base_SetConfig+0x1f0>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d047      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a4f      	ldr	r2, [pc, #316]	; (800a994 <TIM_Base_SetConfig+0x1f4>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d043      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a4e      	ldr	r2, [pc, #312]	; (800a998 <TIM_Base_SetConfig+0x1f8>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d03f      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a4d      	ldr	r2, [pc, #308]	; (800a99c <TIM_Base_SetConfig+0x1fc>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d03b      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a4c      	ldr	r2, [pc, #304]	; (800a9a0 <TIM_Base_SetConfig+0x200>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d037      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4a4b      	ldr	r2, [pc, #300]	; (800a9a4 <TIM_Base_SetConfig+0x204>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d033      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a4a      	ldr	r2, [pc, #296]	; (800a9a8 <TIM_Base_SetConfig+0x208>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d02f      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4a49      	ldr	r2, [pc, #292]	; (800a9ac <TIM_Base_SetConfig+0x20c>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d02b      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a48      	ldr	r2, [pc, #288]	; (800a9b0 <TIM_Base_SetConfig+0x210>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d027      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a47      	ldr	r2, [pc, #284]	; (800a9b4 <TIM_Base_SetConfig+0x214>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d023      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a46      	ldr	r2, [pc, #280]	; (800a9b8 <TIM_Base_SetConfig+0x218>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d01f      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	4a45      	ldr	r2, [pc, #276]	; (800a9bc <TIM_Base_SetConfig+0x21c>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d01b      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4a44      	ldr	r2, [pc, #272]	; (800a9c0 <TIM_Base_SetConfig+0x220>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d017      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4a43      	ldr	r2, [pc, #268]	; (800a9c4 <TIM_Base_SetConfig+0x224>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d013      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4a42      	ldr	r2, [pc, #264]	; (800a9c8 <TIM_Base_SetConfig+0x228>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d00f      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	4a41      	ldr	r2, [pc, #260]	; (800a9cc <TIM_Base_SetConfig+0x22c>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d00b      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4a40      	ldr	r2, [pc, #256]	; (800a9d0 <TIM_Base_SetConfig+0x230>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d007      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a3f      	ldr	r2, [pc, #252]	; (800a9d4 <TIM_Base_SetConfig+0x234>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d003      	beq.n	800a8e2 <TIM_Base_SetConfig+0x142>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4a3e      	ldr	r2, [pc, #248]	; (800a9d8 <TIM_Base_SetConfig+0x238>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d108      	bne.n	800a8f4 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	695b      	ldr	r3, [r3, #20]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	689a      	ldr	r2, [r3, #8]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a1a      	ldr	r2, [pc, #104]	; (800a984 <TIM_Base_SetConfig+0x1e4>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d023      	beq.n	800a968 <TIM_Base_SetConfig+0x1c8>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a19      	ldr	r2, [pc, #100]	; (800a988 <TIM_Base_SetConfig+0x1e8>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d01f      	beq.n	800a968 <TIM_Base_SetConfig+0x1c8>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a1e      	ldr	r2, [pc, #120]	; (800a9a4 <TIM_Base_SetConfig+0x204>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d01b      	beq.n	800a968 <TIM_Base_SetConfig+0x1c8>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4a1d      	ldr	r2, [pc, #116]	; (800a9a8 <TIM_Base_SetConfig+0x208>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d017      	beq.n	800a968 <TIM_Base_SetConfig+0x1c8>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a22      	ldr	r2, [pc, #136]	; (800a9c4 <TIM_Base_SetConfig+0x224>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d013      	beq.n	800a968 <TIM_Base_SetConfig+0x1c8>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a21      	ldr	r2, [pc, #132]	; (800a9c8 <TIM_Base_SetConfig+0x228>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d00f      	beq.n	800a968 <TIM_Base_SetConfig+0x1c8>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a20      	ldr	r2, [pc, #128]	; (800a9cc <TIM_Base_SetConfig+0x22c>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d00b      	beq.n	800a968 <TIM_Base_SetConfig+0x1c8>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4a1f      	ldr	r2, [pc, #124]	; (800a9d0 <TIM_Base_SetConfig+0x230>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d007      	beq.n	800a968 <TIM_Base_SetConfig+0x1c8>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a1e      	ldr	r2, [pc, #120]	; (800a9d4 <TIM_Base_SetConfig+0x234>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d003      	beq.n	800a968 <TIM_Base_SetConfig+0x1c8>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4a1d      	ldr	r2, [pc, #116]	; (800a9d8 <TIM_Base_SetConfig+0x238>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d103      	bne.n	800a970 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	691a      	ldr	r2, [r3, #16]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	615a      	str	r2, [r3, #20]
}
 800a976:	bf00      	nop
 800a978:	3714      	adds	r7, #20
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	40012c00 	.word	0x40012c00
 800a988:	50012c00 	.word	0x50012c00
 800a98c:	40000400 	.word	0x40000400
 800a990:	50000400 	.word	0x50000400
 800a994:	40000800 	.word	0x40000800
 800a998:	50000800 	.word	0x50000800
 800a99c:	40000c00 	.word	0x40000c00
 800a9a0:	50000c00 	.word	0x50000c00
 800a9a4:	40013400 	.word	0x40013400
 800a9a8:	50013400 	.word	0x50013400
 800a9ac:	40001800 	.word	0x40001800
 800a9b0:	50001800 	.word	0x50001800
 800a9b4:	40001c00 	.word	0x40001c00
 800a9b8:	50001c00 	.word	0x50001c00
 800a9bc:	40002000 	.word	0x40002000
 800a9c0:	50002000 	.word	0x50002000
 800a9c4:	40014000 	.word	0x40014000
 800a9c8:	50014000 	.word	0x50014000
 800a9cc:	40014400 	.word	0x40014400
 800a9d0:	50014400 	.word	0x50014400
 800a9d4:	40014800 	.word	0x40014800
 800a9d8:	50014800 	.word	0x50014800

0800a9dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a9e4:	bf00      	nop
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a9f8:	bf00      	nop
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800aa48:	bf00      	nop
 800aa4a:	370c      	adds	r7, #12
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800aa5c:	bf00      	nop
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	e042      	b.n	800ab00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d106      	bne.n	800aa92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f7f6 ff75 	bl	800197c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2224      	movs	r2, #36	; 0x24
 800aa96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f022 0201 	bic.w	r2, r2, #1
 800aaa8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d002      	beq.n	800aab8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 fa16 	bl	800aee4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 f825 	bl	800ab08 <UART_SetConfig>
 800aabe:	4603      	mov	r3, r0
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d101      	bne.n	800aac8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aac4:	2301      	movs	r3, #1
 800aac6:	e01b      	b.n	800ab00 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	685a      	ldr	r2, [r3, #4]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aad6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	689a      	ldr	r2, [r3, #8]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aae6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f042 0201 	orr.w	r2, r2, #1
 800aaf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fa95 	bl	800b028 <UART_CheckIdleState>
 800aafe:	4603      	mov	r3, r0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab0c:	b094      	sub	sp, #80	; 0x50
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab12:	2300      	movs	r3, #0
 800ab14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	4b78      	ldr	r3, [pc, #480]	; (800ad00 <UART_SetConfig+0x1f8>)
 800ab1e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab22:	689a      	ldr	r2, [r3, #8]
 800ab24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	431a      	orrs	r2, r3
 800ab2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2c:	695b      	ldr	r3, [r3, #20]
 800ab2e:	431a      	orrs	r2, r3
 800ab30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab32:	69db      	ldr	r3, [r3, #28]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4971      	ldr	r1, [pc, #452]	; (800ad04 <UART_SetConfig+0x1fc>)
 800ab40:	4019      	ands	r1, r3
 800ab42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab48:	430b      	orrs	r3, r1
 800ab4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ab56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab58:	68d9      	ldr	r1, [r3, #12]
 800ab5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	ea40 0301 	orr.w	r3, r0, r1
 800ab62:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab66:	699b      	ldr	r3, [r3, #24]
 800ab68:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ab6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	4b64      	ldr	r3, [pc, #400]	; (800ad00 <UART_SetConfig+0x1f8>)
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d009      	beq.n	800ab88 <UART_SetConfig+0x80>
 800ab74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	4b63      	ldr	r3, [pc, #396]	; (800ad08 <UART_SetConfig+0x200>)
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d004      	beq.n	800ab88 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab80:	6a1a      	ldr	r2, [r3, #32]
 800ab82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab84:	4313      	orrs	r3, r2
 800ab86:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800ab92:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800ab96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab9c:	430b      	orrs	r3, r1
 800ab9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba6:	f023 000f 	bic.w	r0, r3, #15
 800abaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800abae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	ea40 0301 	orr.w	r3, r0, r1
 800abb6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800abb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	4b53      	ldr	r3, [pc, #332]	; (800ad0c <UART_SetConfig+0x204>)
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d102      	bne.n	800abc8 <UART_SetConfig+0xc0>
 800abc2:	2301      	movs	r3, #1
 800abc4:	64bb      	str	r3, [r7, #72]	; 0x48
 800abc6:	e066      	b.n	800ac96 <UART_SetConfig+0x18e>
 800abc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	4b50      	ldr	r3, [pc, #320]	; (800ad10 <UART_SetConfig+0x208>)
 800abce:	429a      	cmp	r2, r3
 800abd0:	d102      	bne.n	800abd8 <UART_SetConfig+0xd0>
 800abd2:	2302      	movs	r3, #2
 800abd4:	64bb      	str	r3, [r7, #72]	; 0x48
 800abd6:	e05e      	b.n	800ac96 <UART_SetConfig+0x18e>
 800abd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	4b4d      	ldr	r3, [pc, #308]	; (800ad14 <UART_SetConfig+0x20c>)
 800abde:	429a      	cmp	r2, r3
 800abe0:	d102      	bne.n	800abe8 <UART_SetConfig+0xe0>
 800abe2:	2304      	movs	r3, #4
 800abe4:	64bb      	str	r3, [r7, #72]	; 0x48
 800abe6:	e056      	b.n	800ac96 <UART_SetConfig+0x18e>
 800abe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	4b4a      	ldr	r3, [pc, #296]	; (800ad18 <UART_SetConfig+0x210>)
 800abee:	429a      	cmp	r2, r3
 800abf0:	d102      	bne.n	800abf8 <UART_SetConfig+0xf0>
 800abf2:	2308      	movs	r3, #8
 800abf4:	64bb      	str	r3, [r7, #72]	; 0x48
 800abf6:	e04e      	b.n	800ac96 <UART_SetConfig+0x18e>
 800abf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	4b47      	ldr	r3, [pc, #284]	; (800ad1c <UART_SetConfig+0x214>)
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d102      	bne.n	800ac08 <UART_SetConfig+0x100>
 800ac02:	2310      	movs	r3, #16
 800ac04:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac06:	e046      	b.n	800ac96 <UART_SetConfig+0x18e>
 800ac08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	4b44      	ldr	r3, [pc, #272]	; (800ad20 <UART_SetConfig+0x218>)
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d102      	bne.n	800ac18 <UART_SetConfig+0x110>
 800ac12:	2320      	movs	r3, #32
 800ac14:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac16:	e03e      	b.n	800ac96 <UART_SetConfig+0x18e>
 800ac18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	4b41      	ldr	r3, [pc, #260]	; (800ad24 <UART_SetConfig+0x21c>)
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d102      	bne.n	800ac28 <UART_SetConfig+0x120>
 800ac22:	2340      	movs	r3, #64	; 0x40
 800ac24:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac26:	e036      	b.n	800ac96 <UART_SetConfig+0x18e>
 800ac28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	4b3e      	ldr	r3, [pc, #248]	; (800ad28 <UART_SetConfig+0x220>)
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d102      	bne.n	800ac38 <UART_SetConfig+0x130>
 800ac32:	2380      	movs	r3, #128	; 0x80
 800ac34:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac36:	e02e      	b.n	800ac96 <UART_SetConfig+0x18e>
 800ac38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	4b3b      	ldr	r3, [pc, #236]	; (800ad2c <UART_SetConfig+0x224>)
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d103      	bne.n	800ac4a <UART_SetConfig+0x142>
 800ac42:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac46:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac48:	e025      	b.n	800ac96 <UART_SetConfig+0x18e>
 800ac4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	4b38      	ldr	r3, [pc, #224]	; (800ad30 <UART_SetConfig+0x228>)
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d103      	bne.n	800ac5c <UART_SetConfig+0x154>
 800ac54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac58:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac5a:	e01c      	b.n	800ac96 <UART_SetConfig+0x18e>
 800ac5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	4b34      	ldr	r3, [pc, #208]	; (800ad34 <UART_SetConfig+0x22c>)
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d103      	bne.n	800ac6e <UART_SetConfig+0x166>
 800ac66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac6a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac6c:	e013      	b.n	800ac96 <UART_SetConfig+0x18e>
 800ac6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	4b31      	ldr	r3, [pc, #196]	; (800ad38 <UART_SetConfig+0x230>)
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d103      	bne.n	800ac80 <UART_SetConfig+0x178>
 800ac78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac7e:	e00a      	b.n	800ac96 <UART_SetConfig+0x18e>
 800ac80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	4b1e      	ldr	r3, [pc, #120]	; (800ad00 <UART_SetConfig+0x1f8>)
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d103      	bne.n	800ac92 <UART_SetConfig+0x18a>
 800ac8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac8e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac90:	e001      	b.n	800ac96 <UART_SetConfig+0x18e>
 800ac92:	2300      	movs	r3, #0
 800ac94:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	4b19      	ldr	r3, [pc, #100]	; (800ad00 <UART_SetConfig+0x1f8>)
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d005      	beq.n	800acac <UART_SetConfig+0x1a4>
 800aca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	4b18      	ldr	r3, [pc, #96]	; (800ad08 <UART_SetConfig+0x200>)
 800aca6:	429a      	cmp	r2, r3
 800aca8:	f040 8094 	bne.w	800add4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800acac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acae:	2200      	movs	r2, #0
 800acb0:	623b      	str	r3, [r7, #32]
 800acb2:	627a      	str	r2, [r7, #36]	; 0x24
 800acb4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800acb8:	f7fc fe66 	bl	8007988 <HAL_RCCEx_GetPeriphCLKFreq>
 800acbc:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800acbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	f000 80f7 	beq.w	800aeb4 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800acc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acca:	4a1c      	ldr	r2, [pc, #112]	; (800ad3c <UART_SetConfig+0x234>)
 800accc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acd0:	461a      	mov	r2, r3
 800acd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acd4:	fbb3 f3f2 	udiv	r3, r3, r2
 800acd8:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acdc:	685a      	ldr	r2, [r3, #4]
 800acde:	4613      	mov	r3, r2
 800ace0:	005b      	lsls	r3, r3, #1
 800ace2:	4413      	add	r3, r2
 800ace4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d305      	bcc.n	800acf6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800acea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d924      	bls.n	800ad40 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800acf6:	2301      	movs	r3, #1
 800acf8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800acfc:	e069      	b.n	800add2 <UART_SetConfig+0x2ca>
 800acfe:	bf00      	nop
 800ad00:	44002400 	.word	0x44002400
 800ad04:	cfff69f3 	.word	0xcfff69f3
 800ad08:	54002400 	.word	0x54002400
 800ad0c:	40013800 	.word	0x40013800
 800ad10:	40004400 	.word	0x40004400
 800ad14:	40004800 	.word	0x40004800
 800ad18:	40004c00 	.word	0x40004c00
 800ad1c:	40005000 	.word	0x40005000
 800ad20:	40006400 	.word	0x40006400
 800ad24:	40007800 	.word	0x40007800
 800ad28:	40007c00 	.word	0x40007c00
 800ad2c:	40008000 	.word	0x40008000
 800ad30:	40006800 	.word	0x40006800
 800ad34:	40006c00 	.word	0x40006c00
 800ad38:	40008400 	.word	0x40008400
 800ad3c:	08020cd8 	.word	0x08020cd8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad42:	2200      	movs	r2, #0
 800ad44:	61bb      	str	r3, [r7, #24]
 800ad46:	61fa      	str	r2, [r7, #28]
 800ad48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4c:	4a64      	ldr	r2, [pc, #400]	; (800aee0 <UART_SetConfig+0x3d8>)
 800ad4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	2200      	movs	r2, #0
 800ad56:	613b      	str	r3, [r7, #16]
 800ad58:	617a      	str	r2, [r7, #20]
 800ad5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ad5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ad62:	f7f5 fa95 	bl	8000290 <__aeabi_uldivmod>
 800ad66:	4602      	mov	r2, r0
 800ad68:	460b      	mov	r3, r1
 800ad6a:	4610      	mov	r0, r2
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	f04f 0200 	mov.w	r2, #0
 800ad72:	f04f 0300 	mov.w	r3, #0
 800ad76:	020b      	lsls	r3, r1, #8
 800ad78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad7c:	0202      	lsls	r2, r0, #8
 800ad7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad80:	6849      	ldr	r1, [r1, #4]
 800ad82:	0849      	lsrs	r1, r1, #1
 800ad84:	2000      	movs	r0, #0
 800ad86:	460c      	mov	r4, r1
 800ad88:	4605      	mov	r5, r0
 800ad8a:	eb12 0804 	adds.w	r8, r2, r4
 800ad8e:	eb43 0905 	adc.w	r9, r3, r5
 800ad92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	60bb      	str	r3, [r7, #8]
 800ad9a:	60fa      	str	r2, [r7, #12]
 800ad9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ada0:	4640      	mov	r0, r8
 800ada2:	4649      	mov	r1, r9
 800ada4:	f7f5 fa74 	bl	8000290 <__aeabi_uldivmod>
 800ada8:	4602      	mov	r2, r0
 800adaa:	460b      	mov	r3, r1
 800adac:	4613      	mov	r3, r2
 800adae:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800adb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adb6:	d308      	bcc.n	800adca <UART_SetConfig+0x2c2>
 800adb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adbe:	d204      	bcs.n	800adca <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800adc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800adc6:	60da      	str	r2, [r3, #12]
 800adc8:	e003      	b.n	800add2 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800adca:	2301      	movs	r3, #1
 800adcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800add0:	e070      	b.n	800aeb4 <UART_SetConfig+0x3ac>
 800add2:	e06f      	b.n	800aeb4 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800add4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add6:	69db      	ldr	r3, [r3, #28]
 800add8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800addc:	d13c      	bne.n	800ae58 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800adde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ade0:	2200      	movs	r2, #0
 800ade2:	603b      	str	r3, [r7, #0]
 800ade4:	607a      	str	r2, [r7, #4]
 800ade6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800adea:	f7fc fdcd 	bl	8007988 <HAL_RCCEx_GetPeriphCLKFreq>
 800adee:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800adf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d05e      	beq.n	800aeb4 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfa:	4a39      	ldr	r2, [pc, #228]	; (800aee0 <UART_SetConfig+0x3d8>)
 800adfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae00:	461a      	mov	r2, r3
 800ae02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae04:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae08:	005a      	lsls	r2, r3, #1
 800ae0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	085b      	lsrs	r3, r3, #1
 800ae10:	441a      	add	r2, r3
 800ae12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae1a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae1e:	2b0f      	cmp	r3, #15
 800ae20:	d916      	bls.n	800ae50 <UART_SetConfig+0x348>
 800ae22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae28:	d212      	bcs.n	800ae50 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	f023 030f 	bic.w	r3, r3, #15
 800ae32:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae36:	085b      	lsrs	r3, r3, #1
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	f003 0307 	and.w	r3, r3, #7
 800ae3e:	b29a      	uxth	r2, r3
 800ae40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ae42:	4313      	orrs	r3, r2
 800ae44:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800ae46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ae4c:	60da      	str	r2, [r3, #12]
 800ae4e:	e031      	b.n	800aeb4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800ae50:	2301      	movs	r3, #1
 800ae52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ae56:	e02d      	b.n	800aeb4 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ae58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	469a      	mov	sl, r3
 800ae5e:	4693      	mov	fp, r2
 800ae60:	4650      	mov	r0, sl
 800ae62:	4659      	mov	r1, fp
 800ae64:	f7fc fd90 	bl	8007988 <HAL_RCCEx_GetPeriphCLKFreq>
 800ae68:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800ae6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d021      	beq.n	800aeb4 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae74:	4a1a      	ldr	r2, [pc, #104]	; (800aee0 <UART_SetConfig+0x3d8>)
 800ae76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae7e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	085b      	lsrs	r3, r3, #1
 800ae88:	441a      	add	r2, r3
 800ae8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae92:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae96:	2b0f      	cmp	r3, #15
 800ae98:	d909      	bls.n	800aeae <UART_SetConfig+0x3a6>
 800ae9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aea0:	d205      	bcs.n	800aeae <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aea4:	b29a      	uxth	r2, r3
 800aea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	60da      	str	r2, [r3, #12]
 800aeac:	e002      	b.n	800aeb4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aeb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aebe:	2201      	movs	r2, #1
 800aec0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec6:	2200      	movs	r2, #0
 800aec8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800aeca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aecc:	2200      	movs	r2, #0
 800aece:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800aed0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3750      	adds	r7, #80	; 0x50
 800aed8:	46bd      	mov	sp, r7
 800aeda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aede:	bf00      	nop
 800aee0:	08020cd8 	.word	0x08020cd8

0800aee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef0:	f003 0308 	and.w	r3, r3, #8
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00a      	beq.n	800af0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	430a      	orrs	r2, r1
 800af0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af12:	f003 0301 	and.w	r3, r3, #1
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00a      	beq.n	800af30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	430a      	orrs	r2, r1
 800af2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af34:	f003 0302 	and.w	r3, r3, #2
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00a      	beq.n	800af52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	430a      	orrs	r2, r1
 800af50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af56:	f003 0304 	and.w	r3, r3, #4
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d00a      	beq.n	800af74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	430a      	orrs	r2, r1
 800af72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af78:	f003 0310 	and.w	r3, r3, #16
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00a      	beq.n	800af96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	430a      	orrs	r2, r1
 800af94:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af9a:	f003 0320 	and.w	r3, r3, #32
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00a      	beq.n	800afb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	430a      	orrs	r2, r1
 800afb6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d01a      	beq.n	800affa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	430a      	orrs	r2, r1
 800afd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afe2:	d10a      	bne.n	800affa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	430a      	orrs	r2, r1
 800aff8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800affe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00a      	beq.n	800b01c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	430a      	orrs	r2, r1
 800b01a:	605a      	str	r2, [r3, #4]
  }
}
 800b01c:	bf00      	nop
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b098      	sub	sp, #96	; 0x60
 800b02c:	af02      	add	r7, sp, #8
 800b02e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b038:	f7f7 f924 	bl	8002284 <HAL_GetTick>
 800b03c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f003 0308 	and.w	r3, r3, #8
 800b048:	2b08      	cmp	r3, #8
 800b04a:	d12f      	bne.n	800b0ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b04c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b050:	9300      	str	r3, [sp, #0]
 800b052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b054:	2200      	movs	r2, #0
 800b056:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 f88e 	bl	800b17c <UART_WaitOnFlagUntilTimeout>
 800b060:	4603      	mov	r3, r0
 800b062:	2b00      	cmp	r3, #0
 800b064:	d022      	beq.n	800b0ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06e:	e853 3f00 	ldrex	r3, [r3]
 800b072:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b07a:	653b      	str	r3, [r7, #80]	; 0x50
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	461a      	mov	r2, r3
 800b082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b084:	647b      	str	r3, [r7, #68]	; 0x44
 800b086:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b088:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b08a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b08c:	e841 2300 	strex	r3, r2, [r1]
 800b090:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1e6      	bne.n	800b066 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2220      	movs	r2, #32
 800b09c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0a8:	2303      	movs	r3, #3
 800b0aa:	e063      	b.n	800b174 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f003 0304 	and.w	r3, r3, #4
 800b0b6:	2b04      	cmp	r3, #4
 800b0b8:	d149      	bne.n	800b14e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 f857 	bl	800b17c <UART_WaitOnFlagUntilTimeout>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d03c      	beq.n	800b14e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0dc:	e853 3f00 	ldrex	r3, [r3]
 800b0e0:	623b      	str	r3, [r7, #32]
   return(result);
 800b0e2:	6a3b      	ldr	r3, [r7, #32]
 800b0e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0f2:	633b      	str	r3, [r7, #48]	; 0x30
 800b0f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0fa:	e841 2300 	strex	r3, r2, [r1]
 800b0fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1e6      	bne.n	800b0d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	3308      	adds	r3, #8
 800b10c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	e853 3f00 	ldrex	r3, [r3]
 800b114:	60fb      	str	r3, [r7, #12]
   return(result);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f023 0301 	bic.w	r3, r3, #1
 800b11c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	3308      	adds	r3, #8
 800b124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b126:	61fa      	str	r2, [r7, #28]
 800b128:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12a:	69b9      	ldr	r1, [r7, #24]
 800b12c:	69fa      	ldr	r2, [r7, #28]
 800b12e:	e841 2300 	strex	r3, r2, [r1]
 800b132:	617b      	str	r3, [r7, #20]
   return(result);
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1e5      	bne.n	800b106 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2220      	movs	r2, #32
 800b13e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b14a:	2303      	movs	r3, #3
 800b14c:	e012      	b.n	800b174 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2220      	movs	r2, #32
 800b152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2220      	movs	r2, #32
 800b15a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3758      	adds	r7, #88	; 0x58
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	603b      	str	r3, [r7, #0]
 800b188:	4613      	mov	r3, r2
 800b18a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b18c:	e049      	b.n	800b222 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b194:	d045      	beq.n	800b222 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b196:	f7f7 f875 	bl	8002284 <HAL_GetTick>
 800b19a:	4602      	mov	r2, r0
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	1ad3      	subs	r3, r2, r3
 800b1a0:	69ba      	ldr	r2, [r7, #24]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d302      	bcc.n	800b1ac <UART_WaitOnFlagUntilTimeout+0x30>
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d101      	bne.n	800b1b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b1ac:	2303      	movs	r3, #3
 800b1ae:	e048      	b.n	800b242 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f003 0304 	and.w	r3, r3, #4
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d031      	beq.n	800b222 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	69db      	ldr	r3, [r3, #28]
 800b1c4:	f003 0308 	and.w	r3, r3, #8
 800b1c8:	2b08      	cmp	r3, #8
 800b1ca:	d110      	bne.n	800b1ee <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2208      	movs	r2, #8
 800b1d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f000 f838 	bl	800b24a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2208      	movs	r2, #8
 800b1de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e029      	b.n	800b242 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	69db      	ldr	r3, [r3, #28]
 800b1f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1fc:	d111      	bne.n	800b222 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b206:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f000 f81e 	bl	800b24a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2220      	movs	r2, #32
 800b212:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b21e:	2303      	movs	r3, #3
 800b220:	e00f      	b.n	800b242 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	69da      	ldr	r2, [r3, #28]
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	4013      	ands	r3, r2
 800b22c:	68ba      	ldr	r2, [r7, #8]
 800b22e:	429a      	cmp	r2, r3
 800b230:	bf0c      	ite	eq
 800b232:	2301      	moveq	r3, #1
 800b234:	2300      	movne	r3, #0
 800b236:	b2db      	uxtb	r3, r3
 800b238:	461a      	mov	r2, r3
 800b23a:	79fb      	ldrb	r3, [r7, #7]
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d0a6      	beq.n	800b18e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b240:	2300      	movs	r3, #0
}
 800b242:	4618      	mov	r0, r3
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b24a:	b480      	push	{r7}
 800b24c:	b095      	sub	sp, #84	; 0x54
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b25a:	e853 3f00 	ldrex	r3, [r3]
 800b25e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b262:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b266:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	461a      	mov	r2, r3
 800b26e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b270:	643b      	str	r3, [r7, #64]	; 0x40
 800b272:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b274:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b276:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b278:	e841 2300 	strex	r3, r2, [r1]
 800b27c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1e6      	bne.n	800b252 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	3308      	adds	r3, #8
 800b28a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28c:	6a3b      	ldr	r3, [r7, #32]
 800b28e:	e853 3f00 	ldrex	r3, [r3]
 800b292:	61fb      	str	r3, [r7, #28]
   return(result);
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b29a:	f023 0301 	bic.w	r3, r3, #1
 800b29e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	3308      	adds	r3, #8
 800b2a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b2aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2b0:	e841 2300 	strex	r3, r2, [r1]
 800b2b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1e3      	bne.n	800b284 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d118      	bne.n	800b2f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	e853 3f00 	ldrex	r3, [r3]
 800b2d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	f023 0310 	bic.w	r3, r3, #16
 800b2d8:	647b      	str	r3, [r7, #68]	; 0x44
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	461a      	mov	r2, r3
 800b2e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2e2:	61bb      	str	r3, [r7, #24]
 800b2e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e6:	6979      	ldr	r1, [r7, #20]
 800b2e8:	69ba      	ldr	r2, [r7, #24]
 800b2ea:	e841 2300 	strex	r3, r2, [r1]
 800b2ee:	613b      	str	r3, [r7, #16]
   return(result);
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1e6      	bne.n	800b2c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2220      	movs	r2, #32
 800b2fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b30a:	bf00      	nop
 800b30c:	3754      	adds	r7, #84	; 0x54
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b316:	b480      	push	{r7}
 800b318:	b085      	sub	sp, #20
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b324:	2b01      	cmp	r3, #1
 800b326:	d101      	bne.n	800b32c <HAL_UARTEx_DisableFifoMode+0x16>
 800b328:	2302      	movs	r3, #2
 800b32a:	e027      	b.n	800b37c <HAL_UARTEx_DisableFifoMode+0x66>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2201      	movs	r2, #1
 800b330:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2224      	movs	r2, #36	; 0x24
 800b338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f022 0201 	bic.w	r2, r2, #1
 800b352:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b35a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	68fa      	ldr	r2, [r7, #12]
 800b368:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2220      	movs	r2, #32
 800b36e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b37a:	2300      	movs	r3, #0
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3714      	adds	r7, #20
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d101      	bne.n	800b3a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b39c:	2302      	movs	r3, #2
 800b39e:	e02d      	b.n	800b3fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2224      	movs	r2, #36	; 0x24
 800b3ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f022 0201 	bic.w	r2, r2, #1
 800b3c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	430a      	orrs	r2, r1
 800b3da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 f84f 	bl	800b480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	68fa      	ldr	r2, [r7, #12]
 800b3e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2220      	movs	r2, #32
 800b3ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3710      	adds	r7, #16
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b414:	2b01      	cmp	r3, #1
 800b416:	d101      	bne.n	800b41c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b418:	2302      	movs	r3, #2
 800b41a:	e02d      	b.n	800b478 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2224      	movs	r2, #36	; 0x24
 800b428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f022 0201 	bic.w	r2, r2, #1
 800b442:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	683a      	ldr	r2, [r7, #0]
 800b454:	430a      	orrs	r2, r1
 800b456:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 f811 	bl	800b480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2220      	movs	r2, #32
 800b46a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3710      	adds	r7, #16
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b480:	b480      	push	{r7}
 800b482:	b085      	sub	sp, #20
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d108      	bne.n	800b4a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2201      	movs	r2, #1
 800b494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2201      	movs	r2, #1
 800b49c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b4a0:	e031      	b.n	800b506 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b4a2:	2308      	movs	r3, #8
 800b4a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b4a6:	2308      	movs	r3, #8
 800b4a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	0e5b      	lsrs	r3, r3, #25
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	f003 0307 	and.w	r3, r3, #7
 800b4b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	0f5b      	lsrs	r3, r3, #29
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	f003 0307 	and.w	r3, r3, #7
 800b4c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4ca:	7bbb      	ldrb	r3, [r7, #14]
 800b4cc:	7b3a      	ldrb	r2, [r7, #12]
 800b4ce:	4911      	ldr	r1, [pc, #68]	; (800b514 <UARTEx_SetNbDataToProcess+0x94>)
 800b4d0:	5c8a      	ldrb	r2, [r1, r2]
 800b4d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b4d6:	7b3a      	ldrb	r2, [r7, #12]
 800b4d8:	490f      	ldr	r1, [pc, #60]	; (800b518 <UARTEx_SetNbDataToProcess+0x98>)
 800b4da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4e0:	b29a      	uxth	r2, r3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4e8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ea:	7b7a      	ldrb	r2, [r7, #13]
 800b4ec:	4909      	ldr	r1, [pc, #36]	; (800b514 <UARTEx_SetNbDataToProcess+0x94>)
 800b4ee:	5c8a      	ldrb	r2, [r1, r2]
 800b4f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b4f4:	7b7a      	ldrb	r2, [r7, #13]
 800b4f6:	4908      	ldr	r1, [pc, #32]	; (800b518 <UARTEx_SetNbDataToProcess+0x98>)
 800b4f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b506:	bf00      	nop
 800b508:	3714      	adds	r7, #20
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	08020cf0 	.word	0x08020cf0
 800b518:	08020cf8 	.word	0x08020cf8

0800b51c <__NVIC_SetPriority>:
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	4603      	mov	r3, r0
 800b524:	6039      	str	r1, [r7, #0]
 800b526:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b528:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	db0a      	blt.n	800b546 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	b2da      	uxtb	r2, r3
 800b534:	490c      	ldr	r1, [pc, #48]	; (800b568 <__NVIC_SetPriority+0x4c>)
 800b536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b53a:	0112      	lsls	r2, r2, #4
 800b53c:	b2d2      	uxtb	r2, r2
 800b53e:	440b      	add	r3, r1
 800b540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b544:	e00a      	b.n	800b55c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	b2da      	uxtb	r2, r3
 800b54a:	4908      	ldr	r1, [pc, #32]	; (800b56c <__NVIC_SetPriority+0x50>)
 800b54c:	88fb      	ldrh	r3, [r7, #6]
 800b54e:	f003 030f 	and.w	r3, r3, #15
 800b552:	3b04      	subs	r3, #4
 800b554:	0112      	lsls	r2, r2, #4
 800b556:	b2d2      	uxtb	r2, r2
 800b558:	440b      	add	r3, r1
 800b55a:	761a      	strb	r2, [r3, #24]
}
 800b55c:	bf00      	nop
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr
 800b568:	e000e100 	.word	0xe000e100
 800b56c:	e000ed00 	.word	0xe000ed00

0800b570 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b570:	b580      	push	{r7, lr}
 800b572:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800b574:	4b05      	ldr	r3, [pc, #20]	; (800b58c <SysTick_Handler+0x1c>)
 800b576:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b578:	f002 fcce 	bl	800df18 <xTaskGetSchedulerState>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d001      	beq.n	800b586 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b582:	f003 fa35 	bl	800e9f0 <xPortSysTickHandler>
  }
}
 800b586:	bf00      	nop
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	e000e010 	.word	0xe000e010

0800b590 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b590:	b580      	push	{r7, lr}
 800b592:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800b594:	2100      	movs	r1, #0
 800b596:	f06f 0004 	mvn.w	r0, #4
 800b59a:	f7ff ffbf 	bl	800b51c <__NVIC_SetPriority>
#endif
}
 800b59e:	bf00      	nop
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b086      	sub	sp, #24
 800b5a6:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5ac:	f3ef 8305 	mrs	r3, IPSR
 800b5b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5b2:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d002      	beq.n	800b5be <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	617b      	str	r3, [r7, #20]
 800b5bc:	e013      	b.n	800b5e6 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800b5be:	f002 fcab 	bl	800df18 <xTaskGetSchedulerState>
 800b5c2:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d00d      	beq.n	800b5e6 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b5ca:	f3ef 8310 	mrs	r3, PRIMASK
 800b5ce:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5d0:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d105      	bne.n	800b5e2 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b5d6:	f3ef 8311 	mrs	r3, BASEPRI
 800b5da:	607b      	str	r3, [r7, #4]
  return(result);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800b5e6:	697b      	ldr	r3, [r7, #20]
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3718      	adds	r7, #24
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800b5f6:	f7ff ffd4 	bl	800b5a2 <IRQ_Context>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d003      	beq.n	800b608 <osKernelInitialize+0x18>
    stat = osErrorISR;
 800b600:	f06f 0305 	mvn.w	r3, #5
 800b604:	607b      	str	r3, [r7, #4]
 800b606:	e012      	b.n	800b62e <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800b608:	f002 fc86 	bl	800df18 <xTaskGetSchedulerState>
 800b60c:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	2b01      	cmp	r3, #1
 800b612:	d109      	bne.n	800b628 <osKernelInitialize+0x38>
 800b614:	4b08      	ldr	r3, [pc, #32]	; (800b638 <osKernelInitialize+0x48>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d105      	bne.n	800b628 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b61c:	4b06      	ldr	r3, [pc, #24]	; (800b638 <osKernelInitialize+0x48>)
 800b61e:	2201      	movs	r2, #1
 800b620:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b622:	2300      	movs	r3, #0
 800b624:	607b      	str	r3, [r7, #4]
 800b626:	e002      	b.n	800b62e <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800b628:	f04f 33ff 	mov.w	r3, #4294967295
 800b62c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800b62e:	687b      	ldr	r3, [r7, #4]
}
 800b630:	4618      	mov	r0, r3
 800b632:	3708      	adds	r7, #8
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	2000535c 	.word	0x2000535c

0800b63c <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800b642:	f7ff ffae 	bl	800b5a2 <IRQ_Context>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d003      	beq.n	800b654 <osKernelStart+0x18>
    stat = osErrorISR;
 800b64c:	f06f 0305 	mvn.w	r3, #5
 800b650:	607b      	str	r3, [r7, #4]
 800b652:	e016      	b.n	800b682 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800b654:	f002 fc60 	bl	800df18 <xTaskGetSchedulerState>
 800b658:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d10d      	bne.n	800b67c <osKernelStart+0x40>
 800b660:	4b0a      	ldr	r3, [pc, #40]	; (800b68c <osKernelStart+0x50>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2b01      	cmp	r3, #1
 800b666:	d109      	bne.n	800b67c <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b668:	f7ff ff92 	bl	800b590 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 800b66c:	4b07      	ldr	r3, [pc, #28]	; (800b68c <osKernelStart+0x50>)
 800b66e:	2202      	movs	r2, #2
 800b670:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b672:	f001 fed3 	bl	800d41c <vTaskStartScheduler>
      stat = osOK;
 800b676:	2300      	movs	r3, #0
 800b678:	607b      	str	r3, [r7, #4]
 800b67a:	e002      	b.n	800b682 <osKernelStart+0x46>
    } else {
      stat = osError;
 800b67c:	f04f 33ff 	mov.w	r3, #4294967295
 800b680:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800b682:	687b      	ldr	r3, [r7, #4]
}
 800b684:	4618      	mov	r0, r3
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	2000535c 	.word	0x2000535c

0800b690 <osKernelGetTickCount>:
}

/*
  Get the RTOS kernel tick count.
*/
uint32_t osKernelGetTickCount (void) {
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
  TickType_t ticks;

  if (IRQ_Context() != 0U) {
 800b696:	f7ff ff84 	bl	800b5a2 <IRQ_Context>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d003      	beq.n	800b6a8 <osKernelGetTickCount+0x18>
    ticks = xTaskGetTickCountFromISR();
 800b6a0:	f002 f820 	bl	800d6e4 <xTaskGetTickCountFromISR>
 800b6a4:	6078      	str	r0, [r7, #4]
 800b6a6:	e002      	b.n	800b6ae <osKernelGetTickCount+0x1e>
  } else {
    ticks = xTaskGetTickCount();
 800b6a8:	f002 f80c 	bl	800d6c4 <xTaskGetTickCount>
 800b6ac:	6078      	str	r0, [r7, #4]
  }

  /* Return kernel tick count */
  return (ticks);
 800b6ae:	687b      	ldr	r3, [r7, #4]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b08e      	sub	sp, #56	; 0x38
 800b6bc:	af04      	add	r7, sp, #16
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 800b6c8:	f7ff ff6b 	bl	800b5a2 <IRQ_Context>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d17f      	bne.n	800b7d2 <osThreadNew+0x11a>
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d07c      	beq.n	800b7d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b6d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b6de:	2318      	movs	r3, #24
 800b6e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d045      	beq.n	800b77e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d002      	beq.n	800b700 <osThreadNew+0x48>
        name = attr->name;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	699b      	ldr	r3, [r3, #24]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d002      	beq.n	800b70e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	699b      	ldr	r3, [r3, #24]
 800b70c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d008      	beq.n	800b726 <osThreadNew+0x6e>
 800b714:	69fb      	ldr	r3, [r7, #28]
 800b716:	2b38      	cmp	r3, #56	; 0x38
 800b718:	d805      	bhi.n	800b726 <osThreadNew+0x6e>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	f003 0301 	and.w	r3, r3, #1
 800b722:	2b00      	cmp	r3, #0
 800b724:	d001      	beq.n	800b72a <osThreadNew+0x72>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 800b726:	2300      	movs	r3, #0
 800b728:	e054      	b.n	800b7d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	695b      	ldr	r3, [r3, #20]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d003      	beq.n	800b73a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	695b      	ldr	r3, [r3, #20]
 800b736:	089b      	lsrs	r3, r3, #2
 800b738:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d00e      	beq.n	800b760 <osThreadNew+0xa8>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	2b5b      	cmp	r3, #91	; 0x5b
 800b748:	d90a      	bls.n	800b760 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d006      	beq.n	800b760 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	695b      	ldr	r3, [r3, #20]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d002      	beq.n	800b760 <osThreadNew+0xa8>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 800b75a:	2301      	movs	r3, #1
 800b75c:	61bb      	str	r3, [r7, #24]
 800b75e:	e010      	b.n	800b782 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d10c      	bne.n	800b782 <osThreadNew+0xca>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d108      	bne.n	800b782 <osThreadNew+0xca>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d104      	bne.n	800b782 <osThreadNew+0xca>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 800b778:	2300      	movs	r3, #0
 800b77a:	61bb      	str	r3, [r7, #24]
 800b77c:	e001      	b.n	800b782 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b77e:	2300      	movs	r3, #0
 800b780:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	2b01      	cmp	r3, #1
 800b786:	d110      	bne.n	800b7aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b790:	9202      	str	r2, [sp, #8]
 800b792:	9301      	str	r3, [sp, #4]
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	9300      	str	r3, [sp, #0]
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	6a3a      	ldr	r2, [r7, #32]
 800b79c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f001 fc74 	bl	800d08c <xTaskCreateStatic>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	617b      	str	r3, [r7, #20]
 800b7a8:	e013      	b.n	800b7d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b7aa:	69bb      	ldr	r3, [r7, #24]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d110      	bne.n	800b7d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800b7b0:	6a3b      	ldr	r3, [r7, #32]
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	f107 0314 	add.w	r3, r7, #20
 800b7b8:	9301      	str	r3, [sp, #4]
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f001 fcac 	bl	800d120 <xTaskCreate>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d001      	beq.n	800b7d2 <osThreadNew+0x11a>
            hTask = NULL;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800b7d2:	697b      	ldr	r3, [r7, #20]
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3728      	adds	r7, #40	; 0x28
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 800b7e4:	f7ff fedd 	bl	800b5a2 <IRQ_Context>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d003      	beq.n	800b7f6 <osDelay+0x1a>
    stat = osErrorISR;
 800b7ee:	f06f 0305 	mvn.w	r3, #5
 800b7f2:	60fb      	str	r3, [r7, #12]
 800b7f4:	e007      	b.n	800b806 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d002      	beq.n	800b806 <osDelay+0x2a>
      vTaskDelay(ticks);
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f001 fde7 	bl	800d3d4 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800b806:	68fb      	ldr	r3, [r7, #12]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <osMutexNew>:

  Limitations:
  - Priority inherit protocol is used by default, osMutexPrioInherit attribute is ignored.
  - Robust mutex is not supported, NULL is returned if used.
*/
osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b810:	b580      	push	{r7, lr}
 800b812:	b086      	sub	sp, #24
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  uint32_t type;
  uint32_t rmtx;
  int32_t  mem;

  hMutex = NULL;
 800b818:	2300      	movs	r3, #0
 800b81a:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() == 0U) {
 800b81c:	f7ff fec1 	bl	800b5a2 <IRQ_Context>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d174      	bne.n	800b910 <osMutexNew+0x100>
    if (attr != NULL) {
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d003      	beq.n	800b834 <osMutexNew+0x24>
      type = attr->attr_bits;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	613b      	str	r3, [r7, #16]
 800b832:	e001      	b.n	800b838 <osMutexNew+0x28>
    } else {
      type = 0U;
 800b834:	2300      	movs	r3, #0
 800b836:	613b      	str	r3, [r7, #16]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	f003 0301 	and.w	r3, r3, #1
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d002      	beq.n	800b848 <osMutexNew+0x38>
      rmtx = 1U;
 800b842:	2301      	movs	r3, #1
 800b844:	60fb      	str	r3, [r7, #12]
 800b846:	e001      	b.n	800b84c <osMutexNew+0x3c>
    } else {
      rmtx = 0U;
 800b848:	2300      	movs	r3, #0
 800b84a:	60fb      	str	r3, [r7, #12]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	f003 0308 	and.w	r3, r3, #8
 800b852:	2b00      	cmp	r3, #0
 800b854:	d15c      	bne.n	800b910 <osMutexNew+0x100>
      mem = -1;
 800b856:	f04f 33ff 	mov.w	r3, #4294967295
 800b85a:	60bb      	str	r3, [r7, #8]

      if (attr != NULL) {
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d015      	beq.n	800b88e <osMutexNew+0x7e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	689b      	ldr	r3, [r3, #8]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d006      	beq.n	800b878 <osMutexNew+0x68>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	2b4f      	cmp	r3, #79	; 0x4f
 800b870:	d902      	bls.n	800b878 <osMutexNew+0x68>
          /* The memory for control block is provided, use static object */
          mem = 1;
 800b872:	2301      	movs	r3, #1
 800b874:	60bb      	str	r3, [r7, #8]
 800b876:	e00c      	b.n	800b892 <osMutexNew+0x82>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d108      	bne.n	800b892 <osMutexNew+0x82>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d104      	bne.n	800b892 <osMutexNew+0x82>
            /* Control block will be allocated from the dynamic pool */
            mem = 0;
 800b888:	2300      	movs	r3, #0
 800b88a:	60bb      	str	r3, [r7, #8]
 800b88c:	e001      	b.n	800b892 <osMutexNew+0x82>
          }
        }
      }
      else {
        mem = 0;
 800b88e:	2300      	movs	r3, #0
 800b890:	60bb      	str	r3, [r7, #8]
      }

      if (mem == 1) {
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	2b01      	cmp	r3, #1
 800b896:	d112      	bne.n	800b8be <osMutexNew+0xae>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d007      	beq.n	800b8ae <osMutexNew+0x9e>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	2004      	movs	r0, #4
 800b8a6:	f000 fd61 	bl	800c36c <xQueueCreateMutexStatic>
 800b8aa:	6178      	str	r0, [r7, #20]
 800b8ac:	e016      	b.n	800b8dc <osMutexNew+0xcc>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	2001      	movs	r0, #1
 800b8b6:	f000 fd59 	bl	800c36c <xQueueCreateMutexStatic>
 800b8ba:	6178      	str	r0, [r7, #20]
 800b8bc:	e00e      	b.n	800b8dc <osMutexNew+0xcc>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d10b      	bne.n	800b8dc <osMutexNew+0xcc>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d004      	beq.n	800b8d4 <osMutexNew+0xc4>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b8ca:	2004      	movs	r0, #4
 800b8cc:	f000 fd36 	bl	800c33c <xQueueCreateMutex>
 800b8d0:	6178      	str	r0, [r7, #20]
 800b8d2:	e003      	b.n	800b8dc <osMutexNew+0xcc>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b8d4:	2001      	movs	r0, #1
 800b8d6:	f000 fd31 	bl	800c33c <xQueueCreateMutex>
 800b8da:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d00c      	beq.n	800b8fc <osMutexNew+0xec>
        if ((attr != NULL) && (attr->name != NULL)) {
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d009      	beq.n	800b8fc <osMutexNew+0xec>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d005      	beq.n	800b8fc <osMutexNew+0xec>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hMutex, attr->name);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	6978      	ldr	r0, [r7, #20]
 800b8f8:	f001 fb22 	bl	800cf40 <vQueueAddToRegistry>
        }
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d006      	beq.n	800b910 <osMutexNew+0x100>
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d003      	beq.n	800b910 <osMutexNew+0x100>
        /* Set LSB as 'recursive mutex flag' */
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	f043 0301 	orr.w	r3, r3, #1
 800b90e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return mutex ID */
  return ((osMutexId_t)hMutex);
 800b910:	697b      	ldr	r3, [r7, #20]
}
 800b912:	4618      	mov	r0, r3
 800b914:	3718      	adds	r7, #24
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <osMutexAcquire>:

/*
  Acquire a Mutex or timeout if it is locked.
*/
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b086      	sub	sp, #24
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
 800b922:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f023 0301 	bic.w	r3, r3, #1
 800b92a:	613b      	str	r3, [r7, #16]

  /* Extract recursive mutex flag */
  rmtx = (uint32_t)mutex_id & 1U;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f003 0301 	and.w	r3, r3, #1
 800b932:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b934:	2300      	movs	r3, #0
 800b936:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() != 0U) {
 800b938:	f7ff fe33 	bl	800b5a2 <IRQ_Context>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d003      	beq.n	800b94a <osMutexAcquire+0x30>
    stat = osErrorISR;
 800b942:	f06f 0305 	mvn.w	r3, #5
 800b946:	617b      	str	r3, [r7, #20]
 800b948:	e02c      	b.n	800b9a4 <osMutexAcquire+0x8a>
  }
  else if (hMutex == NULL) {
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d103      	bne.n	800b958 <osMutexAcquire+0x3e>
    stat = osErrorParameter;
 800b950:	f06f 0303 	mvn.w	r3, #3
 800b954:	617b      	str	r3, [r7, #20]
 800b956:	e025      	b.n	800b9a4 <osMutexAcquire+0x8a>
  }
  else {
    if (rmtx != 0U) {
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d011      	beq.n	800b982 <osMutexAcquire+0x68>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b95e:	6839      	ldr	r1, [r7, #0]
 800b960:	6938      	ldr	r0, [r7, #16]
 800b962:	f000 fd4a 	bl	800c3fa <xQueueTakeMutexRecursive>
 800b966:	4603      	mov	r3, r0
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d01b      	beq.n	800b9a4 <osMutexAcquire+0x8a>
        if (timeout != 0U) {
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d003      	beq.n	800b97a <osMutexAcquire+0x60>
          stat = osErrorTimeout;
 800b972:	f06f 0301 	mvn.w	r3, #1
 800b976:	617b      	str	r3, [r7, #20]
 800b978:	e014      	b.n	800b9a4 <osMutexAcquire+0x8a>
        } else {
          stat = osErrorResource;
 800b97a:	f06f 0302 	mvn.w	r3, #2
 800b97e:	617b      	str	r3, [r7, #20]
 800b980:	e010      	b.n	800b9a4 <osMutexAcquire+0x8a>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b982:	6839      	ldr	r1, [r7, #0]
 800b984:	6938      	ldr	r0, [r7, #16]
 800b986:	f001 f82a 	bl	800c9de <xQueueSemaphoreTake>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d009      	beq.n	800b9a4 <osMutexAcquire+0x8a>
        if (timeout != 0U) {
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d003      	beq.n	800b99e <osMutexAcquire+0x84>
          stat = osErrorTimeout;
 800b996:	f06f 0301 	mvn.w	r3, #1
 800b99a:	617b      	str	r3, [r7, #20]
 800b99c:	e002      	b.n	800b9a4 <osMutexAcquire+0x8a>
        } else {
          stat = osErrorResource;
 800b99e:	f06f 0302 	mvn.w	r3, #2
 800b9a2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800b9a4:	697b      	ldr	r3, [r7, #20]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3718      	adds	r7, #24
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <osMutexRelease>:

/*
  Release a Mutex that was acquired by osMutexAcquire.
*/
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b086      	sub	sp, #24
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f023 0301 	bic.w	r3, r3, #1
 800b9bc:	613b      	str	r3, [r7, #16]

  /* Extract recursive mutex flag */
  rmtx = (uint32_t)mutex_id & 1U;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f003 0301 	and.w	r3, r3, #1
 800b9c4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() != 0U) {
 800b9ca:	f7ff fdea 	bl	800b5a2 <IRQ_Context>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d003      	beq.n	800b9dc <osMutexRelease+0x2e>
    stat = osErrorISR;
 800b9d4:	f06f 0305 	mvn.w	r3, #5
 800b9d8:	617b      	str	r3, [r7, #20]
 800b9da:	e01f      	b.n	800ba1c <osMutexRelease+0x6e>
  }
  else if (hMutex == NULL) {
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d103      	bne.n	800b9ea <osMutexRelease+0x3c>
    stat = osErrorParameter;
 800b9e2:	f06f 0303 	mvn.w	r3, #3
 800b9e6:	617b      	str	r3, [r7, #20]
 800b9e8:	e018      	b.n	800ba1c <osMutexRelease+0x6e>
  }
  else {
    if (rmtx != 0U) {
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d009      	beq.n	800ba04 <osMutexRelease+0x56>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b9f0:	6938      	ldr	r0, [r7, #16]
 800b9f2:	f000 fcd6 	bl	800c3a2 <xQueueGiveMutexRecursive>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d00f      	beq.n	800ba1c <osMutexRelease+0x6e>
        stat = osErrorResource;
 800b9fc:	f06f 0302 	mvn.w	r3, #2
 800ba00:	617b      	str	r3, [r7, #20]
 800ba02:	e00b      	b.n	800ba1c <osMutexRelease+0x6e>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ba04:	2300      	movs	r3, #0
 800ba06:	2200      	movs	r2, #0
 800ba08:	2100      	movs	r1, #0
 800ba0a:	6938      	ldr	r0, [r7, #16]
 800ba0c:	f000 fd73 	bl	800c4f6 <xQueueGenericSend>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d002      	beq.n	800ba1c <osMutexRelease+0x6e>
        stat = osErrorResource;
 800ba16:	f06f 0302 	mvn.w	r3, #2
 800ba1a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800ba1c:	697b      	ldr	r3, [r7, #20]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3718      	adds	r7, #24
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <osSemaphoreNew>:
/* ==== Semaphore Management Functions ==== */

/*
  Create and Initialize a Semaphore object.
*/
osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b088      	sub	sp, #32
 800ba2a:	af02      	add	r7, sp, #8
 800ba2c:	60f8      	str	r0, [r7, #12]
 800ba2e:	60b9      	str	r1, [r7, #8]
 800ba30:	607a      	str	r2, [r7, #4]
  SemaphoreHandle_t hSemaphore;
  int32_t mem;

  hSemaphore = NULL;
 800ba32:	2300      	movs	r3, #0
 800ba34:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (max_count > 0U) && (initial_count <= max_count)) {
 800ba36:	f7ff fdb4 	bl	800b5a2 <IRQ_Context>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d175      	bne.n	800bb2c <osSemaphoreNew+0x106>
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d072      	beq.n	800bb2c <osSemaphoreNew+0x106>
 800ba46:	68ba      	ldr	r2, [r7, #8]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d86e      	bhi.n	800bb2c <osSemaphoreNew+0x106>
    mem = -1;
 800ba4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba52:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d015      	beq.n	800ba86 <osSemaphoreNew+0x60>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d006      	beq.n	800ba70 <osSemaphoreNew+0x4a>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	2b4f      	cmp	r3, #79	; 0x4f
 800ba68:	d902      	bls.n	800ba70 <osSemaphoreNew+0x4a>
        /* The memory for control block is provided, use static object */
        mem = 1;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	613b      	str	r3, [r7, #16]
 800ba6e:	e00c      	b.n	800ba8a <osSemaphoreNew+0x64>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d108      	bne.n	800ba8a <osSemaphoreNew+0x64>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d104      	bne.n	800ba8a <osSemaphoreNew+0x64>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800ba80:	2300      	movs	r3, #0
 800ba82:	613b      	str	r3, [r7, #16]
 800ba84:	e001      	b.n	800ba8a <osSemaphoreNew+0x64>
        }
      }
    }
    else {
      mem = 0;
 800ba86:	2300      	movs	r3, #0
 800ba88:	613b      	str	r3, [r7, #16]
    }

    if (mem != -1) {
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba90:	d04c      	beq.n	800bb2c <osSemaphoreNew+0x106>
      if (max_count == 1U) {
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d128      	bne.n	800baea <osSemaphoreNew+0xc4>
        if (mem == 1) {
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d10a      	bne.n	800bab4 <osSemaphoreNew+0x8e>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	2203      	movs	r2, #3
 800baa4:	9200      	str	r2, [sp, #0]
 800baa6:	2200      	movs	r2, #0
 800baa8:	2100      	movs	r1, #0
 800baaa:	2001      	movs	r0, #1
 800baac:	f000 fb79 	bl	800c1a2 <xQueueGenericCreateStatic>
 800bab0:	6178      	str	r0, [r7, #20]
 800bab2:	e005      	b.n	800bac0 <osSemaphoreNew+0x9a>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800bab4:	2203      	movs	r2, #3
 800bab6:	2100      	movs	r1, #0
 800bab8:	2001      	movs	r0, #1
 800baba:	f000 fbb8 	bl	800c22e <xQueueGenericCreate>
 800babe:	6178      	str	r0, [r7, #20]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d022      	beq.n	800bb0c <osSemaphoreNew+0xe6>
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d01f      	beq.n	800bb0c <osSemaphoreNew+0xe6>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bacc:	2300      	movs	r3, #0
 800bace:	2200      	movs	r2, #0
 800bad0:	2100      	movs	r1, #0
 800bad2:	6978      	ldr	r0, [r7, #20]
 800bad4:	f000 fd0f 	bl	800c4f6 <xQueueGenericSend>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b01      	cmp	r3, #1
 800badc:	d016      	beq.n	800bb0c <osSemaphoreNew+0xe6>
            vSemaphoreDelete (hSemaphore);
 800bade:	6978      	ldr	r0, [r7, #20]
 800bae0:	f001 f8eb 	bl	800ccba <vQueueDelete>
            hSemaphore = NULL;
 800bae4:	2300      	movs	r3, #0
 800bae6:	617b      	str	r3, [r7, #20]
 800bae8:	e010      	b.n	800bb0c <osSemaphoreNew+0xe6>
          }
        }
      }
      else {
        if (mem == 1) {
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	2b01      	cmp	r3, #1
 800baee:	d108      	bne.n	800bb02 <osSemaphoreNew+0xdc>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	461a      	mov	r2, r3
 800baf6:	68b9      	ldr	r1, [r7, #8]
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	f000 fcac 	bl	800c456 <xQueueCreateCountingSemaphoreStatic>
 800bafe:	6178      	str	r0, [r7, #20]
 800bb00:	e004      	b.n	800bb0c <osSemaphoreNew+0xe6>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800bb02:	68b9      	ldr	r1, [r7, #8]
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f000 fcd0 	bl	800c4aa <xQueueCreateCountingSemaphore>
 800bb0a:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d00c      	beq.n	800bb2c <osSemaphoreNew+0x106>
        if ((attr != NULL) && (attr->name != NULL)) {
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d009      	beq.n	800bb2c <osSemaphoreNew+0x106>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d005      	beq.n	800bb2c <osSemaphoreNew+0x106>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hSemaphore, attr->name);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4619      	mov	r1, r3
 800bb26:	6978      	ldr	r0, [r7, #20]
 800bb28:	f001 fa0a 	bl	800cf40 <vQueueAddToRegistry>
      #endif
    }
  }

  /* Return semaphore ID */
  return ((osSemaphoreId_t)hSemaphore);
 800bb2c:	697b      	ldr	r3, [r7, #20]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3718      	adds	r7, #24
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
	...

0800bb38 <osSemaphoreAcquire>:

/*
  Acquire a Semaphore token or timeout if no tokens are available.
*/
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d103      	bne.n	800bb58 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800bb50:	f06f 0303 	mvn.w	r3, #3
 800bb54:	617b      	str	r3, [r7, #20]
 800bb56:	e034      	b.n	800bbc2 <osSemaphoreAcquire+0x8a>
  }
  else if (IRQ_Context() != 0U) {
 800bb58:	f7ff fd23 	bl	800b5a2 <IRQ_Context>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d01e      	beq.n	800bba0 <osSemaphoreAcquire+0x68>
    if (timeout != 0U) {
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d003      	beq.n	800bb70 <osSemaphoreAcquire+0x38>
      stat = osErrorParameter;
 800bb68:	f06f 0303 	mvn.w	r3, #3
 800bb6c:	617b      	str	r3, [r7, #20]
 800bb6e:	e028      	b.n	800bbc2 <osSemaphoreAcquire+0x8a>
    }
    else {
      yield = pdFALSE;
 800bb70:	2300      	movs	r3, #0
 800bb72:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800bb74:	f107 030c 	add.w	r3, r7, #12
 800bb78:	461a      	mov	r2, r3
 800bb7a:	2100      	movs	r1, #0
 800bb7c:	6938      	ldr	r0, [r7, #16]
 800bb7e:	f001 f805 	bl	800cb8c <xQueueReceiveFromISR>
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	d003      	beq.n	800bb90 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
 800bb88:	f06f 0302 	mvn.w	r3, #2
 800bb8c:	617b      	str	r3, [r7, #20]
 800bb8e:	e018      	b.n	800bbc2 <osSemaphoreAcquire+0x8a>
      } else {
        portYIELD_FROM_ISR (yield);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d015      	beq.n	800bbc2 <osSemaphoreAcquire+0x8a>
 800bb96:	4b0d      	ldr	r3, [pc, #52]	; (800bbcc <osSemaphoreAcquire+0x94>)
 800bb98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb9c:	601a      	str	r2, [r3, #0]
 800bb9e:	e010      	b.n	800bbc2 <osSemaphoreAcquire+0x8a>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800bba0:	6839      	ldr	r1, [r7, #0]
 800bba2:	6938      	ldr	r0, [r7, #16]
 800bba4:	f000 ff1b 	bl	800c9de <xQueueSemaphoreTake>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d009      	beq.n	800bbc2 <osSemaphoreAcquire+0x8a>
      if (timeout != 0U) {
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d003      	beq.n	800bbbc <osSemaphoreAcquire+0x84>
        stat = osErrorTimeout;
 800bbb4:	f06f 0301 	mvn.w	r3, #1
 800bbb8:	617b      	str	r3, [r7, #20]
 800bbba:	e002      	b.n	800bbc2 <osSemaphoreAcquire+0x8a>
      } else {
        stat = osErrorResource;
 800bbbc:	f06f 0302 	mvn.w	r3, #2
 800bbc0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800bbc2:	697b      	ldr	r3, [r7, #20]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3718      	adds	r7, #24
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	e000ed04 	.word	0xe000ed04

0800bbd0 <osSemaphoreRelease>:

/*
  Release a Semaphore token up to the initial maximum count.
*/
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b086      	sub	sp, #24
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d103      	bne.n	800bbee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800bbe6:	f06f 0303 	mvn.w	r3, #3
 800bbea:	617b      	str	r3, [r7, #20]
 800bbec:	e027      	b.n	800bc3e <osSemaphoreRelease+0x6e>
  }
  else if (IRQ_Context() != 0U) {
 800bbee:	f7ff fcd8 	bl	800b5a2 <IRQ_Context>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d016      	beq.n	800bc26 <osSemaphoreRelease+0x56>
    yield = pdFALSE;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bbfc:	f107 030c 	add.w	r3, r7, #12
 800bc00:	4619      	mov	r1, r3
 800bc02:	6938      	ldr	r0, [r7, #16]
 800bc04:	f000 fdc0 	bl	800c788 <xQueueGiveFromISR>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d003      	beq.n	800bc16 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800bc0e:	f06f 0302 	mvn.w	r3, #2
 800bc12:	617b      	str	r3, [r7, #20]
 800bc14:	e013      	b.n	800bc3e <osSemaphoreRelease+0x6e>
    } else {
      portYIELD_FROM_ISR (yield);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d010      	beq.n	800bc3e <osSemaphoreRelease+0x6e>
 800bc1c:	4b0a      	ldr	r3, [pc, #40]	; (800bc48 <osSemaphoreRelease+0x78>)
 800bc1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc22:	601a      	str	r2, [r3, #0]
 800bc24:	e00b      	b.n	800bc3e <osSemaphoreRelease+0x6e>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bc26:	2300      	movs	r3, #0
 800bc28:	2200      	movs	r2, #0
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	6938      	ldr	r0, [r7, #16]
 800bc2e:	f000 fc62 	bl	800c4f6 <xQueueGenericSend>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d002      	beq.n	800bc3e <osSemaphoreRelease+0x6e>
      stat = osErrorResource;
 800bc38:	f06f 0302 	mvn.w	r3, #2
 800bc3c:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return execution status */
  return (stat);
 800bc3e:	697b      	ldr	r3, [r7, #20]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3718      	adds	r7, #24
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	e000ed04 	.word	0xe000ed04

0800bc4c <osSemaphoreDelete>:
}

/*
  Delete a Semaphore object.
*/
osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	60bb      	str	r3, [r7, #8]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IRQ_Context() != 0U) {
 800bc58:	f7ff fca3 	bl	800b5a2 <IRQ_Context>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d003      	beq.n	800bc6a <osSemaphoreDelete+0x1e>
    stat = osErrorISR;
 800bc62:	f06f 0305 	mvn.w	r3, #5
 800bc66:	60fb      	str	r3, [r7, #12]
 800bc68:	e00e      	b.n	800bc88 <osSemaphoreDelete+0x3c>
  }
  else if (hSemaphore == NULL) {
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d103      	bne.n	800bc78 <osSemaphoreDelete+0x2c>
    stat = osErrorParameter;
 800bc70:	f06f 0303 	mvn.w	r3, #3
 800bc74:	60fb      	str	r3, [r7, #12]
 800bc76:	e007      	b.n	800bc88 <osSemaphoreDelete+0x3c>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800bc78:	68b8      	ldr	r0, [r7, #8]
 800bc7a:	f001 f9a5 	bl	800cfc8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	60fb      	str	r3, [r7, #12]
    vSemaphoreDelete (hSemaphore);
 800bc82:	68b8      	ldr	r0, [r7, #8]
 800bc84:	f001 f819 	bl	800ccba <vQueueDelete>
#else
  stat = osError;
#endif

  /* Return execution status */
  return (stat);
 800bc88:	68fb      	ldr	r3, [r7, #12]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3710      	adds	r7, #16
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}

0800bc92 <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bc92:	b580      	push	{r7, lr}
 800bc94:	b088      	sub	sp, #32
 800bc96:	af02      	add	r7, sp, #8
 800bc98:	60f8      	str	r0, [r7, #12]
 800bc9a:	60b9      	str	r1, [r7, #8]
 800bc9c:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 800bca2:	f7ff fc7e 	bl	800b5a2 <IRQ_Context>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d15f      	bne.n	800bd6c <osMessageQueueNew+0xda>
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d05c      	beq.n	800bd6c <osMessageQueueNew+0xda>
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d059      	beq.n	800bd6c <osMessageQueueNew+0xda>
    mem = -1;
 800bcb8:	f04f 33ff 	mov.w	r3, #4294967295
 800bcbc:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d029      	beq.n	800bd18 <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d012      	beq.n	800bcf2 <osMessageQueueNew+0x60>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	2b4f      	cmp	r3, #79	; 0x4f
 800bcd2:	d90e      	bls.n	800bcf2 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00a      	beq.n	800bcf2 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	695a      	ldr	r2, [r3, #20]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	68b9      	ldr	r1, [r7, #8]
 800bce4:	fb01 f303 	mul.w	r3, r1, r3
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d302      	bcc.n	800bcf2 <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 800bcec:	2301      	movs	r3, #1
 800bcee:	613b      	str	r3, [r7, #16]
 800bcf0:	e014      	b.n	800bd1c <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d110      	bne.n	800bd1c <osMessageQueueNew+0x8a>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d10c      	bne.n	800bd1c <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d108      	bne.n	800bd1c <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	695b      	ldr	r3, [r3, #20]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d104      	bne.n	800bd1c <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800bd12:	2300      	movs	r3, #0
 800bd14:	613b      	str	r3, [r7, #16]
 800bd16:	e001      	b.n	800bd1c <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d10b      	bne.n	800bd3a <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	691a      	ldr	r2, [r3, #16]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	9100      	str	r1, [sp, #0]
 800bd2e:	68b9      	ldr	r1, [r7, #8]
 800bd30:	68f8      	ldr	r0, [r7, #12]
 800bd32:	f000 fa36 	bl	800c1a2 <xQueueGenericCreateStatic>
 800bd36:	6178      	str	r0, [r7, #20]
 800bd38:	e008      	b.n	800bd4c <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d105      	bne.n	800bd4c <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bd40:	2200      	movs	r2, #0
 800bd42:	68b9      	ldr	r1, [r7, #8]
 800bd44:	68f8      	ldr	r0, [r7, #12]
 800bd46:	f000 fa72 	bl	800c22e <xQueueGenericCreate>
 800bd4a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d00c      	beq.n	800bd6c <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d009      	beq.n	800bd6c <osMessageQueueNew+0xda>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d005      	beq.n	800bd6c <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4619      	mov	r1, r3
 800bd66:	6978      	ldr	r0, [r7, #20]
 800bd68:	f001 f8ea 	bl	800cf40 <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 800bd6c:	697b      	ldr	r3, [r7, #20]
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3718      	adds	r7, #24
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
	...

0800bd78 <osMessageQueuePut>:
  Put a Message into a Queue or timeout if Queue is full.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b088      	sub	sp, #32
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	603b      	str	r3, [r7, #0]
 800bd84:	4613      	mov	r3, r2
 800bd86:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 800bd90:	f7ff fc07 	bl	800b5a2 <IRQ_Context>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d024      	beq.n	800bde4 <osMessageQueuePut+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d005      	beq.n	800bdac <osMessageQueuePut+0x34>
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d002      	beq.n	800bdac <osMessageQueuePut+0x34>
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d003      	beq.n	800bdb4 <osMessageQueuePut+0x3c>
      stat = osErrorParameter;
 800bdac:	f06f 0303 	mvn.w	r3, #3
 800bdb0:	61fb      	str	r3, [r7, #28]
 800bdb2:	e034      	b.n	800be1e <osMessageQueuePut+0xa6>
    }
    else {
      yield = pdFALSE;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bdb8:	f107 0214 	add.w	r2, r7, #20
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	68b9      	ldr	r1, [r7, #8]
 800bdc0:	69b8      	ldr	r0, [r7, #24]
 800bdc2:	f000 fc61 	bl	800c688 <xQueueGenericSendFromISR>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d003      	beq.n	800bdd4 <osMessageQueuePut+0x5c>
        stat = osErrorResource;
 800bdcc:	f06f 0302 	mvn.w	r3, #2
 800bdd0:	61fb      	str	r3, [r7, #28]
 800bdd2:	e024      	b.n	800be1e <osMessageQueuePut+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d021      	beq.n	800be1e <osMessageQueuePut+0xa6>
 800bdda:	4b13      	ldr	r3, [pc, #76]	; (800be28 <osMessageQueuePut+0xb0>)
 800bddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bde0:	601a      	str	r2, [r3, #0]
 800bde2:	e01c      	b.n	800be1e <osMessageQueuePut+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d002      	beq.n	800bdf0 <osMessageQueuePut+0x78>
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d103      	bne.n	800bdf8 <osMessageQueuePut+0x80>
      stat = osErrorParameter;
 800bdf0:	f06f 0303 	mvn.w	r3, #3
 800bdf4:	61fb      	str	r3, [r7, #28]
 800bdf6:	e012      	b.n	800be1e <osMessageQueuePut+0xa6>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	683a      	ldr	r2, [r7, #0]
 800bdfc:	68b9      	ldr	r1, [r7, #8]
 800bdfe:	69b8      	ldr	r0, [r7, #24]
 800be00:	f000 fb79 	bl	800c4f6 <xQueueGenericSend>
 800be04:	4603      	mov	r3, r0
 800be06:	2b01      	cmp	r3, #1
 800be08:	d009      	beq.n	800be1e <osMessageQueuePut+0xa6>
        if (timeout != 0U) {
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d003      	beq.n	800be18 <osMessageQueuePut+0xa0>
          stat = osErrorTimeout;
 800be10:	f06f 0301 	mvn.w	r3, #1
 800be14:	61fb      	str	r3, [r7, #28]
 800be16:	e002      	b.n	800be1e <osMessageQueuePut+0xa6>
        } else {
          stat = osErrorResource;
 800be18:	f06f 0302 	mvn.w	r3, #2
 800be1c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800be1e:	69fb      	ldr	r3, [r7, #28]
}
 800be20:	4618      	mov	r0, r3
 800be22:	3720      	adds	r7, #32
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	e000ed04 	.word	0xe000ed04

0800be2c <osMessageQueueGet>:
  Get a Message from a Queue or timeout if Queue is empty.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b088      	sub	sp, #32
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
 800be38:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800be3e:	2300      	movs	r3, #0
 800be40:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 800be42:	f7ff fbae 	bl	800b5a2 <IRQ_Context>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d024      	beq.n	800be96 <osMessageQueueGet+0x6a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800be4c:	69bb      	ldr	r3, [r7, #24]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d005      	beq.n	800be5e <osMessageQueueGet+0x32>
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <osMessageQueueGet+0x32>
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d003      	beq.n	800be66 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 800be5e:	f06f 0303 	mvn.w	r3, #3
 800be62:	61fb      	str	r3, [r7, #28]
 800be64:	e033      	b.n	800bece <osMessageQueueGet+0xa2>
    }
    else {
      yield = pdFALSE;
 800be66:	2300      	movs	r3, #0
 800be68:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800be6a:	f107 0314 	add.w	r3, r7, #20
 800be6e:	461a      	mov	r2, r3
 800be70:	68b9      	ldr	r1, [r7, #8]
 800be72:	69b8      	ldr	r0, [r7, #24]
 800be74:	f000 fe8a 	bl	800cb8c <xQueueReceiveFromISR>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d003      	beq.n	800be86 <osMessageQueueGet+0x5a>
        stat = osErrorResource;
 800be7e:	f06f 0302 	mvn.w	r3, #2
 800be82:	61fb      	str	r3, [r7, #28]
 800be84:	e023      	b.n	800bece <osMessageQueueGet+0xa2>
      } else {
        portYIELD_FROM_ISR (yield);
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d020      	beq.n	800bece <osMessageQueueGet+0xa2>
 800be8c:	4b12      	ldr	r3, [pc, #72]	; (800bed8 <osMessageQueueGet+0xac>)
 800be8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be92:	601a      	str	r2, [r3, #0]
 800be94:	e01b      	b.n	800bece <osMessageQueueGet+0xa2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d002      	beq.n	800bea2 <osMessageQueueGet+0x76>
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d103      	bne.n	800beaa <osMessageQueueGet+0x7e>
      stat = osErrorParameter;
 800bea2:	f06f 0303 	mvn.w	r3, #3
 800bea6:	61fb      	str	r3, [r7, #28]
 800bea8:	e011      	b.n	800bece <osMessageQueueGet+0xa2>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	68b9      	ldr	r1, [r7, #8]
 800beae:	69b8      	ldr	r0, [r7, #24]
 800beb0:	f000 fcdc 	bl	800c86c <xQueueReceive>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d009      	beq.n	800bece <osMessageQueueGet+0xa2>
        if (timeout != 0U) {
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d003      	beq.n	800bec8 <osMessageQueueGet+0x9c>
          stat = osErrorTimeout;
 800bec0:	f06f 0301 	mvn.w	r3, #1
 800bec4:	61fb      	str	r3, [r7, #28]
 800bec6:	e002      	b.n	800bece <osMessageQueueGet+0xa2>
        } else {
          stat = osErrorResource;
 800bec8:	f06f 0302 	mvn.w	r3, #2
 800becc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800bece:	69fb      	ldr	r3, [r7, #28]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3720      	adds	r7, #32
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	e000ed04 	.word	0xe000ed04

0800bedc <osMessageQueueGetCount>:
}

/*
  Get number of queued messages in a Message Queue.
*/
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	60bb      	str	r3, [r7, #8]
  UBaseType_t count;

  if (hQueue == NULL) {
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d102      	bne.n	800bef4 <osMessageQueueGetCount+0x18>
    count = 0U;
 800beee:	2300      	movs	r3, #0
 800bef0:	60fb      	str	r3, [r7, #12]
 800bef2:	e00d      	b.n	800bf10 <osMessageQueueGetCount+0x34>
  }
  else if (IRQ_Context() != 0U) {
 800bef4:	f7ff fb55 	bl	800b5a2 <IRQ_Context>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d004      	beq.n	800bf08 <osMessageQueueGetCount+0x2c>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800befe:	68b8      	ldr	r0, [r7, #8]
 800bf00:	f000 fec7 	bl	800cc92 <uxQueueMessagesWaitingFromISR>
 800bf04:	60f8      	str	r0, [r7, #12]
 800bf06:	e003      	b.n	800bf10 <osMessageQueueGetCount+0x34>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800bf08:	68b8      	ldr	r0, [r7, #8]
 800bf0a:	f000 feac 	bl	800cc66 <uxQueueMessagesWaiting>
 800bf0e:	60f8      	str	r0, [r7, #12]
  }

  /* Return number of queued messages */
  return ((uint32_t)count);
 800bf10:	68fb      	ldr	r3, [r7, #12]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <osMessageQueueDelete>:
}

/*
  Delete a Message Queue object.
*/
osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b084      	sub	sp, #16
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	60bb      	str	r3, [r7, #8]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IRQ_Context() != 0U) {
 800bf26:	f7ff fb3c 	bl	800b5a2 <IRQ_Context>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d003      	beq.n	800bf38 <osMessageQueueDelete+0x1e>
    stat = osErrorISR;
 800bf30:	f06f 0305 	mvn.w	r3, #5
 800bf34:	60fb      	str	r3, [r7, #12]
 800bf36:	e00e      	b.n	800bf56 <osMessageQueueDelete+0x3c>
  }
  else if (hQueue == NULL) {
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d103      	bne.n	800bf46 <osMessageQueueDelete+0x2c>
    stat = osErrorParameter;
 800bf3e:	f06f 0303 	mvn.w	r3, #3
 800bf42:	60fb      	str	r3, [r7, #12]
 800bf44:	e007      	b.n	800bf56 <osMessageQueueDelete+0x3c>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800bf46:	68b8      	ldr	r0, [r7, #8]
 800bf48:	f001 f83e 	bl	800cfc8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	60fb      	str	r3, [r7, #12]
    vQueueDelete (hQueue);
 800bf50:	68b8      	ldr	r0, [r7, #8]
 800bf52:	f000 feb2 	bl	800ccba <vQueueDelete>
#else
  stat = osError;
#endif

  /* Return execution status */
  return (stat);
 800bf56:	68fb      	ldr	r3, [r7, #12]
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3710      	adds	r7, #16
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bf60:	b480      	push	{r7}
 800bf62:	b085      	sub	sp, #20
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	4a07      	ldr	r2, [pc, #28]	; (800bf8c <vApplicationGetTimerTaskMemory+0x2c>)
 800bf70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	4a06      	ldr	r2, [pc, #24]	; (800bf90 <vApplicationGetTimerTaskMemory+0x30>)
 800bf76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2280      	movs	r2, #128	; 0x80
 800bf7c:	601a      	str	r2, [r3, #0]
}
 800bf7e:	bf00      	nop
 800bf80:	3714      	adds	r7, #20
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	20005360 	.word	0x20005360
 800bf90:	200053bc 	.word	0x200053bc

0800bf94 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f103 0208 	add.w	r2, r3, #8
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f04f 32ff 	mov.w	r2, #4294967295
 800bfac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f103 0208 	add.w	r2, r3, #8
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f103 0208 	add.w	r2, r3, #8
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bfc8:	bf00      	nop
 800bfca:	370c      	adds	r7, #12
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b083      	sub	sp, #12
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bfe2:	bf00      	nop
 800bfe4:	370c      	adds	r7, #12
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr

0800bfee <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800bfee:	b480      	push	{r7}
 800bff0:	b085      	sub	sp, #20
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c004:	d103      	bne.n	800c00e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	691b      	ldr	r3, [r3, #16]
 800c00a:	60fb      	str	r3, [r7, #12]
 800c00c:	e00c      	b.n	800c028 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	3308      	adds	r3, #8
 800c012:	60fb      	str	r3, [r7, #12]
 800c014:	e002      	b.n	800c01c <vListInsert+0x2e>
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	60fb      	str	r3, [r7, #12]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	68ba      	ldr	r2, [r7, #8]
 800c024:	429a      	cmp	r2, r3
 800c026:	d2f6      	bcs.n	800c016 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	685a      	ldr	r2, [r3, #4]
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	683a      	ldr	r2, [r7, #0]
 800c036:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	683a      	ldr	r2, [r7, #0]
 800c042:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	1c5a      	adds	r2, r3, #1
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	601a      	str	r2, [r3, #0]
}
 800c054:	bf00      	nop
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	691b      	ldr	r3, [r3, #16]
 800c06c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	6892      	ldr	r2, [r2, #8]
 800c076:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	6852      	ldr	r2, [r2, #4]
 800c080:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d103      	bne.n	800c094 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	689a      	ldr	r2, [r3, #8]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2200      	movs	r2, #0
 800c098:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	1e5a      	subs	r2, r3, #1
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3714      	adds	r7, #20
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d102      	bne.n	800c0d2 <xQueueGenericReset+0x1e>
 800c0cc:	f002 fda4 	bl	800ec18 <ulSetInterruptMask>
 800c0d0:	e7fe      	b.n	800c0d0 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d057      	beq.n	800c188 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d053      	beq.n	800c188 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0e8:	2100      	movs	r1, #0
 800c0ea:	fba3 2302 	umull	r2, r3, r3, r2
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d000      	beq.n	800c0f4 <xQueueGenericReset+0x40>
 800c0f2:	2101      	movs	r1, #1
 800c0f4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d146      	bne.n	800c188 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 800c0fa:	f002 fc4d 	bl	800e998 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c106:	68b9      	ldr	r1, [r7, #8]
 800c108:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c10a:	fb01 f303 	mul.w	r3, r1, r3
 800c10e:	441a      	add	r2, r3
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	2200      	movs	r2, #0
 800c118:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c12a:	3b01      	subs	r3, #1
 800c12c:	68b9      	ldr	r1, [r7, #8]
 800c12e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c130:	fb01 f303 	mul.w	r3, r1, r3
 800c134:	441a      	add	r2, r3
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	22ff      	movs	r2, #255	; 0xff
 800c13e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	22ff      	movs	r2, #255	; 0xff
 800c146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10e      	bne.n	800c16e <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	691b      	ldr	r3, [r3, #16]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d014      	beq.n	800c182 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	3310      	adds	r3, #16
 800c15c:	4618      	mov	r0, r3
 800c15e:	f001 fcc3 	bl	800dae8 <xTaskRemoveFromEventList>
 800c162:	4603      	mov	r3, r0
 800c164:	2b00      	cmp	r3, #0
 800c166:	d00c      	beq.n	800c182 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800c168:	f002 fc04 	bl	800e974 <vPortYield>
 800c16c:	e009      	b.n	800c182 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	3310      	adds	r3, #16
 800c172:	4618      	mov	r0, r3
 800c174:	f7ff ff0e 	bl	800bf94 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	3324      	adds	r3, #36	; 0x24
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7ff ff09 	bl	800bf94 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800c182:	f002 fc1b 	bl	800e9bc <vPortExitCritical>
 800c186:	e001      	b.n	800c18c <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 800c188:	2300      	movs	r3, #0
 800c18a:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d102      	bne.n	800c198 <xQueueGenericReset+0xe4>
 800c192:	f002 fd41 	bl	800ec18 <ulSetInterruptMask>
 800c196:	e7fe      	b.n	800c196 <xQueueGenericReset+0xe2>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800c198:	68fb      	ldr	r3, [r7, #12]
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}

0800c1a2 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800c1a2:	b580      	push	{r7, lr}
 800c1a4:	b088      	sub	sp, #32
 800c1a6:	af02      	add	r7, sp, #8
 800c1a8:	60f8      	str	r0, [r7, #12]
 800c1aa:	60b9      	str	r1, [r7, #8]
 800c1ac:	607a      	str	r2, [r7, #4]
 800c1ae:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d102      	bne.n	800c1c0 <xQueueGenericCreateStatic+0x1e>
 800c1ba:	f002 fd2d 	bl	800ec18 <ulSetInterruptMask>
 800c1be:	e7fe      	b.n	800c1be <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d028      	beq.n	800c218 <xQueueGenericCreateStatic+0x76>
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d025      	beq.n	800c218 <xQueueGenericCreateStatic+0x76>
            ( pxStaticQueue != NULL ) &&
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d002      	beq.n	800c1d8 <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d01f      	beq.n	800c218 <xQueueGenericCreateStatic+0x76>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d102      	bne.n	800c1e4 <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d119      	bne.n	800c218 <xQueueGenericCreateStatic+0x76>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800c1e4:	2350      	movs	r3, #80	; 0x50
 800c1e6:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	2b50      	cmp	r3, #80	; 0x50
 800c1ec:	d002      	beq.n	800c1f4 <xQueueGenericCreateStatic+0x52>
 800c1ee:	f002 fd13 	bl	800ec18 <ulSetInterruptMask>
 800c1f2:	e7fe      	b.n	800c1f2 <xQueueGenericCreateStatic+0x50>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800c1f4:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c202:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	9300      	str	r3, [sp, #0]
 800c20a:	4613      	mov	r3, r2
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	68b9      	ldr	r1, [r7, #8]
 800c210:	68f8      	ldr	r0, [r7, #12]
 800c212:	f000 f856 	bl	800c2c2 <prvInitialiseNewQueue>
 800c216:	e005      	b.n	800c224 <xQueueGenericCreateStatic+0x82>
        }
        else
        {
            configASSERT( pxNewQueue );
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d102      	bne.n	800c224 <xQueueGenericCreateStatic+0x82>
 800c21e:	f002 fcfb 	bl	800ec18 <ulSetInterruptMask>
 800c222:	e7fe      	b.n	800c222 <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800c224:	697b      	ldr	r3, [r7, #20]
    }
 800c226:	4618      	mov	r0, r3
 800c228:	3718      	adds	r7, #24
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800c22e:	b580      	push	{r7, lr}
 800c230:	b08a      	sub	sp, #40	; 0x28
 800c232:	af02      	add	r7, sp, #8
 800c234:	60f8      	str	r0, [r7, #12]
 800c236:	60b9      	str	r1, [r7, #8]
 800c238:	4613      	mov	r3, r2
 800c23a:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800c23c:	2300      	movs	r3, #0
 800c23e:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d032      	beq.n	800c2ac <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800c246:	2100      	movs	r1, #0
 800c248:	68ba      	ldr	r2, [r7, #8]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	fba3 2302 	umull	r2, r3, r3, r2
 800c250:	2b00      	cmp	r3, #0
 800c252:	d000      	beq.n	800c256 <xQueueGenericCreate+0x28>
 800c254:	2101      	movs	r1, #1
 800c256:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d127      	bne.n	800c2ac <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	68ba      	ldr	r2, [r7, #8]
 800c260:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800c264:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800c268:	d820      	bhi.n	800c2ac <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	fb02 f303 	mul.w	r3, r2, r3
 800c272:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c274:	69bb      	ldr	r3, [r7, #24]
 800c276:	3350      	adds	r3, #80	; 0x50
 800c278:	4618      	mov	r0, r3
 800c27a:	f002 fd2d 	bl	800ecd8 <pvPortMalloc>
 800c27e:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800c280:	69fb      	ldr	r3, [r7, #28]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d018      	beq.n	800c2b8 <xQueueGenericCreate+0x8a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c286:	69fb      	ldr	r3, [r7, #28]
 800c288:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	3350      	adds	r3, #80	; 0x50
 800c28e:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	2200      	movs	r2, #0
 800c294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c298:	79fa      	ldrb	r2, [r7, #7]
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	9300      	str	r3, [sp, #0]
 800c29e:	4613      	mov	r3, r2
 800c2a0:	697a      	ldr	r2, [r7, #20]
 800c2a2:	68b9      	ldr	r1, [r7, #8]
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f000 f80c 	bl	800c2c2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800c2aa:	e005      	b.n	800c2b8 <xQueueGenericCreate+0x8a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d102      	bne.n	800c2b8 <xQueueGenericCreate+0x8a>
 800c2b2:	f002 fcb1 	bl	800ec18 <ulSetInterruptMask>
 800c2b6:	e7fe      	b.n	800c2b6 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800c2b8:	69fb      	ldr	r3, [r7, #28]
    }
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3720      	adds	r7, #32
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}

0800c2c2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b084      	sub	sp, #16
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	60f8      	str	r0, [r7, #12]
 800c2ca:	60b9      	str	r1, [r7, #8]
 800c2cc:	607a      	str	r2, [r7, #4]
 800c2ce:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d103      	bne.n	800c2de <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	69ba      	ldr	r2, [r7, #24]
 800c2da:	601a      	str	r2, [r3, #0]
 800c2dc:	e002      	b.n	800c2e4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	68fa      	ldr	r2, [r7, #12]
 800c2e8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	68ba      	ldr	r2, [r7, #8]
 800c2ee:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c2f0:	2101      	movs	r1, #1
 800c2f2:	69b8      	ldr	r0, [r7, #24]
 800c2f4:	f7ff fede 	bl	800c0b4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800c2f8:	69bb      	ldr	r3, [r7, #24]
 800c2fa:	78fa      	ldrb	r2, [r7, #3]
 800c2fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800c300:	bf00      	nop
 800c302:	3710      	adds	r7, #16
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d00e      	beq.n	800c334 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2200      	movs	r2, #0
 800c31a:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2200      	movs	r2, #0
 800c320:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c328:	2300      	movs	r3, #0
 800c32a:	2200      	movs	r2, #0
 800c32c:	2100      	movs	r1, #0
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 f8e1 	bl	800c4f6 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800c334:	bf00      	nop
 800c336:	3708      	adds	r7, #8
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b086      	sub	sp, #24
 800c340:	af00      	add	r7, sp, #0
 800c342:	4603      	mov	r3, r0
 800c344:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c346:	2301      	movs	r3, #1
 800c348:	617b      	str	r3, [r7, #20]
 800c34a:	2300      	movs	r3, #0
 800c34c:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c34e:	79fb      	ldrb	r3, [r7, #7]
 800c350:	461a      	mov	r2, r3
 800c352:	6939      	ldr	r1, [r7, #16]
 800c354:	6978      	ldr	r0, [r7, #20]
 800c356:	f7ff ff6a 	bl	800c22e <xQueueGenericCreate>
 800c35a:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f7ff ffd3 	bl	800c308 <prvInitialiseMutex>

        return xNewQueue;
 800c362:	68fb      	ldr	r3, [r7, #12]
    }
 800c364:	4618      	mov	r0, r3
 800c366:	3718      	adds	r7, #24
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <xQueueCreateMutexStatic>:

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                           StaticQueue_t * pxStaticQueue )
    {
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b088      	sub	sp, #32
 800c370:	af02      	add	r7, sp, #8
 800c372:	4603      	mov	r3, r0
 800c374:	6039      	str	r1, [r7, #0]
 800c376:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c378:	2301      	movs	r3, #1
 800c37a:	617b      	str	r3, [r7, #20]
 800c37c:	2300      	movs	r3, #0
 800c37e:	613b      	str	r3, [r7, #16]

        /* Prevent compiler warnings about unused parameters if
         * configUSE_TRACE_FACILITY does not equal 1. */
        ( void ) ucQueueType;

        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c380:	79fb      	ldrb	r3, [r7, #7]
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	2200      	movs	r2, #0
 800c388:	6939      	ldr	r1, [r7, #16]
 800c38a:	6978      	ldr	r0, [r7, #20]
 800c38c:	f7ff ff09 	bl	800c1a2 <xQueueGenericCreateStatic>
 800c390:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c392:	68f8      	ldr	r0, [r7, #12]
 800c394:	f7ff ffb8 	bl	800c308 <prvInitialiseMutex>

        return xNewQueue;
 800c398:	68fb      	ldr	r3, [r7, #12]
    }
 800c39a:	4618      	mov	r0, r3
 800c39c:	3718      	adds	r7, #24
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}

0800c3a2 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
 800c3a2:	b590      	push	{r4, r7, lr}
 800c3a4:	b085      	sub	sp, #20
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	60bb      	str	r3, [r7, #8]

        configASSERT( pxMutex );
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d102      	bne.n	800c3ba <xQueueGiveMutexRecursive+0x18>
 800c3b4:	f002 fc30 	bl	800ec18 <ulSetInterruptMask>
 800c3b8:	e7fe      	b.n	800c3b8 <xQueueGiveMutexRecursive+0x16>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	689c      	ldr	r4, [r3, #8]
 800c3be:	f001 fd9b 	bl	800def8 <xTaskGetCurrentTaskHandle>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	429c      	cmp	r4, r3
 800c3c6:	d111      	bne.n	800c3ec <xQueueGiveMutexRecursive+0x4a>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	1e5a      	subs	r2, r3, #1
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	60da      	str	r2, [r3, #12]

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	68db      	ldr	r3, [r3, #12]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d105      	bne.n	800c3e6 <xQueueGiveMutexRecursive+0x44>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c3da:	2300      	movs	r3, #0
 800c3dc:	2200      	movs	r2, #0
 800c3de:	2100      	movs	r1, #0
 800c3e0:	68b8      	ldr	r0, [r7, #8]
 800c3e2:	f000 f888 	bl	800c4f6 <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	60fb      	str	r3, [r7, #12]
 800c3ea:	e001      	b.n	800c3f0 <xQueueGiveMutexRecursive+0x4e>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	60fb      	str	r3, [r7, #12]

            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        return xReturn;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
    }
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3714      	adds	r7, #20
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd90      	pop	{r4, r7, pc}

0800c3fa <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
 800c3fa:	b590      	push	{r4, r7, lr}
 800c3fc:	b085      	sub	sp, #20
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
 800c402:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	60bb      	str	r3, [r7, #8]

        configASSERT( pxMutex );
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d102      	bne.n	800c414 <xQueueTakeMutexRecursive+0x1a>
 800c40e:	f002 fc03 	bl	800ec18 <ulSetInterruptMask>
 800c412:	e7fe      	b.n	800c412 <xQueueTakeMutexRecursive+0x18>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	689c      	ldr	r4, [r3, #8]
 800c418:	f001 fd6e 	bl	800def8 <xTaskGetCurrentTaskHandle>
 800c41c:	4603      	mov	r3, r0
 800c41e:	429c      	cmp	r4, r3
 800c420:	d107      	bne.n	800c432 <xQueueTakeMutexRecursive+0x38>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	1c5a      	adds	r2, r3, #1
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 800c42c:	2301      	movs	r3, #1
 800c42e:	60fb      	str	r3, [r7, #12]
 800c430:	e00c      	b.n	800c44c <xQueueTakeMutexRecursive+0x52>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c432:	6839      	ldr	r1, [r7, #0]
 800c434:	68b8      	ldr	r0, [r7, #8]
 800c436:	f000 fad2 	bl	800c9de <xQueueSemaphoreTake>
 800c43a:	60f8      	str	r0, [r7, #12]

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d004      	beq.n	800c44c <xQueueTakeMutexRecursive+0x52>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	1c5a      	adds	r2, r3, #1
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	60da      	str	r2, [r3, #12]
            {
                traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
            }
        }

        return xReturn;
 800c44c:	68fb      	ldr	r3, [r7, #12]
    }
 800c44e:	4618      	mov	r0, r3
 800c450:	3714      	adds	r7, #20
 800c452:	46bd      	mov	sp, r7
 800c454:	bd90      	pop	{r4, r7, pc}

0800c456 <xQueueCreateCountingSemaphoreStatic>:
#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                       const UBaseType_t uxInitialCount,
                                                       StaticQueue_t * pxStaticQueue )
    {
 800c456:	b580      	push	{r7, lr}
 800c458:	b088      	sub	sp, #32
 800c45a:	af02      	add	r7, sp, #8
 800c45c:	60f8      	str	r0, [r7, #12]
 800c45e:	60b9      	str	r1, [r7, #8]
 800c460:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
 800c462:	2300      	movs	r3, #0
 800c464:	617b      	str	r3, [r7, #20]

        if( ( uxMaxCount != 0 ) &&
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d013      	beq.n	800c494 <xQueueCreateCountingSemaphoreStatic+0x3e>
 800c46c:	68ba      	ldr	r2, [r7, #8]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	429a      	cmp	r2, r3
 800c472:	d80f      	bhi.n	800c494 <xQueueCreateCountingSemaphoreStatic+0x3e>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c474:	2302      	movs	r3, #2
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	2100      	movs	r1, #0
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f7ff fe8f 	bl	800c1a2 <xQueueGenericCreateStatic>
 800c484:	6178      	str	r0, [r7, #20]

            if( xHandle != NULL )
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d009      	beq.n	800c4a0 <xQueueCreateCountingSemaphoreStatic+0x4a>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	68ba      	ldr	r2, [r7, #8]
 800c490:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 800c492:	e005      	b.n	800c4a0 <xQueueCreateCountingSemaphoreStatic+0x4a>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d102      	bne.n	800c4a0 <xQueueCreateCountingSemaphoreStatic+0x4a>
 800c49a:	f002 fbbd 	bl	800ec18 <ulSetInterruptMask>
 800c49e:	e7fe      	b.n	800c49e <xQueueCreateCountingSemaphoreStatic+0x48>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 800c4a0:	697b      	ldr	r3, [r7, #20]
    }
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3718      	adds	r7, #24
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b084      	sub	sp, #16
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
 800c4b2:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d010      	beq.n	800c4e0 <xQueueCreateCountingSemaphore+0x36>
 800c4be:	683a      	ldr	r2, [r7, #0]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d80c      	bhi.n	800c4e0 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c4c6:	2202      	movs	r2, #2
 800c4c8:	2100      	movs	r1, #0
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f7ff feaf 	bl	800c22e <xQueueGenericCreate>
 800c4d0:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d009      	beq.n	800c4ec <xQueueCreateCountingSemaphore+0x42>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	683a      	ldr	r2, [r7, #0]
 800c4dc:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 800c4de:	e005      	b.n	800c4ec <xQueueCreateCountingSemaphore+0x42>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d102      	bne.n	800c4ec <xQueueCreateCountingSemaphore+0x42>
 800c4e6:	f002 fb97 	bl	800ec18 <ulSetInterruptMask>
 800c4ea:	e7fe      	b.n	800c4ea <xQueueCreateCountingSemaphore+0x40>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
    }
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b08a      	sub	sp, #40	; 0x28
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	60f8      	str	r0, [r7, #12]
 800c4fe:	60b9      	str	r1, [r7, #8]
 800c500:	607a      	str	r2, [r7, #4]
 800c502:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c504:	2300      	movs	r3, #0
 800c506:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800c50c:	6a3b      	ldr	r3, [r7, #32]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d102      	bne.n	800c518 <xQueueGenericSend+0x22>
 800c512:	f002 fb81 	bl	800ec18 <ulSetInterruptMask>
 800c516:	e7fe      	b.n	800c516 <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d103      	bne.n	800c526 <xQueueGenericSend+0x30>
 800c51e:	6a3b      	ldr	r3, [r7, #32]
 800c520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c522:	2b00      	cmp	r3, #0
 800c524:	d101      	bne.n	800c52a <xQueueGenericSend+0x34>
 800c526:	2301      	movs	r3, #1
 800c528:	e000      	b.n	800c52c <xQueueGenericSend+0x36>
 800c52a:	2300      	movs	r3, #0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d102      	bne.n	800c536 <xQueueGenericSend+0x40>
 800c530:	f002 fb72 	bl	800ec18 <ulSetInterruptMask>
 800c534:	e7fe      	b.n	800c534 <xQueueGenericSend+0x3e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	2b02      	cmp	r3, #2
 800c53a:	d103      	bne.n	800c544 <xQueueGenericSend+0x4e>
 800c53c:	6a3b      	ldr	r3, [r7, #32]
 800c53e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c540:	2b01      	cmp	r3, #1
 800c542:	d101      	bne.n	800c548 <xQueueGenericSend+0x52>
 800c544:	2301      	movs	r3, #1
 800c546:	e000      	b.n	800c54a <xQueueGenericSend+0x54>
 800c548:	2300      	movs	r3, #0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d102      	bne.n	800c554 <xQueueGenericSend+0x5e>
 800c54e:	f002 fb63 	bl	800ec18 <ulSetInterruptMask>
 800c552:	e7fe      	b.n	800c552 <xQueueGenericSend+0x5c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c554:	f001 fce0 	bl	800df18 <xTaskGetSchedulerState>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d102      	bne.n	800c564 <xQueueGenericSend+0x6e>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d101      	bne.n	800c568 <xQueueGenericSend+0x72>
 800c564:	2301      	movs	r3, #1
 800c566:	e000      	b.n	800c56a <xQueueGenericSend+0x74>
 800c568:	2300      	movs	r3, #0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d102      	bne.n	800c574 <xQueueGenericSend+0x7e>
 800c56e:	f002 fb53 	bl	800ec18 <ulSetInterruptMask>
 800c572:	e7fe      	b.n	800c572 <xQueueGenericSend+0x7c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800c574:	f002 fa10 	bl	800e998 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c578:	6a3b      	ldr	r3, [r7, #32]
 800c57a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c57c:	6a3b      	ldr	r3, [r7, #32]
 800c57e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c580:	429a      	cmp	r2, r3
 800c582:	d302      	bcc.n	800c58a <xQueueGenericSend+0x94>
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	2b02      	cmp	r3, #2
 800c588:	d11d      	bne.n	800c5c6 <xQueueGenericSend+0xd0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c58a:	683a      	ldr	r2, [r7, #0]
 800c58c:	68b9      	ldr	r1, [r7, #8]
 800c58e:	6a38      	ldr	r0, [r7, #32]
 800c590:	f000 fbc6 	bl	800cd20 <prvCopyDataToQueue>
 800c594:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c596:	6a3b      	ldr	r3, [r7, #32]
 800c598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00a      	beq.n	800c5b4 <xQueueGenericSend+0xbe>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c59e:	6a3b      	ldr	r3, [r7, #32]
 800c5a0:	3324      	adds	r3, #36	; 0x24
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f001 faa0 	bl	800dae8 <xTaskRemoveFromEventList>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d007      	beq.n	800c5be <xQueueGenericSend+0xc8>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800c5ae:	f002 f9e1 	bl	800e974 <vPortYield>
 800c5b2:	e004      	b.n	800c5be <xQueueGenericSend+0xc8>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800c5b4:	69fb      	ldr	r3, [r7, #28]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d001      	beq.n	800c5be <xQueueGenericSend+0xc8>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800c5ba:	f002 f9db 	bl	800e974 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800c5be:	f002 f9fd 	bl	800e9bc <vPortExitCritical>
                return pdPASS;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	e05c      	b.n	800c680 <xQueueGenericSend+0x18a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d103      	bne.n	800c5d4 <xQueueGenericSend+0xde>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c5cc:	f002 f9f6 	bl	800e9bc <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	e055      	b.n	800c680 <xQueueGenericSend+0x18a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800c5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d106      	bne.n	800c5e8 <xQueueGenericSend+0xf2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800c5da:	f107 0314 	add.w	r3, r7, #20
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f001 fb50 	bl	800dc84 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c5e8:	f002 f9e8 	bl	800e9bc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800c5ec:	f000 ff70 	bl	800d4d0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800c5f0:	f002 f9d2 	bl	800e998 <vPortEnterCritical>
 800c5f4:	6a3b      	ldr	r3, [r7, #32]
 800c5f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5fa:	b25b      	sxtb	r3, r3
 800c5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c600:	d103      	bne.n	800c60a <xQueueGenericSend+0x114>
 800c602:	6a3b      	ldr	r3, [r7, #32]
 800c604:	2200      	movs	r2, #0
 800c606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c60a:	6a3b      	ldr	r3, [r7, #32]
 800c60c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c610:	b25b      	sxtb	r3, r3
 800c612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c616:	d103      	bne.n	800c620 <xQueueGenericSend+0x12a>
 800c618:	6a3b      	ldr	r3, [r7, #32]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c620:	f002 f9cc 	bl	800e9bc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c624:	1d3a      	adds	r2, r7, #4
 800c626:	f107 0314 	add.w	r3, r7, #20
 800c62a:	4611      	mov	r1, r2
 800c62c:	4618      	mov	r0, r3
 800c62e:	f001 fb3f 	bl	800dcb0 <xTaskCheckForTimeOut>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d11d      	bne.n	800c674 <xQueueGenericSend+0x17e>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c638:	6a38      	ldr	r0, [r7, #32]
 800c63a:	f000 fc69 	bl	800cf10 <prvIsQueueFull>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d011      	beq.n	800c668 <xQueueGenericSend+0x172>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c644:	6a3b      	ldr	r3, [r7, #32]
 800c646:	3310      	adds	r3, #16
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	4611      	mov	r1, r2
 800c64c:	4618      	mov	r0, r3
 800c64e:	f001 f9f1 	bl	800da34 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800c652:	6a38      	ldr	r0, [r7, #32]
 800c654:	f000 fbf4 	bl	800ce40 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800c658:	f000 ff48 	bl	800d4ec <xTaskResumeAll>
 800c65c:	4603      	mov	r3, r0
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d188      	bne.n	800c574 <xQueueGenericSend+0x7e>
                {
                    portYIELD_WITHIN_API();
 800c662:	f002 f987 	bl	800e974 <vPortYield>
 800c666:	e785      	b.n	800c574 <xQueueGenericSend+0x7e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800c668:	6a38      	ldr	r0, [r7, #32]
 800c66a:	f000 fbe9 	bl	800ce40 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800c66e:	f000 ff3d 	bl	800d4ec <xTaskResumeAll>
 800c672:	e77f      	b.n	800c574 <xQueueGenericSend+0x7e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800c674:	6a38      	ldr	r0, [r7, #32]
 800c676:	f000 fbe3 	bl	800ce40 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800c67a:	f000 ff37 	bl	800d4ec <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800c67e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800c680:	4618      	mov	r0, r3
 800c682:	3728      	adds	r7, #40	; 0x28
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b08a      	sub	sp, #40	; 0x28
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	607a      	str	r2, [r7, #4]
 800c694:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800c69a:	6a3b      	ldr	r3, [r7, #32]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d102      	bne.n	800c6a6 <xQueueGenericSendFromISR+0x1e>
 800c6a0:	f002 faba 	bl	800ec18 <ulSetInterruptMask>
 800c6a4:	e7fe      	b.n	800c6a4 <xQueueGenericSendFromISR+0x1c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d103      	bne.n	800c6b4 <xQueueGenericSendFromISR+0x2c>
 800c6ac:	6a3b      	ldr	r3, [r7, #32]
 800c6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d101      	bne.n	800c6b8 <xQueueGenericSendFromISR+0x30>
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e000      	b.n	800c6ba <xQueueGenericSendFromISR+0x32>
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d102      	bne.n	800c6c4 <xQueueGenericSendFromISR+0x3c>
 800c6be:	f002 faab 	bl	800ec18 <ulSetInterruptMask>
 800c6c2:	e7fe      	b.n	800c6c2 <xQueueGenericSendFromISR+0x3a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	2b02      	cmp	r3, #2
 800c6c8:	d103      	bne.n	800c6d2 <xQueueGenericSendFromISR+0x4a>
 800c6ca:	6a3b      	ldr	r3, [r7, #32]
 800c6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d101      	bne.n	800c6d6 <xQueueGenericSendFromISR+0x4e>
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	e000      	b.n	800c6d8 <xQueueGenericSendFromISR+0x50>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d102      	bne.n	800c6e2 <xQueueGenericSendFromISR+0x5a>
 800c6dc:	f002 fa9c 	bl	800ec18 <ulSetInterruptMask>
 800c6e0:	e7fe      	b.n	800c6e0 <xQueueGenericSendFromISR+0x58>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c6e2:	f002 fa99 	bl	800ec18 <ulSetInterruptMask>
 800c6e6:	61f8      	str	r0, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c6e8:	6a3b      	ldr	r3, [r7, #32]
 800c6ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6ec:	6a3b      	ldr	r3, [r7, #32]
 800c6ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d302      	bcc.n	800c6fa <xQueueGenericSendFromISR+0x72>
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	2b02      	cmp	r3, #2
 800c6f8:	d13c      	bne.n	800c774 <xQueueGenericSendFromISR+0xec>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800c6fa:	6a3b      	ldr	r3, [r7, #32]
 800c6fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c700:	76fb      	strb	r3, [r7, #27]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c702:	6a3b      	ldr	r3, [r7, #32]
 800c704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c706:	617b      	str	r3, [r7, #20]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c708:	683a      	ldr	r2, [r7, #0]
 800c70a:	68b9      	ldr	r1, [r7, #8]
 800c70c:	6a38      	ldr	r0, [r7, #32]
 800c70e:	f000 fb07 	bl	800cd20 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800c712:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c71a:	d112      	bne.n	800c742 <xQueueGenericSendFromISR+0xba>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c71c:	6a3b      	ldr	r3, [r7, #32]
 800c71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c720:	2b00      	cmp	r3, #0
 800c722:	d024      	beq.n	800c76e <xQueueGenericSendFromISR+0xe6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c724:	6a3b      	ldr	r3, [r7, #32]
 800c726:	3324      	adds	r3, #36	; 0x24
 800c728:	4618      	mov	r0, r3
 800c72a:	f001 f9dd 	bl	800dae8 <xTaskRemoveFromEventList>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b00      	cmp	r3, #0
 800c732:	d01c      	beq.n	800c76e <xQueueGenericSendFromISR+0xe6>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d019      	beq.n	800c76e <xQueueGenericSendFromISR+0xe6>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2201      	movs	r2, #1
 800c73e:	601a      	str	r2, [r3, #0]
 800c740:	e015      	b.n	800c76e <xQueueGenericSendFromISR+0xe6>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800c742:	f000 ffe1 	bl	800d708 <uxTaskGetNumberOfTasks>
 800c746:	6138      	str	r0, [r7, #16]
 800c748:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c74c:	693a      	ldr	r2, [r7, #16]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d90d      	bls.n	800c76e <xQueueGenericSendFromISR+0xe6>
 800c752:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c756:	2b7f      	cmp	r3, #127	; 0x7f
 800c758:	d102      	bne.n	800c760 <xQueueGenericSendFromISR+0xd8>
 800c75a:	f002 fa5d 	bl	800ec18 <ulSetInterruptMask>
 800c75e:	e7fe      	b.n	800c75e <xQueueGenericSendFromISR+0xd6>
 800c760:	7efb      	ldrb	r3, [r7, #27]
 800c762:	3301      	adds	r3, #1
 800c764:	b2db      	uxtb	r3, r3
 800c766:	b25a      	sxtb	r2, r3
 800c768:	6a3b      	ldr	r3, [r7, #32]
 800c76a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800c76e:	2301      	movs	r3, #1
 800c770:	627b      	str	r3, [r7, #36]	; 0x24
        {
 800c772:	e001      	b.n	800c778 <xQueueGenericSendFromISR+0xf0>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800c774:	2300      	movs	r3, #0
 800c776:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c778:	69f8      	ldr	r0, [r7, #28]
 800c77a:	f002 fa5a 	bl	800ec32 <vClearInterruptMask>

    return xReturn;
 800c77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c780:	4618      	mov	r0, r3
 800c782:	3728      	adds	r7, #40	; 0x28
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b088      	sub	sp, #32
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	61bb      	str	r3, [r7, #24]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800c796:	69bb      	ldr	r3, [r7, #24]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d102      	bne.n	800c7a2 <xQueueGiveFromISR+0x1a>
 800c79c:	f002 fa3c 	bl	800ec18 <ulSetInterruptMask>
 800c7a0:	e7fe      	b.n	800c7a0 <xQueueGiveFromISR+0x18>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800c7a2:	69bb      	ldr	r3, [r7, #24]
 800c7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d002      	beq.n	800c7b0 <xQueueGiveFromISR+0x28>
 800c7aa:	f002 fa35 	bl	800ec18 <ulSetInterruptMask>
 800c7ae:	e7fe      	b.n	800c7ae <xQueueGiveFromISR+0x26>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d103      	bne.n	800c7c0 <xQueueGiveFromISR+0x38>
 800c7b8:	69bb      	ldr	r3, [r7, #24]
 800c7ba:	689b      	ldr	r3, [r3, #8]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d101      	bne.n	800c7c4 <xQueueGiveFromISR+0x3c>
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	e000      	b.n	800c7c6 <xQueueGiveFromISR+0x3e>
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d102      	bne.n	800c7d0 <xQueueGiveFromISR+0x48>
 800c7ca:	f002 fa25 	bl	800ec18 <ulSetInterruptMask>
 800c7ce:	e7fe      	b.n	800c7ce <xQueueGiveFromISR+0x46>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7d0:	f002 fa22 	bl	800ec18 <ulSetInterruptMask>
 800c7d4:	6178      	str	r0, [r7, #20]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7d6:	69bb      	ldr	r3, [r7, #24]
 800c7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7da:	613b      	str	r3, [r7, #16]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7e0:	693a      	ldr	r2, [r7, #16]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d238      	bcs.n	800c858 <xQueueGiveFromISR+0xd0>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800c7e6:	69bb      	ldr	r3, [r7, #24]
 800c7e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7ec:	73fb      	strb	r3, [r7, #15]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	1c5a      	adds	r2, r3, #1
 800c7f2:	69bb      	ldr	r3, [r7, #24]
 800c7f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800c7f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7fe:	d112      	bne.n	800c826 <xQueueGiveFromISR+0x9e>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c800:	69bb      	ldr	r3, [r7, #24]
 800c802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c804:	2b00      	cmp	r3, #0
 800c806:	d024      	beq.n	800c852 <xQueueGiveFromISR+0xca>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c808:	69bb      	ldr	r3, [r7, #24]
 800c80a:	3324      	adds	r3, #36	; 0x24
 800c80c:	4618      	mov	r0, r3
 800c80e:	f001 f96b 	bl	800dae8 <xTaskRemoveFromEventList>
 800c812:	4603      	mov	r3, r0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d01c      	beq.n	800c852 <xQueueGiveFromISR+0xca>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d019      	beq.n	800c852 <xQueueGiveFromISR+0xca>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	2201      	movs	r2, #1
 800c822:	601a      	str	r2, [r3, #0]
 800c824:	e015      	b.n	800c852 <xQueueGiveFromISR+0xca>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800c826:	f000 ff6f 	bl	800d708 <uxTaskGetNumberOfTasks>
 800c82a:	60b8      	str	r0, [r7, #8]
 800c82c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c830:	68ba      	ldr	r2, [r7, #8]
 800c832:	429a      	cmp	r2, r3
 800c834:	d90d      	bls.n	800c852 <xQueueGiveFromISR+0xca>
 800c836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c83a:	2b7f      	cmp	r3, #127	; 0x7f
 800c83c:	d102      	bne.n	800c844 <xQueueGiveFromISR+0xbc>
 800c83e:	f002 f9eb 	bl	800ec18 <ulSetInterruptMask>
 800c842:	e7fe      	b.n	800c842 <xQueueGiveFromISR+0xba>
 800c844:	7bfb      	ldrb	r3, [r7, #15]
 800c846:	3301      	adds	r3, #1
 800c848:	b2db      	uxtb	r3, r3
 800c84a:	b25a      	sxtb	r2, r3
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800c852:	2301      	movs	r3, #1
 800c854:	61fb      	str	r3, [r7, #28]
 800c856:	e001      	b.n	800c85c <xQueueGiveFromISR+0xd4>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800c858:	2300      	movs	r3, #0
 800c85a:	61fb      	str	r3, [r7, #28]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c85c:	6978      	ldr	r0, [r7, #20]
 800c85e:	f002 f9e8 	bl	800ec32 <vClearInterruptMask>

    return xReturn;
 800c862:	69fb      	ldr	r3, [r7, #28]
}
 800c864:	4618      	mov	r0, r3
 800c866:	3720      	adds	r7, #32
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b08a      	sub	sp, #40	; 0x28
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	60b9      	str	r1, [r7, #8]
 800c876:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800c878:	2300      	movs	r3, #0
 800c87a:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800c880:	6a3b      	ldr	r3, [r7, #32]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d102      	bne.n	800c88c <xQueueReceive+0x20>
 800c886:	f002 f9c7 	bl	800ec18 <ulSetInterruptMask>
 800c88a:	e7fe      	b.n	800c88a <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d103      	bne.n	800c89a <xQueueReceive+0x2e>
 800c892:	6a3b      	ldr	r3, [r7, #32]
 800c894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c896:	2b00      	cmp	r3, #0
 800c898:	d101      	bne.n	800c89e <xQueueReceive+0x32>
 800c89a:	2301      	movs	r3, #1
 800c89c:	e000      	b.n	800c8a0 <xQueueReceive+0x34>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d102      	bne.n	800c8aa <xQueueReceive+0x3e>
 800c8a4:	f002 f9b8 	bl	800ec18 <ulSetInterruptMask>
 800c8a8:	e7fe      	b.n	800c8a8 <xQueueReceive+0x3c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c8aa:	f001 fb35 	bl	800df18 <xTaskGetSchedulerState>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d102      	bne.n	800c8ba <xQueueReceive+0x4e>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d101      	bne.n	800c8be <xQueueReceive+0x52>
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	e000      	b.n	800c8c0 <xQueueReceive+0x54>
 800c8be:	2300      	movs	r3, #0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d102      	bne.n	800c8ca <xQueueReceive+0x5e>
 800c8c4:	f002 f9a8 	bl	800ec18 <ulSetInterruptMask>
 800c8c8:	e7fe      	b.n	800c8c8 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800c8ca:	f002 f865 	bl	800e998 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8ce:	6a3b      	ldr	r3, [r7, #32]
 800c8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d2:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d019      	beq.n	800c90e <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c8da:	68b9      	ldr	r1, [r7, #8]
 800c8dc:	6a38      	ldr	r0, [r7, #32]
 800c8de:	f000 fa89 	bl	800cdf4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	1e5a      	subs	r2, r3, #1
 800c8e6:	6a3b      	ldr	r3, [r7, #32]
 800c8e8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8ea:	6a3b      	ldr	r3, [r7, #32]
 800c8ec:	691b      	ldr	r3, [r3, #16]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d009      	beq.n	800c906 <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8f2:	6a3b      	ldr	r3, [r7, #32]
 800c8f4:	3310      	adds	r3, #16
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f001 f8f6 	bl	800dae8 <xTaskRemoveFromEventList>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d001      	beq.n	800c906 <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800c902:	f002 f837 	bl	800e974 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800c906:	f002 f859 	bl	800e9bc <vPortExitCritical>
                return pdPASS;
 800c90a:	2301      	movs	r3, #1
 800c90c:	e063      	b.n	800c9d6 <xQueueReceive+0x16a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d103      	bne.n	800c91c <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c914:	f002 f852 	bl	800e9bc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800c918:	2300      	movs	r3, #0
 800c91a:	e05c      	b.n	800c9d6 <xQueueReceive+0x16a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800c91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d106      	bne.n	800c930 <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800c922:	f107 0314 	add.w	r3, r7, #20
 800c926:	4618      	mov	r0, r3
 800c928:	f001 f9ac 	bl	800dc84 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c92c:	2301      	movs	r3, #1
 800c92e:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c930:	f002 f844 	bl	800e9bc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800c934:	f000 fdcc 	bl	800d4d0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800c938:	f002 f82e 	bl	800e998 <vPortEnterCritical>
 800c93c:	6a3b      	ldr	r3, [r7, #32]
 800c93e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c942:	b25b      	sxtb	r3, r3
 800c944:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c948:	d103      	bne.n	800c952 <xQueueReceive+0xe6>
 800c94a:	6a3b      	ldr	r3, [r7, #32]
 800c94c:	2200      	movs	r2, #0
 800c94e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c952:	6a3b      	ldr	r3, [r7, #32]
 800c954:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c958:	b25b      	sxtb	r3, r3
 800c95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c95e:	d103      	bne.n	800c968 <xQueueReceive+0xfc>
 800c960:	6a3b      	ldr	r3, [r7, #32]
 800c962:	2200      	movs	r2, #0
 800c964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c968:	f002 f828 	bl	800e9bc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c96c:	1d3a      	adds	r2, r7, #4
 800c96e:	f107 0314 	add.w	r3, r7, #20
 800c972:	4611      	mov	r1, r2
 800c974:	4618      	mov	r0, r3
 800c976:	f001 f99b 	bl	800dcb0 <xTaskCheckForTimeOut>
 800c97a:	4603      	mov	r3, r0
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d11d      	bne.n	800c9bc <xQueueReceive+0x150>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c980:	6a38      	ldr	r0, [r7, #32]
 800c982:	f000 faaf 	bl	800cee4 <prvIsQueueEmpty>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d011      	beq.n	800c9b0 <xQueueReceive+0x144>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c98c:	6a3b      	ldr	r3, [r7, #32]
 800c98e:	3324      	adds	r3, #36	; 0x24
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	4611      	mov	r1, r2
 800c994:	4618      	mov	r0, r3
 800c996:	f001 f84d 	bl	800da34 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800c99a:	6a38      	ldr	r0, [r7, #32]
 800c99c:	f000 fa50 	bl	800ce40 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800c9a0:	f000 fda4 	bl	800d4ec <xTaskResumeAll>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d18f      	bne.n	800c8ca <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 800c9aa:	f001 ffe3 	bl	800e974 <vPortYield>
 800c9ae:	e78c      	b.n	800c8ca <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800c9b0:	6a38      	ldr	r0, [r7, #32]
 800c9b2:	f000 fa45 	bl	800ce40 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800c9b6:	f000 fd99 	bl	800d4ec <xTaskResumeAll>
 800c9ba:	e786      	b.n	800c8ca <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800c9bc:	6a38      	ldr	r0, [r7, #32]
 800c9be:	f000 fa3f 	bl	800ce40 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800c9c2:	f000 fd93 	bl	800d4ec <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9c6:	6a38      	ldr	r0, [r7, #32]
 800c9c8:	f000 fa8c 	bl	800cee4 <prvIsQueueEmpty>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	f43f af7b 	beq.w	800c8ca <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800c9d4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3728      	adds	r7, #40	; 0x28
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b08a      	sub	sp, #40	; 0x28
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
 800c9e6:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800c9f4:	69fb      	ldr	r3, [r7, #28]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d102      	bne.n	800ca00 <xQueueSemaphoreTake+0x22>
 800c9fa:	f002 f90d 	bl	800ec18 <ulSetInterruptMask>
 800c9fe:	e7fe      	b.n	800c9fe <xQueueSemaphoreTake+0x20>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800ca00:	69fb      	ldr	r3, [r7, #28]
 800ca02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d002      	beq.n	800ca0e <xQueueSemaphoreTake+0x30>
 800ca08:	f002 f906 	bl	800ec18 <ulSetInterruptMask>
 800ca0c:	e7fe      	b.n	800ca0c <xQueueSemaphoreTake+0x2e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca0e:	f001 fa83 	bl	800df18 <xTaskGetSchedulerState>
 800ca12:	4603      	mov	r3, r0
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d102      	bne.n	800ca1e <xQueueSemaphoreTake+0x40>
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d101      	bne.n	800ca22 <xQueueSemaphoreTake+0x44>
 800ca1e:	2301      	movs	r3, #1
 800ca20:	e000      	b.n	800ca24 <xQueueSemaphoreTake+0x46>
 800ca22:	2300      	movs	r3, #0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d102      	bne.n	800ca2e <xQueueSemaphoreTake+0x50>
 800ca28:	f002 f8f6 	bl	800ec18 <ulSetInterruptMask>
 800ca2c:	e7fe      	b.n	800ca2c <xQueueSemaphoreTake+0x4e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800ca2e:	f001 ffb3 	bl	800e998 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ca32:	69fb      	ldr	r3, [r7, #28]
 800ca34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca36:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ca38:	69bb      	ldr	r3, [r7, #24]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d01e      	beq.n	800ca7c <xQueueSemaphoreTake+0x9e>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ca3e:	69bb      	ldr	r3, [r7, #24]
 800ca40:	1e5a      	subs	r2, r3, #1
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca46:	69fb      	ldr	r3, [r7, #28]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d104      	bne.n	800ca58 <xQueueSemaphoreTake+0x7a>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ca4e:	f001 fc31 	bl	800e2b4 <pvTaskIncrementMutexHeldCount>
 800ca52:	4602      	mov	r2, r0
 800ca54:	69fb      	ldr	r3, [r7, #28]
 800ca56:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	691b      	ldr	r3, [r3, #16]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d009      	beq.n	800ca74 <xQueueSemaphoreTake+0x96>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	3310      	adds	r3, #16
 800ca64:	4618      	mov	r0, r3
 800ca66:	f001 f83f 	bl	800dae8 <xTaskRemoveFromEventList>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d001      	beq.n	800ca74 <xQueueSemaphoreTake+0x96>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800ca70:	f001 ff80 	bl	800e974 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800ca74:	f001 ffa2 	bl	800e9bc <vPortExitCritical>
                return pdPASS;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	e083      	b.n	800cb84 <xQueueSemaphoreTake+0x1a6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d103      	bne.n	800ca8a <xQueueSemaphoreTake+0xac>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800ca82:	f001 ff9b 	bl	800e9bc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800ca86:	2300      	movs	r3, #0
 800ca88:	e07c      	b.n	800cb84 <xQueueSemaphoreTake+0x1a6>
                }
                else if( xEntryTimeSet == pdFALSE )
 800ca8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d106      	bne.n	800ca9e <xQueueSemaphoreTake+0xc0>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800ca90:	f107 030c 	add.w	r3, r7, #12
 800ca94:	4618      	mov	r0, r3
 800ca96:	f001 f8f5 	bl	800dc84 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800ca9e:	f001 ff8d 	bl	800e9bc <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800caa2:	f000 fd15 	bl	800d4d0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800caa6:	f001 ff77 	bl	800e998 <vPortEnterCritical>
 800caaa:	69fb      	ldr	r3, [r7, #28]
 800caac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cab0:	b25b      	sxtb	r3, r3
 800cab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cab6:	d103      	bne.n	800cac0 <xQueueSemaphoreTake+0xe2>
 800cab8:	69fb      	ldr	r3, [r7, #28]
 800caba:	2200      	movs	r2, #0
 800cabc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cac6:	b25b      	sxtb	r3, r3
 800cac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cacc:	d103      	bne.n	800cad6 <xQueueSemaphoreTake+0xf8>
 800cace:	69fb      	ldr	r3, [r7, #28]
 800cad0:	2200      	movs	r2, #0
 800cad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cad6:	f001 ff71 	bl	800e9bc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cada:	463a      	mov	r2, r7
 800cadc:	f107 030c 	add.w	r3, r7, #12
 800cae0:	4611      	mov	r1, r2
 800cae2:	4618      	mov	r0, r3
 800cae4:	f001 f8e4 	bl	800dcb0 <xTaskCheckForTimeOut>
 800cae8:	4603      	mov	r3, r0
 800caea:	2b00      	cmp	r3, #0
 800caec:	d12c      	bne.n	800cb48 <xQueueSemaphoreTake+0x16a>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800caee:	69f8      	ldr	r0, [r7, #28]
 800caf0:	f000 f9f8 	bl	800cee4 <prvIsQueueEmpty>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d020      	beq.n	800cb3c <xQueueSemaphoreTake+0x15e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cafa:	69fb      	ldr	r3, [r7, #28]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d109      	bne.n	800cb16 <xQueueSemaphoreTake+0x138>
                    {
                        taskENTER_CRITICAL();
 800cb02:	f001 ff49 	bl	800e998 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	689b      	ldr	r3, [r3, #8]
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f001 fa22 	bl	800df54 <xTaskPriorityInherit>
 800cb10:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 800cb12:	f001 ff53 	bl	800e9bc <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cb16:	69fb      	ldr	r3, [r7, #28]
 800cb18:	3324      	adds	r3, #36	; 0x24
 800cb1a:	683a      	ldr	r2, [r7, #0]
 800cb1c:	4611      	mov	r1, r2
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f000 ff88 	bl	800da34 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800cb24:	69f8      	ldr	r0, [r7, #28]
 800cb26:	f000 f98b 	bl	800ce40 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800cb2a:	f000 fcdf 	bl	800d4ec <xTaskResumeAll>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	f47f af7c 	bne.w	800ca2e <xQueueSemaphoreTake+0x50>
                {
                    portYIELD_WITHIN_API();
 800cb36:	f001 ff1d 	bl	800e974 <vPortYield>
 800cb3a:	e778      	b.n	800ca2e <xQueueSemaphoreTake+0x50>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800cb3c:	69f8      	ldr	r0, [r7, #28]
 800cb3e:	f000 f97f 	bl	800ce40 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800cb42:	f000 fcd3 	bl	800d4ec <xTaskResumeAll>
 800cb46:	e772      	b.n	800ca2e <xQueueSemaphoreTake+0x50>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800cb48:	69f8      	ldr	r0, [r7, #28]
 800cb4a:	f000 f979 	bl	800ce40 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800cb4e:	f000 fccd 	bl	800d4ec <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb52:	69f8      	ldr	r0, [r7, #28]
 800cb54:	f000 f9c6 	bl	800cee4 <prvIsQueueEmpty>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	f43f af67 	beq.w	800ca2e <xQueueSemaphoreTake+0x50>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800cb60:	6a3b      	ldr	r3, [r7, #32]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00d      	beq.n	800cb82 <xQueueSemaphoreTake+0x1a4>
                    {
                        taskENTER_CRITICAL();
 800cb66:	f001 ff17 	bl	800e998 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cb6a:	69f8      	ldr	r0, [r7, #28]
 800cb6c:	f000 f8c0 	bl	800ccf0 <prvGetDisinheritPriorityAfterTimeout>
 800cb70:	6178      	str	r0, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cb72:	69fb      	ldr	r3, [r7, #28]
 800cb74:	689b      	ldr	r3, [r3, #8]
 800cb76:	6979      	ldr	r1, [r7, #20]
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f001 fb01 	bl	800e180 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800cb7e:	f001 ff1d 	bl	800e9bc <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800cb82:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3728      	adds	r7, #40	; 0x28
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b08a      	sub	sp, #40	; 0x28
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	60b9      	str	r1, [r7, #8]
 800cb96:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800cb9c:	6a3b      	ldr	r3, [r7, #32]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d102      	bne.n	800cba8 <xQueueReceiveFromISR+0x1c>
 800cba2:	f002 f839 	bl	800ec18 <ulSetInterruptMask>
 800cba6:	e7fe      	b.n	800cba6 <xQueueReceiveFromISR+0x1a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d103      	bne.n	800cbb6 <xQueueReceiveFromISR+0x2a>
 800cbae:	6a3b      	ldr	r3, [r7, #32]
 800cbb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d101      	bne.n	800cbba <xQueueReceiveFromISR+0x2e>
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	e000      	b.n	800cbbc <xQueueReceiveFromISR+0x30>
 800cbba:	2300      	movs	r3, #0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d102      	bne.n	800cbc6 <xQueueReceiveFromISR+0x3a>
 800cbc0:	f002 f82a 	bl	800ec18 <ulSetInterruptMask>
 800cbc4:	e7fe      	b.n	800cbc4 <xQueueReceiveFromISR+0x38>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cbc6:	f002 f827 	bl	800ec18 <ulSetInterruptMask>
 800cbca:	61f8      	str	r0, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbcc:	6a3b      	ldr	r3, [r7, #32]
 800cbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd0:	61bb      	str	r3, [r7, #24]

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cbd2:	69bb      	ldr	r3, [r7, #24]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d03c      	beq.n	800cc52 <xQueueReceiveFromISR+0xc6>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800cbd8:	6a3b      	ldr	r3, [r7, #32]
 800cbda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cbde:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cbe0:	68b9      	ldr	r1, [r7, #8]
 800cbe2:	6a38      	ldr	r0, [r7, #32]
 800cbe4:	f000 f906 	bl	800cdf4 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	1e5a      	subs	r2, r3, #1
 800cbec:	6a3b      	ldr	r3, [r7, #32]
 800cbee:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800cbf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbf8:	d112      	bne.n	800cc20 <xQueueReceiveFromISR+0x94>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbfa:	6a3b      	ldr	r3, [r7, #32]
 800cbfc:	691b      	ldr	r3, [r3, #16]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d024      	beq.n	800cc4c <xQueueReceiveFromISR+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc02:	6a3b      	ldr	r3, [r7, #32]
 800cc04:	3310      	adds	r3, #16
 800cc06:	4618      	mov	r0, r3
 800cc08:	f000 ff6e 	bl	800dae8 <xTaskRemoveFromEventList>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d01c      	beq.n	800cc4c <xQueueReceiveFromISR+0xc0>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d019      	beq.n	800cc4c <xQueueReceiveFromISR+0xc0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	601a      	str	r2, [r3, #0]
 800cc1e:	e015      	b.n	800cc4c <xQueueReceiveFromISR+0xc0>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 800cc20:	f000 fd72 	bl	800d708 <uxTaskGetNumberOfTasks>
 800cc24:	6138      	str	r0, [r7, #16]
 800cc26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc2a:	693a      	ldr	r2, [r7, #16]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d90d      	bls.n	800cc4c <xQueueReceiveFromISR+0xc0>
 800cc30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc34:	2b7f      	cmp	r3, #127	; 0x7f
 800cc36:	d102      	bne.n	800cc3e <xQueueReceiveFromISR+0xb2>
 800cc38:	f001 ffee 	bl	800ec18 <ulSetInterruptMask>
 800cc3c:	e7fe      	b.n	800cc3c <xQueueReceiveFromISR+0xb0>
 800cc3e:	7dfb      	ldrb	r3, [r7, #23]
 800cc40:	3301      	adds	r3, #1
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	b25a      	sxtb	r2, r3
 800cc46:	6a3b      	ldr	r3, [r7, #32]
 800cc48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	627b      	str	r3, [r7, #36]	; 0x24
 800cc50:	e001      	b.n	800cc56 <xQueueReceiveFromISR+0xca>
        }
        else
        {
            xReturn = pdFAIL;
 800cc52:	2300      	movs	r3, #0
 800cc54:	627b      	str	r3, [r7, #36]	; 0x24
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800cc56:	69f8      	ldr	r0, [r7, #28]
 800cc58:	f001 ffeb 	bl	800ec32 <vClearInterruptMask>

    return xReturn;
 800cc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3728      	adds	r7, #40	; 0x28
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}

0800cc66 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800cc66:	b580      	push	{r7, lr}
 800cc68:	b084      	sub	sp, #16
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d102      	bne.n	800cc7a <uxQueueMessagesWaiting+0x14>
 800cc74:	f001 ffd0 	bl	800ec18 <ulSetInterruptMask>
 800cc78:	e7fe      	b.n	800cc78 <uxQueueMessagesWaiting+0x12>

    taskENTER_CRITICAL();
 800cc7a:	f001 fe8d 	bl	800e998 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc82:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 800cc84:	f001 fe9a 	bl	800e9bc <vPortExitCritical>

    return uxReturn;
 800cc88:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3710      	adds	r7, #16
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}

0800cc92 <uxQueueMessagesWaitingFromISR>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800cc92:	b580      	push	{r7, lr}
 800cc94:	b084      	sub	sp, #16
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d102      	bne.n	800ccaa <uxQueueMessagesWaitingFromISR+0x18>
 800cca4:	f001 ffb8 	bl	800ec18 <ulSetInterruptMask>
 800cca8:	e7fe      	b.n	800cca8 <uxQueueMessagesWaitingFromISR+0x16>
    uxReturn = pxQueue->uxMessagesWaiting;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccae:	60bb      	str	r3, [r7, #8]

    return uxReturn;
 800ccb0:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b084      	sub	sp, #16
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d102      	bne.n	800ccd2 <vQueueDelete+0x18>
 800cccc:	f001 ffa4 	bl	800ec18 <ulSetInterruptMask>
 800ccd0:	e7fe      	b.n	800ccd0 <vQueueDelete+0x16>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 800ccd2:	68f8      	ldr	r0, [r7, #12]
 800ccd4:	f000 f978 	bl	800cfc8 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d102      	bne.n	800cce8 <vQueueDelete+0x2e>
        {
            vPortFree( pxQueue );
 800cce2:	68f8      	ldr	r0, [r7, #12]
 800cce4:	f002 f8a2 	bl	800ee2c <vPortFree>
        /* The queue must have been statically allocated, so is not going to be
         * deleted.  Avoid compiler warnings about the unused parameter. */
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cce8:	bf00      	nop
 800ccea:	3710      	adds	r7, #16
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800ccf0:	b480      	push	{r7}
 800ccf2:	b085      	sub	sp, #20
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d006      	beq.n	800cd0e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800cd0a:	60fb      	str	r3, [r7, #12]
 800cd0c:	e001      	b.n	800cd12 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800cd12:	68fb      	ldr	r3, [r7, #12]
    }
 800cd14:	4618      	mov	r0, r3
 800cd16:	3714      	adds	r7, #20
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b086      	sub	sp, #24
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	60b9      	str	r1, [r7, #8]
 800cd2a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd34:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d10d      	bne.n	800cd5a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d14d      	bne.n	800cde2 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	689b      	ldr	r3, [r3, #8]
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f001 f992 	bl	800e074 <xTaskPriorityDisinherit>
 800cd50:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2200      	movs	r2, #0
 800cd56:	609a      	str	r2, [r3, #8]
 800cd58:	e043      	b.n	800cde2 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d119      	bne.n	800cd94 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	6858      	ldr	r0, [r3, #4]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd68:	461a      	mov	r2, r3
 800cd6a:	68b9      	ldr	r1, [r7, #8]
 800cd6c:	f00f fe67 	bl	801ca3e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	685a      	ldr	r2, [r3, #4]
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd78:	441a      	add	r2, r3
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	685a      	ldr	r2, [r3, #4]
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	689b      	ldr	r3, [r3, #8]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d32b      	bcc.n	800cde2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	605a      	str	r2, [r3, #4]
 800cd92:	e026      	b.n	800cde2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	68d8      	ldr	r0, [r3, #12]
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd9c:	461a      	mov	r2, r3
 800cd9e:	68b9      	ldr	r1, [r7, #8]
 800cda0:	f00f fe4d 	bl	801ca3e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	68da      	ldr	r2, [r3, #12]
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdac:	425b      	negs	r3, r3
 800cdae:	441a      	add	r2, r3
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	68da      	ldr	r2, [r3, #12]
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d207      	bcs.n	800cdd0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	689a      	ldr	r2, [r3, #8]
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdc8:	425b      	negs	r3, r3
 800cdca:	441a      	add	r2, r3
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2b02      	cmp	r3, #2
 800cdd4:	d105      	bne.n	800cde2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d002      	beq.n	800cde2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	3b01      	subs	r3, #1
 800cde0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	1c5a      	adds	r2, r3, #1
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800cdea:	697b      	ldr	r3, [r7, #20]
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3718      	adds	r7, #24
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d018      	beq.n	800ce38 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	68da      	ldr	r2, [r3, #12]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce0e:	441a      	add	r2, r3
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	68da      	ldr	r2, [r3, #12]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d303      	bcc.n	800ce28 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	68d9      	ldr	r1, [r3, #12]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce30:	461a      	mov	r2, r3
 800ce32:	6838      	ldr	r0, [r7, #0]
 800ce34:	f00f fe03 	bl	801ca3e <memcpy>
    }
}
 800ce38:	bf00      	nop
 800ce3a:	3708      	adds	r7, #8
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b084      	sub	sp, #16
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800ce48:	f001 fda6 	bl	800e998 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce52:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce54:	e011      	b.n	800ce7a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d012      	beq.n	800ce84 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	3324      	adds	r3, #36	; 0x24
 800ce62:	4618      	mov	r0, r3
 800ce64:	f000 fe40 	bl	800dae8 <xTaskRemoveFromEventList>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d001      	beq.n	800ce72 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800ce6e:	f000 ff75 	bl	800dd5c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800ce72:	7bfb      	ldrb	r3, [r7, #15]
 800ce74:	3b01      	subs	r3, #1
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	dce9      	bgt.n	800ce56 <prvUnlockQueue+0x16>
 800ce82:	e000      	b.n	800ce86 <prvUnlockQueue+0x46>
                    break;
 800ce84:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	22ff      	movs	r2, #255	; 0xff
 800ce8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800ce8e:	f001 fd95 	bl	800e9bc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800ce92:	f001 fd81 	bl	800e998 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce9c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce9e:	e011      	b.n	800cec4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	691b      	ldr	r3, [r3, #16]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d012      	beq.n	800cece <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	3310      	adds	r3, #16
 800ceac:	4618      	mov	r0, r3
 800ceae:	f000 fe1b 	bl	800dae8 <xTaskRemoveFromEventList>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d001      	beq.n	800cebc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800ceb8:	f000 ff50 	bl	800dd5c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800cebc:	7bbb      	ldrb	r3, [r7, #14]
 800cebe:	3b01      	subs	r3, #1
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800cec4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	dce9      	bgt.n	800cea0 <prvUnlockQueue+0x60>
 800cecc:	e000      	b.n	800ced0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800cece:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	22ff      	movs	r2, #255	; 0xff
 800ced4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800ced8:	f001 fd70 	bl	800e9bc <vPortExitCritical>
}
 800cedc:	bf00      	nop
 800cede:	3710      	adds	r7, #16
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800ceec:	f001 fd54 	bl	800e998 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d102      	bne.n	800cefe <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800cef8:	2301      	movs	r3, #1
 800cefa:	60fb      	str	r3, [r7, #12]
 800cefc:	e001      	b.n	800cf02 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800cefe:	2300      	movs	r3, #0
 800cf00:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800cf02:	f001 fd5b 	bl	800e9bc <vPortExitCritical>

    return xReturn;
 800cf06:	68fb      	ldr	r3, [r7, #12]
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3710      	adds	r7, #16
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b084      	sub	sp, #16
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800cf18:	f001 fd3e 	bl	800e998 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d102      	bne.n	800cf2e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	60fb      	str	r3, [r7, #12]
 800cf2c:	e001      	b.n	800cf32 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800cf32:	f001 fd43 	bl	800e9bc <vPortExitCritical>

    return xReturn;
 800cf36:	68fb      	ldr	r3, [r7, #12]
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3710      	adds	r7, #16
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b084      	sub	sp, #16
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d102      	bne.n	800cf5a <vQueueAddToRegistry+0x1a>
 800cf54:	f001 fe60 	bl	800ec18 <ulSetInterruptMask>
 800cf58:	e7fe      	b.n	800cf58 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d024      	beq.n	800cfaa <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf60:	2300      	movs	r3, #0
 800cf62:	60fb      	str	r3, [r7, #12]
 800cf64:	e01e      	b.n	800cfa4 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800cf66:	4a17      	ldr	r2, [pc, #92]	; (800cfc4 <vQueueAddToRegistry+0x84>)
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	00db      	lsls	r3, r3, #3
 800cf6c:	4413      	add	r3, r2
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d105      	bne.n	800cf82 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	00db      	lsls	r3, r3, #3
 800cf7a:	4a12      	ldr	r2, [pc, #72]	; (800cfc4 <vQueueAddToRegistry+0x84>)
 800cf7c:	4413      	add	r3, r2
 800cf7e:	60bb      	str	r3, [r7, #8]
                    break;
 800cf80:	e013      	b.n	800cfaa <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d10a      	bne.n	800cf9e <vQueueAddToRegistry+0x5e>
 800cf88:	4a0e      	ldr	r2, [pc, #56]	; (800cfc4 <vQueueAddToRegistry+0x84>)
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d104      	bne.n	800cf9e <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	00db      	lsls	r3, r3, #3
 800cf98:	4a0a      	ldr	r2, [pc, #40]	; (800cfc4 <vQueueAddToRegistry+0x84>)
 800cf9a:	4413      	add	r3, r2
 800cf9c:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	60fb      	str	r3, [r7, #12]
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2b07      	cmp	r3, #7
 800cfa8:	d9dd      	bls.n	800cf66 <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d005      	beq.n	800cfbc <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	683a      	ldr	r2, [r7, #0]
 800cfb4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800cfbc:	bf00      	nop
 800cfbe:	3710      	adds	r7, #16
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	200055bc 	.word	0x200055bc

0800cfc8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b084      	sub	sp, #16
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d102      	bne.n	800cfdc <vQueueUnregisterQueue+0x14>
 800cfd6:	f001 fe1f 	bl	800ec18 <ulSetInterruptMask>
 800cfda:	e7fe      	b.n	800cfda <vQueueUnregisterQueue+0x12>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cfdc:	2300      	movs	r3, #0
 800cfde:	60fb      	str	r3, [r7, #12]
 800cfe0:	e016      	b.n	800d010 <vQueueUnregisterQueue+0x48>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cfe2:	4a0f      	ldr	r2, [pc, #60]	; (800d020 <vQueueUnregisterQueue+0x58>)
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	00db      	lsls	r3, r3, #3
 800cfe8:	4413      	add	r3, r2
 800cfea:	685b      	ldr	r3, [r3, #4]
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d10b      	bne.n	800d00a <vQueueUnregisterQueue+0x42>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 800cff2:	4a0b      	ldr	r2, [pc, #44]	; (800d020 <vQueueUnregisterQueue+0x58>)
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	2100      	movs	r1, #0
 800cff8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cffc:	4a08      	ldr	r2, [pc, #32]	; (800d020 <vQueueUnregisterQueue+0x58>)
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	00db      	lsls	r3, r3, #3
 800d002:	4413      	add	r3, r2
 800d004:	2200      	movs	r2, #0
 800d006:	605a      	str	r2, [r3, #4]
                break;
 800d008:	e006      	b.n	800d018 <vQueueUnregisterQueue+0x50>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	3301      	adds	r3, #1
 800d00e:	60fb      	str	r3, [r7, #12]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2b07      	cmp	r3, #7
 800d014:	d9e5      	bls.n	800cfe2 <vQueueUnregisterQueue+0x1a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d016:	bf00      	nop
 800d018:	bf00      	nop
 800d01a:	3710      	adds	r7, #16
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	200055bc 	.word	0x200055bc

0800d024 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800d024:	b580      	push	{r7, lr}
 800d026:	b086      	sub	sp, #24
 800d028:	af00      	add	r7, sp, #0
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	60b9      	str	r1, [r7, #8]
 800d02e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800d034:	f001 fcb0 	bl	800e998 <vPortEnterCritical>
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d03e:	b25b      	sxtb	r3, r3
 800d040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d044:	d103      	bne.n	800d04e <vQueueWaitForMessageRestricted+0x2a>
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	2200      	movs	r2, #0
 800d04a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d054:	b25b      	sxtb	r3, r3
 800d056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d05a:	d103      	bne.n	800d064 <vQueueWaitForMessageRestricted+0x40>
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	2200      	movs	r2, #0
 800d060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d064:	f001 fcaa 	bl	800e9bc <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d106      	bne.n	800d07e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	3324      	adds	r3, #36	; 0x24
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	68b9      	ldr	r1, [r7, #8]
 800d078:	4618      	mov	r0, r3
 800d07a:	f000 fcf7 	bl	800da6c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800d07e:	6978      	ldr	r0, [r7, #20]
 800d080:	f7ff fede 	bl	800ce40 <prvUnlockQueue>
    }
 800d084:	bf00      	nop
 800d086:	3718      	adds	r7, #24
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b08c      	sub	sp, #48	; 0x30
 800d090:	af04      	add	r7, sp, #16
 800d092:	60f8      	str	r0, [r7, #12]
 800d094:	60b9      	str	r1, [r7, #8]
 800d096:	607a      	str	r2, [r7, #4]
 800d098:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800d09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d102      	bne.n	800d0a6 <xTaskCreateStatic+0x1a>
 800d0a0:	f001 fdba 	bl	800ec18 <ulSetInterruptMask>
 800d0a4:	e7fe      	b.n	800d0a4 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800d0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d102      	bne.n	800d0b2 <xTaskCreateStatic+0x26>
 800d0ac:	f001 fdb4 	bl	800ec18 <ulSetInterruptMask>
 800d0b0:	e7fe      	b.n	800d0b0 <xTaskCreateStatic+0x24>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800d0b2:	235c      	movs	r3, #92	; 0x5c
 800d0b4:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	2b5c      	cmp	r3, #92	; 0x5c
 800d0ba:	d002      	beq.n	800d0c2 <xTaskCreateStatic+0x36>
 800d0bc:	f001 fdac 	bl	800ec18 <ulSetInterruptMask>
 800d0c0:	e7fe      	b.n	800d0c0 <xTaskCreateStatic+0x34>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d0c2:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d023      	beq.n	800d112 <xTaskCreateStatic+0x86>
 800d0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d020      	beq.n	800d112 <xTaskCreateStatic+0x86>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d2:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d0d4:	225c      	movs	r2, #92	; 0x5c
 800d0d6:	2100      	movs	r1, #0
 800d0d8:	69f8      	ldr	r0, [r7, #28]
 800d0da:	f00f fc34 	bl	801c946 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d0de:	69fb      	ldr	r3, [r7, #28]
 800d0e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0e2:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d0e4:	69fb      	ldr	r3, [r7, #28]
 800d0e6:	2202      	movs	r2, #2
 800d0e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	9303      	str	r3, [sp, #12]
 800d0f0:	69fb      	ldr	r3, [r7, #28]
 800d0f2:	9302      	str	r3, [sp, #8]
 800d0f4:	f107 0318 	add.w	r3, r7, #24
 800d0f8:	9301      	str	r3, [sp, #4]
 800d0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fc:	9300      	str	r3, [sp, #0]
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	68b9      	ldr	r1, [r7, #8]
 800d104:	68f8      	ldr	r0, [r7, #12]
 800d106:	f000 f855 	bl	800d1b4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800d10a:	69f8      	ldr	r0, [r7, #28]
 800d10c:	f000 f8d2 	bl	800d2b4 <prvAddNewTaskToReadyList>
 800d110:	e001      	b.n	800d116 <xTaskCreateStatic+0x8a>
        }
        else
        {
            xReturn = NULL;
 800d112:	2300      	movs	r3, #0
 800d114:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800d116:	69bb      	ldr	r3, [r7, #24]
    }
 800d118:	4618      	mov	r0, r3
 800d11a:	3720      	adds	r7, #32
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800d120:	b580      	push	{r7, lr}
 800d122:	b08c      	sub	sp, #48	; 0x30
 800d124:	af04      	add	r7, sp, #16
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	603b      	str	r3, [r7, #0]
 800d12c:	4613      	mov	r3, r2
 800d12e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d130:	88fb      	ldrh	r3, [r7, #6]
 800d132:	009b      	lsls	r3, r3, #2
 800d134:	4618      	mov	r0, r3
 800d136:	f001 fdcf 	bl	800ecd8 <pvPortMalloc>
 800d13a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d013      	beq.n	800d16a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d142:	205c      	movs	r0, #92	; 0x5c
 800d144:	f001 fdc8 	bl	800ecd8 <pvPortMalloc>
 800d148:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800d14a:	69fb      	ldr	r3, [r7, #28]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d008      	beq.n	800d162 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d150:	225c      	movs	r2, #92	; 0x5c
 800d152:	2100      	movs	r1, #0
 800d154:	69f8      	ldr	r0, [r7, #28]
 800d156:	f00f fbf6 	bl	801c946 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	697a      	ldr	r2, [r7, #20]
 800d15e:	631a      	str	r2, [r3, #48]	; 0x30
 800d160:	e005      	b.n	800d16e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800d162:	6978      	ldr	r0, [r7, #20]
 800d164:	f001 fe62 	bl	800ee2c <vPortFree>
 800d168:	e001      	b.n	800d16e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800d16a:	2300      	movs	r3, #0
 800d16c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d017      	beq.n	800d1a4 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	2200      	movs	r2, #0
 800d178:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d17c:	88fa      	ldrh	r2, [r7, #6]
 800d17e:	2300      	movs	r3, #0
 800d180:	9303      	str	r3, [sp, #12]
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	9302      	str	r3, [sp, #8]
 800d186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d188:	9301      	str	r3, [sp, #4]
 800d18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18c:	9300      	str	r3, [sp, #0]
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	68b9      	ldr	r1, [r7, #8]
 800d192:	68f8      	ldr	r0, [r7, #12]
 800d194:	f000 f80e 	bl	800d1b4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800d198:	69f8      	ldr	r0, [r7, #28]
 800d19a:	f000 f88b 	bl	800d2b4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800d19e:	2301      	movs	r3, #1
 800d1a0:	61bb      	str	r3, [r7, #24]
 800d1a2:	e002      	b.n	800d1aa <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d1a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d1a8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800d1aa:	69bb      	ldr	r3, [r7, #24]
    }
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3720      	adds	r7, #32
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b086      	sub	sp, #24
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	607a      	str	r2, [r7, #4]
 800d1c0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	21a5      	movs	r1, #165	; 0xa5
 800d1ce:	f00f fbba 	bl	801c946 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d1dc:	3b01      	subs	r3, #1
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	4413      	add	r3, r2
 800d1e2:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	f023 0307 	bic.w	r3, r3, #7
 800d1ea:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	f003 0307 	and.w	r3, r3, #7
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d002      	beq.n	800d1fc <prvInitialiseNewTask+0x48>
 800d1f6:	f001 fd0f 	bl	800ec18 <ulSetInterruptMask>
 800d1fa:	e7fe      	b.n	800d1fa <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d01e      	beq.n	800d240 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d202:	2300      	movs	r3, #0
 800d204:	617b      	str	r3, [r7, #20]
 800d206:	e012      	b.n	800d22e <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d208:	68ba      	ldr	r2, [r7, #8]
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	4413      	add	r3, r2
 800d20e:	7819      	ldrb	r1, [r3, #0]
 800d210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	4413      	add	r3, r2
 800d216:	3334      	adds	r3, #52	; 0x34
 800d218:	460a      	mov	r2, r1
 800d21a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800d21c:	68ba      	ldr	r2, [r7, #8]
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	4413      	add	r3, r2
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d006      	beq.n	800d236 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	3301      	adds	r3, #1
 800d22c:	617b      	str	r3, [r7, #20]
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	2b0f      	cmp	r3, #15
 800d232:	d9e9      	bls.n	800d208 <prvInitialiseNewTask+0x54>
 800d234:	e000      	b.n	800d238 <prvInitialiseNewTask+0x84>
            {
                break;
 800d236:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23a:	2200      	movs	r2, #0
 800d23c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800d240:	6a3b      	ldr	r3, [r7, #32]
 800d242:	2b37      	cmp	r3, #55	; 0x37
 800d244:	d902      	bls.n	800d24c <prvInitialiseNewTask+0x98>
 800d246:	f001 fce7 	bl	800ec18 <ulSetInterruptMask>
 800d24a:	e7fe      	b.n	800d24a <prvInitialiseNewTask+0x96>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d24c:	6a3b      	ldr	r3, [r7, #32]
 800d24e:	2b37      	cmp	r3, #55	; 0x37
 800d250:	d901      	bls.n	800d256 <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d252:	2337      	movs	r3, #55	; 0x37
 800d254:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800d256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d258:	6a3a      	ldr	r2, [r7, #32]
 800d25a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800d25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25e:	6a3a      	ldr	r2, [r7, #32]
 800d260:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d264:	3304      	adds	r3, #4
 800d266:	4618      	mov	r0, r3
 800d268:	f7fe feb4 	bl	800bfd4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26e:	3318      	adds	r3, #24
 800d270:	4618      	mov	r0, r3
 800d272:	f7fe feaf 	bl	800bfd4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d27a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d27c:	6a3b      	ldr	r3, [r7, #32]
 800d27e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d284:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d28a:	625a      	str	r2, [r3, #36]	; 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800d28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	68fa      	ldr	r2, [r7, #12]
 800d294:	6938      	ldr	r0, [r7, #16]
 800d296:	f001 fbdb 	bl	800ea50 <pxPortInitialiseStack>
 800d29a:	4602      	mov	r2, r0
 800d29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d002      	beq.n	800d2ac <prvInitialiseNewTask+0xf8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2aa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d2ac:	bf00      	nop
 800d2ae:	3718      	adds	r7, #24
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b084      	sub	sp, #16
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800d2bc:	f001 fb6c 	bl	800e998 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800d2c0:	4b3e      	ldr	r3, [pc, #248]	; (800d3bc <prvAddNewTaskToReadyList+0x108>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	4a3d      	ldr	r2, [pc, #244]	; (800d3bc <prvAddNewTaskToReadyList+0x108>)
 800d2c8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800d2ca:	4b3d      	ldr	r3, [pc, #244]	; (800d3c0 <prvAddNewTaskToReadyList+0x10c>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d109      	bne.n	800d2e6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800d2d2:	4a3b      	ldr	r2, [pc, #236]	; (800d3c0 <prvAddNewTaskToReadyList+0x10c>)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d2d8:	4b38      	ldr	r3, [pc, #224]	; (800d3bc <prvAddNewTaskToReadyList+0x108>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d110      	bne.n	800d302 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800d2e0:	f000 fd58 	bl	800dd94 <prvInitialiseTaskLists>
 800d2e4:	e00d      	b.n	800d302 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800d2e6:	4b37      	ldr	r3, [pc, #220]	; (800d3c4 <prvAddNewTaskToReadyList+0x110>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d109      	bne.n	800d302 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d2ee:	4b34      	ldr	r3, [pc, #208]	; (800d3c0 <prvAddNewTaskToReadyList+0x10c>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d802      	bhi.n	800d302 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800d2fc:	4a30      	ldr	r2, [pc, #192]	; (800d3c0 <prvAddNewTaskToReadyList+0x10c>)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800d302:	4b31      	ldr	r3, [pc, #196]	; (800d3c8 <prvAddNewTaskToReadyList+0x114>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	3301      	adds	r3, #1
 800d308:	4a2f      	ldr	r2, [pc, #188]	; (800d3c8 <prvAddNewTaskToReadyList+0x114>)
 800d30a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d30c:	4b2e      	ldr	r3, [pc, #184]	; (800d3c8 <prvAddNewTaskToReadyList+0x114>)
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d318:	4b2c      	ldr	r3, [pc, #176]	; (800d3cc <prvAddNewTaskToReadyList+0x118>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d903      	bls.n	800d328 <prvAddNewTaskToReadyList+0x74>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d324:	4a29      	ldr	r2, [pc, #164]	; (800d3cc <prvAddNewTaskToReadyList+0x118>)
 800d326:	6013      	str	r3, [r2, #0]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d32c:	4928      	ldr	r1, [pc, #160]	; (800d3d0 <prvAddNewTaskToReadyList+0x11c>)
 800d32e:	4613      	mov	r3, r2
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	4413      	add	r3, r2
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	440b      	add	r3, r1
 800d338:	3304      	adds	r3, #4
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	60fb      	str	r3, [r7, #12]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	68fa      	ldr	r2, [r7, #12]
 800d342:	609a      	str	r2, [r3, #8]
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	689a      	ldr	r2, [r3, #8]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	60da      	str	r2, [r3, #12]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	689b      	ldr	r3, [r3, #8]
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	3204      	adds	r2, #4
 800d354:	605a      	str	r2, [r3, #4]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	1d1a      	adds	r2, r3, #4
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	609a      	str	r2, [r3, #8]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d362:	4613      	mov	r3, r2
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	4413      	add	r3, r2
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	4a19      	ldr	r2, [pc, #100]	; (800d3d0 <prvAddNewTaskToReadyList+0x11c>)
 800d36c:	441a      	add	r2, r3
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	615a      	str	r2, [r3, #20]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d376:	4916      	ldr	r1, [pc, #88]	; (800d3d0 <prvAddNewTaskToReadyList+0x11c>)
 800d378:	4613      	mov	r3, r2
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	4413      	add	r3, r2
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	440b      	add	r3, r1
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	1c59      	adds	r1, r3, #1
 800d386:	4812      	ldr	r0, [pc, #72]	; (800d3d0 <prvAddNewTaskToReadyList+0x11c>)
 800d388:	4613      	mov	r3, r2
 800d38a:	009b      	lsls	r3, r3, #2
 800d38c:	4413      	add	r3, r2
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	4403      	add	r3, r0
 800d392:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800d394:	f001 fb12 	bl	800e9bc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800d398:	4b0a      	ldr	r3, [pc, #40]	; (800d3c4 <prvAddNewTaskToReadyList+0x110>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d008      	beq.n	800d3b2 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d3a0:	4b07      	ldr	r3, [pc, #28]	; (800d3c0 <prvAddNewTaskToReadyList+0x10c>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d201      	bcs.n	800d3b2 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800d3ae:	f001 fae1 	bl	800e974 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d3b2:	bf00      	nop
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	20005ad0 	.word	0x20005ad0
 800d3c0:	200055fc 	.word	0x200055fc
 800d3c4:	20005adc 	.word	0x20005adc
 800d3c8:	20005aec 	.word	0x20005aec
 800d3cc:	20005ad8 	.word	0x20005ad8
 800d3d0:	20005600 	.word	0x20005600

0800d3d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d00f      	beq.n	800d406 <vTaskDelay+0x32>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800d3e6:	4b0c      	ldr	r3, [pc, #48]	; (800d418 <vTaskDelay+0x44>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d002      	beq.n	800d3f4 <vTaskDelay+0x20>
 800d3ee:	f001 fc13 	bl	800ec18 <ulSetInterruptMask>
 800d3f2:	e7fe      	b.n	800d3f2 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800d3f4:	f000 f86c 	bl	800d4d0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d3f8:	2100      	movs	r1, #0
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f000 ff6e 	bl	800e2dc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800d400:	f000 f874 	bl	800d4ec <xTaskResumeAll>
 800d404:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d101      	bne.n	800d410 <vTaskDelay+0x3c>
        {
            portYIELD_WITHIN_API();
 800d40c:	f001 fab2 	bl	800e974 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800d410:	bf00      	nop
 800d412:	3710      	adds	r7, #16
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}
 800d418:	20005af8 	.word	0x20005af8

0800d41c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b088      	sub	sp, #32
 800d420:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800d422:	2300      	movs	r3, #0
 800d424:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800d426:	2300      	movs	r3, #0
 800d428:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d42a:	463a      	mov	r2, r7
 800d42c:	1d39      	adds	r1, r7, #4
 800d42e:	f107 0308 	add.w	r3, r7, #8
 800d432:	4618      	mov	r0, r3
 800d434:	f7f3 f9c2 	bl	80007bc <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800d438:	6839      	ldr	r1, [r7, #0]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	68ba      	ldr	r2, [r7, #8]
 800d43e:	9202      	str	r2, [sp, #8]
 800d440:	9301      	str	r3, [sp, #4]
 800d442:	2300      	movs	r3, #0
 800d444:	9300      	str	r3, [sp, #0]
 800d446:	2300      	movs	r3, #0
 800d448:	460a      	mov	r2, r1
 800d44a:	491a      	ldr	r1, [pc, #104]	; (800d4b4 <vTaskStartScheduler+0x98>)
 800d44c:	481a      	ldr	r0, [pc, #104]	; (800d4b8 <vTaskStartScheduler+0x9c>)
 800d44e:	f7ff fe1d 	bl	800d08c <xTaskCreateStatic>
 800d452:	4603      	mov	r3, r0
 800d454:	4a19      	ldr	r2, [pc, #100]	; (800d4bc <vTaskStartScheduler+0xa0>)
 800d456:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800d458:	4b18      	ldr	r3, [pc, #96]	; (800d4bc <vTaskStartScheduler+0xa0>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d002      	beq.n	800d466 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800d460:	2301      	movs	r3, #1
 800d462:	60fb      	str	r3, [r7, #12]
 800d464:	e001      	b.n	800d46a <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800d466:	2300      	movs	r3, #0
 800d468:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d102      	bne.n	800d476 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800d470:	f000 ffa2 	bl	800e3b8 <xTimerCreateTimerTask>
 800d474:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d10e      	bne.n	800d49a <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800d47c:	f001 fbcc 	bl	800ec18 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800d480:	4b0f      	ldr	r3, [pc, #60]	; (800d4c0 <vTaskStartScheduler+0xa4>)
 800d482:	f04f 32ff 	mov.w	r2, #4294967295
 800d486:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800d488:	4b0e      	ldr	r3, [pc, #56]	; (800d4c4 <vTaskStartScheduler+0xa8>)
 800d48a:	2201      	movs	r2, #1
 800d48c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d48e:	4b0e      	ldr	r3, [pc, #56]	; (800d4c8 <vTaskStartScheduler+0xac>)
 800d490:	2200      	movs	r2, #0
 800d492:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800d494:	f001 fb66 	bl	800eb64 <xPortStartScheduler>
 800d498:	e006      	b.n	800d4a8 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4a0:	d102      	bne.n	800d4a8 <vTaskStartScheduler+0x8c>
 800d4a2:	f001 fbb9 	bl	800ec18 <ulSetInterruptMask>
 800d4a6:	e7fe      	b.n	800d4a6 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800d4a8:	4b08      	ldr	r3, [pc, #32]	; (800d4cc <vTaskStartScheduler+0xb0>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
}
 800d4ac:	bf00      	nop
 800d4ae:	3710      	adds	r7, #16
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}
 800d4b4:	0801d784 	.word	0x0801d784
 800d4b8:	0800dd75 	.word	0x0800dd75
 800d4bc:	20005af4 	.word	0x20005af4
 800d4c0:	20005af0 	.word	0x20005af0
 800d4c4:	20005adc 	.word	0x20005adc
 800d4c8:	20005ad4 	.word	0x20005ad4
 800d4cc:	20000020 	.word	0x20000020

0800d4d0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800d4d4:	4b04      	ldr	r3, [pc, #16]	; (800d4e8 <vTaskSuspendAll+0x18>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	3301      	adds	r3, #1
 800d4da:	4a03      	ldr	r2, [pc, #12]	; (800d4e8 <vTaskSuspendAll+0x18>)
 800d4dc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800d4de:	bf00      	nop
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr
 800d4e8:	20005af8 	.word	0x20005af8

0800d4ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b086      	sub	sp, #24
 800d4f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800d4fa:	4b6a      	ldr	r3, [pc, #424]	; (800d6a4 <xTaskResumeAll+0x1b8>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d102      	bne.n	800d508 <xTaskResumeAll+0x1c>
 800d502:	f001 fb89 	bl	800ec18 <ulSetInterruptMask>
 800d506:	e7fe      	b.n	800d506 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800d508:	f001 fa46 	bl	800e998 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800d50c:	4b65      	ldr	r3, [pc, #404]	; (800d6a4 <xTaskResumeAll+0x1b8>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	3b01      	subs	r3, #1
 800d512:	4a64      	ldr	r2, [pc, #400]	; (800d6a4 <xTaskResumeAll+0x1b8>)
 800d514:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d516:	4b63      	ldr	r3, [pc, #396]	; (800d6a4 <xTaskResumeAll+0x1b8>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	f040 80bb 	bne.w	800d696 <xTaskResumeAll+0x1aa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d520:	4b61      	ldr	r3, [pc, #388]	; (800d6a8 <xTaskResumeAll+0x1bc>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	f000 80b6 	beq.w	800d696 <xTaskResumeAll+0x1aa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d52a:	e08b      	b.n	800d644 <xTaskResumeAll+0x158>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d52c:	4b5f      	ldr	r3, [pc, #380]	; (800d6ac <xTaskResumeAll+0x1c0>)
 800d52e:	68db      	ldr	r3, [r3, #12]
 800d530:	68db      	ldr	r3, [r3, #12]
 800d532:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d538:	60bb      	str	r3, [r7, #8]
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	69db      	ldr	r3, [r3, #28]
 800d53e:	697a      	ldr	r2, [r7, #20]
 800d540:	6a12      	ldr	r2, [r2, #32]
 800d542:	609a      	str	r2, [r3, #8]
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	6a1b      	ldr	r3, [r3, #32]
 800d548:	697a      	ldr	r2, [r7, #20]
 800d54a:	69d2      	ldr	r2, [r2, #28]
 800d54c:	605a      	str	r2, [r3, #4]
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	685a      	ldr	r2, [r3, #4]
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	3318      	adds	r3, #24
 800d556:	429a      	cmp	r2, r3
 800d558:	d103      	bne.n	800d562 <xTaskResumeAll+0x76>
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	6a1a      	ldr	r2, [r3, #32]
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	605a      	str	r2, [r3, #4]
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	2200      	movs	r2, #0
 800d566:	629a      	str	r2, [r3, #40]	; 0x28
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	1e5a      	subs	r2, r3, #1
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	695b      	ldr	r3, [r3, #20]
 800d576:	607b      	str	r3, [r7, #4]
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	689b      	ldr	r3, [r3, #8]
 800d57c:	697a      	ldr	r2, [r7, #20]
 800d57e:	68d2      	ldr	r2, [r2, #12]
 800d580:	609a      	str	r2, [r3, #8]
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	68db      	ldr	r3, [r3, #12]
 800d586:	697a      	ldr	r2, [r7, #20]
 800d588:	6892      	ldr	r2, [r2, #8]
 800d58a:	605a      	str	r2, [r3, #4]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	685a      	ldr	r2, [r3, #4]
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	3304      	adds	r3, #4
 800d594:	429a      	cmp	r2, r3
 800d596:	d103      	bne.n	800d5a0 <xTaskResumeAll+0xb4>
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	68da      	ldr	r2, [r3, #12]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	605a      	str	r2, [r3, #4]
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	615a      	str	r2, [r3, #20]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	1e5a      	subs	r2, r3, #1
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5b4:	4b3e      	ldr	r3, [pc, #248]	; (800d6b0 <xTaskResumeAll+0x1c4>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d903      	bls.n	800d5c4 <xTaskResumeAll+0xd8>
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c0:	4a3b      	ldr	r2, [pc, #236]	; (800d6b0 <xTaskResumeAll+0x1c4>)
 800d5c2:	6013      	str	r3, [r2, #0]
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5c8:	493a      	ldr	r1, [pc, #232]	; (800d6b4 <xTaskResumeAll+0x1c8>)
 800d5ca:	4613      	mov	r3, r2
 800d5cc:	009b      	lsls	r3, r3, #2
 800d5ce:	4413      	add	r3, r2
 800d5d0:	009b      	lsls	r3, r3, #2
 800d5d2:	440b      	add	r3, r1
 800d5d4:	3304      	adds	r3, #4
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	603b      	str	r3, [r7, #0]
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	683a      	ldr	r2, [r7, #0]
 800d5de:	609a      	str	r2, [r3, #8]
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	689a      	ldr	r2, [r3, #8]
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	60da      	str	r2, [r3, #12]
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	689b      	ldr	r3, [r3, #8]
 800d5ec:	697a      	ldr	r2, [r7, #20]
 800d5ee:	3204      	adds	r2, #4
 800d5f0:	605a      	str	r2, [r3, #4]
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	1d1a      	adds	r2, r3, #4
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	609a      	str	r2, [r3, #8]
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5fe:	4613      	mov	r3, r2
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	4413      	add	r3, r2
 800d604:	009b      	lsls	r3, r3, #2
 800d606:	4a2b      	ldr	r2, [pc, #172]	; (800d6b4 <xTaskResumeAll+0x1c8>)
 800d608:	441a      	add	r2, r3
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	615a      	str	r2, [r3, #20]
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d612:	4928      	ldr	r1, [pc, #160]	; (800d6b4 <xTaskResumeAll+0x1c8>)
 800d614:	4613      	mov	r3, r2
 800d616:	009b      	lsls	r3, r3, #2
 800d618:	4413      	add	r3, r2
 800d61a:	009b      	lsls	r3, r3, #2
 800d61c:	440b      	add	r3, r1
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	1c59      	adds	r1, r3, #1
 800d622:	4824      	ldr	r0, [pc, #144]	; (800d6b4 <xTaskResumeAll+0x1c8>)
 800d624:	4613      	mov	r3, r2
 800d626:	009b      	lsls	r3, r3, #2
 800d628:	4413      	add	r3, r2
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	4403      	add	r3, r0
 800d62e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d634:	4b20      	ldr	r3, [pc, #128]	; (800d6b8 <xTaskResumeAll+0x1cc>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d302      	bcc.n	800d644 <xTaskResumeAll+0x158>
                    {
                        xYieldPending = pdTRUE;
 800d63e:	4b1f      	ldr	r3, [pc, #124]	; (800d6bc <xTaskResumeAll+0x1d0>)
 800d640:	2201      	movs	r2, #1
 800d642:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d644:	4b19      	ldr	r3, [pc, #100]	; (800d6ac <xTaskResumeAll+0x1c0>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f47f af6f 	bne.w	800d52c <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d001      	beq.n	800d658 <xTaskResumeAll+0x16c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800d654:	f000 fc34 	bl	800dec0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d658:	4b19      	ldr	r3, [pc, #100]	; (800d6c0 <xTaskResumeAll+0x1d4>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d010      	beq.n	800d686 <xTaskResumeAll+0x19a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800d664:	f000 f85c 	bl	800d720 <xTaskIncrementTick>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d002      	beq.n	800d674 <xTaskResumeAll+0x188>
                            {
                                xYieldPending = pdTRUE;
 800d66e:	4b13      	ldr	r3, [pc, #76]	; (800d6bc <xTaskResumeAll+0x1d0>)
 800d670:	2201      	movs	r2, #1
 800d672:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	3b01      	subs	r3, #1
 800d678:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1f1      	bne.n	800d664 <xTaskResumeAll+0x178>

                        xPendedTicks = 0;
 800d680:	4b0f      	ldr	r3, [pc, #60]	; (800d6c0 <xTaskResumeAll+0x1d4>)
 800d682:	2200      	movs	r2, #0
 800d684:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800d686:	4b0d      	ldr	r3, [pc, #52]	; (800d6bc <xTaskResumeAll+0x1d0>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d003      	beq.n	800d696 <xTaskResumeAll+0x1aa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800d68e:	2301      	movs	r3, #1
 800d690:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800d692:	f001 f96f 	bl	800e974 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800d696:	f001 f991 	bl	800e9bc <vPortExitCritical>

    return xAlreadyYielded;
 800d69a:	693b      	ldr	r3, [r7, #16]
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3718      	adds	r7, #24
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	20005af8 	.word	0x20005af8
 800d6a8:	20005ad0 	.word	0x20005ad0
 800d6ac:	20005a90 	.word	0x20005a90
 800d6b0:	20005ad8 	.word	0x20005ad8
 800d6b4:	20005600 	.word	0x20005600
 800d6b8:	200055fc 	.word	0x200055fc
 800d6bc:	20005ae4 	.word	0x20005ae4
 800d6c0:	20005ae0 	.word	0x20005ae0

0800d6c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b083      	sub	sp, #12
 800d6c8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800d6ca:	4b05      	ldr	r3, [pc, #20]	; (800d6e0 <xTaskGetTickCount+0x1c>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800d6d0:	687b      	ldr	r3, [r7, #4]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	370c      	adds	r7, #12
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop
 800d6e0:	20005ad4 	.word	0x20005ad4

0800d6e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b083      	sub	sp, #12
 800d6e8:	af00      	add	r7, sp, #0
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800d6ee:	4b05      	ldr	r3, [pc, #20]	; (800d704 <xTaskGetTickCountFromISR+0x20>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800d6f4:	683b      	ldr	r3, [r7, #0]
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	370c      	adds	r7, #12
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d700:	4770      	bx	lr
 800d702:	bf00      	nop
 800d704:	20005ad4 	.word	0x20005ad4

0800d708 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800d708:	b480      	push	{r7}
 800d70a:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 800d70c:	4b03      	ldr	r3, [pc, #12]	; (800d71c <uxTaskGetNumberOfTasks+0x14>)
 800d70e:	681b      	ldr	r3, [r3, #0]
}
 800d710:	4618      	mov	r0, r3
 800d712:	46bd      	mov	sp, r7
 800d714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d718:	4770      	bx	lr
 800d71a:	bf00      	nop
 800d71c:	20005ad0 	.word	0x20005ad0

0800d720 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b088      	sub	sp, #32
 800d724:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800d726:	2300      	movs	r3, #0
 800d728:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d72a:	4b7a      	ldr	r3, [pc, #488]	; (800d914 <xTaskIncrementTick+0x1f4>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	f040 80e5 	bne.w	800d8fe <xTaskIncrementTick+0x1de>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d734:	4b78      	ldr	r3, [pc, #480]	; (800d918 <xTaskIncrementTick+0x1f8>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	3301      	adds	r3, #1
 800d73a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800d73c:	4a76      	ldr	r2, [pc, #472]	; (800d918 <xTaskIncrementTick+0x1f8>)
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d742:	69bb      	ldr	r3, [r7, #24]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d118      	bne.n	800d77a <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 800d748:	4b74      	ldr	r3, [pc, #464]	; (800d91c <xTaskIncrementTick+0x1fc>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d002      	beq.n	800d758 <xTaskIncrementTick+0x38>
 800d752:	f001 fa61 	bl	800ec18 <ulSetInterruptMask>
 800d756:	e7fe      	b.n	800d756 <xTaskIncrementTick+0x36>
 800d758:	4b70      	ldr	r3, [pc, #448]	; (800d91c <xTaskIncrementTick+0x1fc>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	617b      	str	r3, [r7, #20]
 800d75e:	4b70      	ldr	r3, [pc, #448]	; (800d920 <xTaskIncrementTick+0x200>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4a6e      	ldr	r2, [pc, #440]	; (800d91c <xTaskIncrementTick+0x1fc>)
 800d764:	6013      	str	r3, [r2, #0]
 800d766:	4a6e      	ldr	r2, [pc, #440]	; (800d920 <xTaskIncrementTick+0x200>)
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	6013      	str	r3, [r2, #0]
 800d76c:	4b6d      	ldr	r3, [pc, #436]	; (800d924 <xTaskIncrementTick+0x204>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	3301      	adds	r3, #1
 800d772:	4a6c      	ldr	r2, [pc, #432]	; (800d924 <xTaskIncrementTick+0x204>)
 800d774:	6013      	str	r3, [r2, #0]
 800d776:	f000 fba3 	bl	800dec0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800d77a:	4b6b      	ldr	r3, [pc, #428]	; (800d928 <xTaskIncrementTick+0x208>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	69ba      	ldr	r2, [r7, #24]
 800d780:	429a      	cmp	r2, r3
 800d782:	f0c0 80a7 	bcc.w	800d8d4 <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d786:	4b65      	ldr	r3, [pc, #404]	; (800d91c <xTaskIncrementTick+0x1fc>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d104      	bne.n	800d79a <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d790:	4b65      	ldr	r3, [pc, #404]	; (800d928 <xTaskIncrementTick+0x208>)
 800d792:	f04f 32ff 	mov.w	r2, #4294967295
 800d796:	601a      	str	r2, [r3, #0]
                    break;
 800d798:	e09c      	b.n	800d8d4 <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d79a:	4b60      	ldr	r3, [pc, #384]	; (800d91c <xTaskIncrementTick+0x1fc>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	68db      	ldr	r3, [r3, #12]
 800d7a2:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	685b      	ldr	r3, [r3, #4]
 800d7a8:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800d7aa:	69ba      	ldr	r2, [r7, #24]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d203      	bcs.n	800d7ba <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800d7b2:	4a5d      	ldr	r2, [pc, #372]	; (800d928 <xTaskIncrementTick+0x208>)
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800d7b8:	e08c      	b.n	800d8d4 <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	695b      	ldr	r3, [r3, #20]
 800d7be:	60bb      	str	r3, [r7, #8]
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	689b      	ldr	r3, [r3, #8]
 800d7c4:	693a      	ldr	r2, [r7, #16]
 800d7c6:	68d2      	ldr	r2, [r2, #12]
 800d7c8:	609a      	str	r2, [r3, #8]
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	68db      	ldr	r3, [r3, #12]
 800d7ce:	693a      	ldr	r2, [r7, #16]
 800d7d0:	6892      	ldr	r2, [r2, #8]
 800d7d2:	605a      	str	r2, [r3, #4]
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	685a      	ldr	r2, [r3, #4]
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	3304      	adds	r3, #4
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d103      	bne.n	800d7e8 <xTaskIncrementTick+0xc8>
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	68da      	ldr	r2, [r3, #12]
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	605a      	str	r2, [r3, #4]
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	615a      	str	r2, [r3, #20]
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	1e5a      	subs	r2, r3, #1
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d01e      	beq.n	800d83e <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d804:	607b      	str	r3, [r7, #4]
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	69db      	ldr	r3, [r3, #28]
 800d80a:	693a      	ldr	r2, [r7, #16]
 800d80c:	6a12      	ldr	r2, [r2, #32]
 800d80e:	609a      	str	r2, [r3, #8]
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	6a1b      	ldr	r3, [r3, #32]
 800d814:	693a      	ldr	r2, [r7, #16]
 800d816:	69d2      	ldr	r2, [r2, #28]
 800d818:	605a      	str	r2, [r3, #4]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	685a      	ldr	r2, [r3, #4]
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	3318      	adds	r3, #24
 800d822:	429a      	cmp	r2, r3
 800d824:	d103      	bne.n	800d82e <xTaskIncrementTick+0x10e>
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	6a1a      	ldr	r2, [r3, #32]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	605a      	str	r2, [r3, #4]
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	2200      	movs	r2, #0
 800d832:	629a      	str	r2, [r3, #40]	; 0x28
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	1e5a      	subs	r2, r3, #1
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d842:	4b3a      	ldr	r3, [pc, #232]	; (800d92c <xTaskIncrementTick+0x20c>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	429a      	cmp	r2, r3
 800d848:	d903      	bls.n	800d852 <xTaskIncrementTick+0x132>
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d84e:	4a37      	ldr	r2, [pc, #220]	; (800d92c <xTaskIncrementTick+0x20c>)
 800d850:	6013      	str	r3, [r2, #0]
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d856:	4936      	ldr	r1, [pc, #216]	; (800d930 <xTaskIncrementTick+0x210>)
 800d858:	4613      	mov	r3, r2
 800d85a:	009b      	lsls	r3, r3, #2
 800d85c:	4413      	add	r3, r2
 800d85e:	009b      	lsls	r3, r3, #2
 800d860:	440b      	add	r3, r1
 800d862:	3304      	adds	r3, #4
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	603b      	str	r3, [r7, #0]
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	683a      	ldr	r2, [r7, #0]
 800d86c:	609a      	str	r2, [r3, #8]
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	689a      	ldr	r2, [r3, #8]
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	60da      	str	r2, [r3, #12]
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	689b      	ldr	r3, [r3, #8]
 800d87a:	693a      	ldr	r2, [r7, #16]
 800d87c:	3204      	adds	r2, #4
 800d87e:	605a      	str	r2, [r3, #4]
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	1d1a      	adds	r2, r3, #4
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	609a      	str	r2, [r3, #8]
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d88c:	4613      	mov	r3, r2
 800d88e:	009b      	lsls	r3, r3, #2
 800d890:	4413      	add	r3, r2
 800d892:	009b      	lsls	r3, r3, #2
 800d894:	4a26      	ldr	r2, [pc, #152]	; (800d930 <xTaskIncrementTick+0x210>)
 800d896:	441a      	add	r2, r3
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	615a      	str	r2, [r3, #20]
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8a0:	4923      	ldr	r1, [pc, #140]	; (800d930 <xTaskIncrementTick+0x210>)
 800d8a2:	4613      	mov	r3, r2
 800d8a4:	009b      	lsls	r3, r3, #2
 800d8a6:	4413      	add	r3, r2
 800d8a8:	009b      	lsls	r3, r3, #2
 800d8aa:	440b      	add	r3, r1
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	1c59      	adds	r1, r3, #1
 800d8b0:	481f      	ldr	r0, [pc, #124]	; (800d930 <xTaskIncrementTick+0x210>)
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	009b      	lsls	r3, r3, #2
 800d8b6:	4413      	add	r3, r2
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	4403      	add	r3, r0
 800d8bc:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8c2:	4b1c      	ldr	r3, [pc, #112]	; (800d934 <xTaskIncrementTick+0x214>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	f67f af5c 	bls.w	800d786 <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8d2:	e758      	b.n	800d786 <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d8d4:	4b17      	ldr	r3, [pc, #92]	; (800d934 <xTaskIncrementTick+0x214>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8da:	4915      	ldr	r1, [pc, #84]	; (800d930 <xTaskIncrementTick+0x210>)
 800d8dc:	4613      	mov	r3, r2
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	4413      	add	r3, r2
 800d8e2:	009b      	lsls	r3, r3, #2
 800d8e4:	440b      	add	r3, r1
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d901      	bls.n	800d8f0 <xTaskIncrementTick+0x1d0>
            {
                xSwitchRequired = pdTRUE;
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800d8f0:	4b11      	ldr	r3, [pc, #68]	; (800d938 <xTaskIncrementTick+0x218>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d007      	beq.n	800d908 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	61fb      	str	r3, [r7, #28]
 800d8fc:	e004      	b.n	800d908 <xTaskIncrementTick+0x1e8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800d8fe:	4b0f      	ldr	r3, [pc, #60]	; (800d93c <xTaskIncrementTick+0x21c>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	3301      	adds	r3, #1
 800d904:	4a0d      	ldr	r2, [pc, #52]	; (800d93c <xTaskIncrementTick+0x21c>)
 800d906:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800d908:	69fb      	ldr	r3, [r7, #28]
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3720      	adds	r7, #32
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	20005af8 	.word	0x20005af8
 800d918:	20005ad4 	.word	0x20005ad4
 800d91c:	20005a88 	.word	0x20005a88
 800d920:	20005a8c 	.word	0x20005a8c
 800d924:	20005ae8 	.word	0x20005ae8
 800d928:	20005af0 	.word	0x20005af0
 800d92c:	20005ad8 	.word	0x20005ad8
 800d930:	20005600 	.word	0x20005600
 800d934:	200055fc 	.word	0x200055fc
 800d938:	20005ae4 	.word	0x20005ae4
 800d93c:	20005ae0 	.word	0x20005ae0

0800d940 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b084      	sub	sp, #16
 800d944:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d946:	4b36      	ldr	r3, [pc, #216]	; (800da20 <vTaskSwitchContext+0xe0>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d003      	beq.n	800d956 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800d94e:	4b35      	ldr	r3, [pc, #212]	; (800da24 <vTaskSwitchContext+0xe4>)
 800d950:	2201      	movs	r2, #1
 800d952:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800d954:	e060      	b.n	800da18 <vTaskSwitchContext+0xd8>
        xYieldPending = pdFALSE;
 800d956:	4b33      	ldr	r3, [pc, #204]	; (800da24 <vTaskSwitchContext+0xe4>)
 800d958:	2200      	movs	r2, #0
 800d95a:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 800d95c:	4b32      	ldr	r3, [pc, #200]	; (800da28 <vTaskSwitchContext+0xe8>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d962:	60bb      	str	r3, [r7, #8]
 800d964:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800d968:	607b      	str	r3, [r7, #4]
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	687a      	ldr	r2, [r7, #4]
 800d970:	429a      	cmp	r2, r3
 800d972:	d111      	bne.n	800d998 <vTaskSwitchContext+0x58>
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	3304      	adds	r3, #4
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	687a      	ldr	r2, [r7, #4]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d10b      	bne.n	800d998 <vTaskSwitchContext+0x58>
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	3308      	adds	r3, #8
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d105      	bne.n	800d998 <vTaskSwitchContext+0x58>
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	330c      	adds	r3, #12
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	429a      	cmp	r2, r3
 800d996:	d008      	beq.n	800d9aa <vTaskSwitchContext+0x6a>
 800d998:	4b23      	ldr	r3, [pc, #140]	; (800da28 <vTaskSwitchContext+0xe8>)
 800d99a:	681a      	ldr	r2, [r3, #0]
 800d99c:	4b22      	ldr	r3, [pc, #136]	; (800da28 <vTaskSwitchContext+0xe8>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	3334      	adds	r3, #52	; 0x34
 800d9a2:	4619      	mov	r1, r3
 800d9a4:	4610      	mov	r0, r2
 800d9a6:	f7f2 fe03 	bl	80005b0 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9aa:	4b20      	ldr	r3, [pc, #128]	; (800da2c <vTaskSwitchContext+0xec>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	60fb      	str	r3, [r7, #12]
 800d9b0:	e008      	b.n	800d9c4 <vTaskSwitchContext+0x84>
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d102      	bne.n	800d9be <vTaskSwitchContext+0x7e>
 800d9b8:	f001 f92e 	bl	800ec18 <ulSetInterruptMask>
 800d9bc:	e7fe      	b.n	800d9bc <vTaskSwitchContext+0x7c>
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	3b01      	subs	r3, #1
 800d9c2:	60fb      	str	r3, [r7, #12]
 800d9c4:	491a      	ldr	r1, [pc, #104]	; (800da30 <vTaskSwitchContext+0xf0>)
 800d9c6:	68fa      	ldr	r2, [r7, #12]
 800d9c8:	4613      	mov	r3, r2
 800d9ca:	009b      	lsls	r3, r3, #2
 800d9cc:	4413      	add	r3, r2
 800d9ce:	009b      	lsls	r3, r3, #2
 800d9d0:	440b      	add	r3, r1
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d0ec      	beq.n	800d9b2 <vTaskSwitchContext+0x72>
 800d9d8:	68fa      	ldr	r2, [r7, #12]
 800d9da:	4613      	mov	r3, r2
 800d9dc:	009b      	lsls	r3, r3, #2
 800d9de:	4413      	add	r3, r2
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	4a13      	ldr	r2, [pc, #76]	; (800da30 <vTaskSwitchContext+0xf0>)
 800d9e4:	4413      	add	r3, r2
 800d9e6:	603b      	str	r3, [r7, #0]
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	685a      	ldr	r2, [r3, #4]
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	605a      	str	r2, [r3, #4]
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	685a      	ldr	r2, [r3, #4]
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	3308      	adds	r3, #8
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d104      	bne.n	800da08 <vTaskSwitchContext+0xc8>
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	685a      	ldr	r2, [r3, #4]
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	605a      	str	r2, [r3, #4]
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	4a06      	ldr	r2, [pc, #24]	; (800da28 <vTaskSwitchContext+0xe8>)
 800da10:	6013      	str	r3, [r2, #0]
 800da12:	4a06      	ldr	r2, [pc, #24]	; (800da2c <vTaskSwitchContext+0xec>)
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	6013      	str	r3, [r2, #0]
}
 800da18:	bf00      	nop
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	20005af8 	.word	0x20005af8
 800da24:	20005ae4 	.word	0x20005ae4
 800da28:	200055fc 	.word	0x200055fc
 800da2c:	20005ad8 	.word	0x20005ad8
 800da30:	20005600 	.word	0x20005600

0800da34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d102      	bne.n	800da4a <vTaskPlaceOnEventList+0x16>
 800da44:	f001 f8e8 	bl	800ec18 <ulSetInterruptMask>
 800da48:	e7fe      	b.n	800da48 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da4a:	4b07      	ldr	r3, [pc, #28]	; (800da68 <vTaskPlaceOnEventList+0x34>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	3318      	adds	r3, #24
 800da50:	4619      	mov	r1, r3
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f7fe facb 	bl	800bfee <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800da58:	2101      	movs	r1, #1
 800da5a:	6838      	ldr	r0, [r7, #0]
 800da5c:	f000 fc3e 	bl	800e2dc <prvAddCurrentTaskToDelayedList>
}
 800da60:	bf00      	nop
 800da62:	3708      	adds	r7, #8
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}
 800da68:	200055fc 	.word	0x200055fc

0800da6c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b086      	sub	sp, #24
 800da70:	af00      	add	r7, sp, #0
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	60b9      	str	r1, [r7, #8]
 800da76:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d102      	bne.n	800da84 <vTaskPlaceOnEventListRestricted+0x18>
 800da7e:	f001 f8cb 	bl	800ec18 <ulSetInterruptMask>
 800da82:	e7fe      	b.n	800da82 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	617b      	str	r3, [r7, #20]
 800da8a:	4b16      	ldr	r3, [pc, #88]	; (800dae4 <vTaskPlaceOnEventListRestricted+0x78>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	697a      	ldr	r2, [r7, #20]
 800da90:	61da      	str	r2, [r3, #28]
 800da92:	4b14      	ldr	r3, [pc, #80]	; (800dae4 <vTaskPlaceOnEventListRestricted+0x78>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	697a      	ldr	r2, [r7, #20]
 800da98:	6892      	ldr	r2, [r2, #8]
 800da9a:	621a      	str	r2, [r3, #32]
 800da9c:	4b11      	ldr	r3, [pc, #68]	; (800dae4 <vTaskPlaceOnEventListRestricted+0x78>)
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	3218      	adds	r2, #24
 800daa6:	605a      	str	r2, [r3, #4]
 800daa8:	4b0e      	ldr	r3, [pc, #56]	; (800dae4 <vTaskPlaceOnEventListRestricted+0x78>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f103 0218 	add.w	r2, r3, #24
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	609a      	str	r2, [r3, #8]
 800dab4:	4b0b      	ldr	r3, [pc, #44]	; (800dae4 <vTaskPlaceOnEventListRestricted+0x78>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	68fa      	ldr	r2, [r7, #12]
 800daba:	629a      	str	r2, [r3, #40]	; 0x28
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	1c5a      	adds	r2, r3, #1
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d002      	beq.n	800dad2 <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 800dacc:	f04f 33ff 	mov.w	r3, #4294967295
 800dad0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dad2:	6879      	ldr	r1, [r7, #4]
 800dad4:	68b8      	ldr	r0, [r7, #8]
 800dad6:	f000 fc01 	bl	800e2dc <prvAddCurrentTaskToDelayedList>
    }
 800dada:	bf00      	nop
 800dadc:	3718      	adds	r7, #24
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop
 800dae4:	200055fc 	.word	0x200055fc

0800dae8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b088      	sub	sp, #32
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	68db      	ldr	r3, [r3, #12]
 800daf4:	68db      	ldr	r3, [r3, #12]
 800daf6:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800daf8:	69bb      	ldr	r3, [r7, #24]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d102      	bne.n	800db04 <xTaskRemoveFromEventList+0x1c>
 800dafe:	f001 f88b 	bl	800ec18 <ulSetInterruptMask>
 800db02:	e7fe      	b.n	800db02 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800db04:	69bb      	ldr	r3, [r7, #24]
 800db06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db08:	617b      	str	r3, [r7, #20]
 800db0a:	69bb      	ldr	r3, [r7, #24]
 800db0c:	69db      	ldr	r3, [r3, #28]
 800db0e:	69ba      	ldr	r2, [r7, #24]
 800db10:	6a12      	ldr	r2, [r2, #32]
 800db12:	609a      	str	r2, [r3, #8]
 800db14:	69bb      	ldr	r3, [r7, #24]
 800db16:	6a1b      	ldr	r3, [r3, #32]
 800db18:	69ba      	ldr	r2, [r7, #24]
 800db1a:	69d2      	ldr	r2, [r2, #28]
 800db1c:	605a      	str	r2, [r3, #4]
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	685a      	ldr	r2, [r3, #4]
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	3318      	adds	r3, #24
 800db26:	429a      	cmp	r2, r3
 800db28:	d103      	bne.n	800db32 <xTaskRemoveFromEventList+0x4a>
 800db2a:	69bb      	ldr	r3, [r7, #24]
 800db2c:	6a1a      	ldr	r2, [r3, #32]
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	605a      	str	r2, [r3, #4]
 800db32:	69bb      	ldr	r3, [r7, #24]
 800db34:	2200      	movs	r2, #0
 800db36:	629a      	str	r2, [r3, #40]	; 0x28
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	1e5a      	subs	r2, r3, #1
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db42:	4b4a      	ldr	r3, [pc, #296]	; (800dc6c <xTaskRemoveFromEventList+0x184>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d15f      	bne.n	800dc0a <xTaskRemoveFromEventList+0x122>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800db4a:	69bb      	ldr	r3, [r7, #24]
 800db4c:	695b      	ldr	r3, [r3, #20]
 800db4e:	60fb      	str	r3, [r7, #12]
 800db50:	69bb      	ldr	r3, [r7, #24]
 800db52:	689b      	ldr	r3, [r3, #8]
 800db54:	69ba      	ldr	r2, [r7, #24]
 800db56:	68d2      	ldr	r2, [r2, #12]
 800db58:	609a      	str	r2, [r3, #8]
 800db5a:	69bb      	ldr	r3, [r7, #24]
 800db5c:	68db      	ldr	r3, [r3, #12]
 800db5e:	69ba      	ldr	r2, [r7, #24]
 800db60:	6892      	ldr	r2, [r2, #8]
 800db62:	605a      	str	r2, [r3, #4]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	685a      	ldr	r2, [r3, #4]
 800db68:	69bb      	ldr	r3, [r7, #24]
 800db6a:	3304      	adds	r3, #4
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d103      	bne.n	800db78 <xTaskRemoveFromEventList+0x90>
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	68da      	ldr	r2, [r3, #12]
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	605a      	str	r2, [r3, #4]
 800db78:	69bb      	ldr	r3, [r7, #24]
 800db7a:	2200      	movs	r2, #0
 800db7c:	615a      	str	r2, [r3, #20]
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	1e5a      	subs	r2, r3, #1
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800db88:	69bb      	ldr	r3, [r7, #24]
 800db8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db8c:	4b38      	ldr	r3, [pc, #224]	; (800dc70 <xTaskRemoveFromEventList+0x188>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	429a      	cmp	r2, r3
 800db92:	d903      	bls.n	800db9c <xTaskRemoveFromEventList+0xb4>
 800db94:	69bb      	ldr	r3, [r7, #24]
 800db96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db98:	4a35      	ldr	r2, [pc, #212]	; (800dc70 <xTaskRemoveFromEventList+0x188>)
 800db9a:	6013      	str	r3, [r2, #0]
 800db9c:	69bb      	ldr	r3, [r7, #24]
 800db9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dba0:	4934      	ldr	r1, [pc, #208]	; (800dc74 <xTaskRemoveFromEventList+0x18c>)
 800dba2:	4613      	mov	r3, r2
 800dba4:	009b      	lsls	r3, r3, #2
 800dba6:	4413      	add	r3, r2
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	440b      	add	r3, r1
 800dbac:	3304      	adds	r3, #4
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	60bb      	str	r3, [r7, #8]
 800dbb2:	69bb      	ldr	r3, [r7, #24]
 800dbb4:	68ba      	ldr	r2, [r7, #8]
 800dbb6:	609a      	str	r2, [r3, #8]
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	689a      	ldr	r2, [r3, #8]
 800dbbc:	69bb      	ldr	r3, [r7, #24]
 800dbbe:	60da      	str	r2, [r3, #12]
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	69ba      	ldr	r2, [r7, #24]
 800dbc6:	3204      	adds	r2, #4
 800dbc8:	605a      	str	r2, [r3, #4]
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	1d1a      	adds	r2, r3, #4
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	609a      	str	r2, [r3, #8]
 800dbd2:	69bb      	ldr	r3, [r7, #24]
 800dbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbd6:	4613      	mov	r3, r2
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	4413      	add	r3, r2
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	4a25      	ldr	r2, [pc, #148]	; (800dc74 <xTaskRemoveFromEventList+0x18c>)
 800dbe0:	441a      	add	r2, r3
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	615a      	str	r2, [r3, #20]
 800dbe6:	69bb      	ldr	r3, [r7, #24]
 800dbe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbea:	4922      	ldr	r1, [pc, #136]	; (800dc74 <xTaskRemoveFromEventList+0x18c>)
 800dbec:	4613      	mov	r3, r2
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	4413      	add	r3, r2
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	440b      	add	r3, r1
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	1c59      	adds	r1, r3, #1
 800dbfa:	481e      	ldr	r0, [pc, #120]	; (800dc74 <xTaskRemoveFromEventList+0x18c>)
 800dbfc:	4613      	mov	r3, r2
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	4413      	add	r3, r2
 800dc02:	009b      	lsls	r3, r3, #2
 800dc04:	4403      	add	r3, r0
 800dc06:	6019      	str	r1, [r3, #0]
 800dc08:	e01b      	b.n	800dc42 <xTaskRemoveFromEventList+0x15a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dc0a:	4b1b      	ldr	r3, [pc, #108]	; (800dc78 <xTaskRemoveFromEventList+0x190>)
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	613b      	str	r3, [r7, #16]
 800dc10:	69bb      	ldr	r3, [r7, #24]
 800dc12:	693a      	ldr	r2, [r7, #16]
 800dc14:	61da      	str	r2, [r3, #28]
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	689a      	ldr	r2, [r3, #8]
 800dc1a:	69bb      	ldr	r3, [r7, #24]
 800dc1c:	621a      	str	r2, [r3, #32]
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	689b      	ldr	r3, [r3, #8]
 800dc22:	69ba      	ldr	r2, [r7, #24]
 800dc24:	3218      	adds	r2, #24
 800dc26:	605a      	str	r2, [r3, #4]
 800dc28:	69bb      	ldr	r3, [r7, #24]
 800dc2a:	f103 0218 	add.w	r2, r3, #24
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	609a      	str	r2, [r3, #8]
 800dc32:	69bb      	ldr	r3, [r7, #24]
 800dc34:	4a10      	ldr	r2, [pc, #64]	; (800dc78 <xTaskRemoveFromEventList+0x190>)
 800dc36:	629a      	str	r2, [r3, #40]	; 0x28
 800dc38:	4b0f      	ldr	r3, [pc, #60]	; (800dc78 <xTaskRemoveFromEventList+0x190>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	4a0e      	ldr	r2, [pc, #56]	; (800dc78 <xTaskRemoveFromEventList+0x190>)
 800dc40:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dc42:	69bb      	ldr	r3, [r7, #24]
 800dc44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc46:	4b0d      	ldr	r3, [pc, #52]	; (800dc7c <xTaskRemoveFromEventList+0x194>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d905      	bls.n	800dc5c <xTaskRemoveFromEventList+0x174>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800dc50:	2301      	movs	r3, #1
 800dc52:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800dc54:	4b0a      	ldr	r3, [pc, #40]	; (800dc80 <xTaskRemoveFromEventList+0x198>)
 800dc56:	2201      	movs	r2, #1
 800dc58:	601a      	str	r2, [r3, #0]
 800dc5a:	e001      	b.n	800dc60 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        xReturn = pdFALSE;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800dc60:	69fb      	ldr	r3, [r7, #28]
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3720      	adds	r7, #32
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
 800dc6a:	bf00      	nop
 800dc6c:	20005af8 	.word	0x20005af8
 800dc70:	20005ad8 	.word	0x20005ad8
 800dc74:	20005600 	.word	0x20005600
 800dc78:	20005a90 	.word	0x20005a90
 800dc7c:	200055fc 	.word	0x200055fc
 800dc80:	20005ae4 	.word	0x20005ae4

0800dc84 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dc84:	b480      	push	{r7}
 800dc86:	b083      	sub	sp, #12
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dc8c:	4b06      	ldr	r3, [pc, #24]	; (800dca8 <vTaskInternalSetTimeOutState+0x24>)
 800dc8e:	681a      	ldr	r2, [r3, #0]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800dc94:	4b05      	ldr	r3, [pc, #20]	; (800dcac <vTaskInternalSetTimeOutState+0x28>)
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	605a      	str	r2, [r3, #4]
}
 800dc9c:	bf00      	nop
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr
 800dca8:	20005ae8 	.word	0x20005ae8
 800dcac:	20005ad4 	.word	0x20005ad4

0800dcb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b086      	sub	sp, #24
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d102      	bne.n	800dcc6 <xTaskCheckForTimeOut+0x16>
 800dcc0:	f000 ffaa 	bl	800ec18 <ulSetInterruptMask>
 800dcc4:	e7fe      	b.n	800dcc4 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d102      	bne.n	800dcd2 <xTaskCheckForTimeOut+0x22>
 800dccc:	f000 ffa4 	bl	800ec18 <ulSetInterruptMask>
 800dcd0:	e7fe      	b.n	800dcd0 <xTaskCheckForTimeOut+0x20>

    taskENTER_CRITICAL();
 800dcd2:	f000 fe61 	bl	800e998 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800dcd6:	4b1f      	ldr	r3, [pc, #124]	; (800dd54 <xTaskCheckForTimeOut+0xa4>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	693a      	ldr	r2, [r7, #16]
 800dce2:	1ad3      	subs	r3, r2, r3
 800dce4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcee:	d102      	bne.n	800dcf6 <xTaskCheckForTimeOut+0x46>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	617b      	str	r3, [r7, #20]
 800dcf4:	e026      	b.n	800dd44 <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681a      	ldr	r2, [r3, #0]
 800dcfa:	4b17      	ldr	r3, [pc, #92]	; (800dd58 <xTaskCheckForTimeOut+0xa8>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d00a      	beq.n	800dd18 <xTaskCheckForTimeOut+0x68>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	693a      	ldr	r2, [r7, #16]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d305      	bcc.n	800dd18 <xTaskCheckForTimeOut+0x68>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	2200      	movs	r2, #0
 800dd14:	601a      	str	r2, [r3, #0]
 800dd16:	e015      	b.n	800dd44 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	68fa      	ldr	r2, [r7, #12]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d20b      	bcs.n	800dd3a <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	681a      	ldr	r2, [r3, #0]
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	1ad2      	subs	r2, r2, r3
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f7ff ffa8 	bl	800dc84 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800dd34:	2300      	movs	r3, #0
 800dd36:	617b      	str	r3, [r7, #20]
 800dd38:	e004      	b.n	800dd44 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800dd40:	2301      	movs	r3, #1
 800dd42:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800dd44:	f000 fe3a 	bl	800e9bc <vPortExitCritical>

    return xReturn;
 800dd48:	697b      	ldr	r3, [r7, #20]
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3718      	adds	r7, #24
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}
 800dd52:	bf00      	nop
 800dd54:	20005ad4 	.word	0x20005ad4
 800dd58:	20005ae8 	.word	0x20005ae8

0800dd5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800dd60:	4b03      	ldr	r3, [pc, #12]	; (800dd70 <vTaskMissedYield+0x14>)
 800dd62:	2201      	movs	r2, #1
 800dd64:	601a      	str	r2, [r3, #0]
}
 800dd66:	bf00      	nop
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6e:	4770      	bx	lr
 800dd70:	20005ae4 	.word	0x20005ae4

0800dd74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800dd7c:	f000 f84a 	bl	800de14 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dd80:	4b03      	ldr	r3, [pc, #12]	; (800dd90 <prvIdleTask+0x1c>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d9f9      	bls.n	800dd7c <prvIdleTask+0x8>
            {
                taskYIELD();
 800dd88:	f000 fdf4 	bl	800e974 <vPortYield>
        prvCheckTasksWaitingTermination();
 800dd8c:	e7f6      	b.n	800dd7c <prvIdleTask+0x8>
 800dd8e:	bf00      	nop
 800dd90:	20005600 	.word	0x20005600

0800dd94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b082      	sub	sp, #8
 800dd98:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	607b      	str	r3, [r7, #4]
 800dd9e:	e00c      	b.n	800ddba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dda0:	687a      	ldr	r2, [r7, #4]
 800dda2:	4613      	mov	r3, r2
 800dda4:	009b      	lsls	r3, r3, #2
 800dda6:	4413      	add	r3, r2
 800dda8:	009b      	lsls	r3, r3, #2
 800ddaa:	4a12      	ldr	r2, [pc, #72]	; (800ddf4 <prvInitialiseTaskLists+0x60>)
 800ddac:	4413      	add	r3, r2
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7fe f8f0 	bl	800bf94 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	607b      	str	r3, [r7, #4]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2b37      	cmp	r3, #55	; 0x37
 800ddbe:	d9ef      	bls.n	800dda0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800ddc0:	480d      	ldr	r0, [pc, #52]	; (800ddf8 <prvInitialiseTaskLists+0x64>)
 800ddc2:	f7fe f8e7 	bl	800bf94 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800ddc6:	480d      	ldr	r0, [pc, #52]	; (800ddfc <prvInitialiseTaskLists+0x68>)
 800ddc8:	f7fe f8e4 	bl	800bf94 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800ddcc:	480c      	ldr	r0, [pc, #48]	; (800de00 <prvInitialiseTaskLists+0x6c>)
 800ddce:	f7fe f8e1 	bl	800bf94 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800ddd2:	480c      	ldr	r0, [pc, #48]	; (800de04 <prvInitialiseTaskLists+0x70>)
 800ddd4:	f7fe f8de 	bl	800bf94 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800ddd8:	480b      	ldr	r0, [pc, #44]	; (800de08 <prvInitialiseTaskLists+0x74>)
 800ddda:	f7fe f8db 	bl	800bf94 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800ddde:	4b0b      	ldr	r3, [pc, #44]	; (800de0c <prvInitialiseTaskLists+0x78>)
 800dde0:	4a05      	ldr	r2, [pc, #20]	; (800ddf8 <prvInitialiseTaskLists+0x64>)
 800dde2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dde4:	4b0a      	ldr	r3, [pc, #40]	; (800de10 <prvInitialiseTaskLists+0x7c>)
 800dde6:	4a05      	ldr	r2, [pc, #20]	; (800ddfc <prvInitialiseTaskLists+0x68>)
 800dde8:	601a      	str	r2, [r3, #0]
}
 800ddea:	bf00      	nop
 800ddec:	3708      	adds	r7, #8
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	20005600 	.word	0x20005600
 800ddf8:	20005a60 	.word	0x20005a60
 800ddfc:	20005a74 	.word	0x20005a74
 800de00:	20005a90 	.word	0x20005a90
 800de04:	20005aa4 	.word	0x20005aa4
 800de08:	20005abc 	.word	0x20005abc
 800de0c:	20005a88 	.word	0x20005a88
 800de10:	20005a8c 	.word	0x20005a8c

0800de14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de1a:	e019      	b.n	800de50 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800de1c:	f000 fdbc 	bl	800e998 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de20:	4b10      	ldr	r3, [pc, #64]	; (800de64 <prvCheckTasksWaitingTermination+0x50>)
 800de22:	68db      	ldr	r3, [r3, #12]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	3304      	adds	r3, #4
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7fe f917 	bl	800c060 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800de32:	4b0d      	ldr	r3, [pc, #52]	; (800de68 <prvCheckTasksWaitingTermination+0x54>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	3b01      	subs	r3, #1
 800de38:	4a0b      	ldr	r2, [pc, #44]	; (800de68 <prvCheckTasksWaitingTermination+0x54>)
 800de3a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800de3c:	4b0b      	ldr	r3, [pc, #44]	; (800de6c <prvCheckTasksWaitingTermination+0x58>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	3b01      	subs	r3, #1
 800de42:	4a0a      	ldr	r2, [pc, #40]	; (800de6c <prvCheckTasksWaitingTermination+0x58>)
 800de44:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800de46:	f000 fdb9 	bl	800e9bc <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 f810 	bl	800de70 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de50:	4b06      	ldr	r3, [pc, #24]	; (800de6c <prvCheckTasksWaitingTermination+0x58>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d1e1      	bne.n	800de1c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800de58:	bf00      	nop
 800de5a:	bf00      	nop
 800de5c:	3708      	adds	r7, #8
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	20005aa4 	.word	0x20005aa4
 800de68:	20005ad0 	.word	0x20005ad0
 800de6c:	20005ab8 	.word	0x20005ab8

0800de70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d108      	bne.n	800de94 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de86:	4618      	mov	r0, r3
 800de88:	f000 ffd0 	bl	800ee2c <vPortFree>
                vPortFree( pxTCB );
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f000 ffcd 	bl	800ee2c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800de92:	e010      	b.n	800deb6 <prvDeleteTCB+0x46>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800de9a:	2b01      	cmp	r3, #1
 800de9c:	d103      	bne.n	800dea6 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f000 ffc4 	bl	800ee2c <vPortFree>
    }
 800dea4:	e007      	b.n	800deb6 <prvDeleteTCB+0x46>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800deac:	2b02      	cmp	r3, #2
 800deae:	d002      	beq.n	800deb6 <prvDeleteTCB+0x46>
 800deb0:	f000 feb2 	bl	800ec18 <ulSetInterruptMask>
 800deb4:	e7fe      	b.n	800deb4 <prvDeleteTCB+0x44>
    }
 800deb6:	bf00      	nop
 800deb8:	3708      	adds	r7, #8
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
	...

0800dec0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dec0:	b480      	push	{r7}
 800dec2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dec4:	4b0a      	ldr	r3, [pc, #40]	; (800def0 <prvResetNextTaskUnblockTime+0x30>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d104      	bne.n	800ded8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800dece:	4b09      	ldr	r3, [pc, #36]	; (800def4 <prvResetNextTaskUnblockTime+0x34>)
 800ded0:	f04f 32ff 	mov.w	r2, #4294967295
 800ded4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800ded6:	e005      	b.n	800dee4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ded8:	4b05      	ldr	r3, [pc, #20]	; (800def0 <prvResetNextTaskUnblockTime+0x30>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	68db      	ldr	r3, [r3, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	4a04      	ldr	r2, [pc, #16]	; (800def4 <prvResetNextTaskUnblockTime+0x34>)
 800dee2:	6013      	str	r3, [r2, #0]
}
 800dee4:	bf00      	nop
 800dee6:	46bd      	mov	sp, r7
 800dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deec:	4770      	bx	lr
 800deee:	bf00      	nop
 800def0:	20005a88 	.word	0x20005a88
 800def4:	20005af0 	.word	0x20005af0

0800def8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 800defe:	4b05      	ldr	r3, [pc, #20]	; (800df14 <xTaskGetCurrentTaskHandle+0x1c>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	607b      	str	r3, [r7, #4]

        return xReturn;
 800df04:	687b      	ldr	r3, [r7, #4]
    }
 800df06:	4618      	mov	r0, r3
 800df08:	370c      	adds	r7, #12
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr
 800df12:	bf00      	nop
 800df14:	200055fc 	.word	0x200055fc

0800df18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800df18:	b480      	push	{r7}
 800df1a:	b083      	sub	sp, #12
 800df1c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800df1e:	4b0b      	ldr	r3, [pc, #44]	; (800df4c <xTaskGetSchedulerState+0x34>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d102      	bne.n	800df2c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800df26:	2301      	movs	r3, #1
 800df28:	607b      	str	r3, [r7, #4]
 800df2a:	e008      	b.n	800df3e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df2c:	4b08      	ldr	r3, [pc, #32]	; (800df50 <xTaskGetSchedulerState+0x38>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d102      	bne.n	800df3a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800df34:	2302      	movs	r3, #2
 800df36:	607b      	str	r3, [r7, #4]
 800df38:	e001      	b.n	800df3e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800df3a:	2300      	movs	r3, #0
 800df3c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800df3e:	687b      	ldr	r3, [r7, #4]
    }
 800df40:	4618      	mov	r0, r3
 800df42:	370c      	adds	r7, #12
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr
 800df4c:	20005adc 	.word	0x20005adc
 800df50:	20005af8 	.word	0x20005af8

0800df54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800df54:	b580      	push	{r7, lr}
 800df56:	b086      	sub	sp, #24
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800df60:	2300      	movs	r3, #0
 800df62:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d079      	beq.n	800e05e <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df6e:	4b3e      	ldr	r3, [pc, #248]	; (800e068 <xTaskPriorityInherit+0x114>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df74:	429a      	cmp	r2, r3
 800df76:	d269      	bcs.n	800e04c <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	699b      	ldr	r3, [r3, #24]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	db06      	blt.n	800df8e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df80:	4b39      	ldr	r3, [pc, #228]	; (800e068 <xTaskPriorityInherit+0x114>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	6959      	ldr	r1, [r3, #20]
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df96:	4613      	mov	r3, r2
 800df98:	009b      	lsls	r3, r3, #2
 800df9a:	4413      	add	r3, r2
 800df9c:	009b      	lsls	r3, r3, #2
 800df9e:	4a33      	ldr	r2, [pc, #204]	; (800e06c <xTaskPriorityInherit+0x118>)
 800dfa0:	4413      	add	r3, r2
 800dfa2:	4299      	cmp	r1, r3
 800dfa4:	d14a      	bne.n	800e03c <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	3304      	adds	r3, #4
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7fe f858 	bl	800c060 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dfb0:	4b2d      	ldr	r3, [pc, #180]	; (800e068 <xTaskPriorityInherit+0x114>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfbe:	4b2c      	ldr	r3, [pc, #176]	; (800e070 <xTaskPriorityInherit+0x11c>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d903      	bls.n	800dfce <xTaskPriorityInherit+0x7a>
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfca:	4a29      	ldr	r2, [pc, #164]	; (800e070 <xTaskPriorityInherit+0x11c>)
 800dfcc:	6013      	str	r3, [r2, #0]
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfd2:	4926      	ldr	r1, [pc, #152]	; (800e06c <xTaskPriorityInherit+0x118>)
 800dfd4:	4613      	mov	r3, r2
 800dfd6:	009b      	lsls	r3, r3, #2
 800dfd8:	4413      	add	r3, r2
 800dfda:	009b      	lsls	r3, r3, #2
 800dfdc:	440b      	add	r3, r1
 800dfde:	3304      	adds	r3, #4
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	60fb      	str	r3, [r7, #12]
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	68fa      	ldr	r2, [r7, #12]
 800dfe8:	609a      	str	r2, [r3, #8]
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	689a      	ldr	r2, [r3, #8]
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	60da      	str	r2, [r3, #12]
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	693a      	ldr	r2, [r7, #16]
 800dff8:	3204      	adds	r2, #4
 800dffa:	605a      	str	r2, [r3, #4]
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	1d1a      	adds	r2, r3, #4
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	609a      	str	r2, [r3, #8]
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e008:	4613      	mov	r3, r2
 800e00a:	009b      	lsls	r3, r3, #2
 800e00c:	4413      	add	r3, r2
 800e00e:	009b      	lsls	r3, r3, #2
 800e010:	4a16      	ldr	r2, [pc, #88]	; (800e06c <xTaskPriorityInherit+0x118>)
 800e012:	441a      	add	r2, r3
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	615a      	str	r2, [r3, #20]
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e01c:	4913      	ldr	r1, [pc, #76]	; (800e06c <xTaskPriorityInherit+0x118>)
 800e01e:	4613      	mov	r3, r2
 800e020:	009b      	lsls	r3, r3, #2
 800e022:	4413      	add	r3, r2
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	440b      	add	r3, r1
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	1c59      	adds	r1, r3, #1
 800e02c:	480f      	ldr	r0, [pc, #60]	; (800e06c <xTaskPriorityInherit+0x118>)
 800e02e:	4613      	mov	r3, r2
 800e030:	009b      	lsls	r3, r3, #2
 800e032:	4413      	add	r3, r2
 800e034:	009b      	lsls	r3, r3, #2
 800e036:	4403      	add	r3, r0
 800e038:	6019      	str	r1, [r3, #0]
 800e03a:	e004      	b.n	800e046 <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e03c:	4b0a      	ldr	r3, [pc, #40]	; (800e068 <xTaskPriorityInherit+0x114>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800e046:	2301      	movs	r3, #1
 800e048:	617b      	str	r3, [r7, #20]
 800e04a:	e008      	b.n	800e05e <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e050:	4b05      	ldr	r3, [pc, #20]	; (800e068 <xTaskPriorityInherit+0x114>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e056:	429a      	cmp	r2, r3
 800e058:	d201      	bcs.n	800e05e <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800e05a:	2301      	movs	r3, #1
 800e05c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800e05e:	697b      	ldr	r3, [r7, #20]
    }
 800e060:	4618      	mov	r0, r3
 800e062:	3718      	adds	r7, #24
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}
 800e068:	200055fc 	.word	0x200055fc
 800e06c:	20005600 	.word	0x20005600
 800e070:	20005ad8 	.word	0x20005ad8

0800e074 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800e074:	b580      	push	{r7, lr}
 800e076:	b086      	sub	sp, #24
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800e080:	2300      	movs	r3, #0
 800e082:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d06e      	beq.n	800e168 <xTaskPriorityDisinherit+0xf4>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800e08a:	4b3a      	ldr	r3, [pc, #232]	; (800e174 <xTaskPriorityDisinherit+0x100>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	693a      	ldr	r2, [r7, #16]
 800e090:	429a      	cmp	r2, r3
 800e092:	d002      	beq.n	800e09a <xTaskPriorityDisinherit+0x26>
 800e094:	f000 fdc0 	bl	800ec18 <ulSetInterruptMask>
 800e098:	e7fe      	b.n	800e098 <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d102      	bne.n	800e0a8 <xTaskPriorityDisinherit+0x34>
 800e0a2:	f000 fdb9 	bl	800ec18 <ulSetInterruptMask>
 800e0a6:	e7fe      	b.n	800e0a6 <xTaskPriorityDisinherit+0x32>
            ( pxTCB->uxMutexesHeld )--;
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0ac:	1e5a      	subs	r2, r3, #1
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d054      	beq.n	800e168 <xTaskPriorityDisinherit+0xf4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d150      	bne.n	800e168 <xTaskPriorityDisinherit+0xf4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	3304      	adds	r3, #4
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7fd ffc8 	bl	800c060 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0e8:	4b23      	ldr	r3, [pc, #140]	; (800e178 <xTaskPriorityDisinherit+0x104>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d903      	bls.n	800e0f8 <xTaskPriorityDisinherit+0x84>
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0f4:	4a20      	ldr	r2, [pc, #128]	; (800e178 <xTaskPriorityDisinherit+0x104>)
 800e0f6:	6013      	str	r3, [r2, #0]
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0fc:	491f      	ldr	r1, [pc, #124]	; (800e17c <xTaskPriorityDisinherit+0x108>)
 800e0fe:	4613      	mov	r3, r2
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	4413      	add	r3, r2
 800e104:	009b      	lsls	r3, r3, #2
 800e106:	440b      	add	r3, r1
 800e108:	3304      	adds	r3, #4
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	60fb      	str	r3, [r7, #12]
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	68fa      	ldr	r2, [r7, #12]
 800e112:	609a      	str	r2, [r3, #8]
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	689a      	ldr	r2, [r3, #8]
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	60da      	str	r2, [r3, #12]
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	689b      	ldr	r3, [r3, #8]
 800e120:	693a      	ldr	r2, [r7, #16]
 800e122:	3204      	adds	r2, #4
 800e124:	605a      	str	r2, [r3, #4]
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	1d1a      	adds	r2, r3, #4
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	609a      	str	r2, [r3, #8]
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e132:	4613      	mov	r3, r2
 800e134:	009b      	lsls	r3, r3, #2
 800e136:	4413      	add	r3, r2
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	4a10      	ldr	r2, [pc, #64]	; (800e17c <xTaskPriorityDisinherit+0x108>)
 800e13c:	441a      	add	r2, r3
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	615a      	str	r2, [r3, #20]
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e146:	490d      	ldr	r1, [pc, #52]	; (800e17c <xTaskPriorityDisinherit+0x108>)
 800e148:	4613      	mov	r3, r2
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	4413      	add	r3, r2
 800e14e:	009b      	lsls	r3, r3, #2
 800e150:	440b      	add	r3, r1
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	1c59      	adds	r1, r3, #1
 800e156:	4809      	ldr	r0, [pc, #36]	; (800e17c <xTaskPriorityDisinherit+0x108>)
 800e158:	4613      	mov	r3, r2
 800e15a:	009b      	lsls	r3, r3, #2
 800e15c:	4413      	add	r3, r2
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	4403      	add	r3, r0
 800e162:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800e164:	2301      	movs	r3, #1
 800e166:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800e168:	697b      	ldr	r3, [r7, #20]
    }
 800e16a:	4618      	mov	r0, r3
 800e16c:	3718      	adds	r7, #24
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
 800e172:	bf00      	nop
 800e174:	200055fc 	.word	0x200055fc
 800e178:	20005ad8 	.word	0x20005ad8
 800e17c:	20005600 	.word	0x20005600

0800e180 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800e180:	b580      	push	{r7, lr}
 800e182:	b088      	sub	sp, #32
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e18e:	2301      	movs	r3, #1
 800e190:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2b00      	cmp	r3, #0
 800e196:	f000 8083 	beq.w	800e2a0 <vTaskPriorityDisinheritAfterTimeout+0x120>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800e19a:	69bb      	ldr	r3, [r7, #24]
 800e19c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d102      	bne.n	800e1a8 <vTaskPriorityDisinheritAfterTimeout+0x28>
 800e1a2:	f000 fd39 	bl	800ec18 <ulSetInterruptMask>
 800e1a6:	e7fe      	b.n	800e1a6 <vTaskPriorityDisinheritAfterTimeout+0x26>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e1a8:	69bb      	ldr	r3, [r7, #24]
 800e1aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1ac:	683a      	ldr	r2, [r7, #0]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d902      	bls.n	800e1b8 <vTaskPriorityDisinheritAfterTimeout+0x38>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	61fb      	str	r3, [r7, #28]
 800e1b6:	e002      	b.n	800e1be <vTaskPriorityDisinheritAfterTimeout+0x3e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800e1b8:	69bb      	ldr	r3, [r7, #24]
 800e1ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1bc:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1c2:	69fa      	ldr	r2, [r7, #28]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d06b      	beq.n	800e2a0 <vTaskPriorityDisinheritAfterTimeout+0x120>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e1c8:	69bb      	ldr	r3, [r7, #24]
 800e1ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1cc:	697a      	ldr	r2, [r7, #20]
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d166      	bne.n	800e2a0 <vTaskPriorityDisinheritAfterTimeout+0x120>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800e1d2:	4b35      	ldr	r3, [pc, #212]	; (800e2a8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	69ba      	ldr	r2, [r7, #24]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d102      	bne.n	800e1e2 <vTaskPriorityDisinheritAfterTimeout+0x62>
 800e1dc:	f000 fd1c 	bl	800ec18 <ulSetInterruptMask>
 800e1e0:	e7fe      	b.n	800e1e0 <vTaskPriorityDisinheritAfterTimeout+0x60>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e1e2:	69bb      	ldr	r3, [r7, #24]
 800e1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e6:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800e1e8:	69bb      	ldr	r3, [r7, #24]
 800e1ea:	69fa      	ldr	r2, [r7, #28]
 800e1ec:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e1ee:	69bb      	ldr	r3, [r7, #24]
 800e1f0:	699b      	ldr	r3, [r3, #24]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	db04      	blt.n	800e200 <vTaskPriorityDisinheritAfterTimeout+0x80>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1f6:	69fb      	ldr	r3, [r7, #28]
 800e1f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e1fc:	69bb      	ldr	r3, [r7, #24]
 800e1fe:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e200:	69bb      	ldr	r3, [r7, #24]
 800e202:	6959      	ldr	r1, [r3, #20]
 800e204:	693a      	ldr	r2, [r7, #16]
 800e206:	4613      	mov	r3, r2
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	4413      	add	r3, r2
 800e20c:	009b      	lsls	r3, r3, #2
 800e20e:	4a27      	ldr	r2, [pc, #156]	; (800e2ac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e210:	4413      	add	r3, r2
 800e212:	4299      	cmp	r1, r3
 800e214:	d144      	bne.n	800e2a0 <vTaskPriorityDisinheritAfterTimeout+0x120>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e216:	69bb      	ldr	r3, [r7, #24]
 800e218:	3304      	adds	r3, #4
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7fd ff20 	bl	800c060 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e224:	4b22      	ldr	r3, [pc, #136]	; (800e2b0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d903      	bls.n	800e234 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 800e22c:	69bb      	ldr	r3, [r7, #24]
 800e22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e230:	4a1f      	ldr	r2, [pc, #124]	; (800e2b0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e232:	6013      	str	r3, [r2, #0]
 800e234:	69bb      	ldr	r3, [r7, #24]
 800e236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e238:	491c      	ldr	r1, [pc, #112]	; (800e2ac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e23a:	4613      	mov	r3, r2
 800e23c:	009b      	lsls	r3, r3, #2
 800e23e:	4413      	add	r3, r2
 800e240:	009b      	lsls	r3, r3, #2
 800e242:	440b      	add	r3, r1
 800e244:	3304      	adds	r3, #4
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	60fb      	str	r3, [r7, #12]
 800e24a:	69bb      	ldr	r3, [r7, #24]
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	609a      	str	r2, [r3, #8]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	689a      	ldr	r2, [r3, #8]
 800e254:	69bb      	ldr	r3, [r7, #24]
 800e256:	60da      	str	r2, [r3, #12]
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	689b      	ldr	r3, [r3, #8]
 800e25c:	69ba      	ldr	r2, [r7, #24]
 800e25e:	3204      	adds	r2, #4
 800e260:	605a      	str	r2, [r3, #4]
 800e262:	69bb      	ldr	r3, [r7, #24]
 800e264:	1d1a      	adds	r2, r3, #4
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	609a      	str	r2, [r3, #8]
 800e26a:	69bb      	ldr	r3, [r7, #24]
 800e26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e26e:	4613      	mov	r3, r2
 800e270:	009b      	lsls	r3, r3, #2
 800e272:	4413      	add	r3, r2
 800e274:	009b      	lsls	r3, r3, #2
 800e276:	4a0d      	ldr	r2, [pc, #52]	; (800e2ac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e278:	441a      	add	r2, r3
 800e27a:	69bb      	ldr	r3, [r7, #24]
 800e27c:	615a      	str	r2, [r3, #20]
 800e27e:	69bb      	ldr	r3, [r7, #24]
 800e280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e282:	490a      	ldr	r1, [pc, #40]	; (800e2ac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e284:	4613      	mov	r3, r2
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	4413      	add	r3, r2
 800e28a:	009b      	lsls	r3, r3, #2
 800e28c:	440b      	add	r3, r1
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	1c59      	adds	r1, r3, #1
 800e292:	4806      	ldr	r0, [pc, #24]	; (800e2ac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e294:	4613      	mov	r3, r2
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	4413      	add	r3, r2
 800e29a:	009b      	lsls	r3, r3, #2
 800e29c:	4403      	add	r3, r0
 800e29e:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800e2a0:	bf00      	nop
 800e2a2:	3720      	adds	r7, #32
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	200055fc 	.word	0x200055fc
 800e2ac:	20005600 	.word	0x20005600
 800e2b0:	20005ad8 	.word	0x20005ad8

0800e2b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800e2b4:	b480      	push	{r7}
 800e2b6:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800e2b8:	4b07      	ldr	r3, [pc, #28]	; (800e2d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d004      	beq.n	800e2ca <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800e2c0:	4b05      	ldr	r3, [pc, #20]	; (800e2d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e2c6:	3201      	adds	r2, #1
 800e2c8:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 800e2ca:	4b03      	ldr	r3, [pc, #12]	; (800e2d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
    }
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr
 800e2d8:	200055fc 	.word	0x200055fc

0800e2dc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b086      	sub	sp, #24
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800e2e6:	4b2e      	ldr	r3, [pc, #184]	; (800e3a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2ec:	4b2d      	ldr	r3, [pc, #180]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	3304      	adds	r3, #4
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7fd feb4 	bl	800c060 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2fe:	d124      	bne.n	800e34a <prvAddCurrentTaskToDelayedList+0x6e>
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d021      	beq.n	800e34a <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e306:	4b28      	ldr	r3, [pc, #160]	; (800e3a8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	613b      	str	r3, [r7, #16]
 800e30c:	4b25      	ldr	r3, [pc, #148]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	693a      	ldr	r2, [r7, #16]
 800e312:	609a      	str	r2, [r3, #8]
 800e314:	4b23      	ldr	r3, [pc, #140]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	693a      	ldr	r2, [r7, #16]
 800e31a:	6892      	ldr	r2, [r2, #8]
 800e31c:	60da      	str	r2, [r3, #12]
 800e31e:	4b21      	ldr	r3, [pc, #132]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e320:	681a      	ldr	r2, [r3, #0]
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	689b      	ldr	r3, [r3, #8]
 800e326:	3204      	adds	r2, #4
 800e328:	605a      	str	r2, [r3, #4]
 800e32a:	4b1e      	ldr	r3, [pc, #120]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	1d1a      	adds	r2, r3, #4
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	609a      	str	r2, [r3, #8]
 800e334:	4b1b      	ldr	r3, [pc, #108]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4a1b      	ldr	r2, [pc, #108]	; (800e3a8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e33a:	615a      	str	r2, [r3, #20]
 800e33c:	4b1a      	ldr	r3, [pc, #104]	; (800e3a8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	3301      	adds	r3, #1
 800e342:	4a19      	ldr	r2, [pc, #100]	; (800e3a8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e344:	6013      	str	r3, [r2, #0]
 800e346:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800e348:	e026      	b.n	800e398 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800e34a:	697a      	ldr	r2, [r7, #20]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	4413      	add	r3, r2
 800e350:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e352:	4b14      	ldr	r3, [pc, #80]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	68fa      	ldr	r2, [r7, #12]
 800e358:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800e35a:	68fa      	ldr	r2, [r7, #12]
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d209      	bcs.n	800e376 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e362:	4b12      	ldr	r3, [pc, #72]	; (800e3ac <prvAddCurrentTaskToDelayedList+0xd0>)
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	4b0f      	ldr	r3, [pc, #60]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	3304      	adds	r3, #4
 800e36c:	4619      	mov	r1, r3
 800e36e:	4610      	mov	r0, r2
 800e370:	f7fd fe3d 	bl	800bfee <vListInsert>
}
 800e374:	e010      	b.n	800e398 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e376:	4b0e      	ldr	r3, [pc, #56]	; (800e3b0 <prvAddCurrentTaskToDelayedList+0xd4>)
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	4b0a      	ldr	r3, [pc, #40]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	3304      	adds	r3, #4
 800e380:	4619      	mov	r1, r3
 800e382:	4610      	mov	r0, r2
 800e384:	f7fd fe33 	bl	800bfee <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800e388:	4b0a      	ldr	r3, [pc, #40]	; (800e3b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	68fa      	ldr	r2, [r7, #12]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d202      	bcs.n	800e398 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800e392:	4a08      	ldr	r2, [pc, #32]	; (800e3b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	6013      	str	r3, [r2, #0]
}
 800e398:	bf00      	nop
 800e39a:	3718      	adds	r7, #24
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	20005ad4 	.word	0x20005ad4
 800e3a4:	200055fc 	.word	0x200055fc
 800e3a8:	20005abc 	.word	0x20005abc
 800e3ac:	20005a8c 	.word	0x20005a8c
 800e3b0:	20005a88 	.word	0x20005a88
 800e3b4:	20005af0 	.word	0x20005af0

0800e3b8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b088      	sub	sp, #32
 800e3bc:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800e3c2:	f000 fa59 	bl	800e878 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800e3c6:	4b18      	ldr	r3, [pc, #96]	; (800e428 <xTimerCreateTimerTask+0x70>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d020      	beq.n	800e410 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e3d6:	463a      	mov	r2, r7
 800e3d8:	1d39      	adds	r1, r7, #4
 800e3da:	f107 0308 	add.w	r3, r7, #8
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7fd fdbe 	bl	800bf60 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800e3e4:	6839      	ldr	r1, [r7, #0]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	68ba      	ldr	r2, [r7, #8]
 800e3ea:	9202      	str	r2, [sp, #8]
 800e3ec:	9301      	str	r3, [sp, #4]
 800e3ee:	2302      	movs	r3, #2
 800e3f0:	9300      	str	r3, [sp, #0]
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	460a      	mov	r2, r1
 800e3f6:	490d      	ldr	r1, [pc, #52]	; (800e42c <xTimerCreateTimerTask+0x74>)
 800e3f8:	480d      	ldr	r0, [pc, #52]	; (800e430 <xTimerCreateTimerTask+0x78>)
 800e3fa:	f7fe fe47 	bl	800d08c <xTaskCreateStatic>
 800e3fe:	4603      	mov	r3, r0
 800e400:	4a0c      	ldr	r2, [pc, #48]	; (800e434 <xTimerCreateTimerTask+0x7c>)
 800e402:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800e404:	4b0b      	ldr	r3, [pc, #44]	; (800e434 <xTimerCreateTimerTask+0x7c>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d001      	beq.n	800e410 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800e40c:	2301      	movs	r3, #1
 800e40e:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d102      	bne.n	800e41c <xTimerCreateTimerTask+0x64>
 800e416:	f000 fbff 	bl	800ec18 <ulSetInterruptMask>
 800e41a:	e7fe      	b.n	800e41a <xTimerCreateTimerTask+0x62>
        return xReturn;
 800e41c:	68fb      	ldr	r3, [r7, #12]
    }
 800e41e:	4618      	mov	r0, r3
 800e420:	3710      	adds	r7, #16
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}
 800e426:	bf00      	nop
 800e428:	20005b2c 	.word	0x20005b2c
 800e42c:	0801d78c 	.word	0x0801d78c
 800e430:	0800e4dd 	.word	0x0800e4dd
 800e434:	20005b30 	.word	0x20005b30

0800e438 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800e444:	e008      	b.n	800e458 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	699b      	ldr	r3, [r3, #24]
 800e44a:	68ba      	ldr	r2, [r7, #8]
 800e44c:	4413      	add	r3, r2
 800e44e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	6a1b      	ldr	r3, [r3, #32]
 800e454:	68f8      	ldr	r0, [r7, #12]
 800e456:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	699a      	ldr	r2, [r3, #24]
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	18d1      	adds	r1, r2, r3
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	68f8      	ldr	r0, [r7, #12]
 800e466:	f000 f8d5 	bl	800e614 <prvInsertTimerInActiveList>
 800e46a:	4603      	mov	r3, r0
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d1ea      	bne.n	800e446 <prvReloadTimer+0xe>
        }
    }
 800e470:	bf00      	nop
 800e472:	bf00      	nop
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
	...

0800e47c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b084      	sub	sp, #16
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e486:	4b14      	ldr	r3, [pc, #80]	; (800e4d8 <prvProcessExpiredTimer+0x5c>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	68db      	ldr	r3, [r3, #12]
 800e48c:	68db      	ldr	r3, [r3, #12]
 800e48e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	3304      	adds	r3, #4
 800e494:	4618      	mov	r0, r3
 800e496:	f7fd fde3 	bl	800c060 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4a0:	f003 0304 	and.w	r3, r3, #4
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d005      	beq.n	800e4b4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800e4a8:	683a      	ldr	r2, [r7, #0]
 800e4aa:	6879      	ldr	r1, [r7, #4]
 800e4ac:	68f8      	ldr	r0, [r7, #12]
 800e4ae:	f7ff ffc3 	bl	800e438 <prvReloadTimer>
 800e4b2:	e008      	b.n	800e4c6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4ba:	f023 0301 	bic.w	r3, r3, #1
 800e4be:	b2da      	uxtb	r2, r3
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	6a1b      	ldr	r3, [r3, #32]
 800e4ca:	68f8      	ldr	r0, [r7, #12]
 800e4cc:	4798      	blx	r3
    }
 800e4ce:	bf00      	nop
 800e4d0:	3710      	adds	r7, #16
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}
 800e4d6:	bf00      	nop
 800e4d8:	20005b24 	.word	0x20005b24

0800e4dc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b084      	sub	sp, #16
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e4e4:	f107 0308 	add.w	r3, r7, #8
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f000 f84f 	bl	800e58c <prvGetNextExpireTime>
 800e4ee:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	68f8      	ldr	r0, [r7, #12]
 800e4f6:	f000 f803 	bl	800e500 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800e4fa:	f000 f8cd 	bl	800e698 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e4fe:	e7f1      	b.n	800e4e4 <prvTimerTask+0x8>

0800e500 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800e500:	b580      	push	{r7, lr}
 800e502:	b084      	sub	sp, #16
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800e50a:	f7fe ffe1 	bl	800d4d0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e50e:	f107 0308 	add.w	r3, r7, #8
 800e512:	4618      	mov	r0, r3
 800e514:	f000 f85e 	bl	800e5d4 <prvSampleTimeNow>
 800e518:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d12a      	bne.n	800e576 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d10a      	bne.n	800e53c <prvProcessTimerOrBlockTask+0x3c>
 800e526:	687a      	ldr	r2, [r7, #4]
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d806      	bhi.n	800e53c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800e52e:	f7fe ffdd 	bl	800d4ec <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e532:	68f9      	ldr	r1, [r7, #12]
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f7ff ffa1 	bl	800e47c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800e53a:	e01e      	b.n	800e57a <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d008      	beq.n	800e554 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e542:	4b10      	ldr	r3, [pc, #64]	; (800e584 <prvProcessTimerOrBlockTask+0x84>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d101      	bne.n	800e550 <prvProcessTimerOrBlockTask+0x50>
 800e54c:	2301      	movs	r3, #1
 800e54e:	e000      	b.n	800e552 <prvProcessTimerOrBlockTask+0x52>
 800e550:	2300      	movs	r3, #0
 800e552:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e554:	4b0c      	ldr	r3, [pc, #48]	; (800e588 <prvProcessTimerOrBlockTask+0x88>)
 800e556:	6818      	ldr	r0, [r3, #0]
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	1ad3      	subs	r3, r2, r3
 800e55e:	683a      	ldr	r2, [r7, #0]
 800e560:	4619      	mov	r1, r3
 800e562:	f7fe fd5f 	bl	800d024 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800e566:	f7fe ffc1 	bl	800d4ec <xTaskResumeAll>
 800e56a:	4603      	mov	r3, r0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d104      	bne.n	800e57a <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800e570:	f000 fa00 	bl	800e974 <vPortYield>
    }
 800e574:	e001      	b.n	800e57a <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800e576:	f7fe ffb9 	bl	800d4ec <xTaskResumeAll>
    }
 800e57a:	bf00      	nop
 800e57c:	3710      	adds	r7, #16
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	20005b28 	.word	0x20005b28
 800e588:	20005b2c 	.word	0x20005b2c

0800e58c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800e58c:	b480      	push	{r7}
 800e58e:	b085      	sub	sp, #20
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e594:	4b0e      	ldr	r3, [pc, #56]	; (800e5d0 <prvGetNextExpireTime+0x44>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d101      	bne.n	800e5a2 <prvGetNextExpireTime+0x16>
 800e59e:	2201      	movs	r2, #1
 800e5a0:	e000      	b.n	800e5a4 <prvGetNextExpireTime+0x18>
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d105      	bne.n	800e5bc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e5b0:	4b07      	ldr	r3, [pc, #28]	; (800e5d0 <prvGetNextExpireTime+0x44>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	68db      	ldr	r3, [r3, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	60fb      	str	r3, [r7, #12]
 800e5ba:	e001      	b.n	800e5c0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
    }
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3714      	adds	r7, #20
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5cc:	4770      	bx	lr
 800e5ce:	bf00      	nop
 800e5d0:	20005b24 	.word	0x20005b24

0800e5d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b084      	sub	sp, #16
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800e5dc:	f7ff f872 	bl	800d6c4 <xTaskGetTickCount>
 800e5e0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800e5e2:	4b0b      	ldr	r3, [pc, #44]	; (800e610 <prvSampleTimeNow+0x3c>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	68fa      	ldr	r2, [r7, #12]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d205      	bcs.n	800e5f8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800e5ec:	f000 f91e 	bl	800e82c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	601a      	str	r2, [r3, #0]
 800e5f6:	e002      	b.n	800e5fe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800e5fe:	4a04      	ldr	r2, [pc, #16]	; (800e610 <prvSampleTimeNow+0x3c>)
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800e604:	68fb      	ldr	r3, [r7, #12]
    }
 800e606:	4618      	mov	r0, r3
 800e608:	3710      	adds	r7, #16
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	bf00      	nop
 800e610:	20005b34 	.word	0x20005b34

0800e614 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800e614:	b580      	push	{r7, lr}
 800e616:	b086      	sub	sp, #24
 800e618:	af00      	add	r7, sp, #0
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	60b9      	str	r1, [r7, #8]
 800e61e:	607a      	str	r2, [r7, #4]
 800e620:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800e622:	2300      	movs	r3, #0
 800e624:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	68ba      	ldr	r2, [r7, #8]
 800e62a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	68fa      	ldr	r2, [r7, #12]
 800e630:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800e632:	68ba      	ldr	r2, [r7, #8]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	429a      	cmp	r2, r3
 800e638:	d812      	bhi.n	800e660 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e63a:	687a      	ldr	r2, [r7, #4]
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	1ad2      	subs	r2, r2, r3
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	699b      	ldr	r3, [r3, #24]
 800e644:	429a      	cmp	r2, r3
 800e646:	d302      	bcc.n	800e64e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800e648:	2301      	movs	r3, #1
 800e64a:	617b      	str	r3, [r7, #20]
 800e64c:	e01b      	b.n	800e686 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e64e:	4b10      	ldr	r3, [pc, #64]	; (800e690 <prvInsertTimerInActiveList+0x7c>)
 800e650:	681a      	ldr	r2, [r3, #0]
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	3304      	adds	r3, #4
 800e656:	4619      	mov	r1, r3
 800e658:	4610      	mov	r0, r2
 800e65a:	f7fd fcc8 	bl	800bfee <vListInsert>
 800e65e:	e012      	b.n	800e686 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e660:	687a      	ldr	r2, [r7, #4]
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	429a      	cmp	r2, r3
 800e666:	d206      	bcs.n	800e676 <prvInsertTimerInActiveList+0x62>
 800e668:	68ba      	ldr	r2, [r7, #8]
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d302      	bcc.n	800e676 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800e670:	2301      	movs	r3, #1
 800e672:	617b      	str	r3, [r7, #20]
 800e674:	e007      	b.n	800e686 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e676:	4b07      	ldr	r3, [pc, #28]	; (800e694 <prvInsertTimerInActiveList+0x80>)
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	3304      	adds	r3, #4
 800e67e:	4619      	mov	r1, r3
 800e680:	4610      	mov	r0, r2
 800e682:	f7fd fcb4 	bl	800bfee <vListInsert>
            }
        }

        return xProcessTimerNow;
 800e686:	697b      	ldr	r3, [r7, #20]
    }
 800e688:	4618      	mov	r0, r3
 800e68a:	3718      	adds	r7, #24
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}
 800e690:	20005b28 	.word	0x20005b28
 800e694:	20005b24 	.word	0x20005b24

0800e698 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800e698:	b580      	push	{r7, lr}
 800e69a:	b088      	sub	sp, #32
 800e69c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e69e:	e0b2      	b.n	800e806 <prvProcessReceivedCommands+0x16e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	da10      	bge.n	800e6c8 <prvProcessReceivedCommands+0x30>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e6a6:	1d3b      	adds	r3, r7, #4
 800e6a8:	3304      	adds	r3, #4
 800e6aa:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d102      	bne.n	800e6b8 <prvProcessReceivedCommands+0x20>
 800e6b2:	f000 fab1 	bl	800ec18 <ulSetInterruptMask>
 800e6b6:	e7fe      	b.n	800e6b6 <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e6b8:	69fb      	ldr	r3, [r7, #28]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	69fa      	ldr	r2, [r7, #28]
 800e6be:	6850      	ldr	r0, [r2, #4]
 800e6c0:	69fa      	ldr	r2, [r7, #28]
 800e6c2:	6892      	ldr	r2, [r2, #8]
 800e6c4:	4611      	mov	r1, r2
 800e6c6:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	f2c0 809b 	blt.w	800e806 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e6d4:	69bb      	ldr	r3, [r7, #24]
 800e6d6:	695b      	ldr	r3, [r3, #20]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d004      	beq.n	800e6e6 <prvProcessReceivedCommands+0x4e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e6dc:	69bb      	ldr	r3, [r7, #24]
 800e6de:	3304      	adds	r3, #4
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7fd fcbd 	bl	800c060 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e6e6:	463b      	mov	r3, r7
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7ff ff73 	bl	800e5d4 <prvSampleTimeNow>
 800e6ee:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	3b01      	subs	r3, #1
 800e6f4:	2b08      	cmp	r3, #8
 800e6f6:	f200 8085 	bhi.w	800e804 <prvProcessReceivedCommands+0x16c>
 800e6fa:	a201      	add	r2, pc, #4	; (adr r2, 800e700 <prvProcessReceivedCommands+0x68>)
 800e6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e700:	0800e725 	.word	0x0800e725
 800e704:	0800e725 	.word	0x0800e725
 800e708:	0800e78d 	.word	0x0800e78d
 800e70c:	0800e7a1 	.word	0x0800e7a1
 800e710:	0800e7db 	.word	0x0800e7db
 800e714:	0800e725 	.word	0x0800e725
 800e718:	0800e725 	.word	0x0800e725
 800e71c:	0800e78d 	.word	0x0800e78d
 800e720:	0800e7a1 	.word	0x0800e7a1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e724:	69bb      	ldr	r3, [r7, #24]
 800e726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e72a:	f043 0301 	orr.w	r3, r3, #1
 800e72e:	b2da      	uxtb	r2, r3
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e736:	68ba      	ldr	r2, [r7, #8]
 800e738:	69bb      	ldr	r3, [r7, #24]
 800e73a:	699b      	ldr	r3, [r3, #24]
 800e73c:	18d1      	adds	r1, r2, r3
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	697a      	ldr	r2, [r7, #20]
 800e742:	69b8      	ldr	r0, [r7, #24]
 800e744:	f7ff ff66 	bl	800e614 <prvInsertTimerInActiveList>
 800e748:	4603      	mov	r3, r0
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d05b      	beq.n	800e806 <prvProcessReceivedCommands+0x16e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e754:	f003 0304 	and.w	r3, r3, #4
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d009      	beq.n	800e770 <prvProcessReceivedCommands+0xd8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800e75c:	68ba      	ldr	r2, [r7, #8]
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	699b      	ldr	r3, [r3, #24]
 800e762:	4413      	add	r3, r2
 800e764:	697a      	ldr	r2, [r7, #20]
 800e766:	4619      	mov	r1, r3
 800e768:	69b8      	ldr	r0, [r7, #24]
 800e76a:	f7ff fe65 	bl	800e438 <prvReloadTimer>
 800e76e:	e008      	b.n	800e782 <prvProcessReceivedCommands+0xea>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e770:	69bb      	ldr	r3, [r7, #24]
 800e772:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e776:	f023 0301 	bic.w	r3, r3, #1
 800e77a:	b2da      	uxtb	r2, r3
 800e77c:	69bb      	ldr	r3, [r7, #24]
 800e77e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e782:	69bb      	ldr	r3, [r7, #24]
 800e784:	6a1b      	ldr	r3, [r3, #32]
 800e786:	69b8      	ldr	r0, [r7, #24]
 800e788:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800e78a:	e03c      	b.n	800e806 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e792:	f023 0301 	bic.w	r3, r3, #1
 800e796:	b2da      	uxtb	r2, r3
 800e798:	69bb      	ldr	r3, [r7, #24]
 800e79a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800e79e:	e032      	b.n	800e806 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e7a0:	69bb      	ldr	r3, [r7, #24]
 800e7a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7a6:	f043 0301 	orr.w	r3, r3, #1
 800e7aa:	b2da      	uxtb	r2, r3
 800e7ac:	69bb      	ldr	r3, [r7, #24]
 800e7ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e7b2:	68ba      	ldr	r2, [r7, #8]
 800e7b4:	69bb      	ldr	r3, [r7, #24]
 800e7b6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e7b8:	69bb      	ldr	r3, [r7, #24]
 800e7ba:	699b      	ldr	r3, [r3, #24]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d102      	bne.n	800e7c6 <prvProcessReceivedCommands+0x12e>
 800e7c0:	f000 fa2a 	bl	800ec18 <ulSetInterruptMask>
 800e7c4:	e7fe      	b.n	800e7c4 <prvProcessReceivedCommands+0x12c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	699a      	ldr	r2, [r3, #24]
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	18d1      	adds	r1, r2, r3
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	697a      	ldr	r2, [r7, #20]
 800e7d2:	69b8      	ldr	r0, [r7, #24]
 800e7d4:	f7ff ff1e 	bl	800e614 <prvInsertTimerInActiveList>
                        break;
 800e7d8:	e015      	b.n	800e806 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e7da:	69bb      	ldr	r3, [r7, #24]
 800e7dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7e0:	f003 0302 	and.w	r3, r3, #2
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d103      	bne.n	800e7f0 <prvProcessReceivedCommands+0x158>
                            {
                                vPortFree( pxTimer );
 800e7e8:	69b8      	ldr	r0, [r7, #24]
 800e7ea:	f000 fb1f 	bl	800ee2c <vPortFree>
 800e7ee:	e00a      	b.n	800e806 <prvProcessReceivedCommands+0x16e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e7f0:	69bb      	ldr	r3, [r7, #24]
 800e7f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7f6:	f023 0301 	bic.w	r3, r3, #1
 800e7fa:	b2da      	uxtb	r2, r3
 800e7fc:	69bb      	ldr	r3, [r7, #24]
 800e7fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800e802:	e000      	b.n	800e806 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800e804:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e806:	4b08      	ldr	r3, [pc, #32]	; (800e828 <prvProcessReceivedCommands+0x190>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	1d39      	adds	r1, r7, #4
 800e80c:	2200      	movs	r2, #0
 800e80e:	4618      	mov	r0, r3
 800e810:	f7fe f82c 	bl	800c86c <xQueueReceive>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	f47f af42 	bne.w	800e6a0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800e81c:	bf00      	nop
 800e81e:	bf00      	nop
 800e820:	3720      	adds	r7, #32
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	20005b2c 	.word	0x20005b2c

0800e82c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e832:	e009      	b.n	800e848 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e834:	4b0e      	ldr	r3, [pc, #56]	; (800e870 <prvSwitchTimerLists+0x44>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	68db      	ldr	r3, [r3, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800e83e:	f04f 31ff 	mov.w	r1, #4294967295
 800e842:	6838      	ldr	r0, [r7, #0]
 800e844:	f7ff fe1a 	bl	800e47c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e848:	4b09      	ldr	r3, [pc, #36]	; (800e870 <prvSwitchTimerLists+0x44>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d1f0      	bne.n	800e834 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800e852:	4b07      	ldr	r3, [pc, #28]	; (800e870 <prvSwitchTimerLists+0x44>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800e858:	4b06      	ldr	r3, [pc, #24]	; (800e874 <prvSwitchTimerLists+0x48>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4a04      	ldr	r2, [pc, #16]	; (800e870 <prvSwitchTimerLists+0x44>)
 800e85e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800e860:	4a04      	ldr	r2, [pc, #16]	; (800e874 <prvSwitchTimerLists+0x48>)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6013      	str	r3, [r2, #0]
    }
 800e866:	bf00      	nop
 800e868:	3708      	adds	r7, #8
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	20005b24 	.word	0x20005b24
 800e874:	20005b28 	.word	0x20005b28

0800e878 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800e87e:	f000 f88b 	bl	800e998 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800e882:	4b15      	ldr	r3, [pc, #84]	; (800e8d8 <prvCheckForValidListAndQueue+0x60>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d120      	bne.n	800e8cc <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800e88a:	4814      	ldr	r0, [pc, #80]	; (800e8dc <prvCheckForValidListAndQueue+0x64>)
 800e88c:	f7fd fb82 	bl	800bf94 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800e890:	4813      	ldr	r0, [pc, #76]	; (800e8e0 <prvCheckForValidListAndQueue+0x68>)
 800e892:	f7fd fb7f 	bl	800bf94 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800e896:	4b13      	ldr	r3, [pc, #76]	; (800e8e4 <prvCheckForValidListAndQueue+0x6c>)
 800e898:	4a10      	ldr	r2, [pc, #64]	; (800e8dc <prvCheckForValidListAndQueue+0x64>)
 800e89a:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800e89c:	4b12      	ldr	r3, [pc, #72]	; (800e8e8 <prvCheckForValidListAndQueue+0x70>)
 800e89e:	4a10      	ldr	r2, [pc, #64]	; (800e8e0 <prvCheckForValidListAndQueue+0x68>)
 800e8a0:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	9300      	str	r3, [sp, #0]
 800e8a6:	4b11      	ldr	r3, [pc, #68]	; (800e8ec <prvCheckForValidListAndQueue+0x74>)
 800e8a8:	4a11      	ldr	r2, [pc, #68]	; (800e8f0 <prvCheckForValidListAndQueue+0x78>)
 800e8aa:	2110      	movs	r1, #16
 800e8ac:	200a      	movs	r0, #10
 800e8ae:	f7fd fc78 	bl	800c1a2 <xQueueGenericCreateStatic>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	4a08      	ldr	r2, [pc, #32]	; (800e8d8 <prvCheckForValidListAndQueue+0x60>)
 800e8b6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800e8b8:	4b07      	ldr	r3, [pc, #28]	; (800e8d8 <prvCheckForValidListAndQueue+0x60>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d005      	beq.n	800e8cc <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e8c0:	4b05      	ldr	r3, [pc, #20]	; (800e8d8 <prvCheckForValidListAndQueue+0x60>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	490b      	ldr	r1, [pc, #44]	; (800e8f4 <prvCheckForValidListAndQueue+0x7c>)
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f7fe fb3a 	bl	800cf40 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800e8cc:	f000 f876 	bl	800e9bc <vPortExitCritical>
    }
 800e8d0:	bf00      	nop
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	20005b2c 	.word	0x20005b2c
 800e8dc:	20005afc 	.word	0x20005afc
 800e8e0:	20005b10 	.word	0x20005b10
 800e8e4:	20005b24 	.word	0x20005b24
 800e8e8:	20005b28 	.word	0x20005b28
 800e8ec:	20005bd8 	.word	0x20005bd8
 800e8f0:	20005b38 	.word	0x20005b38
 800e8f4:	0801d794 	.word	0x0801d794

0800e8f8 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e8fc:	4b0b      	ldr	r3, [pc, #44]	; (800e92c <vPortSetupTimerInterrupt+0x34>)
 800e8fe:	2200      	movs	r2, #0
 800e900:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e902:	4b0b      	ldr	r3, [pc, #44]	; (800e930 <vPortSetupTimerInterrupt+0x38>)
 800e904:	2200      	movs	r2, #0
 800e906:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e908:	4b0a      	ldr	r3, [pc, #40]	; (800e934 <vPortSetupTimerInterrupt+0x3c>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4a0a      	ldr	r2, [pc, #40]	; (800e938 <vPortSetupTimerInterrupt+0x40>)
 800e90e:	fba2 2303 	umull	r2, r3, r2, r3
 800e912:	099b      	lsrs	r3, r3, #6
 800e914:	4a09      	ldr	r2, [pc, #36]	; (800e93c <vPortSetupTimerInterrupt+0x44>)
 800e916:	3b01      	subs	r3, #1
 800e918:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800e91a:	4b04      	ldr	r3, [pc, #16]	; (800e92c <vPortSetupTimerInterrupt+0x34>)
 800e91c:	2207      	movs	r2, #7
 800e91e:	601a      	str	r2, [r3, #0]
}
 800e920:	bf00      	nop
 800e922:	46bd      	mov	sp, r7
 800e924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e928:	4770      	bx	lr
 800e92a:	bf00      	nop
 800e92c:	e000e010 	.word	0xe000e010
 800e930:	e000e018 	.word	0xe000e018
 800e934:	20000014 	.word	0x20000014
 800e938:	10624dd3 	.word	0x10624dd3
 800e93c:	e000e014 	.word	0xe000e014

0800e940 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800e946:	2300      	movs	r3, #0
 800e948:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800e94a:	4b09      	ldr	r3, [pc, #36]	; (800e970 <prvTaskExitError+0x30>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e952:	d002      	beq.n	800e95a <prvTaskExitError+0x1a>
 800e954:	f000 f960 	bl	800ec18 <ulSetInterruptMask>
 800e958:	e7fe      	b.n	800e958 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800e95a:	f000 f95d 	bl	800ec18 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800e95e:	bf00      	nop
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d0fc      	beq.n	800e960 <prvTaskExitError+0x20>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800e966:	bf00      	nop
 800e968:	bf00      	nop
 800e96a:	3708      	adds	r7, #8
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}
 800e970:	20000024 	.word	0x20000024

0800e974 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800e974:	b480      	push	{r7}
 800e976:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e978:	4b06      	ldr	r3, [pc, #24]	; (800e994 <vPortYield+0x20>)
 800e97a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e97e:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800e980:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800e984:	f3bf 8f6f 	isb	sy
}
 800e988:	bf00      	nop
 800e98a:	46bd      	mov	sp, r7
 800e98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e990:	4770      	bx	lr
 800e992:	bf00      	nop
 800e994:	e000ed04 	.word	0xe000ed04

0800e998 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800e99c:	f000 f93c 	bl	800ec18 <ulSetInterruptMask>
    ulCriticalNesting++;
 800e9a0:	4b05      	ldr	r3, [pc, #20]	; (800e9b8 <vPortEnterCritical+0x20>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	3301      	adds	r3, #1
 800e9a6:	4a04      	ldr	r2, [pc, #16]	; (800e9b8 <vPortEnterCritical+0x20>)
 800e9a8:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800e9aa:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800e9ae:	f3bf 8f6f 	isb	sy
}
 800e9b2:	bf00      	nop
 800e9b4:	bd80      	pop	{r7, pc}
 800e9b6:	bf00      	nop
 800e9b8:	20000024 	.word	0x20000024

0800e9bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800e9c0:	4b0a      	ldr	r3, [pc, #40]	; (800e9ec <vPortExitCritical+0x30>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d102      	bne.n	800e9ce <vPortExitCritical+0x12>
 800e9c8:	f000 f926 	bl	800ec18 <ulSetInterruptMask>
 800e9cc:	e7fe      	b.n	800e9cc <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800e9ce:	4b07      	ldr	r3, [pc, #28]	; (800e9ec <vPortExitCritical+0x30>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	3b01      	subs	r3, #1
 800e9d4:	4a05      	ldr	r2, [pc, #20]	; (800e9ec <vPortExitCritical+0x30>)
 800e9d6:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800e9d8:	4b04      	ldr	r3, [pc, #16]	; (800e9ec <vPortExitCritical+0x30>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d102      	bne.n	800e9e6 <vPortExitCritical+0x2a>
    {
        portENABLE_INTERRUPTS();
 800e9e0:	2000      	movs	r0, #0
 800e9e2:	f000 f926 	bl	800ec32 <vClearInterruptMask>
    }
}
 800e9e6:	bf00      	nop
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	20000024 	.word	0x20000024

0800e9f0 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b082      	sub	sp, #8
 800e9f4:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800e9f6:	f000 f90f 	bl	800ec18 <ulSetInterruptMask>
 800e9fa:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800e9fc:	f7fe fe90 	bl	800d720 <xTaskIncrementTick>
 800ea00:	4603      	mov	r3, r0
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d003      	beq.n	800ea0e <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea06:	4b05      	ldr	r3, [pc, #20]	; (800ea1c <xPortSysTickHandler+0x2c>)
 800ea08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea0c:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f000 f90f 	bl	800ec32 <vClearInterruptMask>
}
 800ea14:	bf00      	nop
 800ea16:	3708      	adds	r7, #8
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	e000ed04 	.word	0xe000ed04

0800ea20 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	699b      	ldr	r3, [r3, #24]
 800ea2c:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	3b02      	subs	r3, #2
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800ea36:	7afb      	ldrb	r3, [r7, #11]
 800ea38:	2b02      	cmp	r3, #2
 800ea3a:	d102      	bne.n	800ea42 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800ea3c:	f000 f8b8 	bl	800ebb0 <vRestoreContextOfFirstTask>
            break;
 800ea40:	e002      	b.n	800ea48 <vPortSVCHandler_C+0x28>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800ea42:	f000 f8e9 	bl	800ec18 <ulSetInterruptMask>
 800ea46:	e7fe      	b.n	800ea46 <vPortSVCHandler_C+0x26>
    }
}
 800ea48:	bf00      	nop
 800ea4a:	3710      	adds	r7, #16
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}

0800ea50 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 800ea50:	b480      	push	{r7}
 800ea52:	b085      	sub	sp, #20
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	60f8      	str	r0, [r7, #12]
 800ea58:	60b9      	str	r1, [r7, #8]
 800ea5a:	607a      	str	r2, [r7, #4]
 800ea5c:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	3b04      	subs	r3, #4
 800ea62:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ea6a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	3b04      	subs	r3, #4
 800ea70:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800ea72:	687a      	ldr	r2, [r7, #4]
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	3b04      	subs	r3, #4
 800ea7c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800ea7e:	4a38      	ldr	r2, [pc, #224]	; (800eb60 <pxPortInitialiseStack+0x110>)
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	3b04      	subs	r3, #4
 800ea88:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800ea90:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	3b04      	subs	r3, #4
 800ea96:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800ea9e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	3b04      	subs	r3, #4
 800eaa4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800eaac:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	3b04      	subs	r3, #4
 800eab2:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800eaba:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	3b04      	subs	r3, #4
 800eac0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800eac2:	683a      	ldr	r2, [r7, #0]
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	3b04      	subs	r3, #4
 800eacc:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800ead4:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	3b04      	subs	r3, #4
 800eada:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800eae2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	3b04      	subs	r3, #4
 800eae8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800eaf0:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	3b04      	subs	r3, #4
 800eaf6:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800eafe:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	3b04      	subs	r3, #4
 800eb04:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800eb0c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	3b04      	subs	r3, #4
 800eb12:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800eb1a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	3b04      	subs	r3, #4
 800eb20:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800eb28:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	3b04      	subs	r3, #4
 800eb2e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800eb36:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	3b04      	subs	r3, #4
 800eb3c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800eb44:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	3b04      	subs	r3, #4
 800eb4a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800eb4c:	68ba      	ldr	r2, [r7, #8]
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 800eb52:	68fb      	ldr	r3, [r7, #12]
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3714      	adds	r7, #20
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr
 800eb60:	0800e941 	.word	0x0800e941

0800eb64 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800eb68:	4b0c      	ldr	r3, [pc, #48]	; (800eb9c <xPortStartScheduler+0x38>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	4a0b      	ldr	r2, [pc, #44]	; (800eb9c <xPortStartScheduler+0x38>)
 800eb6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb72:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800eb74:	4b09      	ldr	r3, [pc, #36]	; (800eb9c <xPortStartScheduler+0x38>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	4a08      	ldr	r2, [pc, #32]	; (800eb9c <xPortStartScheduler+0x38>)
 800eb7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb7e:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800eb80:	f7ff feba 	bl	800e8f8 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800eb84:	4b06      	ldr	r3, [pc, #24]	; (800eba0 <xPortStartScheduler+0x3c>)
 800eb86:	2200      	movs	r2, #0
 800eb88:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 800eb8a:	f000 f831 	bl	800ebf0 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800eb8e:	f7fe fed7 	bl	800d940 <vTaskSwitchContext>
    prvTaskExitError();
 800eb92:	f7ff fed5 	bl	800e940 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800eb96:	2300      	movs	r3, #0
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	bd80      	pop	{r7, pc}
 800eb9c:	e000ed20 	.word	0xe000ed20
 800eba0:	20000024 	.word	0x20000024
	...

0800ebb0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ebb0:	4a0b      	ldr	r2, [pc, #44]	; (800ebe0 <pxCurrentTCBConst2>)
 800ebb2:	6811      	ldr	r1, [r2, #0]
 800ebb4:	6808      	ldr	r0, [r1, #0]
 800ebb6:	c806      	ldmia	r0!, {r1, r2}
 800ebb8:	f381 880b 	msr	PSPLIM, r1
 800ebbc:	2102      	movs	r1, #2
 800ebbe:	f381 8814 	msr	CONTROL, r1
 800ebc2:	3020      	adds	r0, #32
 800ebc4:	f380 8809 	msr	PSP, r0
 800ebc8:	f3bf 8f6f 	isb	sy
 800ebcc:	f04f 0000 	mov.w	r0, #0
 800ebd0:	f380 8811 	msr	BASEPRI, r0
 800ebd4:	4710      	bx	r2
 800ebd6:	bf00      	nop
 800ebd8:	f3af 8000 	nop.w
 800ebdc:	f3af 8000 	nop.w

0800ebe0 <pxCurrentTCBConst2>:
 800ebe0:	200055fc 	.word	0x200055fc
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800ebe4:	bf00      	nop
 800ebe6:	bf00      	nop
	...

0800ebf0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ebf0:	4807      	ldr	r0, [pc, #28]	; (800ec10 <xVTORConst>)
 800ebf2:	6800      	ldr	r0, [r0, #0]
 800ebf4:	6800      	ldr	r0, [r0, #0]
 800ebf6:	f380 8808 	msr	MSP, r0
 800ebfa:	b662      	cpsie	i
 800ebfc:	b661      	cpsie	f
 800ebfe:	f3bf 8f4f 	dsb	sy
 800ec02:	f3bf 8f6f 	isb	sy
 800ec06:	df02      	svc	2
 800ec08:	bf00      	nop
 800ec0a:	bf00      	nop
 800ec0c:	f3af 8000 	nop.w

0800ec10 <xVTORConst>:
 800ec10:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800ec14:	bf00      	nop
 800ec16:	bf00      	nop

0800ec18 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ec18:	f3ef 8011 	mrs	r0, BASEPRI
 800ec1c:	f04f 0150 	mov.w	r1, #80	; 0x50
 800ec20:	f381 8811 	msr	BASEPRI, r1
 800ec24:	f3bf 8f4f 	dsb	sy
 800ec28:	f3bf 8f6f 	isb	sy
 800ec2c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800ec2e:	bf00      	nop
 800ec30:	4618      	mov	r0, r3

0800ec32 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ec32:	f380 8811 	msr	BASEPRI, r0
 800ec36:	f3bf 8f4f 	dsb	sy
 800ec3a:	f3bf 8f6f 	isb	sy
 800ec3e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800ec40:	bf00      	nop
	...

0800ec50 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ec50:	f3ef 8009 	mrs	r0, PSP
 800ec54:	f3ef 820b 	mrs	r2, PSPLIM
 800ec58:	4673      	mov	r3, lr
 800ec5a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800ec5e:	4a10      	ldr	r2, [pc, #64]	; (800eca0 <pxCurrentTCBConst>)
 800ec60:	6811      	ldr	r1, [r2, #0]
 800ec62:	6008      	str	r0, [r1, #0]
 800ec64:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ec68:	f380 8811 	msr	BASEPRI, r0
 800ec6c:	f3bf 8f4f 	dsb	sy
 800ec70:	f3bf 8f6f 	isb	sy
 800ec74:	f7fe fe64 	bl	800d940 <vTaskSwitchContext>
 800ec78:	f04f 0000 	mov.w	r0, #0
 800ec7c:	f380 8811 	msr	BASEPRI, r0
 800ec80:	4a07      	ldr	r2, [pc, #28]	; (800eca0 <pxCurrentTCBConst>)
 800ec82:	6811      	ldr	r1, [r2, #0]
 800ec84:	6808      	ldr	r0, [r1, #0]
 800ec86:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800ec8a:	f382 880b 	msr	PSPLIM, r2
 800ec8e:	f380 8809 	msr	PSP, r0
 800ec92:	4718      	bx	r3
 800ec94:	f3af 8000 	nop.w
 800ec98:	f3af 8000 	nop.w
 800ec9c:	f3af 8000 	nop.w

0800eca0 <pxCurrentTCBConst>:
 800eca0:	200055fc 	.word	0x200055fc
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800eca4:	bf00      	nop
 800eca6:	bf00      	nop
	...

0800ecb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ecb0:	f01e 0f04 	tst.w	lr, #4
 800ecb4:	bf0c      	ite	eq
 800ecb6:	f3ef 8008 	mrseq	r0, MSP
 800ecba:	f3ef 8009 	mrsne	r0, PSP
 800ecbe:	4904      	ldr	r1, [pc, #16]	; (800ecd0 <svchandler_address_const>)
 800ecc0:	4708      	bx	r1
 800ecc2:	bf00      	nop
 800ecc4:	f3af 8000 	nop.w
 800ecc8:	f3af 8000 	nop.w
 800eccc:	f3af 8000 	nop.w

0800ecd0 <svchandler_address_const>:
 800ecd0:	0800ea21 	.word	0x0800ea21
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800ecd4:	bf00      	nop
 800ecd6:	bf00      	nop

0800ecd8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b088      	sub	sp, #32
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800ece0:	2300      	movs	r3, #0
 800ece2:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800ece4:	f7fe fbf4 	bl	800d4d0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800ece8:	4b4b      	ldr	r3, [pc, #300]	; (800ee18 <pvPortMalloc+0x140>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d101      	bne.n	800ecf4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800ecf0:	f000 f8e8 	bl	800eec4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d012      	beq.n	800ed20 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800ecfa:	2208      	movs	r2, #8
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f003 0307 	and.w	r3, r3, #7
 800ed02:	1ad3      	subs	r3, r2, r3
 800ed04:	3308      	adds	r3, #8
 800ed06:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	43db      	mvns	r3, r3
 800ed0c:	687a      	ldr	r2, [r7, #4]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d804      	bhi.n	800ed1c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800ed12:	687a      	ldr	r2, [r7, #4]
 800ed14:	693b      	ldr	r3, [r7, #16]
 800ed16:	4413      	add	r3, r2
 800ed18:	607b      	str	r3, [r7, #4]
 800ed1a:	e001      	b.n	800ed20 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	db68      	blt.n	800edf8 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d065      	beq.n	800edf8 <pvPortMalloc+0x120>
 800ed2c:	4b3b      	ldr	r3, [pc, #236]	; (800ee1c <pvPortMalloc+0x144>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	687a      	ldr	r2, [r7, #4]
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d860      	bhi.n	800edf8 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800ed36:	4b3a      	ldr	r3, [pc, #232]	; (800ee20 <pvPortMalloc+0x148>)
 800ed38:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800ed3a:	4b39      	ldr	r3, [pc, #228]	; (800ee20 <pvPortMalloc+0x148>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed40:	e004      	b.n	800ed4c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800ed42:	69fb      	ldr	r3, [r7, #28]
 800ed44:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800ed46:	69fb      	ldr	r3, [r7, #28]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed4c:	69fb      	ldr	r3, [r7, #28]
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	687a      	ldr	r2, [r7, #4]
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d903      	bls.n	800ed5e <pvPortMalloc+0x86>
 800ed56:	69fb      	ldr	r3, [r7, #28]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d1f1      	bne.n	800ed42 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800ed5e:	4b2e      	ldr	r3, [pc, #184]	; (800ee18 <pvPortMalloc+0x140>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	69fa      	ldr	r2, [r7, #28]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d047      	beq.n	800edf8 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed68:	69bb      	ldr	r3, [r7, #24]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	2208      	movs	r2, #8
 800ed6e:	4413      	add	r3, r2
 800ed70:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed72:	69fb      	ldr	r3, [r7, #28]
 800ed74:	681a      	ldr	r2, [r3, #0]
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ed7a:	69fb      	ldr	r3, [r7, #28]
 800ed7c:	685a      	ldr	r2, [r3, #4]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	1ad2      	subs	r2, r2, r3
 800ed82:	2308      	movs	r3, #8
 800ed84:	005b      	lsls	r3, r3, #1
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d917      	bls.n	800edba <pvPortMalloc+0xe2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ed8a:	69fa      	ldr	r2, [r7, #28]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	4413      	add	r3, r2
 800ed90:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	f003 0307 	and.w	r3, r3, #7
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d002      	beq.n	800eda2 <pvPortMalloc+0xca>
 800ed9c:	f7ff ff3c 	bl	800ec18 <ulSetInterruptMask>
 800eda0:	e7fe      	b.n	800eda0 <pvPortMalloc+0xc8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	685a      	ldr	r2, [r3, #4]
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	1ad2      	subs	r2, r2, r3
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800edae:	69fb      	ldr	r3, [r7, #28]
 800edb0:	687a      	ldr	r2, [r7, #4]
 800edb2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800edb4:	68f8      	ldr	r0, [r7, #12]
 800edb6:	f000 f8e1 	bl	800ef7c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800edba:	4b18      	ldr	r3, [pc, #96]	; (800ee1c <pvPortMalloc+0x144>)
 800edbc:	681a      	ldr	r2, [r3, #0]
 800edbe:	69fb      	ldr	r3, [r7, #28]
 800edc0:	685b      	ldr	r3, [r3, #4]
 800edc2:	1ad3      	subs	r3, r2, r3
 800edc4:	4a15      	ldr	r2, [pc, #84]	; (800ee1c <pvPortMalloc+0x144>)
 800edc6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800edc8:	4b14      	ldr	r3, [pc, #80]	; (800ee1c <pvPortMalloc+0x144>)
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	4b15      	ldr	r3, [pc, #84]	; (800ee24 <pvPortMalloc+0x14c>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d203      	bcs.n	800eddc <pvPortMalloc+0x104>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800edd4:	4b11      	ldr	r3, [pc, #68]	; (800ee1c <pvPortMalloc+0x144>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a12      	ldr	r2, [pc, #72]	; (800ee24 <pvPortMalloc+0x14c>)
 800edda:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	685b      	ldr	r3, [r3, #4]
 800ede0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800ede8:	69fb      	ldr	r3, [r7, #28]
 800edea:	2200      	movs	r2, #0
 800edec:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800edee:	4b0e      	ldr	r3, [pc, #56]	; (800ee28 <pvPortMalloc+0x150>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	3301      	adds	r3, #1
 800edf4:	4a0c      	ldr	r2, [pc, #48]	; (800ee28 <pvPortMalloc+0x150>)
 800edf6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800edf8:	f7fe fb78 	bl	800d4ec <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	f003 0307 	and.w	r3, r3, #7
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d002      	beq.n	800ee0c <pvPortMalloc+0x134>
 800ee06:	f7ff ff07 	bl	800ec18 <ulSetInterruptMask>
 800ee0a:	e7fe      	b.n	800ee0a <pvPortMalloc+0x132>
    return pvReturn;
 800ee0c:	697b      	ldr	r3, [r7, #20]
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3720      	adds	r7, #32
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	bf00      	nop
 800ee18:	2000dc30 	.word	0x2000dc30
 800ee1c:	2000dc34 	.word	0x2000dc34
 800ee20:	2000dc28 	.word	0x2000dc28
 800ee24:	2000dc38 	.word	0x2000dc38
 800ee28:	2000dc3c 	.word	0x2000dc3c

0800ee2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d039      	beq.n	800eeb2 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800ee3e:	2308      	movs	r3, #8
 800ee40:	425b      	negs	r3, r3
 800ee42:	68fa      	ldr	r2, [r7, #12]
 800ee44:	4413      	add	r3, r2
 800ee46:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	db02      	blt.n	800ee5a <vPortFree+0x2e>
 800ee54:	f7ff fee0 	bl	800ec18 <ulSetInterruptMask>
 800ee58:	e7fe      	b.n	800ee58 <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d002      	beq.n	800ee68 <vPortFree+0x3c>
 800ee62:	f7ff fed9 	bl	800ec18 <ulSetInterruptMask>
 800ee66:	e7fe      	b.n	800ee66 <vPortFree+0x3a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	685b      	ldr	r3, [r3, #4]
 800ee6c:	0fdb      	lsrs	r3, r3, #31
 800ee6e:	f003 0301 	and.w	r3, r3, #1
 800ee72:	b2db      	uxtb	r3, r3
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d01c      	beq.n	800eeb2 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d118      	bne.n	800eeb2 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	685b      	ldr	r3, [r3, #4]
 800ee84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800ee8c:	f7fe fb20 	bl	800d4d0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	685a      	ldr	r2, [r3, #4]
 800ee94:	4b09      	ldr	r3, [pc, #36]	; (800eebc <vPortFree+0x90>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	4413      	add	r3, r2
 800ee9a:	4a08      	ldr	r2, [pc, #32]	; (800eebc <vPortFree+0x90>)
 800ee9c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ee9e:	68b8      	ldr	r0, [r7, #8]
 800eea0:	f000 f86c 	bl	800ef7c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800eea4:	4b06      	ldr	r3, [pc, #24]	; (800eec0 <vPortFree+0x94>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	3301      	adds	r3, #1
 800eeaa:	4a05      	ldr	r2, [pc, #20]	; (800eec0 <vPortFree+0x94>)
 800eeac:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800eeae:	f7fe fb1d 	bl	800d4ec <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800eeb2:	bf00      	nop
 800eeb4:	3710      	adds	r7, #16
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	2000dc34 	.word	0x2000dc34
 800eec0:	2000dc40 	.word	0x2000dc40

0800eec4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800eec4:	b480      	push	{r7}
 800eec6:	b085      	sub	sp, #20
 800eec8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eeca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eece:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800eed0:	4b25      	ldr	r3, [pc, #148]	; (800ef68 <prvHeapInit+0xa4>)
 800eed2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	f003 0307 	and.w	r3, r3, #7
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d00c      	beq.n	800eef8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	3307      	adds	r3, #7
 800eee2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	f023 0307 	bic.w	r3, r3, #7
 800eeea:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800eeec:	68ba      	ldr	r2, [r7, #8]
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	1ad3      	subs	r3, r2, r3
 800eef2:	4a1d      	ldr	r2, [pc, #116]	; (800ef68 <prvHeapInit+0xa4>)
 800eef4:	4413      	add	r3, r2
 800eef6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eefc:	4a1b      	ldr	r2, [pc, #108]	; (800ef6c <prvHeapInit+0xa8>)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800ef02:	4b1a      	ldr	r3, [pc, #104]	; (800ef6c <prvHeapInit+0xa8>)
 800ef04:	2200      	movs	r2, #0
 800ef06:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	68ba      	ldr	r2, [r7, #8]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800ef10:	2208      	movs	r2, #8
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	1a9b      	subs	r3, r3, r2
 800ef16:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f023 0307 	bic.w	r3, r3, #7
 800ef1e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	4a13      	ldr	r2, [pc, #76]	; (800ef70 <prvHeapInit+0xac>)
 800ef24:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800ef26:	4b12      	ldr	r3, [pc, #72]	; (800ef70 <prvHeapInit+0xac>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800ef2e:	4b10      	ldr	r3, [pc, #64]	; (800ef70 <prvHeapInit+0xac>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	2200      	movs	r2, #0
 800ef34:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	68fa      	ldr	r2, [r7, #12]
 800ef3e:	1ad2      	subs	r2, r2, r3
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ef44:	4b0a      	ldr	r3, [pc, #40]	; (800ef70 <prvHeapInit+0xac>)
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	685b      	ldr	r3, [r3, #4]
 800ef50:	4a08      	ldr	r2, [pc, #32]	; (800ef74 <prvHeapInit+0xb0>)
 800ef52:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	4a07      	ldr	r2, [pc, #28]	; (800ef78 <prvHeapInit+0xb4>)
 800ef5a:	6013      	str	r3, [r2, #0]
}
 800ef5c:	bf00      	nop
 800ef5e:	3714      	adds	r7, #20
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr
 800ef68:	20005c28 	.word	0x20005c28
 800ef6c:	2000dc28 	.word	0x2000dc28
 800ef70:	2000dc30 	.word	0x2000dc30
 800ef74:	2000dc38 	.word	0x2000dc38
 800ef78:	2000dc34 	.word	0x2000dc34

0800ef7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	b085      	sub	sp, #20
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ef84:	4b28      	ldr	r3, [pc, #160]	; (800f028 <prvInsertBlockIntoFreeList+0xac>)
 800ef86:	60fb      	str	r3, [r7, #12]
 800ef88:	e002      	b.n	800ef90 <prvInsertBlockIntoFreeList+0x14>
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	60fb      	str	r3, [r7, #12]
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d8f7      	bhi.n	800ef8a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	68ba      	ldr	r2, [r7, #8]
 800efa4:	4413      	add	r3, r2
 800efa6:	687a      	ldr	r2, [r7, #4]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d108      	bne.n	800efbe <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	685a      	ldr	r2, [r3, #4]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	441a      	add	r2, r3
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	685b      	ldr	r3, [r3, #4]
 800efc6:	68ba      	ldr	r2, [r7, #8]
 800efc8:	441a      	add	r2, r3
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	429a      	cmp	r2, r3
 800efd0:	d118      	bne.n	800f004 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	681a      	ldr	r2, [r3, #0]
 800efd6:	4b15      	ldr	r3, [pc, #84]	; (800f02c <prvInsertBlockIntoFreeList+0xb0>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	429a      	cmp	r2, r3
 800efdc:	d00d      	beq.n	800effa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	685a      	ldr	r2, [r3, #4]
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	441a      	add	r2, r3
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	681a      	ldr	r2, [r3, #0]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	601a      	str	r2, [r3, #0]
 800eff8:	e008      	b.n	800f00c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800effa:	4b0c      	ldr	r3, [pc, #48]	; (800f02c <prvInsertBlockIntoFreeList+0xb0>)
 800effc:	681a      	ldr	r2, [r3, #0]
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	601a      	str	r2, [r3, #0]
 800f002:	e003      	b.n	800f00c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681a      	ldr	r2, [r3, #0]
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800f00c:	68fa      	ldr	r2, [r7, #12]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	429a      	cmp	r2, r3
 800f012:	d002      	beq.n	800f01a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	687a      	ldr	r2, [r7, #4]
 800f018:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800f01a:	bf00      	nop
 800f01c:	3714      	adds	r7, #20
 800f01e:	46bd      	mov	sp, r7
 800f020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f024:	4770      	bx	lr
 800f026:	bf00      	nop
 800f028:	2000dc28 	.word	0x2000dc28
 800f02c:	2000dc30 	.word	0x2000dc30

0800f030 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b084      	sub	sp, #16
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	330c      	adds	r3, #12
 800f040:	461a      	mov	r2, r3
 800f042:	6839      	ldr	r1, [r7, #0]
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f002 f9ab 	bl	80113a0 <tcpip_send_msg_wait_sem>
 800f04a:	4603      	mov	r3, r0
 800f04c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800f04e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d103      	bne.n	800f05e <netconn_apimsg+0x2e>
    return apimsg->err;
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f05c:	e001      	b.n	800f062 <netconn_apimsg+0x32>
  }
  return err;
 800f05e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f062:	4618      	mov	r0, r3
 800f064:	3710      	adds	r7, #16
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
	...

0800f06c <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b08c      	sub	sp, #48	; 0x30
 800f070:	af00      	add	r7, sp, #0
 800f072:	4603      	mov	r3, r0
 800f074:	603a      	str	r2, [r7, #0]
 800f076:	71fb      	strb	r3, [r7, #7]
 800f078:	460b      	mov	r3, r1
 800f07a:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800f07c:	79fb      	ldrb	r3, [r7, #7]
 800f07e:	6839      	ldr	r1, [r7, #0]
 800f080:	4618      	mov	r0, r3
 800f082:	f000 ffaf 	bl	800ffe4 <netconn_alloc>
 800f086:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800f088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d054      	beq.n	800f138 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800f08e:	79bb      	ldrb	r3, [r7, #6]
 800f090:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800f092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f094:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800f096:	f107 0308 	add.w	r3, r7, #8
 800f09a:	4619      	mov	r1, r3
 800f09c:	4829      	ldr	r0, [pc, #164]	; (800f144 <netconn_new_with_proto_and_callback+0xd8>)
 800f09e:	f7ff ffc7 	bl	800f030 <netconn_apimsg>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800f0a8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d043      	beq.n	800f138 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800f0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b2:	685b      	ldr	r3, [r3, #4]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d005      	beq.n	800f0c4 <netconn_new_with_proto_and_callback+0x58>
 800f0b8:	4b23      	ldr	r3, [pc, #140]	; (800f148 <netconn_new_with_proto_and_callback+0xdc>)
 800f0ba:	22a3      	movs	r2, #163	; 0xa3
 800f0bc:	4923      	ldr	r1, [pc, #140]	; (800f14c <netconn_new_with_proto_and_callback+0xe0>)
 800f0be:	4824      	ldr	r0, [pc, #144]	; (800f150 <netconn_new_with_proto_and_callback+0xe4>)
 800f0c0:	f00d fbdc 	bl	801c87c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800f0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c6:	3310      	adds	r3, #16
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f00d f9af 	bl	801c42c <sys_mbox_valid>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d105      	bne.n	800f0e0 <netconn_new_with_proto_and_callback+0x74>
 800f0d4:	4b1c      	ldr	r3, [pc, #112]	; (800f148 <netconn_new_with_proto_and_callback+0xdc>)
 800f0d6:	22a4      	movs	r2, #164	; 0xa4
 800f0d8:	491e      	ldr	r1, [pc, #120]	; (800f154 <netconn_new_with_proto_and_callback+0xe8>)
 800f0da:	481d      	ldr	r0, [pc, #116]	; (800f150 <netconn_new_with_proto_and_callback+0xe4>)
 800f0dc:	f00d fbce 	bl	801c87c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800f0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e2:	3314      	adds	r3, #20
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f00d f9a1 	bl	801c42c <sys_mbox_valid>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d005      	beq.n	800f0fc <netconn_new_with_proto_and_callback+0x90>
 800f0f0:	4b15      	ldr	r3, [pc, #84]	; (800f148 <netconn_new_with_proto_and_callback+0xdc>)
 800f0f2:	22a6      	movs	r2, #166	; 0xa6
 800f0f4:	4918      	ldr	r1, [pc, #96]	; (800f158 <netconn_new_with_proto_and_callback+0xec>)
 800f0f6:	4816      	ldr	r0, [pc, #88]	; (800f150 <netconn_new_with_proto_and_callback+0xe4>)
 800f0f8:	f00d fbc0 	bl	801c87c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800f0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0fe:	330c      	adds	r3, #12
 800f100:	4618      	mov	r0, r3
 800f102:	f00d fa21 	bl	801c548 <sys_sem_valid>
 800f106:	4603      	mov	r3, r0
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d105      	bne.n	800f118 <netconn_new_with_proto_and_callback+0xac>
 800f10c:	4b0e      	ldr	r3, [pc, #56]	; (800f148 <netconn_new_with_proto_and_callback+0xdc>)
 800f10e:	22a9      	movs	r2, #169	; 0xa9
 800f110:	4912      	ldr	r1, [pc, #72]	; (800f15c <netconn_new_with_proto_and_callback+0xf0>)
 800f112:	480f      	ldr	r0, [pc, #60]	; (800f150 <netconn_new_with_proto_and_callback+0xe4>)
 800f114:	f00d fbb2 	bl	801c87c <iprintf>
      sys_sem_free(&conn->op_completed);
 800f118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11a:	330c      	adds	r3, #12
 800f11c:	4618      	mov	r0, r3
 800f11e:	f00d fa06 	bl	801c52e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800f122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f124:	3310      	adds	r3, #16
 800f126:	4618      	mov	r0, r3
 800f128:	f00d f90c 	bl	801c344 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800f12c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f12e:	2007      	movs	r0, #7
 800f130:	f002 ffa0 	bl	8012074 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800f134:	2300      	movs	r3, #0
 800f136:	e000      	b.n	800f13a <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800f138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	3730      	adds	r7, #48	; 0x30
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop
 800f144:	0800ffb9 	.word	0x0800ffb9
 800f148:	0801d79c 	.word	0x0801d79c
 800f14c:	0801d7d0 	.word	0x0801d7d0
 800f150:	0801d7f4 	.word	0x0801d7f4
 800f154:	0801d81c 	.word	0x0801d81c
 800f158:	0801d834 	.word	0x0801d834
 800f15c:	0801d858 	.word	0x0801d858

0800f160 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b08c      	sub	sp, #48	; 0x30
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d101      	bne.n	800f172 <netconn_prepare_delete+0x12>
    return ERR_OK;
 800f16e:	2300      	movs	r3, #0
 800f170:	e014      	b.n	800f19c <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800f176:	2329      	movs	r3, #41	; 0x29
 800f178:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800f17a:	f107 030c 	add.w	r3, r7, #12
 800f17e:	4619      	mov	r1, r3
 800f180:	4808      	ldr	r0, [pc, #32]	; (800f1a4 <netconn_prepare_delete+0x44>)
 800f182:	f7ff ff55 	bl	800f030 <netconn_apimsg>
 800f186:	4603      	mov	r3, r0
 800f188:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800f18c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800f190:	2b00      	cmp	r3, #0
 800f192:	d002      	beq.n	800f19a <netconn_prepare_delete+0x3a>
    return err;
 800f194:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800f198:	e000      	b.n	800f19c <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800f19a:	2300      	movs	r3, #0
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3730      	adds	r7, #48	; 0x30
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}
 800f1a4:	08010525 	.word	0x08010525

0800f1a8 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b084      	sub	sp, #16
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d101      	bne.n	800f1ba <netconn_delete+0x12>
    return ERR_OK;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	e00d      	b.n	800f1d6 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f7ff ffd0 	bl	800f160 <netconn_prepare_delete>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800f1c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d102      	bne.n	800f1d2 <netconn_delete+0x2a>
    netconn_free(conn);
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f000 ff77 	bl	80100c0 <netconn_free>
  }
  return err;
 800f1d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3710      	adds	r7, #16
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
	...

0800f1e0 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b08e      	sub	sp, #56	; 0x38
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	60f8      	str	r0, [r7, #12]
 800f1e8:	60b9      	str	r1, [r7, #8]
 800f1ea:	4613      	mov	r3, r2
 800f1ec:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d109      	bne.n	800f208 <netconn_connect+0x28>
 800f1f4:	4b11      	ldr	r3, [pc, #68]	; (800f23c <netconn_connect+0x5c>)
 800f1f6:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800f1fa:	4911      	ldr	r1, [pc, #68]	; (800f240 <netconn_connect+0x60>)
 800f1fc:	4811      	ldr	r0, [pc, #68]	; (800f244 <netconn_connect+0x64>)
 800f1fe:	f00d fb3d 	bl	801c87c <iprintf>
 800f202:	f06f 030f 	mvn.w	r3, #15
 800f206:	e015      	b.n	800f234 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d101      	bne.n	800f212 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800f20e:	4b0e      	ldr	r3, [pc, #56]	; (800f248 <netconn_connect+0x68>)
 800f210:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800f21a:	88fb      	ldrh	r3, [r7, #6]
 800f21c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800f21e:	f107 0314 	add.w	r3, r7, #20
 800f222:	4619      	mov	r1, r3
 800f224:	4809      	ldr	r0, [pc, #36]	; (800f24c <netconn_connect+0x6c>)
 800f226:	f7ff ff03 	bl	800f030 <netconn_apimsg>
 800f22a:	4603      	mov	r3, r0
 800f22c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800f230:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f234:	4618      	mov	r0, r3
 800f236:	3738      	adds	r7, #56	; 0x38
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}
 800f23c:	0801d79c 	.word	0x0801d79c
 800f240:	0801d910 	.word	0x0801d910
 800f244:	0801d7f4 	.word	0x0801d7f4
 800f248:	08020e14 	.word	0x08020e14
 800f24c:	0801080d 	.word	0x0801080d

0800f250 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b088      	sub	sp, #32
 800f254:	af00      	add	r7, sp, #0
 800f256:	60f8      	str	r0, [r7, #12]
 800f258:	60b9      	str	r1, [r7, #8]
 800f25a:	4613      	mov	r3, r2
 800f25c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800f25e:	2300      	movs	r3, #0
 800f260:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d109      	bne.n	800f27c <netconn_recv_data+0x2c>
 800f268:	4b58      	ldr	r3, [pc, #352]	; (800f3cc <netconn_recv_data+0x17c>)
 800f26a:	f44f 7212 	mov.w	r2, #584	; 0x248
 800f26e:	4958      	ldr	r1, [pc, #352]	; (800f3d0 <netconn_recv_data+0x180>)
 800f270:	4858      	ldr	r0, [pc, #352]	; (800f3d4 <netconn_recv_data+0x184>)
 800f272:	f00d fb03 	bl	801c87c <iprintf>
 800f276:	f06f 030f 	mvn.w	r3, #15
 800f27a:	e0a2      	b.n	800f3c2 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	2200      	movs	r2, #0
 800f280:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d109      	bne.n	800f29c <netconn_recv_data+0x4c>
 800f288:	4b50      	ldr	r3, [pc, #320]	; (800f3cc <netconn_recv_data+0x17c>)
 800f28a:	f240 224a 	movw	r2, #586	; 0x24a
 800f28e:	4952      	ldr	r1, [pc, #328]	; (800f3d8 <netconn_recv_data+0x188>)
 800f290:	4850      	ldr	r0, [pc, #320]	; (800f3d4 <netconn_recv_data+0x184>)
 800f292:	f00d faf3 	bl	801c87c <iprintf>
 800f296:	f06f 030f 	mvn.w	r3, #15
 800f29a:	e092      	b.n	800f3c2 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	3310      	adds	r3, #16
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f00d f8c3 	bl	801c42c <sys_mbox_valid>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d10e      	bne.n	800f2ca <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800f2ac:	68f8      	ldr	r0, [r7, #12]
 800f2ae:	f000 fad4 	bl	800f85a <netconn_err>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800f2b6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d002      	beq.n	800f2c4 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800f2be:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800f2c2:	e07e      	b.n	800f3c2 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800f2c4:	f06f 030a 	mvn.w	r3, #10
 800f2c8:	e07b      	b.n	800f3c2 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	7f1b      	ldrb	r3, [r3, #28]
 800f2ce:	f003 0302 	and.w	r3, r3, #2
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d10f      	bne.n	800f2f6 <netconn_recv_data+0xa6>
 800f2d6:	79fb      	ldrb	r3, [r7, #7]
 800f2d8:	f003 0304 	and.w	r3, r3, #4
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d10a      	bne.n	800f2f6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	7f1b      	ldrb	r3, [r3, #28]
 800f2e4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d104      	bne.n	800f2f6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d023      	beq.n	800f33e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	3310      	adds	r3, #16
 800f2fa:	f107 0218 	add.w	r2, r7, #24
 800f2fe:	4611      	mov	r1, r2
 800f300:	4618      	mov	r0, r3
 800f302:	f00d f87c 	bl	801c3fe <sys_arch_mbox_tryfetch>
 800f306:	4603      	mov	r3, r0
 800f308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f30c:	d11f      	bne.n	800f34e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800f30e:	68f8      	ldr	r0, [r7, #12]
 800f310:	f000 faa3 	bl	800f85a <netconn_err>
 800f314:	4603      	mov	r3, r0
 800f316:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800f318:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d002      	beq.n	800f326 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800f320:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f324:	e04d      	b.n	800f3c2 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	7f1b      	ldrb	r3, [r3, #28]
 800f32a:	f003 0301 	and.w	r3, r3, #1
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d002      	beq.n	800f338 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800f332:	f06f 030a 	mvn.w	r3, #10
 800f336:	e044      	b.n	800f3c2 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800f338:	f06f 0306 	mvn.w	r3, #6
 800f33c:	e041      	b.n	800f3c2 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	3310      	adds	r3, #16
 800f342:	f107 0118 	add.w	r1, r7, #24
 800f346:	2200      	movs	r2, #0
 800f348:	4618      	mov	r0, r3
 800f34a:	f00d f827 	bl	801c39c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f356:	2b10      	cmp	r3, #16
 800f358:	d117      	bne.n	800f38a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800f35a:	69bb      	ldr	r3, [r7, #24]
 800f35c:	f107 0217 	add.w	r2, r7, #23
 800f360:	4611      	mov	r1, r2
 800f362:	4618      	mov	r0, r3
 800f364:	f000 faca 	bl	800f8fc <lwip_netconn_is_err_msg>
 800f368:	4603      	mov	r3, r0
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d009      	beq.n	800f382 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800f36e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f372:	f113 0f0f 	cmn.w	r3, #15
 800f376:	d101      	bne.n	800f37c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800f378:	2300      	movs	r3, #0
 800f37a:	e022      	b.n	800f3c2 <netconn_recv_data+0x172>
      }
      return err;
 800f37c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f380:	e01f      	b.n	800f3c2 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800f382:	69bb      	ldr	r3, [r7, #24]
 800f384:	891b      	ldrh	r3, [r3, #8]
 800f386:	83fb      	strh	r3, [r7, #30]
 800f388:	e00d      	b.n	800f3a6 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800f38a:	69bb      	ldr	r3, [r7, #24]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d106      	bne.n	800f39e <netconn_recv_data+0x14e>
 800f390:	4b0e      	ldr	r3, [pc, #56]	; (800f3cc <netconn_recv_data+0x17c>)
 800f392:	f240 2291 	movw	r2, #657	; 0x291
 800f396:	4911      	ldr	r1, [pc, #68]	; (800f3dc <netconn_recv_data+0x18c>)
 800f398:	480e      	ldr	r0, [pc, #56]	; (800f3d4 <netconn_recv_data+0x184>)
 800f39a:	f00d fa6f 	bl	801c87c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800f39e:	69bb      	ldr	r3, [r7, #24]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	891b      	ldrh	r3, [r3, #8]
 800f3a4:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d005      	beq.n	800f3ba <netconn_recv_data+0x16a>
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3b2:	8bfa      	ldrh	r2, [r7, #30]
 800f3b4:	2101      	movs	r1, #1
 800f3b6:	68f8      	ldr	r0, [r7, #12]
 800f3b8:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800f3ba:	69ba      	ldr	r2, [r7, #24]
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800f3c0:	2300      	movs	r3, #0
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3720      	adds	r7, #32
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}
 800f3ca:	bf00      	nop
 800f3cc:	0801d79c 	.word	0x0801d79c
 800f3d0:	0801d9b4 	.word	0x0801d9b4
 800f3d4:	0801d7f4 	.word	0x0801d7f4
 800f3d8:	0801d9d4 	.word	0x0801d9d4
 800f3dc:	0801d9f0 	.word	0x0801d9f0

0800f3e0 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b084      	sub	sp, #16
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	60f8      	str	r0, [r7, #12]
 800f3e8:	60b9      	str	r1, [r7, #8]
 800f3ea:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d005      	beq.n	800f3fe <netconn_tcp_recvd_msg+0x1e>
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f3fa:	2b10      	cmp	r3, #16
 800f3fc:	d009      	beq.n	800f412 <netconn_tcp_recvd_msg+0x32>
 800f3fe:	4b0c      	ldr	r3, [pc, #48]	; (800f430 <netconn_tcp_recvd_msg+0x50>)
 800f400:	f240 22a7 	movw	r2, #679	; 0x2a7
 800f404:	490b      	ldr	r1, [pc, #44]	; (800f434 <netconn_tcp_recvd_msg+0x54>)
 800f406:	480c      	ldr	r0, [pc, #48]	; (800f438 <netconn_tcp_recvd_msg+0x58>)
 800f408:	f00d fa38 	bl	801c87c <iprintf>
 800f40c:	f06f 030f 	mvn.w	r3, #15
 800f410:	e00a      	b.n	800f428 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	68fa      	ldr	r2, [r7, #12]
 800f416:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	68ba      	ldr	r2, [r7, #8]
 800f41c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800f41e:	6879      	ldr	r1, [r7, #4]
 800f420:	4806      	ldr	r0, [pc, #24]	; (800f43c <netconn_tcp_recvd_msg+0x5c>)
 800f422:	f7ff fe05 	bl	800f030 <netconn_apimsg>
 800f426:	4603      	mov	r3, r0
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3710      	adds	r7, #16
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	0801d79c 	.word	0x0801d79c
 800f434:	0801d9fc 	.word	0x0801d9fc
 800f438:	0801d7f4 	.word	0x0801d7f4
 800f43c:	08010989 	.word	0x08010989

0800f440 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b090      	sub	sp, #64	; 0x40
 800f444:	af00      	add	r7, sp, #0
 800f446:	60f8      	str	r0, [r7, #12]
 800f448:	60b9      	str	r1, [r7, #8]
 800f44a:	4613      	mov	r3, r2
 800f44c:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	3310      	adds	r3, #16
 800f452:	4618      	mov	r0, r3
 800f454:	f00c ffea 	bl	801c42c <sys_mbox_valid>
 800f458:	4603      	mov	r3, r0
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d102      	bne.n	800f464 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800f45e:	f06f 030a 	mvn.w	r3, #10
 800f462:	e06d      	b.n	800f540 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	7f1b      	ldrb	r3, [r3, #28]
 800f468:	b25b      	sxtb	r3, r3
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	da07      	bge.n	800f47e <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	7f1b      	ldrb	r3, [r3, #28]
 800f472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f476:	b2da      	uxtb	r2, r3
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800f47c:	e039      	b.n	800f4f2 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800f47e:	79fb      	ldrb	r3, [r7, #7]
 800f480:	461a      	mov	r2, r3
 800f482:	68b9      	ldr	r1, [r7, #8]
 800f484:	68f8      	ldr	r0, [r7, #12]
 800f486:	f7ff fee3 	bl	800f250 <netconn_recv_data>
 800f48a:	4603      	mov	r3, r0
 800f48c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800f490:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f494:	2b00      	cmp	r3, #0
 800f496:	d002      	beq.n	800f49e <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800f498:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f49c:	e050      	b.n	800f540 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800f4a4:	79fb      	ldrb	r3, [r7, #7]
 800f4a6:	f003 0308 	and.w	r3, r3, #8
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d10e      	bne.n	800f4cc <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800f4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d002      	beq.n	800f4ba <netconn_recv_data_tcp+0x7a>
 800f4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b6:	891b      	ldrh	r3, [r3, #8]
 800f4b8:	e000      	b.n	800f4bc <netconn_recv_data_tcp+0x7c>
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800f4be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4c0:	f107 0214 	add.w	r2, r7, #20
 800f4c4:	4619      	mov	r1, r3
 800f4c6:	68f8      	ldr	r0, [r7, #12]
 800f4c8:	f7ff ff8a 	bl	800f3e0 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800f4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d134      	bne.n	800f53c <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800f4d2:	79fb      	ldrb	r3, [r7, #7]
 800f4d4:	f003 0310 	and.w	r3, r3, #16
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d009      	beq.n	800f4f0 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	7f1b      	ldrb	r3, [r3, #28]
 800f4e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f4e4:	b2da      	uxtb	r2, r3
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800f4ea:	f06f 0306 	mvn.w	r3, #6
 800f4ee:	e027      	b.n	800f540 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800f4f0:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d005      	beq.n	800f506 <netconn_recv_data_tcp+0xc6>
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4fe:	2200      	movs	r2, #0
 800f500:	2101      	movs	r1, #1
 800f502:	68f8      	ldr	r0, [r7, #12]
 800f504:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d10f      	bne.n	800f52e <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800f50e:	68f8      	ldr	r0, [r7, #12]
 800f510:	f000 f9a3 	bl	800f85a <netconn_err>
 800f514:	4603      	mov	r3, r0
 800f516:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800f51a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d002      	beq.n	800f528 <netconn_recv_data_tcp+0xe8>
          return err;
 800f522:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f526:	e00b      	b.n	800f540 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800f528:	f06f 030d 	mvn.w	r3, #13
 800f52c:	e008      	b.n	800f540 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800f52e:	2101      	movs	r1, #1
 800f530:	68f8      	ldr	r0, [r7, #12]
 800f532:	f000 f955 	bl	800f7e0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800f536:	f06f 030e 	mvn.w	r3, #14
 800f53a:	e001      	b.n	800f540 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800f53c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f540:	4618      	mov	r0, r3
 800f542:	3740      	adds	r7, #64	; 0x40
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b086      	sub	sp, #24
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800f552:	2300      	movs	r3, #0
 800f554:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d109      	bne.n	800f570 <netconn_recv+0x28>
 800f55c:	4b32      	ldr	r3, [pc, #200]	; (800f628 <netconn_recv+0xe0>)
 800f55e:	f240 3263 	movw	r2, #867	; 0x363
 800f562:	4932      	ldr	r1, [pc, #200]	; (800f62c <netconn_recv+0xe4>)
 800f564:	4832      	ldr	r0, [pc, #200]	; (800f630 <netconn_recv+0xe8>)
 800f566:	f00d f989 	bl	801c87c <iprintf>
 800f56a:	f06f 030f 	mvn.w	r3, #15
 800f56e:	e056      	b.n	800f61e <netconn_recv+0xd6>
  *new_buf = NULL;
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	2200      	movs	r2, #0
 800f574:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d109      	bne.n	800f590 <netconn_recv+0x48>
 800f57c:	4b2a      	ldr	r3, [pc, #168]	; (800f628 <netconn_recv+0xe0>)
 800f57e:	f240 3265 	movw	r2, #869	; 0x365
 800f582:	492c      	ldr	r1, [pc, #176]	; (800f634 <netconn_recv+0xec>)
 800f584:	482a      	ldr	r0, [pc, #168]	; (800f630 <netconn_recv+0xe8>)
 800f586:	f00d f979 	bl	801c87c <iprintf>
 800f58a:	f06f 030f 	mvn.w	r3, #15
 800f58e:	e046      	b.n	800f61e <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f598:	2b10      	cmp	r3, #16
 800f59a:	d13a      	bne.n	800f612 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800f59c:	2300      	movs	r3, #0
 800f59e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800f5a0:	2006      	movs	r0, #6
 800f5a2:	f002 fcf1 	bl	8011f88 <memp_malloc>
 800f5a6:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d102      	bne.n	800f5b4 <netconn_recv+0x6c>
      return ERR_MEM;
 800f5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f5b2:	e034      	b.n	800f61e <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800f5b4:	f107 030c 	add.w	r3, r7, #12
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f7ff ff3f 	bl	800f440 <netconn_recv_data_tcp>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f5c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d006      	beq.n	800f5dc <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800f5ce:	6979      	ldr	r1, [r7, #20]
 800f5d0:	2006      	movs	r0, #6
 800f5d2:	f002 fd4f 	bl	8012074 <memp_free>
      return err;
 800f5d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f5da:	e020      	b.n	800f61e <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d106      	bne.n	800f5f0 <netconn_recv+0xa8>
 800f5e2:	4b11      	ldr	r3, [pc, #68]	; (800f628 <netconn_recv+0xe0>)
 800f5e4:	f240 3279 	movw	r2, #889	; 0x379
 800f5e8:	4913      	ldr	r1, [pc, #76]	; (800f638 <netconn_recv+0xf0>)
 800f5ea:	4811      	ldr	r0, [pc, #68]	; (800f630 <netconn_recv+0xe8>)
 800f5ec:	f00d f946 	bl	801c87c <iprintf>

    buf->p = p;
 800f5f0:	68fa      	ldr	r2, [r7, #12]
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800f5f6:	68fa      	ldr	r2, [r7, #12]
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	2200      	movs	r2, #0
 800f600:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	2200      	movs	r2, #0
 800f606:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	697a      	ldr	r2, [r7, #20]
 800f60c:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800f60e:	2300      	movs	r3, #0
 800f610:	e005      	b.n	800f61e <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800f612:	2200      	movs	r2, #0
 800f614:	6839      	ldr	r1, [r7, #0]
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f7ff fe1a 	bl	800f250 <netconn_recv_data>
 800f61c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3718      	adds	r7, #24
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
 800f626:	bf00      	nop
 800f628:	0801d79c 	.word	0x0801d79c
 800f62c:	0801d9b4 	.word	0x0801d9b4
 800f630:	0801d7f4 	.word	0x0801d7f4
 800f634:	0801d9d4 	.word	0x0801d9d4
 800f638:	0801da4c 	.word	0x0801da4c

0800f63c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b088      	sub	sp, #32
 800f640:	af02      	add	r7, sp, #8
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	60b9      	str	r1, [r7, #8]
 800f646:	607a      	str	r2, [r7, #4]
 800f648:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800f652:	78fa      	ldrb	r2, [r7, #3]
 800f654:	f107 0110 	add.w	r1, r7, #16
 800f658:	6a3b      	ldr	r3, [r7, #32]
 800f65a:	9300      	str	r3, [sp, #0]
 800f65c:	4613      	mov	r3, r2
 800f65e:	2201      	movs	r2, #1
 800f660:	68f8      	ldr	r0, [r7, #12]
 800f662:	f000 f805 	bl	800f670 <netconn_write_vectors_partly>
 800f666:	4603      	mov	r3, r0
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3718      	adds	r7, #24
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b092      	sub	sp, #72	; 0x48
 800f674:	af00      	add	r7, sp, #0
 800f676:	60f8      	str	r0, [r7, #12]
 800f678:	60b9      	str	r1, [r7, #8]
 800f67a:	4611      	mov	r1, r2
 800f67c:	461a      	mov	r2, r3
 800f67e:	460b      	mov	r3, r1
 800f680:	80fb      	strh	r3, [r7, #6]
 800f682:	4613      	mov	r3, r2
 800f684:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d109      	bne.n	800f6a0 <netconn_write_vectors_partly+0x30>
 800f68c:	4b4e      	ldr	r3, [pc, #312]	; (800f7c8 <netconn_write_vectors_partly+0x158>)
 800f68e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f692:	494e      	ldr	r1, [pc, #312]	; (800f7cc <netconn_write_vectors_partly+0x15c>)
 800f694:	484e      	ldr	r0, [pc, #312]	; (800f7d0 <netconn_write_vectors_partly+0x160>)
 800f696:	f00d f8f1 	bl	801c87c <iprintf>
 800f69a:	f06f 030f 	mvn.w	r3, #15
 800f69e:	e08e      	b.n	800f7be <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f6a8:	2b10      	cmp	r3, #16
 800f6aa:	d009      	beq.n	800f6c0 <netconn_write_vectors_partly+0x50>
 800f6ac:	4b46      	ldr	r3, [pc, #280]	; (800f7c8 <netconn_write_vectors_partly+0x158>)
 800f6ae:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800f6b2:	4948      	ldr	r1, [pc, #288]	; (800f7d4 <netconn_write_vectors_partly+0x164>)
 800f6b4:	4846      	ldr	r0, [pc, #280]	; (800f7d0 <netconn_write_vectors_partly+0x160>)
 800f6b6:	f00d f8e1 	bl	801c87c <iprintf>
 800f6ba:	f06f 0305 	mvn.w	r3, #5
 800f6be:	e07e      	b.n	800f7be <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	7f1b      	ldrb	r3, [r3, #28]
 800f6c4:	f003 0302 	and.w	r3, r3, #2
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d104      	bne.n	800f6d6 <netconn_write_vectors_partly+0x66>
 800f6cc:	797b      	ldrb	r3, [r7, #5]
 800f6ce:	f003 0304 	and.w	r3, r3, #4
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d001      	beq.n	800f6da <netconn_write_vectors_partly+0x6a>
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	e000      	b.n	800f6dc <netconn_write_vectors_partly+0x6c>
 800f6da:	2300      	movs	r3, #0
 800f6dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800f6e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d005      	beq.n	800f6f4 <netconn_write_vectors_partly+0x84>
 800f6e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d102      	bne.n	800f6f4 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800f6ee:	f06f 0305 	mvn.w	r3, #5
 800f6f2:	e064      	b.n	800f7be <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	643b      	str	r3, [r7, #64]	; 0x40
 800f6fc:	e015      	b.n	800f72a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800f6fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f700:	00db      	lsls	r3, r3, #3
 800f702:	68ba      	ldr	r2, [r7, #8]
 800f704:	4413      	add	r3, r2
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f70a:	4413      	add	r3, r2
 800f70c:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800f70e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f710:	00db      	lsls	r3, r3, #3
 800f712:	68ba      	ldr	r2, [r7, #8]
 800f714:	4413      	add	r3, r2
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f71a:	429a      	cmp	r2, r3
 800f71c:	d202      	bcs.n	800f724 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800f71e:	f06f 0305 	mvn.w	r3, #5
 800f722:	e04c      	b.n	800f7be <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800f724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f726:	3301      	adds	r3, #1
 800f728:	643b      	str	r3, [r7, #64]	; 0x40
 800f72a:	88fb      	ldrh	r3, [r7, #6]
 800f72c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f72e:	429a      	cmp	r2, r3
 800f730:	dbe5      	blt.n	800f6fe <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800f732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f734:	2b00      	cmp	r3, #0
 800f736:	d101      	bne.n	800f73c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800f738:	2300      	movs	r3, #0
 800f73a:	e040      	b.n	800f7be <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800f73c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f73e:	2b00      	cmp	r3, #0
 800f740:	da0a      	bge.n	800f758 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800f742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f744:	2b00      	cmp	r3, #0
 800f746:	d102      	bne.n	800f74e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800f748:	f06f 0305 	mvn.w	r3, #5
 800f74c:	e037      	b.n	800f7be <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800f74e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f752:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800f754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f756:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800f760:	88fb      	ldrh	r3, [r7, #6]
 800f762:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800f764:	2300      	movs	r3, #0
 800f766:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800f768:	797b      	ldrb	r3, [r7, #5]
 800f76a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800f76e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f770:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800f772:	2300      	movs	r3, #0
 800f774:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800f776:	f107 0314 	add.w	r3, r7, #20
 800f77a:	4619      	mov	r1, r3
 800f77c:	4816      	ldr	r0, [pc, #88]	; (800f7d8 <netconn_write_vectors_partly+0x168>)
 800f77e:	f7ff fc57 	bl	800f030 <netconn_apimsg>
 800f782:	4603      	mov	r3, r0
 800f784:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800f788:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d114      	bne.n	800f7ba <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800f790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f792:	2b00      	cmp	r3, #0
 800f794:	d002      	beq.n	800f79c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800f796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f79a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800f79c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d10a      	bne.n	800f7ba <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800f7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	d006      	beq.n	800f7ba <netconn_write_vectors_partly+0x14a>
 800f7ac:	4b06      	ldr	r3, [pc, #24]	; (800f7c8 <netconn_write_vectors_partly+0x158>)
 800f7ae:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f7b2:	490a      	ldr	r1, [pc, #40]	; (800f7dc <netconn_write_vectors_partly+0x16c>)
 800f7b4:	4806      	ldr	r0, [pc, #24]	; (800f7d0 <netconn_write_vectors_partly+0x160>)
 800f7b6:	f00d f861 	bl	801c87c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800f7ba:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3748      	adds	r7, #72	; 0x48
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop
 800f7c8:	0801d79c 	.word	0x0801d79c
 800f7cc:	0801da74 	.word	0x0801da74
 800f7d0:	0801d7f4 	.word	0x0801d7f4
 800f7d4:	0801da90 	.word	0x0801da90
 800f7d8:	08010d8d 	.word	0x08010d8d
 800f7dc:	0801dab4 	.word	0x0801dab4

0800f7e0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b08c      	sub	sp, #48	; 0x30
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
 800f7e8:	460b      	mov	r3, r1
 800f7ea:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d109      	bne.n	800f806 <netconn_close_shutdown+0x26>
 800f7f2:	4b0f      	ldr	r3, [pc, #60]	; (800f830 <netconn_close_shutdown+0x50>)
 800f7f4:	f240 4247 	movw	r2, #1095	; 0x447
 800f7f8:	490e      	ldr	r1, [pc, #56]	; (800f834 <netconn_close_shutdown+0x54>)
 800f7fa:	480f      	ldr	r0, [pc, #60]	; (800f838 <netconn_close_shutdown+0x58>)
 800f7fc:	f00d f83e 	bl	801c87c <iprintf>
 800f800:	f06f 030f 	mvn.w	r3, #15
 800f804:	e010      	b.n	800f828 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800f80a:	78fb      	ldrb	r3, [r7, #3]
 800f80c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800f80e:	2329      	movs	r3, #41	; 0x29
 800f810:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800f812:	f107 030c 	add.w	r3, r7, #12
 800f816:	4619      	mov	r1, r3
 800f818:	4808      	ldr	r0, [pc, #32]	; (800f83c <netconn_close_shutdown+0x5c>)
 800f81a:	f7ff fc09 	bl	800f030 <netconn_apimsg>
 800f81e:	4603      	mov	r3, r0
 800f820:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800f824:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800f828:	4618      	mov	r0, r3
 800f82a:	3730      	adds	r7, #48	; 0x30
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}
 800f830:	0801d79c 	.word	0x0801d79c
 800f834:	0801dad8 	.word	0x0801dad8
 800f838:	0801d7f4 	.word	0x0801d7f4
 800f83c:	08010ea5 	.word	0x08010ea5

0800f840 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b082      	sub	sp, #8
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800f848:	2103      	movs	r1, #3
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f7ff ffc8 	bl	800f7e0 <netconn_close_shutdown>
 800f850:	4603      	mov	r3, r0
}
 800f852:	4618      	mov	r0, r3
 800f854:	3708      	adds	r7, #8
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}

0800f85a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800f85a:	b580      	push	{r7, lr}
 800f85c:	b084      	sub	sp, #16
 800f85e:	af00      	add	r7, sp, #0
 800f860:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d101      	bne.n	800f86c <netconn_err+0x12>
    return ERR_OK;
 800f868:	2300      	movs	r3, #0
 800f86a:	e00d      	b.n	800f888 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800f86c:	f00c fee8 	bl	801c640 <sys_arch_protect>
 800f870:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	7a1b      	ldrb	r3, [r3, #8]
 800f876:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2200      	movs	r2, #0
 800f87c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800f87e:	68f8      	ldr	r0, [r7, #12]
 800f880:	f00c feec 	bl	801c65c <sys_arch_unprotect>
  return err;
 800f884:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f888:	4618      	mov	r0, r3
 800f88a:	3710      	adds	r7, #16
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}

0800f890 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b082      	sub	sp, #8
 800f894:	af00      	add	r7, sp, #0
 800f896:	4603      	mov	r3, r0
 800f898:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800f89a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f89e:	f113 0f0d 	cmn.w	r3, #13
 800f8a2:	d009      	beq.n	800f8b8 <lwip_netconn_err_to_msg+0x28>
 800f8a4:	f113 0f0d 	cmn.w	r3, #13
 800f8a8:	dc0c      	bgt.n	800f8c4 <lwip_netconn_err_to_msg+0x34>
 800f8aa:	f113 0f0f 	cmn.w	r3, #15
 800f8ae:	d007      	beq.n	800f8c0 <lwip_netconn_err_to_msg+0x30>
 800f8b0:	f113 0f0e 	cmn.w	r3, #14
 800f8b4:	d002      	beq.n	800f8bc <lwip_netconn_err_to_msg+0x2c>
 800f8b6:	e005      	b.n	800f8c4 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800f8b8:	4b0a      	ldr	r3, [pc, #40]	; (800f8e4 <lwip_netconn_err_to_msg+0x54>)
 800f8ba:	e00e      	b.n	800f8da <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800f8bc:	4b0a      	ldr	r3, [pc, #40]	; (800f8e8 <lwip_netconn_err_to_msg+0x58>)
 800f8be:	e00c      	b.n	800f8da <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800f8c0:	4b0a      	ldr	r3, [pc, #40]	; (800f8ec <lwip_netconn_err_to_msg+0x5c>)
 800f8c2:	e00a      	b.n	800f8da <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800f8c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d005      	beq.n	800f8d8 <lwip_netconn_err_to_msg+0x48>
 800f8cc:	4b08      	ldr	r3, [pc, #32]	; (800f8f0 <lwip_netconn_err_to_msg+0x60>)
 800f8ce:	227d      	movs	r2, #125	; 0x7d
 800f8d0:	4908      	ldr	r1, [pc, #32]	; (800f8f4 <lwip_netconn_err_to_msg+0x64>)
 800f8d2:	4809      	ldr	r0, [pc, #36]	; (800f8f8 <lwip_netconn_err_to_msg+0x68>)
 800f8d4:	f00c ffd2 	bl	801c87c <iprintf>
      return NULL;
 800f8d8:	2300      	movs	r3, #0
  }
}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	3708      	adds	r7, #8
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}
 800f8e2:	bf00      	nop
 800f8e4:	08020d00 	.word	0x08020d00
 800f8e8:	08020d01 	.word	0x08020d01
 800f8ec:	08020d02 	.word	0x08020d02
 800f8f0:	0801daf4 	.word	0x0801daf4
 800f8f4:	0801db28 	.word	0x0801db28
 800f8f8:	0801db38 	.word	0x0801db38

0800f8fc <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d105      	bne.n	800f918 <lwip_netconn_is_err_msg+0x1c>
 800f90c:	4b12      	ldr	r3, [pc, #72]	; (800f958 <lwip_netconn_is_err_msg+0x5c>)
 800f90e:	2285      	movs	r2, #133	; 0x85
 800f910:	4912      	ldr	r1, [pc, #72]	; (800f95c <lwip_netconn_is_err_msg+0x60>)
 800f912:	4813      	ldr	r0, [pc, #76]	; (800f960 <lwip_netconn_is_err_msg+0x64>)
 800f914:	f00c ffb2 	bl	801c87c <iprintf>

  if (msg == &netconn_aborted) {
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	4a12      	ldr	r2, [pc, #72]	; (800f964 <lwip_netconn_is_err_msg+0x68>)
 800f91c:	4293      	cmp	r3, r2
 800f91e:	d104      	bne.n	800f92a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	22f3      	movs	r2, #243	; 0xf3
 800f924:	701a      	strb	r2, [r3, #0]
    return 1;
 800f926:	2301      	movs	r3, #1
 800f928:	e012      	b.n	800f950 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	4a0e      	ldr	r2, [pc, #56]	; (800f968 <lwip_netconn_is_err_msg+0x6c>)
 800f92e:	4293      	cmp	r3, r2
 800f930:	d104      	bne.n	800f93c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	22f2      	movs	r2, #242	; 0xf2
 800f936:	701a      	strb	r2, [r3, #0]
    return 1;
 800f938:	2301      	movs	r3, #1
 800f93a:	e009      	b.n	800f950 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	4a0b      	ldr	r2, [pc, #44]	; (800f96c <lwip_netconn_is_err_msg+0x70>)
 800f940:	4293      	cmp	r3, r2
 800f942:	d104      	bne.n	800f94e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	22f1      	movs	r2, #241	; 0xf1
 800f948:	701a      	strb	r2, [r3, #0]
    return 1;
 800f94a:	2301      	movs	r3, #1
 800f94c:	e000      	b.n	800f950 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800f94e:	2300      	movs	r3, #0
}
 800f950:	4618      	mov	r0, r3
 800f952:	3708      	adds	r7, #8
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}
 800f958:	0801daf4 	.word	0x0801daf4
 800f95c:	0801db60 	.word	0x0801db60
 800f960:	0801db38 	.word	0x0801db38
 800f964:	08020d00 	.word	0x08020d00
 800f968:	08020d01 	.word	0x08020d01
 800f96c:	08020d02 	.word	0x08020d02

0800f970 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b088      	sub	sp, #32
 800f974:	af00      	add	r7, sp, #0
 800f976:	60f8      	str	r0, [r7, #12]
 800f978:	60b9      	str	r1, [r7, #8]
 800f97a:	607a      	str	r2, [r7, #4]
 800f97c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d105      	bne.n	800f990 <recv_udp+0x20>
 800f984:	4b34      	ldr	r3, [pc, #208]	; (800fa58 <recv_udp+0xe8>)
 800f986:	22e5      	movs	r2, #229	; 0xe5
 800f988:	4934      	ldr	r1, [pc, #208]	; (800fa5c <recv_udp+0xec>)
 800f98a:	4835      	ldr	r0, [pc, #212]	; (800fa60 <recv_udp+0xf0>)
 800f98c:	f00c ff76 	bl	801c87c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d105      	bne.n	800f9a2 <recv_udp+0x32>
 800f996:	4b30      	ldr	r3, [pc, #192]	; (800fa58 <recv_udp+0xe8>)
 800f998:	22e6      	movs	r2, #230	; 0xe6
 800f99a:	4932      	ldr	r1, [pc, #200]	; (800fa64 <recv_udp+0xf4>)
 800f99c:	4830      	ldr	r0, [pc, #192]	; (800fa60 <recv_udp+0xf0>)
 800f99e:	f00c ff6d 	bl	801c87c <iprintf>
  conn = (struct netconn *)arg;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f9a6:	69fb      	ldr	r3, [r7, #28]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d103      	bne.n	800f9b4 <recv_udp+0x44>
    pbuf_free(p);
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f003 fa05 	bl	8012dbc <pbuf_free>
    return;
 800f9b2:	e04d      	b.n	800fa50 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800f9b4:	69fb      	ldr	r3, [r7, #28]
 800f9b6:	685b      	ldr	r3, [r3, #4]
 800f9b8:	68ba      	ldr	r2, [r7, #8]
 800f9ba:	429a      	cmp	r2, r3
 800f9bc:	d005      	beq.n	800f9ca <recv_udp+0x5a>
 800f9be:	4b26      	ldr	r3, [pc, #152]	; (800fa58 <recv_udp+0xe8>)
 800f9c0:	22ee      	movs	r2, #238	; 0xee
 800f9c2:	4929      	ldr	r1, [pc, #164]	; (800fa68 <recv_udp+0xf8>)
 800f9c4:	4826      	ldr	r0, [pc, #152]	; (800fa60 <recv_udp+0xf0>)
 800f9c6:	f00c ff59 	bl	801c87c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f9ca:	69fb      	ldr	r3, [r7, #28]
 800f9cc:	3310      	adds	r3, #16
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f00c fd2c 	bl	801c42c <sys_mbox_valid>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d103      	bne.n	800f9e2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f003 f9ee 	bl	8012dbc <pbuf_free>
    return;
 800f9e0:	e036      	b.n	800fa50 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800f9e2:	2006      	movs	r0, #6
 800f9e4:	f002 fad0 	bl	8011f88 <memp_malloc>
 800f9e8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800f9ea:	69bb      	ldr	r3, [r7, #24]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d103      	bne.n	800f9f8 <recv_udp+0x88>
    pbuf_free(p);
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f003 f9e3 	bl	8012dbc <pbuf_free>
    return;
 800f9f6:	e02b      	b.n	800fa50 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800f9f8:	69bb      	ldr	r3, [r7, #24]
 800f9fa:	687a      	ldr	r2, [r7, #4]
 800f9fc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800f9fe:	69bb      	ldr	r3, [r7, #24]
 800fa00:	687a      	ldr	r2, [r7, #4]
 800fa02:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d002      	beq.n	800fa10 <recv_udp+0xa0>
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	e000      	b.n	800fa12 <recv_udp+0xa2>
 800fa10:	2300      	movs	r3, #0
 800fa12:	69ba      	ldr	r2, [r7, #24]
 800fa14:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800fa16:	69bb      	ldr	r3, [r7, #24]
 800fa18:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800fa1a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	891b      	ldrh	r3, [r3, #8]
 800fa20:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800fa22:	69fb      	ldr	r3, [r7, #28]
 800fa24:	3310      	adds	r3, #16
 800fa26:	69b9      	ldr	r1, [r7, #24]
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f00c fc9d 	bl	801c368 <sys_mbox_trypost>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d003      	beq.n	800fa3c <recv_udp+0xcc>
    netbuf_delete(buf);
 800fa34:	69b8      	ldr	r0, [r7, #24]
 800fa36:	f001 fac1 	bl	8010fbc <netbuf_delete>
    return;
 800fa3a:	e009      	b.n	800fa50 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800fa3c:	69fb      	ldr	r3, [r7, #28]
 800fa3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d005      	beq.n	800fa50 <recv_udp+0xe0>
 800fa44:	69fb      	ldr	r3, [r7, #28]
 800fa46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa48:	8afa      	ldrh	r2, [r7, #22]
 800fa4a:	2100      	movs	r1, #0
 800fa4c:	69f8      	ldr	r0, [r7, #28]
 800fa4e:	4798      	blx	r3
  }
}
 800fa50:	3720      	adds	r7, #32
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}
 800fa56:	bf00      	nop
 800fa58:	0801daf4 	.word	0x0801daf4
 800fa5c:	0801db6c 	.word	0x0801db6c
 800fa60:	0801db38 	.word	0x0801db38
 800fa64:	0801db90 	.word	0x0801db90
 800fa68:	0801dbb0 	.word	0x0801dbb0

0800fa6c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b088      	sub	sp, #32
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	60f8      	str	r0, [r7, #12]
 800fa74:	60b9      	str	r1, [r7, #8]
 800fa76:	607a      	str	r2, [r7, #4]
 800fa78:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d106      	bne.n	800fa8e <recv_tcp+0x22>
 800fa80:	4b36      	ldr	r3, [pc, #216]	; (800fb5c <recv_tcp+0xf0>)
 800fa82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800fa86:	4936      	ldr	r1, [pc, #216]	; (800fb60 <recv_tcp+0xf4>)
 800fa88:	4836      	ldr	r0, [pc, #216]	; (800fb64 <recv_tcp+0xf8>)
 800fa8a:	f00c fef7 	bl	801c87c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d106      	bne.n	800faa2 <recv_tcp+0x36>
 800fa94:	4b31      	ldr	r3, [pc, #196]	; (800fb5c <recv_tcp+0xf0>)
 800fa96:	f240 122d 	movw	r2, #301	; 0x12d
 800fa9a:	4933      	ldr	r1, [pc, #204]	; (800fb68 <recv_tcp+0xfc>)
 800fa9c:	4831      	ldr	r0, [pc, #196]	; (800fb64 <recv_tcp+0xf8>)
 800fa9e:	f00c feed 	bl	801c87c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800faa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d006      	beq.n	800fab8 <recv_tcp+0x4c>
 800faaa:	4b2c      	ldr	r3, [pc, #176]	; (800fb5c <recv_tcp+0xf0>)
 800faac:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800fab0:	492e      	ldr	r1, [pc, #184]	; (800fb6c <recv_tcp+0x100>)
 800fab2:	482c      	ldr	r0, [pc, #176]	; (800fb64 <recv_tcp+0xf8>)
 800fab4:	f00c fee2 	bl	801c87c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800fabc:	697b      	ldr	r3, [r7, #20]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d102      	bne.n	800fac8 <recv_tcp+0x5c>
    return ERR_VAL;
 800fac2:	f06f 0305 	mvn.w	r3, #5
 800fac6:	e045      	b.n	800fb54 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	68ba      	ldr	r2, [r7, #8]
 800face:	429a      	cmp	r2, r3
 800fad0:	d006      	beq.n	800fae0 <recv_tcp+0x74>
 800fad2:	4b22      	ldr	r3, [pc, #136]	; (800fb5c <recv_tcp+0xf0>)
 800fad4:	f240 1235 	movw	r2, #309	; 0x135
 800fad8:	4925      	ldr	r1, [pc, #148]	; (800fb70 <recv_tcp+0x104>)
 800fada:	4822      	ldr	r0, [pc, #136]	; (800fb64 <recv_tcp+0xf8>)
 800fadc:	f00c fece 	bl	801c87c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	3310      	adds	r3, #16
 800fae4:	4618      	mov	r0, r3
 800fae6:	f00c fca1 	bl	801c42c <sys_mbox_valid>
 800faea:	4603      	mov	r3, r0
 800faec:	2b00      	cmp	r3, #0
 800faee:	d10d      	bne.n	800fb0c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d008      	beq.n	800fb08 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	891b      	ldrh	r3, [r3, #8]
 800fafa:	4619      	mov	r1, r3
 800fafc:	68b8      	ldr	r0, [r7, #8]
 800fafe:	f003 ffb3 	bl	8013a68 <tcp_recved>
      pbuf_free(p);
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f003 f95a 	bl	8012dbc <pbuf_free>
    }
    return ERR_OK;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	e023      	b.n	800fb54 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d005      	beq.n	800fb1e <recv_tcp+0xb2>
    msg = p;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	891b      	ldrh	r3, [r3, #8]
 800fb1a:	83fb      	strh	r3, [r7, #30]
 800fb1c:	e003      	b.n	800fb26 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800fb1e:	4b15      	ldr	r3, [pc, #84]	; (800fb74 <recv_tcp+0x108>)
 800fb20:	61bb      	str	r3, [r7, #24]
    len = 0;
 800fb22:	2300      	movs	r3, #0
 800fb24:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	3310      	adds	r3, #16
 800fb2a:	69b9      	ldr	r1, [r7, #24]
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f00c fc1b 	bl	801c368 <sys_mbox_trypost>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d002      	beq.n	800fb3e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800fb38:	f04f 33ff 	mov.w	r3, #4294967295
 800fb3c:	e00a      	b.n	800fb54 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d005      	beq.n	800fb52 <recv_tcp+0xe6>
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb4a:	8bfa      	ldrh	r2, [r7, #30]
 800fb4c:	2100      	movs	r1, #0
 800fb4e:	6978      	ldr	r0, [r7, #20]
 800fb50:	4798      	blx	r3
  }

  return ERR_OK;
 800fb52:	2300      	movs	r3, #0
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3720      	adds	r7, #32
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	0801daf4 	.word	0x0801daf4
 800fb60:	0801dbd0 	.word	0x0801dbd0
 800fb64:	0801db38 	.word	0x0801db38
 800fb68:	0801dbf4 	.word	0x0801dbf4
 800fb6c:	0801dc14 	.word	0x0801dc14
 800fb70:	0801dc2c 	.word	0x0801dc2c
 800fb74:	08020d02 	.word	0x08020d02

0800fb78 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b084      	sub	sp, #16
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d106      	bne.n	800fb9a <poll_tcp+0x22>
 800fb8c:	4b29      	ldr	r3, [pc, #164]	; (800fc34 <poll_tcp+0xbc>)
 800fb8e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800fb92:	4929      	ldr	r1, [pc, #164]	; (800fc38 <poll_tcp+0xc0>)
 800fb94:	4829      	ldr	r0, [pc, #164]	; (800fc3c <poll_tcp+0xc4>)
 800fb96:	f00c fe71 	bl	801c87c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	785b      	ldrb	r3, [r3, #1]
 800fb9e:	2b01      	cmp	r3, #1
 800fba0:	d104      	bne.n	800fbac <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800fba2:	2101      	movs	r1, #1
 800fba4:	68f8      	ldr	r0, [r7, #12]
 800fba6:	f000 ff25 	bl	80109f4 <lwip_netconn_do_writemore>
 800fbaa:	e016      	b.n	800fbda <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	785b      	ldrb	r3, [r3, #1]
 800fbb0:	2b04      	cmp	r3, #4
 800fbb2:	d112      	bne.n	800fbda <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	6a1b      	ldr	r3, [r3, #32]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d00a      	beq.n	800fbd2 <poll_tcp+0x5a>
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	6a1b      	ldr	r3, [r3, #32]
 800fbc0:	7a5b      	ldrb	r3, [r3, #9]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d005      	beq.n	800fbd2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	6a1b      	ldr	r3, [r3, #32]
 800fbca:	7a5a      	ldrb	r2, [r3, #9]
 800fbcc:	3a01      	subs	r2, #1
 800fbce:	b2d2      	uxtb	r2, r2
 800fbd0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800fbd2:	2101      	movs	r1, #1
 800fbd4:	68f8      	ldr	r0, [r7, #12]
 800fbd6:	f000 fb3b 	bl	8010250 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	7f1b      	ldrb	r3, [r3, #28]
 800fbde:	f003 0310 	and.w	r3, r3, #16
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d021      	beq.n	800fc2a <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	685b      	ldr	r3, [r3, #4]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d01d      	beq.n	800fc2a <poll_tcp+0xb2>
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	685b      	ldr	r3, [r3, #4]
 800fbf2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fbf6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800fbfa:	d316      	bcc.n	800fc2a <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	685b      	ldr	r3, [r3, #4]
 800fc00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800fc04:	2b04      	cmp	r3, #4
 800fc06:	d810      	bhi.n	800fc2a <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	7f1b      	ldrb	r3, [r3, #28]
 800fc0c:	f023 0310 	bic.w	r3, r3, #16
 800fc10:	b2da      	uxtb	r2, r3
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d005      	beq.n	800fc2a <poll_tcp+0xb2>
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc22:	2200      	movs	r2, #0
 800fc24:	2102      	movs	r1, #2
 800fc26:	68f8      	ldr	r0, [r7, #12]
 800fc28:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800fc2a:	2300      	movs	r3, #0
}
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	3710      	adds	r7, #16
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}
 800fc34:	0801daf4 	.word	0x0801daf4
 800fc38:	0801dc4c 	.word	0x0801dc4c
 800fc3c:	0801db38 	.word	0x0801db38

0800fc40 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b086      	sub	sp, #24
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	60b9      	str	r1, [r7, #8]
 800fc4a:	4613      	mov	r3, r2
 800fc4c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d106      	bne.n	800fc66 <sent_tcp+0x26>
 800fc58:	4b20      	ldr	r3, [pc, #128]	; (800fcdc <sent_tcp+0x9c>)
 800fc5a:	f240 1293 	movw	r2, #403	; 0x193
 800fc5e:	4920      	ldr	r1, [pc, #128]	; (800fce0 <sent_tcp+0xa0>)
 800fc60:	4820      	ldr	r0, [pc, #128]	; (800fce4 <sent_tcp+0xa4>)
 800fc62:	f00c fe0b 	bl	801c87c <iprintf>

  if (conn) {
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d032      	beq.n	800fcd2 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	785b      	ldrb	r3, [r3, #1]
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d104      	bne.n	800fc7e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800fc74:	2101      	movs	r1, #1
 800fc76:	6978      	ldr	r0, [r7, #20]
 800fc78:	f000 febc 	bl	80109f4 <lwip_netconn_do_writemore>
 800fc7c:	e007      	b.n	800fc8e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	785b      	ldrb	r3, [r3, #1]
 800fc82:	2b04      	cmp	r3, #4
 800fc84:	d103      	bne.n	800fc8e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800fc86:	2101      	movs	r1, #1
 800fc88:	6978      	ldr	r0, [r7, #20]
 800fc8a:	f000 fae1 	bl	8010250 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	685b      	ldr	r3, [r3, #4]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d01d      	beq.n	800fcd2 <sent_tcp+0x92>
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	685b      	ldr	r3, [r3, #4]
 800fc9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fc9e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800fca2:	d316      	bcc.n	800fcd2 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800fcac:	2b04      	cmp	r3, #4
 800fcae:	d810      	bhi.n	800fcd2 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	7f1b      	ldrb	r3, [r3, #28]
 800fcb4:	f023 0310 	bic.w	r3, r3, #16
 800fcb8:	b2da      	uxtb	r2, r3
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d005      	beq.n	800fcd2 <sent_tcp+0x92>
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcca:	88fa      	ldrh	r2, [r7, #6]
 800fccc:	2102      	movs	r1, #2
 800fcce:	6978      	ldr	r0, [r7, #20]
 800fcd0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800fcd2:	2300      	movs	r3, #0
}
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3718      	adds	r7, #24
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}
 800fcdc:	0801daf4 	.word	0x0801daf4
 800fce0:	0801dc4c 	.word	0x0801dc4c
 800fce4:	0801db38 	.word	0x0801db38

0800fce8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b088      	sub	sp, #32
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	460b      	mov	r3, r1
 800fcf2:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800fcf8:	69fb      	ldr	r3, [r7, #28]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d106      	bne.n	800fd0c <err_tcp+0x24>
 800fcfe:	4b5f      	ldr	r3, [pc, #380]	; (800fe7c <err_tcp+0x194>)
 800fd00:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800fd04:	495e      	ldr	r1, [pc, #376]	; (800fe80 <err_tcp+0x198>)
 800fd06:	485f      	ldr	r0, [pc, #380]	; (800fe84 <err_tcp+0x19c>)
 800fd08:	f00c fdb8 	bl	801c87c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800fd0c:	f00c fc98 	bl	801c640 <sys_arch_protect>
 800fd10:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800fd12:	69fb      	ldr	r3, [r7, #28]
 800fd14:	2200      	movs	r2, #0
 800fd16:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800fd18:	69fb      	ldr	r3, [r7, #28]
 800fd1a:	78fa      	ldrb	r2, [r7, #3]
 800fd1c:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800fd1e:	69fb      	ldr	r3, [r7, #28]
 800fd20:	7f1b      	ldrb	r3, [r3, #28]
 800fd22:	f043 0301 	orr.w	r3, r3, #1
 800fd26:	b2da      	uxtb	r2, r3
 800fd28:	69fb      	ldr	r3, [r7, #28]
 800fd2a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800fd2c:	69fb      	ldr	r3, [r7, #28]
 800fd2e:	785b      	ldrb	r3, [r3, #1]
 800fd30:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800fd32:	69fb      	ldr	r3, [r7, #28]
 800fd34:	2200      	movs	r2, #0
 800fd36:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800fd38:	69b8      	ldr	r0, [r7, #24]
 800fd3a:	f00c fc8f 	bl	801c65c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800fd3e:	69fb      	ldr	r3, [r7, #28]
 800fd40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d005      	beq.n	800fd52 <err_tcp+0x6a>
 800fd46:	69fb      	ldr	r3, [r7, #28]
 800fd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	2104      	movs	r1, #4
 800fd4e:	69f8      	ldr	r0, [r7, #28]
 800fd50:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fd52:	69fb      	ldr	r3, [r7, #28]
 800fd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d005      	beq.n	800fd66 <err_tcp+0x7e>
 800fd5a:	69fb      	ldr	r3, [r7, #28]
 800fd5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd5e:	2200      	movs	r2, #0
 800fd60:	2100      	movs	r1, #0
 800fd62:	69f8      	ldr	r0, [r7, #28]
 800fd64:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800fd66:	69fb      	ldr	r3, [r7, #28]
 800fd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d005      	beq.n	800fd7a <err_tcp+0x92>
 800fd6e:	69fb      	ldr	r3, [r7, #28]
 800fd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd72:	2200      	movs	r2, #0
 800fd74:	2102      	movs	r1, #2
 800fd76:	69f8      	ldr	r0, [r7, #28]
 800fd78:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800fd7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7ff fd86 	bl	800f890 <lwip_netconn_err_to_msg>
 800fd84:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800fd86:	69fb      	ldr	r3, [r7, #28]
 800fd88:	3310      	adds	r3, #16
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f00c fb4e 	bl	801c42c <sys_mbox_valid>
 800fd90:	4603      	mov	r3, r0
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d005      	beq.n	800fda2 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800fd96:	69fb      	ldr	r3, [r7, #28]
 800fd98:	3310      	adds	r3, #16
 800fd9a:	6939      	ldr	r1, [r7, #16]
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f00c fae3 	bl	801c368 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800fda2:	69fb      	ldr	r3, [r7, #28]
 800fda4:	3314      	adds	r3, #20
 800fda6:	4618      	mov	r0, r3
 800fda8:	f00c fb40 	bl	801c42c <sys_mbox_valid>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d005      	beq.n	800fdbe <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800fdb2:	69fb      	ldr	r3, [r7, #28]
 800fdb4:	3314      	adds	r3, #20
 800fdb6:	6939      	ldr	r1, [r7, #16]
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f00c fad5 	bl	801c368 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800fdbe:	7dfb      	ldrb	r3, [r7, #23]
 800fdc0:	2b01      	cmp	r3, #1
 800fdc2:	d005      	beq.n	800fdd0 <err_tcp+0xe8>
 800fdc4:	7dfb      	ldrb	r3, [r7, #23]
 800fdc6:	2b04      	cmp	r3, #4
 800fdc8:	d002      	beq.n	800fdd0 <err_tcp+0xe8>
 800fdca:	7dfb      	ldrb	r3, [r7, #23]
 800fdcc:	2b03      	cmp	r3, #3
 800fdce:	d143      	bne.n	800fe58 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800fdd0:	69fb      	ldr	r3, [r7, #28]
 800fdd2:	7f1b      	ldrb	r3, [r3, #28]
 800fdd4:	f003 0304 	and.w	r3, r3, #4
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	bf14      	ite	ne
 800fddc:	2301      	movne	r3, #1
 800fdde:	2300      	moveq	r3, #0
 800fde0:	b2db      	uxtb	r3, r3
 800fde2:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	7f1b      	ldrb	r3, [r3, #28]
 800fde8:	f023 0304 	bic.w	r3, r3, #4
 800fdec:	b2da      	uxtb	r2, r3
 800fdee:	69fb      	ldr	r3, [r7, #28]
 800fdf0:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d13b      	bne.n	800fe70 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800fdf8:	69fb      	ldr	r3, [r7, #28]
 800fdfa:	6a1b      	ldr	r3, [r3, #32]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d106      	bne.n	800fe0e <err_tcp+0x126>
 800fe00:	4b1e      	ldr	r3, [pc, #120]	; (800fe7c <err_tcp+0x194>)
 800fe02:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fe06:	4920      	ldr	r1, [pc, #128]	; (800fe88 <err_tcp+0x1a0>)
 800fe08:	481e      	ldr	r0, [pc, #120]	; (800fe84 <err_tcp+0x19c>)
 800fe0a:	f00c fd37 	bl	801c87c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800fe0e:	7dfb      	ldrb	r3, [r7, #23]
 800fe10:	2b04      	cmp	r3, #4
 800fe12:	d104      	bne.n	800fe1e <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800fe14:	69fb      	ldr	r3, [r7, #28]
 800fe16:	6a1b      	ldr	r3, [r3, #32]
 800fe18:	2200      	movs	r2, #0
 800fe1a:	711a      	strb	r2, [r3, #4]
 800fe1c:	e003      	b.n	800fe26 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800fe1e:	69fb      	ldr	r3, [r7, #28]
 800fe20:	6a1b      	ldr	r3, [r3, #32]
 800fe22:	78fa      	ldrb	r2, [r7, #3]
 800fe24:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800fe26:	69fb      	ldr	r3, [r7, #28]
 800fe28:	6a1b      	ldr	r3, [r3, #32]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	330c      	adds	r3, #12
 800fe2e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800fe30:	68b8      	ldr	r0, [r7, #8]
 800fe32:	f00c fb89 	bl	801c548 <sys_sem_valid>
 800fe36:	4603      	mov	r3, r0
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d106      	bne.n	800fe4a <err_tcp+0x162>
 800fe3c:	4b0f      	ldr	r3, [pc, #60]	; (800fe7c <err_tcp+0x194>)
 800fe3e:	f240 12ef 	movw	r2, #495	; 0x1ef
 800fe42:	4912      	ldr	r1, [pc, #72]	; (800fe8c <err_tcp+0x1a4>)
 800fe44:	480f      	ldr	r0, [pc, #60]	; (800fe84 <err_tcp+0x19c>)
 800fe46:	f00c fd19 	bl	801c87c <iprintf>
      conn->current_msg = NULL;
 800fe4a:	69fb      	ldr	r3, [r7, #28]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800fe50:	68b8      	ldr	r0, [r7, #8]
 800fe52:	f00c fb5f 	bl	801c514 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800fe56:	e00b      	b.n	800fe70 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800fe58:	69fb      	ldr	r3, [r7, #28]
 800fe5a:	6a1b      	ldr	r3, [r3, #32]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d008      	beq.n	800fe72 <err_tcp+0x18a>
 800fe60:	4b06      	ldr	r3, [pc, #24]	; (800fe7c <err_tcp+0x194>)
 800fe62:	f240 12f7 	movw	r2, #503	; 0x1f7
 800fe66:	490a      	ldr	r1, [pc, #40]	; (800fe90 <err_tcp+0x1a8>)
 800fe68:	4806      	ldr	r0, [pc, #24]	; (800fe84 <err_tcp+0x19c>)
 800fe6a:	f00c fd07 	bl	801c87c <iprintf>
  }
}
 800fe6e:	e000      	b.n	800fe72 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800fe70:	bf00      	nop
}
 800fe72:	bf00      	nop
 800fe74:	3720      	adds	r7, #32
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
 800fe7a:	bf00      	nop
 800fe7c:	0801daf4 	.word	0x0801daf4
 800fe80:	0801dc4c 	.word	0x0801dc4c
 800fe84:	0801db38 	.word	0x0801db38
 800fe88:	0801dc5c 	.word	0x0801dc5c
 800fe8c:	0801dc78 	.word	0x0801dc78
 800fe90:	0801dc94 	.word	0x0801dc94

0800fe94 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b084      	sub	sp, #16
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	685b      	ldr	r3, [r3, #4]
 800fea0:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800fea2:	6879      	ldr	r1, [r7, #4]
 800fea4:	68f8      	ldr	r0, [r7, #12]
 800fea6:	f004 fdbd 	bl	8014a24 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800feaa:	490a      	ldr	r1, [pc, #40]	; (800fed4 <setup_tcp+0x40>)
 800feac:	68f8      	ldr	r0, [r7, #12]
 800feae:	f004 fdcb 	bl	8014a48 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800feb2:	4909      	ldr	r1, [pc, #36]	; (800fed8 <setup_tcp+0x44>)
 800feb4:	68f8      	ldr	r0, [r7, #12]
 800feb6:	f004 fde9 	bl	8014a8c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800feba:	2202      	movs	r2, #2
 800febc:	4907      	ldr	r1, [pc, #28]	; (800fedc <setup_tcp+0x48>)
 800febe:	68f8      	ldr	r0, [r7, #12]
 800fec0:	f004 fe40 	bl	8014b44 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800fec4:	4906      	ldr	r1, [pc, #24]	; (800fee0 <setup_tcp+0x4c>)
 800fec6:	68f8      	ldr	r0, [r7, #12]
 800fec8:	f004 fe02 	bl	8014ad0 <tcp_err>
}
 800fecc:	bf00      	nop
 800fece:	3710      	adds	r7, #16
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}
 800fed4:	0800fa6d 	.word	0x0800fa6d
 800fed8:	0800fc41 	.word	0x0800fc41
 800fedc:	0800fb79 	.word	0x0800fb79
 800fee0:	0800fce9 	.word	0x0800fce9

0800fee4 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800fee4:	b590      	push	{r4, r7, lr}
 800fee6:	b085      	sub	sp, #20
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800feec:	2300      	movs	r3, #0
 800feee:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d006      	beq.n	800ff08 <pcb_new+0x24>
 800fefa:	4b2b      	ldr	r3, [pc, #172]	; (800ffa8 <pcb_new+0xc4>)
 800fefc:	f240 2265 	movw	r2, #613	; 0x265
 800ff00:	492a      	ldr	r1, [pc, #168]	; (800ffac <pcb_new+0xc8>)
 800ff02:	482b      	ldr	r0, [pc, #172]	; (800ffb0 <pcb_new+0xcc>)
 800ff04:	f00c fcba 	bl	801c87c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	781b      	ldrb	r3, [r3, #0]
 800ff0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ff12:	2b10      	cmp	r3, #16
 800ff14:	d022      	beq.n	800ff5c <pcb_new+0x78>
 800ff16:	2b20      	cmp	r3, #32
 800ff18:	d133      	bne.n	800ff82 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681c      	ldr	r4, [r3, #0]
 800ff1e:	7bfb      	ldrb	r3, [r7, #15]
 800ff20:	4618      	mov	r0, r3
 800ff22:	f009 fecc 	bl	8019cbe <udp_new_ip_type>
 800ff26:	4603      	mov	r3, r0
 800ff28:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	685b      	ldr	r3, [r3, #4]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d02a      	beq.n	800ff8a <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	781b      	ldrb	r3, [r3, #0]
 800ff3a:	2b22      	cmp	r3, #34	; 0x22
 800ff3c:	d104      	bne.n	800ff48 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	2201      	movs	r2, #1
 800ff46:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	6858      	ldr	r0, [r3, #4]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	461a      	mov	r2, r3
 800ff54:	4917      	ldr	r1, [pc, #92]	; (800ffb4 <pcb_new+0xd0>)
 800ff56:	f009 fe39 	bl	8019bcc <udp_recv>
      }
      break;
 800ff5a:	e016      	b.n	800ff8a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681c      	ldr	r4, [r3, #0]
 800ff60:	7bfb      	ldrb	r3, [r7, #15]
 800ff62:	4618      	mov	r0, r3
 800ff64:	f004 fd50 	bl	8014a08 <tcp_new_ip_type>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	685b      	ldr	r3, [r3, #4]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d00b      	beq.n	800ff8e <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7ff ff8a 	bl	800fe94 <setup_tcp>
      }
      break;
 800ff80:	e005      	b.n	800ff8e <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	22fa      	movs	r2, #250	; 0xfa
 800ff86:	711a      	strb	r2, [r3, #4]
      return;
 800ff88:	e00a      	b.n	800ffa0 <pcb_new+0xbc>
      break;
 800ff8a:	bf00      	nop
 800ff8c:	e000      	b.n	800ff90 <pcb_new+0xac>
      break;
 800ff8e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d102      	bne.n	800ffa0 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	22ff      	movs	r2, #255	; 0xff
 800ff9e:	711a      	strb	r2, [r3, #4]
  }
}
 800ffa0:	3714      	adds	r7, #20
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd90      	pop	{r4, r7, pc}
 800ffa6:	bf00      	nop
 800ffa8:	0801daf4 	.word	0x0801daf4
 800ffac:	0801dcd8 	.word	0x0801dcd8
 800ffb0:	0801db38 	.word	0x0801db38
 800ffb4:	0800f971 	.word	0x0800f971

0800ffb8 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b084      	sub	sp, #16
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d102      	bne.n	800ffda <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800ffd4:	68f8      	ldr	r0, [r7, #12]
 800ffd6:	f7ff ff85 	bl	800fee4 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800ffda:	bf00      	nop
 800ffdc:	3710      	adds	r7, #16
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}
	...

0800ffe4 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b086      	sub	sp, #24
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	4603      	mov	r3, r0
 800ffec:	6039      	str	r1, [r7, #0]
 800ffee:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800fff0:	2300      	movs	r3, #0
 800fff2:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800fff4:	2007      	movs	r0, #7
 800fff6:	f001 ffc7 	bl	8011f88 <memp_malloc>
 800fffa:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d101      	bne.n	8010006 <netconn_alloc+0x22>
    return NULL;
 8010002:	2300      	movs	r3, #0
 8010004:	e052      	b.n	80100ac <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	2200      	movs	r2, #0
 801000a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	79fa      	ldrb	r2, [r7, #7]
 8010010:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2200      	movs	r2, #0
 8010016:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8010018:	79fb      	ldrb	r3, [r7, #7]
 801001a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801001e:	2b10      	cmp	r3, #16
 8010020:	d004      	beq.n	801002c <netconn_alloc+0x48>
 8010022:	2b20      	cmp	r3, #32
 8010024:	d105      	bne.n	8010032 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8010026:	2306      	movs	r3, #6
 8010028:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 801002a:	e00a      	b.n	8010042 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 801002c:	2306      	movs	r3, #6
 801002e:	617b      	str	r3, [r7, #20]
      break;
 8010030:	e007      	b.n	8010042 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8010032:	4b20      	ldr	r3, [pc, #128]	; (80100b4 <netconn_alloc+0xd0>)
 8010034:	f240 22e5 	movw	r2, #741	; 0x2e5
 8010038:	491f      	ldr	r1, [pc, #124]	; (80100b8 <netconn_alloc+0xd4>)
 801003a:	4820      	ldr	r0, [pc, #128]	; (80100bc <netconn_alloc+0xd8>)
 801003c:	f00c fc1e 	bl	801c87c <iprintf>
      goto free_and_return;
 8010040:	e02f      	b.n	80100a2 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	3310      	adds	r3, #16
 8010046:	6979      	ldr	r1, [r7, #20]
 8010048:	4618      	mov	r0, r3
 801004a:	f00c f961 	bl	801c310 <sys_mbox_new>
 801004e:	4603      	mov	r3, r0
 8010050:	2b00      	cmp	r3, #0
 8010052:	d125      	bne.n	80100a0 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	330c      	adds	r3, #12
 8010058:	2100      	movs	r1, #0
 801005a:	4618      	mov	r0, r3
 801005c:	f00c fa04 	bl	801c468 <sys_sem_new>
 8010060:	4603      	mov	r3, r0
 8010062:	2b00      	cmp	r3, #0
 8010064:	d005      	beq.n	8010072 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	3310      	adds	r3, #16
 801006a:	4618      	mov	r0, r3
 801006c:	f00c f96a 	bl	801c344 <sys_mbox_free>
    goto free_and_return;
 8010070:	e017      	b.n	80100a2 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	3314      	adds	r3, #20
 8010076:	4618      	mov	r0, r3
 8010078:	f00c f9e9 	bl	801c44e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	2200      	movs	r2, #0
 8010080:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	f04f 32ff 	mov.w	r2, #4294967295
 8010088:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	683a      	ldr	r2, [r7, #0]
 801008e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	2200      	movs	r2, #0
 8010094:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	7cfa      	ldrb	r2, [r7, #19]
 801009a:	771a      	strb	r2, [r3, #28]
  return conn;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	e005      	b.n	80100ac <netconn_alloc+0xc8>
    goto free_and_return;
 80100a0:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80100a2:	68f9      	ldr	r1, [r7, #12]
 80100a4:	2007      	movs	r0, #7
 80100a6:	f001 ffe5 	bl	8012074 <memp_free>
  return NULL;
 80100aa:	2300      	movs	r3, #0
}
 80100ac:	4618      	mov	r0, r3
 80100ae:	3718      	adds	r7, #24
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}
 80100b4:	0801daf4 	.word	0x0801daf4
 80100b8:	0801dcf8 	.word	0x0801dcf8
 80100bc:	0801db38 	.word	0x0801db38

080100c0 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b082      	sub	sp, #8
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d006      	beq.n	80100de <netconn_free+0x1e>
 80100d0:	4b1b      	ldr	r3, [pc, #108]	; (8010140 <netconn_free+0x80>)
 80100d2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80100d6:	491b      	ldr	r1, [pc, #108]	; (8010144 <netconn_free+0x84>)
 80100d8:	481b      	ldr	r0, [pc, #108]	; (8010148 <netconn_free+0x88>)
 80100da:	f00c fbcf 	bl	801c87c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	3310      	adds	r3, #16
 80100e2:	4618      	mov	r0, r3
 80100e4:	f00c f9a2 	bl	801c42c <sys_mbox_valid>
 80100e8:	4603      	mov	r3, r0
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d006      	beq.n	80100fc <netconn_free+0x3c>
 80100ee:	4b14      	ldr	r3, [pc, #80]	; (8010140 <netconn_free+0x80>)
 80100f0:	f240 3223 	movw	r2, #803	; 0x323
 80100f4:	4915      	ldr	r1, [pc, #84]	; (801014c <netconn_free+0x8c>)
 80100f6:	4814      	ldr	r0, [pc, #80]	; (8010148 <netconn_free+0x88>)
 80100f8:	f00c fbc0 	bl	801c87c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	3314      	adds	r3, #20
 8010100:	4618      	mov	r0, r3
 8010102:	f00c f993 	bl	801c42c <sys_mbox_valid>
 8010106:	4603      	mov	r3, r0
 8010108:	2b00      	cmp	r3, #0
 801010a:	d006      	beq.n	801011a <netconn_free+0x5a>
 801010c:	4b0c      	ldr	r3, [pc, #48]	; (8010140 <netconn_free+0x80>)
 801010e:	f240 3226 	movw	r2, #806	; 0x326
 8010112:	490f      	ldr	r1, [pc, #60]	; (8010150 <netconn_free+0x90>)
 8010114:	480c      	ldr	r0, [pc, #48]	; (8010148 <netconn_free+0x88>)
 8010116:	f00c fbb1 	bl	801c87c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	330c      	adds	r3, #12
 801011e:	4618      	mov	r0, r3
 8010120:	f00c fa05 	bl	801c52e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	330c      	adds	r3, #12
 8010128:	4618      	mov	r0, r3
 801012a:	f00c fa1e 	bl	801c56a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 801012e:	6879      	ldr	r1, [r7, #4]
 8010130:	2007      	movs	r0, #7
 8010132:	f001 ff9f 	bl	8012074 <memp_free>
}
 8010136:	bf00      	nop
 8010138:	3708      	adds	r7, #8
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
 801013e:	bf00      	nop
 8010140:	0801daf4 	.word	0x0801daf4
 8010144:	0801dd20 	.word	0x0801dd20
 8010148:	0801db38 	.word	0x0801db38
 801014c:	0801dd50 	.word	0x0801dd50
 8010150:	0801dd8c 	.word	0x0801dd8c

08010154 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b086      	sub	sp, #24
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	3310      	adds	r3, #16
 8010160:	4618      	mov	r0, r3
 8010162:	f00c f963 	bl	801c42c <sys_mbox_valid>
 8010166:	4603      	mov	r3, r0
 8010168:	2b00      	cmp	r3, #0
 801016a:	d02f      	beq.n	80101cc <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 801016c:	e018      	b.n	80101a0 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	781b      	ldrb	r3, [r3, #0]
 8010172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010176:	2b10      	cmp	r3, #16
 8010178:	d10e      	bne.n	8010198 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 801017a:	693b      	ldr	r3, [r7, #16]
 801017c:	f107 020f 	add.w	r2, r7, #15
 8010180:	4611      	mov	r1, r2
 8010182:	4618      	mov	r0, r3
 8010184:	f7ff fbba 	bl	800f8fc <lwip_netconn_is_err_msg>
 8010188:	4603      	mov	r3, r0
 801018a:	2b00      	cmp	r3, #0
 801018c:	d108      	bne.n	80101a0 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 801018e:	693b      	ldr	r3, [r7, #16]
 8010190:	4618      	mov	r0, r3
 8010192:	f002 fe13 	bl	8012dbc <pbuf_free>
 8010196:	e003      	b.n	80101a0 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	4618      	mov	r0, r3
 801019c:	f000 ff0e 	bl	8010fbc <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	3310      	adds	r3, #16
 80101a4:	f107 0210 	add.w	r2, r7, #16
 80101a8:	4611      	mov	r1, r2
 80101aa:	4618      	mov	r0, r3
 80101ac:	f00c f927 	bl	801c3fe <sys_arch_mbox_tryfetch>
 80101b0:	4603      	mov	r3, r0
 80101b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101b6:	d1da      	bne.n	801016e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	3310      	adds	r3, #16
 80101bc:	4618      	mov	r0, r3
 80101be:	f00c f8c1 	bl	801c344 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	3310      	adds	r3, #16
 80101c6:	4618      	mov	r0, r3
 80101c8:	f00c f941 	bl	801c44e <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	3314      	adds	r3, #20
 80101d0:	4618      	mov	r0, r3
 80101d2:	f00c f92b 	bl	801c42c <sys_mbox_valid>
 80101d6:	4603      	mov	r3, r0
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d034      	beq.n	8010246 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80101dc:	e01d      	b.n	801021a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	f107 020e 	add.w	r2, r7, #14
 80101e4:	4611      	mov	r1, r2
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7ff fb88 	bl	800f8fc <lwip_netconn_is_err_msg>
 80101ec:	4603      	mov	r3, r0
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d113      	bne.n	801021a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80101f2:	693b      	ldr	r3, [r7, #16]
 80101f4:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80101f6:	6978      	ldr	r0, [r7, #20]
 80101f8:	f7ff ffac 	bl	8010154 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	685b      	ldr	r3, [r3, #4]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d007      	beq.n	8010214 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	685b      	ldr	r3, [r3, #4]
 8010208:	4618      	mov	r0, r3
 801020a:	f003 fbc7 	bl	801399c <tcp_abort>
            newconn->pcb.tcp = NULL;
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	2200      	movs	r2, #0
 8010212:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8010214:	6978      	ldr	r0, [r7, #20]
 8010216:	f7ff ff53 	bl	80100c0 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	3314      	adds	r3, #20
 801021e:	f107 0210 	add.w	r2, r7, #16
 8010222:	4611      	mov	r1, r2
 8010224:	4618      	mov	r0, r3
 8010226:	f00c f8ea 	bl	801c3fe <sys_arch_mbox_tryfetch>
 801022a:	4603      	mov	r3, r0
 801022c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010230:	d1d5      	bne.n	80101de <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	3314      	adds	r3, #20
 8010236:	4618      	mov	r0, r3
 8010238:	f00c f884 	bl	801c344 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	3314      	adds	r3, #20
 8010240:	4618      	mov	r0, r3
 8010242:	f00c f904 	bl	801c44e <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8010246:	bf00      	nop
 8010248:	3718      	adds	r7, #24
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}
	...

08010250 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b086      	sub	sp, #24
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	460b      	mov	r3, r1
 801025a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 801025c:	2300      	movs	r3, #0
 801025e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d106      	bne.n	8010274 <lwip_netconn_do_close_internal+0x24>
 8010266:	4b87      	ldr	r3, [pc, #540]	; (8010484 <lwip_netconn_do_close_internal+0x234>)
 8010268:	f240 32a2 	movw	r2, #930	; 0x3a2
 801026c:	4986      	ldr	r1, [pc, #536]	; (8010488 <lwip_netconn_do_close_internal+0x238>)
 801026e:	4887      	ldr	r0, [pc, #540]	; (801048c <lwip_netconn_do_close_internal+0x23c>)
 8010270:	f00c fb04 	bl	801c87c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801027c:	2b10      	cmp	r3, #16
 801027e:	d006      	beq.n	801028e <lwip_netconn_do_close_internal+0x3e>
 8010280:	4b80      	ldr	r3, [pc, #512]	; (8010484 <lwip_netconn_do_close_internal+0x234>)
 8010282:	f240 32a3 	movw	r2, #931	; 0x3a3
 8010286:	4982      	ldr	r1, [pc, #520]	; (8010490 <lwip_netconn_do_close_internal+0x240>)
 8010288:	4880      	ldr	r0, [pc, #512]	; (801048c <lwip_netconn_do_close_internal+0x23c>)
 801028a:	f00c faf7 	bl	801c87c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	785b      	ldrb	r3, [r3, #1]
 8010292:	2b04      	cmp	r3, #4
 8010294:	d006      	beq.n	80102a4 <lwip_netconn_do_close_internal+0x54>
 8010296:	4b7b      	ldr	r3, [pc, #492]	; (8010484 <lwip_netconn_do_close_internal+0x234>)
 8010298:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 801029c:	497d      	ldr	r1, [pc, #500]	; (8010494 <lwip_netconn_do_close_internal+0x244>)
 801029e:	487b      	ldr	r0, [pc, #492]	; (801048c <lwip_netconn_do_close_internal+0x23c>)
 80102a0:	f00c faec 	bl	801c87c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d106      	bne.n	80102ba <lwip_netconn_do_close_internal+0x6a>
 80102ac:	4b75      	ldr	r3, [pc, #468]	; (8010484 <lwip_netconn_do_close_internal+0x234>)
 80102ae:	f240 32a5 	movw	r2, #933	; 0x3a5
 80102b2:	4979      	ldr	r1, [pc, #484]	; (8010498 <lwip_netconn_do_close_internal+0x248>)
 80102b4:	4875      	ldr	r0, [pc, #468]	; (801048c <lwip_netconn_do_close_internal+0x23c>)
 80102b6:	f00c fae1 	bl	801c87c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6a1b      	ldr	r3, [r3, #32]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d106      	bne.n	80102d0 <lwip_netconn_do_close_internal+0x80>
 80102c2:	4b70      	ldr	r3, [pc, #448]	; (8010484 <lwip_netconn_do_close_internal+0x234>)
 80102c4:	f240 32a6 	movw	r2, #934	; 0x3a6
 80102c8:	4974      	ldr	r1, [pc, #464]	; (801049c <lwip_netconn_do_close_internal+0x24c>)
 80102ca:	4870      	ldr	r0, [pc, #448]	; (801048c <lwip_netconn_do_close_internal+0x23c>)
 80102cc:	f00c fad6 	bl	801c87c <iprintf>

  tpcb = conn->pcb.tcp;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	685b      	ldr	r3, [r3, #4]
 80102d4:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	6a1b      	ldr	r3, [r3, #32]
 80102da:	7a1b      	ldrb	r3, [r3, #8]
 80102dc:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80102de:	7bfb      	ldrb	r3, [r7, #15]
 80102e0:	f003 0301 	and.w	r3, r3, #1
 80102e4:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80102e6:	7bfb      	ldrb	r3, [r7, #15]
 80102e8:	f003 0302 	and.w	r3, r3, #2
 80102ec:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80102ee:	7bfb      	ldrb	r3, [r7, #15]
 80102f0:	2b03      	cmp	r3, #3
 80102f2:	d102      	bne.n	80102fa <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80102f4:	2301      	movs	r3, #1
 80102f6:	75bb      	strb	r3, [r7, #22]
 80102f8:	e01f      	b.n	801033a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80102fa:	7bbb      	ldrb	r3, [r7, #14]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d00e      	beq.n	801031e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8010304:	2b05      	cmp	r3, #5
 8010306:	d007      	beq.n	8010318 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8010308:	693b      	ldr	r3, [r7, #16]
 801030a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 801030c:	2b06      	cmp	r3, #6
 801030e:	d003      	beq.n	8010318 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8010314:	2b08      	cmp	r3, #8
 8010316:	d102      	bne.n	801031e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8010318:	2301      	movs	r3, #1
 801031a:	75bb      	strb	r3, [r7, #22]
 801031c:	e00d      	b.n	801033a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 801031e:	7b7b      	ldrb	r3, [r7, #13]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d008      	beq.n	8010336 <lwip_netconn_do_close_internal+0xe6>
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	8b5b      	ldrh	r3, [r3, #26]
 8010328:	f003 0310 	and.w	r3, r3, #16
 801032c:	2b00      	cmp	r3, #0
 801032e:	d002      	beq.n	8010336 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8010330:	2301      	movs	r3, #1
 8010332:	75bb      	strb	r3, [r7, #22]
 8010334:	e001      	b.n	801033a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8010336:	2300      	movs	r3, #0
 8010338:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 801033a:	7dbb      	ldrb	r3, [r7, #22]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d003      	beq.n	8010348 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8010340:	2100      	movs	r1, #0
 8010342:	6938      	ldr	r0, [r7, #16]
 8010344:	f004 fb6e 	bl	8014a24 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	7d1b      	ldrb	r3, [r3, #20]
 801034c:	2b01      	cmp	r3, #1
 801034e:	d104      	bne.n	801035a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8010350:	2100      	movs	r1, #0
 8010352:	6938      	ldr	r0, [r7, #16]
 8010354:	f004 fbde 	bl	8014b14 <tcp_accept>
 8010358:	e01d      	b.n	8010396 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 801035a:	7bbb      	ldrb	r3, [r7, #14]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d007      	beq.n	8010370 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8010360:	2100      	movs	r1, #0
 8010362:	6938      	ldr	r0, [r7, #16]
 8010364:	f004 fb70 	bl	8014a48 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8010368:	2100      	movs	r1, #0
 801036a:	6938      	ldr	r0, [r7, #16]
 801036c:	f004 fbd2 	bl	8014b14 <tcp_accept>
    }
    if (shut_tx) {
 8010370:	7b7b      	ldrb	r3, [r7, #13]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d003      	beq.n	801037e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8010376:	2100      	movs	r1, #0
 8010378:	6938      	ldr	r0, [r7, #16]
 801037a:	f004 fb87 	bl	8014a8c <tcp_sent>
    }
    if (shut_close) {
 801037e:	7dbb      	ldrb	r3, [r7, #22]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d008      	beq.n	8010396 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8010384:	2200      	movs	r2, #0
 8010386:	2100      	movs	r1, #0
 8010388:	6938      	ldr	r0, [r7, #16]
 801038a:	f004 fbdb 	bl	8014b44 <tcp_poll>
      tcp_err(tpcb, NULL);
 801038e:	2100      	movs	r1, #0
 8010390:	6938      	ldr	r0, [r7, #16]
 8010392:	f004 fb9d 	bl	8014ad0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8010396:	7dbb      	ldrb	r3, [r7, #22]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d005      	beq.n	80103a8 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 801039c:	6938      	ldr	r0, [r7, #16]
 801039e:	f003 f9b7 	bl	8013710 <tcp_close>
 80103a2:	4603      	mov	r3, r0
 80103a4:	75fb      	strb	r3, [r7, #23]
 80103a6:	e007      	b.n	80103b8 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80103a8:	7bbb      	ldrb	r3, [r7, #14]
 80103aa:	7b7a      	ldrb	r2, [r7, #13]
 80103ac:	4619      	mov	r1, r3
 80103ae:	6938      	ldr	r0, [r7, #16]
 80103b0:	f003 f9da 	bl	8013768 <tcp_shutdown>
 80103b4:	4603      	mov	r3, r0
 80103b6:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80103b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d102      	bne.n	80103c6 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80103c0:	2301      	movs	r3, #1
 80103c2:	757b      	strb	r3, [r7, #21]
 80103c4:	e016      	b.n	80103f4 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80103c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80103ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ce:	d10f      	bne.n	80103f0 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6a1b      	ldr	r3, [r3, #32]
 80103d4:	7a5b      	ldrb	r3, [r3, #9]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d10c      	bne.n	80103f4 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80103da:	2301      	movs	r3, #1
 80103dc:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80103de:	7dbb      	ldrb	r3, [r7, #22]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d007      	beq.n	80103f4 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80103e4:	6938      	ldr	r0, [r7, #16]
 80103e6:	f003 fad9 	bl	801399c <tcp_abort>
          err = ERR_OK;
 80103ea:	2300      	movs	r3, #0
 80103ec:	75fb      	strb	r3, [r7, #23]
 80103ee:	e001      	b.n	80103f4 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80103f0:	2301      	movs	r3, #1
 80103f2:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80103f4:	7d7b      	ldrb	r3, [r7, #21]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d052      	beq.n	80104a0 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6a1b      	ldr	r3, [r3, #32]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	330c      	adds	r3, #12
 8010402:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	6a1b      	ldr	r3, [r3, #32]
 8010408:	7dfa      	ldrb	r2, [r7, #23]
 801040a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2200      	movs	r2, #0
 8010410:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2200      	movs	r2, #0
 8010416:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8010418:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d129      	bne.n	8010474 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8010420:	7dbb      	ldrb	r3, [r7, #22]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d00c      	beq.n	8010440 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2200      	movs	r2, #0
 801042a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010430:	2b00      	cmp	r3, #0
 8010432:	d005      	beq.n	8010440 <lwip_netconn_do_close_internal+0x1f0>
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010438:	2200      	movs	r2, #0
 801043a:	2104      	movs	r1, #4
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	4798      	blx	r3
      }
      if (shut_rx) {
 8010440:	7bbb      	ldrb	r3, [r7, #14]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d009      	beq.n	801045a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801044a:	2b00      	cmp	r3, #0
 801044c:	d005      	beq.n	801045a <lwip_netconn_do_close_internal+0x20a>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010452:	2200      	movs	r2, #0
 8010454:	2100      	movs	r1, #0
 8010456:	6878      	ldr	r0, [r7, #4]
 8010458:	4798      	blx	r3
      }
      if (shut_tx) {
 801045a:	7b7b      	ldrb	r3, [r7, #13]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d009      	beq.n	8010474 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010464:	2b00      	cmp	r3, #0
 8010466:	d005      	beq.n	8010474 <lwip_netconn_do_close_internal+0x224>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801046c:	2200      	movs	r2, #0
 801046e:	2102      	movs	r1, #2
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8010474:	78fb      	ldrb	r3, [r7, #3]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d002      	beq.n	8010480 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 801047a:	68b8      	ldr	r0, [r7, #8]
 801047c:	f00c f84a 	bl	801c514 <sys_sem_signal>
    }
    return ERR_OK;
 8010480:	2300      	movs	r3, #0
 8010482:	e03c      	b.n	80104fe <lwip_netconn_do_close_internal+0x2ae>
 8010484:	0801daf4 	.word	0x0801daf4
 8010488:	0801ddc8 	.word	0x0801ddc8
 801048c:	0801db38 	.word	0x0801db38
 8010490:	0801ddd8 	.word	0x0801ddd8
 8010494:	0801ddf8 	.word	0x0801ddf8
 8010498:	0801de1c 	.word	0x0801de1c
 801049c:	0801dc5c 	.word	0x0801dc5c
  }
  if (!close_finished) {
 80104a0:	7d7b      	ldrb	r3, [r7, #21]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d11e      	bne.n	80104e4 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	7d1b      	ldrb	r3, [r3, #20]
 80104aa:	2b01      	cmp	r3, #1
 80104ac:	d106      	bne.n	80104bc <lwip_netconn_do_close_internal+0x26c>
 80104ae:	4b16      	ldr	r3, [pc, #88]	; (8010508 <lwip_netconn_do_close_internal+0x2b8>)
 80104b0:	f240 4241 	movw	r2, #1089	; 0x441
 80104b4:	4915      	ldr	r1, [pc, #84]	; (801050c <lwip_netconn_do_close_internal+0x2bc>)
 80104b6:	4816      	ldr	r0, [pc, #88]	; (8010510 <lwip_netconn_do_close_internal+0x2c0>)
 80104b8:	f00c f9e0 	bl	801c87c <iprintf>
    if (shut_tx) {
 80104bc:	7b7b      	ldrb	r3, [r7, #13]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d003      	beq.n	80104ca <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 80104c2:	4914      	ldr	r1, [pc, #80]	; (8010514 <lwip_netconn_do_close_internal+0x2c4>)
 80104c4:	6938      	ldr	r0, [r7, #16]
 80104c6:	f004 fae1 	bl	8014a8c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80104ca:	2201      	movs	r2, #1
 80104cc:	4912      	ldr	r1, [pc, #72]	; (8010518 <lwip_netconn_do_close_internal+0x2c8>)
 80104ce:	6938      	ldr	r0, [r7, #16]
 80104d0:	f004 fb38 	bl	8014b44 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80104d4:	4911      	ldr	r1, [pc, #68]	; (801051c <lwip_netconn_do_close_internal+0x2cc>)
 80104d6:	6938      	ldr	r0, [r7, #16]
 80104d8:	f004 fafa 	bl	8014ad0 <tcp_err>
    tcp_arg(tpcb, conn);
 80104dc:	6879      	ldr	r1, [r7, #4]
 80104de:	6938      	ldr	r0, [r7, #16]
 80104e0:	f004 faa0 	bl	8014a24 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80104e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d106      	bne.n	80104fa <lwip_netconn_do_close_internal+0x2aa>
 80104ec:	4b06      	ldr	r3, [pc, #24]	; (8010508 <lwip_netconn_do_close_internal+0x2b8>)
 80104ee:	f240 424d 	movw	r2, #1101	; 0x44d
 80104f2:	490b      	ldr	r1, [pc, #44]	; (8010520 <lwip_netconn_do_close_internal+0x2d0>)
 80104f4:	4806      	ldr	r0, [pc, #24]	; (8010510 <lwip_netconn_do_close_internal+0x2c0>)
 80104f6:	f00c f9c1 	bl	801c87c <iprintf>
  return err;
 80104fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80104fe:	4618      	mov	r0, r3
 8010500:	3718      	adds	r7, #24
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}
 8010506:	bf00      	nop
 8010508:	0801daf4 	.word	0x0801daf4
 801050c:	0801de30 	.word	0x0801de30
 8010510:	0801db38 	.word	0x0801db38
 8010514:	0800fc41 	.word	0x0800fc41
 8010518:	0800fb79 	.word	0x0800fb79
 801051c:	0800fce9 	.word	0x0800fce9
 8010520:	0801de54 	.word	0x0801de54

08010524 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b084      	sub	sp, #16
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	785b      	ldrb	r3, [r3, #1]
 8010536:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8010538:	7afb      	ldrb	r3, [r7, #11]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d00d      	beq.n	801055a <lwip_netconn_do_delconn+0x36>
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	781b      	ldrb	r3, [r3, #0]
 8010544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010548:	2b10      	cmp	r3, #16
 801054a:	d006      	beq.n	801055a <lwip_netconn_do_delconn+0x36>
 801054c:	4b60      	ldr	r3, [pc, #384]	; (80106d0 <lwip_netconn_do_delconn+0x1ac>)
 801054e:	f240 425e 	movw	r2, #1118	; 0x45e
 8010552:	4960      	ldr	r1, [pc, #384]	; (80106d4 <lwip_netconn_do_delconn+0x1b0>)
 8010554:	4860      	ldr	r0, [pc, #384]	; (80106d8 <lwip_netconn_do_delconn+0x1b4>)
 8010556:	f00c f991 	bl	801c87c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 801055a:	7afb      	ldrb	r3, [r7, #11]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d005      	beq.n	801056c <lwip_netconn_do_delconn+0x48>
 8010560:	7afb      	ldrb	r3, [r7, #11]
 8010562:	2b02      	cmp	r3, #2
 8010564:	d002      	beq.n	801056c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8010566:	7afb      	ldrb	r3, [r7, #11]
 8010568:	2b03      	cmp	r3, #3
 801056a:	d109      	bne.n	8010580 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 801056c:	7afb      	ldrb	r3, [r7, #11]
 801056e:	2b03      	cmp	r3, #3
 8010570:	d10a      	bne.n	8010588 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	7f1b      	ldrb	r3, [r3, #28]
 8010578:	f003 0304 	and.w	r3, r3, #4
 801057c:	2b00      	cmp	r3, #0
 801057e:	d103      	bne.n	8010588 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	22fb      	movs	r2, #251	; 0xfb
 8010584:	711a      	strb	r2, [r3, #4]
 8010586:	e097      	b.n	80106b8 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8010588:	7afb      	ldrb	r3, [r7, #11]
 801058a:	2b03      	cmp	r3, #3
 801058c:	d10d      	bne.n	80105aa <lwip_netconn_do_delconn+0x86>
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	7f1b      	ldrb	r3, [r3, #28]
 8010594:	f003 0304 	and.w	r3, r3, #4
 8010598:	2b00      	cmp	r3, #0
 801059a:	d106      	bne.n	80105aa <lwip_netconn_do_delconn+0x86>
 801059c:	4b4c      	ldr	r3, [pc, #304]	; (80106d0 <lwip_netconn_do_delconn+0x1ac>)
 801059e:	f240 427a 	movw	r2, #1146	; 0x47a
 80105a2:	494e      	ldr	r1, [pc, #312]	; (80106dc <lwip_netconn_do_delconn+0x1b8>)
 80105a4:	484c      	ldr	r0, [pc, #304]	; (80106d8 <lwip_netconn_do_delconn+0x1b4>)
 80105a6:	f00c f969 	bl	801c87c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	2200      	movs	r2, #0
 80105ae:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7ff fdcd 	bl	8010154 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	685b      	ldr	r3, [r3, #4]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d05f      	beq.n	8010684 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	781b      	ldrb	r3, [r3, #0]
 80105ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80105ce:	2b10      	cmp	r3, #16
 80105d0:	d00d      	beq.n	80105ee <lwip_netconn_do_delconn+0xca>
 80105d2:	2b20      	cmp	r3, #32
 80105d4:	d151      	bne.n	801067a <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	685b      	ldr	r3, [r3, #4]
 80105dc:	2200      	movs	r2, #0
 80105de:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	685b      	ldr	r3, [r3, #4]
 80105e6:	4618      	mov	r0, r3
 80105e8:	f009 fb10 	bl	8019c0c <udp_remove>
          break;
 80105ec:	e046      	b.n	801067c <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	6a1b      	ldr	r3, [r3, #32]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d006      	beq.n	8010606 <lwip_netconn_do_delconn+0xe2>
 80105f8:	4b35      	ldr	r3, [pc, #212]	; (80106d0 <lwip_netconn_do_delconn+0x1ac>)
 80105fa:	f240 4294 	movw	r2, #1172	; 0x494
 80105fe:	4938      	ldr	r1, [pc, #224]	; (80106e0 <lwip_netconn_do_delconn+0x1bc>)
 8010600:	4835      	ldr	r0, [pc, #212]	; (80106d8 <lwip_netconn_do_delconn+0x1b4>)
 8010602:	f00c f93b 	bl	801c87c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	2204      	movs	r2, #4
 801060c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	2203      	movs	r2, #3
 8010612:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	68fa      	ldr	r2, [r7, #12]
 801061a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	2100      	movs	r1, #0
 8010622:	4618      	mov	r0, r3
 8010624:	f7ff fe14 	bl	8010250 <lwip_netconn_do_close_internal>
 8010628:	4603      	mov	r3, r0
 801062a:	2b00      	cmp	r3, #0
 801062c:	d04b      	beq.n	80106c6 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	785b      	ldrb	r3, [r3, #1]
 8010634:	2b04      	cmp	r3, #4
 8010636:	d006      	beq.n	8010646 <lwip_netconn_do_delconn+0x122>
 8010638:	4b25      	ldr	r3, [pc, #148]	; (80106d0 <lwip_netconn_do_delconn+0x1ac>)
 801063a:	f240 429a 	movw	r2, #1178	; 0x49a
 801063e:	4929      	ldr	r1, [pc, #164]	; (80106e4 <lwip_netconn_do_delconn+0x1c0>)
 8010640:	4825      	ldr	r0, [pc, #148]	; (80106d8 <lwip_netconn_do_delconn+0x1b4>)
 8010642:	f00c f91b 	bl	801c87c <iprintf>
            UNLOCK_TCPIP_CORE();
 8010646:	4828      	ldr	r0, [pc, #160]	; (80106e8 <lwip_netconn_do_delconn+0x1c4>)
 8010648:	f00b ffcd 	bl	801c5e6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	330c      	adds	r3, #12
 8010652:	2100      	movs	r1, #0
 8010654:	4618      	mov	r0, r3
 8010656:	f00b ff2c 	bl	801c4b2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 801065a:	4823      	ldr	r0, [pc, #140]	; (80106e8 <lwip_netconn_do_delconn+0x1c4>)
 801065c:	f00b ffb4 	bl	801c5c8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	785b      	ldrb	r3, [r3, #1]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d02d      	beq.n	80106c6 <lwip_netconn_do_delconn+0x1a2>
 801066a:	4b19      	ldr	r3, [pc, #100]	; (80106d0 <lwip_netconn_do_delconn+0x1ac>)
 801066c:	f240 429e 	movw	r2, #1182	; 0x49e
 8010670:	491c      	ldr	r1, [pc, #112]	; (80106e4 <lwip_netconn_do_delconn+0x1c0>)
 8010672:	4819      	ldr	r0, [pc, #100]	; (80106d8 <lwip_netconn_do_delconn+0x1b4>)
 8010674:	f00c f902 	bl	801c87c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8010678:	e025      	b.n	80106c6 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 801067a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	2200      	movs	r2, #0
 8010682:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801068a:	2b00      	cmp	r3, #0
 801068c:	d007      	beq.n	801069e <lwip_netconn_do_delconn+0x17a>
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010694:	68fa      	ldr	r2, [r7, #12]
 8010696:	6810      	ldr	r0, [r2, #0]
 8010698:	2200      	movs	r2, #0
 801069a:	2100      	movs	r1, #0
 801069c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d007      	beq.n	80106b8 <lwip_netconn_do_delconn+0x194>
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106ae:	68fa      	ldr	r2, [r7, #12]
 80106b0:	6810      	ldr	r0, [r2, #0]
 80106b2:	2200      	movs	r2, #0
 80106b4:	2102      	movs	r1, #2
 80106b6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	330c      	adds	r3, #12
 80106be:	4618      	mov	r0, r3
 80106c0:	f00b ff42 	bl	801c548 <sys_sem_valid>
 80106c4:	e000      	b.n	80106c8 <lwip_netconn_do_delconn+0x1a4>
          return;
 80106c6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80106c8:	3710      	adds	r7, #16
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}
 80106ce:	bf00      	nop
 80106d0:	0801daf4 	.word	0x0801daf4
 80106d4:	0801de64 	.word	0x0801de64
 80106d8:	0801db38 	.word	0x0801db38
 80106dc:	0801de78 	.word	0x0801de78
 80106e0:	0801de98 	.word	0x0801de98
 80106e4:	0801deb4 	.word	0x0801deb4
 80106e8:	2000dc50 	.word	0x2000dc50

080106ec <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b088      	sub	sp, #32
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	60f8      	str	r0, [r7, #12]
 80106f4:	60b9      	str	r1, [r7, #8]
 80106f6:	4613      	mov	r3, r2
 80106f8:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 80106fa:	2300      	movs	r3, #0
 80106fc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8010702:	69bb      	ldr	r3, [r7, #24]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d102      	bne.n	801070e <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8010708:	f06f 0305 	mvn.w	r3, #5
 801070c:	e070      	b.n	80107f0 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 801070e:	69bb      	ldr	r3, [r7, #24]
 8010710:	785b      	ldrb	r3, [r3, #1]
 8010712:	2b03      	cmp	r3, #3
 8010714:	d006      	beq.n	8010724 <lwip_netconn_do_connected+0x38>
 8010716:	4b38      	ldr	r3, [pc, #224]	; (80107f8 <lwip_netconn_do_connected+0x10c>)
 8010718:	f240 5223 	movw	r2, #1315	; 0x523
 801071c:	4937      	ldr	r1, [pc, #220]	; (80107fc <lwip_netconn_do_connected+0x110>)
 801071e:	4838      	ldr	r0, [pc, #224]	; (8010800 <lwip_netconn_do_connected+0x114>)
 8010720:	f00c f8ac 	bl	801c87c <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8010724:	69bb      	ldr	r3, [r7, #24]
 8010726:	6a1b      	ldr	r3, [r3, #32]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d10c      	bne.n	8010746 <lwip_netconn_do_connected+0x5a>
 801072c:	69bb      	ldr	r3, [r7, #24]
 801072e:	7f1b      	ldrb	r3, [r3, #28]
 8010730:	f003 0304 	and.w	r3, r3, #4
 8010734:	2b00      	cmp	r3, #0
 8010736:	d106      	bne.n	8010746 <lwip_netconn_do_connected+0x5a>
 8010738:	4b2f      	ldr	r3, [pc, #188]	; (80107f8 <lwip_netconn_do_connected+0x10c>)
 801073a:	f240 5224 	movw	r2, #1316	; 0x524
 801073e:	4931      	ldr	r1, [pc, #196]	; (8010804 <lwip_netconn_do_connected+0x118>)
 8010740:	482f      	ldr	r0, [pc, #188]	; (8010800 <lwip_netconn_do_connected+0x114>)
 8010742:	f00c f89b 	bl	801c87c <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8010746:	69bb      	ldr	r3, [r7, #24]
 8010748:	6a1b      	ldr	r3, [r3, #32]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d008      	beq.n	8010760 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 801074e:	69bb      	ldr	r3, [r7, #24]
 8010750:	6a1b      	ldr	r3, [r3, #32]
 8010752:	79fa      	ldrb	r2, [r7, #7]
 8010754:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010756:	69bb      	ldr	r3, [r7, #24]
 8010758:	6a1b      	ldr	r3, [r3, #32]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	330c      	adds	r3, #12
 801075e:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8010760:	69bb      	ldr	r3, [r7, #24]
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010768:	2b10      	cmp	r3, #16
 801076a:	d106      	bne.n	801077a <lwip_netconn_do_connected+0x8e>
 801076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d102      	bne.n	801077a <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8010774:	69b8      	ldr	r0, [r7, #24]
 8010776:	f7ff fb8d 	bl	800fe94 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 801077a:	69bb      	ldr	r3, [r7, #24]
 801077c:	7f1b      	ldrb	r3, [r3, #28]
 801077e:	f003 0304 	and.w	r3, r3, #4
 8010782:	2b00      	cmp	r3, #0
 8010784:	bf0c      	ite	eq
 8010786:	2301      	moveq	r3, #1
 8010788:	2300      	movne	r3, #0
 801078a:	b2db      	uxtb	r3, r3
 801078c:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 801078e:	69bb      	ldr	r3, [r7, #24]
 8010790:	7f1b      	ldrb	r3, [r3, #28]
 8010792:	f023 0304 	bic.w	r3, r3, #4
 8010796:	b2da      	uxtb	r2, r3
 8010798:	69bb      	ldr	r3, [r7, #24]
 801079a:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 801079c:	697b      	ldr	r3, [r7, #20]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d002      	beq.n	80107a8 <lwip_netconn_do_connected+0xbc>
 80107a2:	69fb      	ldr	r3, [r7, #28]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d10c      	bne.n	80107c2 <lwip_netconn_do_connected+0xd6>
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d102      	bne.n	80107b4 <lwip_netconn_do_connected+0xc8>
 80107ae:	69fb      	ldr	r3, [r7, #28]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d006      	beq.n	80107c2 <lwip_netconn_do_connected+0xd6>
 80107b4:	4b10      	ldr	r3, [pc, #64]	; (80107f8 <lwip_netconn_do_connected+0x10c>)
 80107b6:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 80107ba:	4913      	ldr	r1, [pc, #76]	; (8010808 <lwip_netconn_do_connected+0x11c>)
 80107bc:	4810      	ldr	r0, [pc, #64]	; (8010800 <lwip_netconn_do_connected+0x114>)
 80107be:	f00c f85d 	bl	801c87c <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 80107c2:	69bb      	ldr	r3, [r7, #24]
 80107c4:	2200      	movs	r2, #0
 80107c6:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 80107c8:	69bb      	ldr	r3, [r7, #24]
 80107ca:	2200      	movs	r2, #0
 80107cc:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80107ce:	69bb      	ldr	r3, [r7, #24]
 80107d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d005      	beq.n	80107e2 <lwip_netconn_do_connected+0xf6>
 80107d6:	69bb      	ldr	r3, [r7, #24]
 80107d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107da:	2200      	movs	r2, #0
 80107dc:	2102      	movs	r1, #2
 80107de:	69b8      	ldr	r0, [r7, #24]
 80107e0:	4798      	blx	r3

  if (was_blocking) {
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d002      	beq.n	80107ee <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 80107e8:	69f8      	ldr	r0, [r7, #28]
 80107ea:	f00b fe93 	bl	801c514 <sys_sem_signal>
  }
  return ERR_OK;
 80107ee:	2300      	movs	r3, #0
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3720      	adds	r7, #32
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}
 80107f8:	0801daf4 	.word	0x0801daf4
 80107fc:	0801debc 	.word	0x0801debc
 8010800:	0801db38 	.word	0x0801db38
 8010804:	0801dedc 	.word	0x0801dedc
 8010808:	0801df1c 	.word	0x0801df1c

0801080c <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b086      	sub	sp, #24
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8010818:	693b      	ldr	r3, [r7, #16]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d102      	bne.n	8010828 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8010822:	23f1      	movs	r3, #241	; 0xf1
 8010824:	75fb      	strb	r3, [r7, #23]
 8010826:	e09b      	b.n	8010960 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010832:	2b10      	cmp	r3, #16
 8010834:	d00f      	beq.n	8010856 <lwip_netconn_do_connect+0x4a>
 8010836:	2b20      	cmp	r3, #32
 8010838:	f040 8087 	bne.w	801094a <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	6858      	ldr	r0, [r3, #4]
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	6899      	ldr	r1, [r3, #8]
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	899b      	ldrh	r3, [r3, #12]
 801084a:	461a      	mov	r2, r3
 801084c:	f009 f950 	bl	8019af0 <udp_connect>
 8010850:	4603      	mov	r3, r0
 8010852:	75fb      	strb	r3, [r7, #23]
        break;
 8010854:	e084      	b.n	8010960 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	785b      	ldrb	r3, [r3, #1]
 801085c:	2b03      	cmp	r3, #3
 801085e:	d102      	bne.n	8010866 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8010860:	23f7      	movs	r3, #247	; 0xf7
 8010862:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8010864:	e07b      	b.n	801095e <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8010866:	693b      	ldr	r3, [r7, #16]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	785b      	ldrb	r3, [r3, #1]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d002      	beq.n	8010876 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8010870:	23f6      	movs	r3, #246	; 0xf6
 8010872:	75fb      	strb	r3, [r7, #23]
        break;
 8010874:	e073      	b.n	801095e <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	4618      	mov	r0, r3
 801087c:	f7ff fb0a 	bl	800fe94 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8010880:	693b      	ldr	r3, [r7, #16]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	6858      	ldr	r0, [r3, #4]
 8010886:	693b      	ldr	r3, [r7, #16]
 8010888:	6899      	ldr	r1, [r3, #8]
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	899a      	ldrh	r2, [r3, #12]
 801088e:	4b38      	ldr	r3, [pc, #224]	; (8010970 <lwip_netconn_do_connect+0x164>)
 8010890:	f003 f980 	bl	8013b94 <tcp_connect>
 8010894:	4603      	mov	r3, r0
 8010896:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8010898:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d15e      	bne.n	801095e <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	7f1b      	ldrb	r3, [r3, #28]
 80108a6:	f003 0302 	and.w	r3, r3, #2
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	bf14      	ite	ne
 80108ae:	2301      	movne	r3, #1
 80108b0:	2300      	moveq	r3, #0
 80108b2:	b2db      	uxtb	r3, r3
 80108b4:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 80108b6:	693b      	ldr	r3, [r7, #16]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	2203      	movs	r2, #3
 80108bc:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80108be:	7bfb      	ldrb	r3, [r7, #15]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d009      	beq.n	80108d8 <lwip_netconn_do_connect+0xcc>
 80108c4:	693b      	ldr	r3, [r7, #16]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	7f1a      	ldrb	r2, [r3, #28]
 80108ca:	693b      	ldr	r3, [r7, #16]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	f042 0204 	orr.w	r2, r2, #4
 80108d2:	b2d2      	uxtb	r2, r2
 80108d4:	771a      	strb	r2, [r3, #28]
 80108d6:	e008      	b.n	80108ea <lwip_netconn_do_connect+0xde>
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	7f1a      	ldrb	r2, [r3, #28]
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	f022 0204 	bic.w	r2, r2, #4
 80108e6:	b2d2      	uxtb	r2, r2
 80108e8:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 80108ea:	7bfb      	ldrb	r3, [r7, #15]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d002      	beq.n	80108f6 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 80108f0:	23fb      	movs	r3, #251	; 0xfb
 80108f2:	75fb      	strb	r3, [r7, #23]
        break;
 80108f4:	e033      	b.n	801095e <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	693a      	ldr	r2, [r7, #16]
 80108fc:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	785b      	ldrb	r3, [r3, #1]
 8010904:	2b03      	cmp	r3, #3
 8010906:	d006      	beq.n	8010916 <lwip_netconn_do_connect+0x10a>
 8010908:	4b1a      	ldr	r3, [pc, #104]	; (8010974 <lwip_netconn_do_connect+0x168>)
 801090a:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 801090e:	491a      	ldr	r1, [pc, #104]	; (8010978 <lwip_netconn_do_connect+0x16c>)
 8010910:	481a      	ldr	r0, [pc, #104]	; (801097c <lwip_netconn_do_connect+0x170>)
 8010912:	f00b ffb3 	bl	801c87c <iprintf>
              UNLOCK_TCPIP_CORE();
 8010916:	481a      	ldr	r0, [pc, #104]	; (8010980 <lwip_netconn_do_connect+0x174>)
 8010918:	f00b fe65 	bl	801c5e6 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	330c      	adds	r3, #12
 8010922:	2100      	movs	r1, #0
 8010924:	4618      	mov	r0, r3
 8010926:	f00b fdc4 	bl	801c4b2 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 801092a:	4815      	ldr	r0, [pc, #84]	; (8010980 <lwip_netconn_do_connect+0x174>)
 801092c:	f00b fe4c 	bl	801c5c8 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8010930:	693b      	ldr	r3, [r7, #16]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	785b      	ldrb	r3, [r3, #1]
 8010936:	2b03      	cmp	r3, #3
 8010938:	d116      	bne.n	8010968 <lwip_netconn_do_connect+0x15c>
 801093a:	4b0e      	ldr	r3, [pc, #56]	; (8010974 <lwip_netconn_do_connect+0x168>)
 801093c:	f240 5274 	movw	r2, #1396	; 0x574
 8010940:	490d      	ldr	r1, [pc, #52]	; (8010978 <lwip_netconn_do_connect+0x16c>)
 8010942:	480e      	ldr	r0, [pc, #56]	; (801097c <lwip_netconn_do_connect+0x170>)
 8010944:	f00b ff9a 	bl	801c87c <iprintf>
              return;
 8010948:	e00e      	b.n	8010968 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 801094a:	4b0a      	ldr	r3, [pc, #40]	; (8010974 <lwip_netconn_do_connect+0x168>)
 801094c:	f240 527d 	movw	r2, #1405	; 0x57d
 8010950:	490c      	ldr	r1, [pc, #48]	; (8010984 <lwip_netconn_do_connect+0x178>)
 8010952:	480a      	ldr	r0, [pc, #40]	; (801097c <lwip_netconn_do_connect+0x170>)
 8010954:	f00b ff92 	bl	801c87c <iprintf>
 8010958:	23fa      	movs	r3, #250	; 0xfa
 801095a:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 801095c:	e000      	b.n	8010960 <lwip_netconn_do_connect+0x154>
        break;
 801095e:	bf00      	nop
    }
  }
  msg->err = err;
 8010960:	693b      	ldr	r3, [r7, #16]
 8010962:	7dfa      	ldrb	r2, [r7, #23]
 8010964:	711a      	strb	r2, [r3, #4]
 8010966:	e000      	b.n	801096a <lwip_netconn_do_connect+0x15e>
              return;
 8010968:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 801096a:	3718      	adds	r7, #24
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}
 8010970:	080106ed 	.word	0x080106ed
 8010974:	0801daf4 	.word	0x0801daf4
 8010978:	0801deb4 	.word	0x0801deb4
 801097c:	0801db38 	.word	0x0801db38
 8010980:	2000dc50 	.word	0x2000dc50
 8010984:	0801df3c 	.word	0x0801df3c

08010988 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b086      	sub	sp, #24
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8010994:	693b      	ldr	r3, [r7, #16]
 8010996:	2200      	movs	r2, #0
 8010998:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 801099a:	693b      	ldr	r3, [r7, #16]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	685b      	ldr	r3, [r3, #4]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d022      	beq.n	80109ea <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80109a4:	693b      	ldr	r3, [r7, #16]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80109ae:	2b10      	cmp	r3, #16
 80109b0:	d11b      	bne.n	80109ea <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	689b      	ldr	r3, [r3, #8]
 80109b6:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80109b8:	697b      	ldr	r3, [r7, #20]
 80109ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80109be:	d202      	bcs.n	80109c6 <lwip_netconn_do_recv+0x3e>
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	b29b      	uxth	r3, r3
 80109c4:	e001      	b.n	80109ca <lwip_netconn_do_recv+0x42>
 80109c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80109ca:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	685b      	ldr	r3, [r3, #4]
 80109d2:	89fa      	ldrh	r2, [r7, #14]
 80109d4:	4611      	mov	r1, r2
 80109d6:	4618      	mov	r0, r3
 80109d8:	f003 f846 	bl	8013a68 <tcp_recved>
        remaining -= recved;
 80109dc:	89fb      	ldrh	r3, [r7, #14]
 80109de:	697a      	ldr	r2, [r7, #20]
 80109e0:	1ad3      	subs	r3, r2, r3
 80109e2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80109e4:	697b      	ldr	r3, [r7, #20]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d1e6      	bne.n	80109b8 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 80109ea:	bf00      	nop
 80109ec:	3718      	adds	r7, #24
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}
	...

080109f4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b088      	sub	sp, #32
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
 80109fc:	460b      	mov	r3, r1
 80109fe:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8010a00:	2300      	movs	r3, #0
 8010a02:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d106      	bne.n	8010a18 <lwip_netconn_do_writemore+0x24>
 8010a0a:	4b96      	ldr	r3, [pc, #600]	; (8010c64 <lwip_netconn_do_writemore+0x270>)
 8010a0c:	f240 6273 	movw	r2, #1651	; 0x673
 8010a10:	4995      	ldr	r1, [pc, #596]	; (8010c68 <lwip_netconn_do_writemore+0x274>)
 8010a12:	4896      	ldr	r0, [pc, #600]	; (8010c6c <lwip_netconn_do_writemore+0x278>)
 8010a14:	f00b ff32 	bl	801c87c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	785b      	ldrb	r3, [r3, #1]
 8010a1c:	2b01      	cmp	r3, #1
 8010a1e:	d006      	beq.n	8010a2e <lwip_netconn_do_writemore+0x3a>
 8010a20:	4b90      	ldr	r3, [pc, #576]	; (8010c64 <lwip_netconn_do_writemore+0x270>)
 8010a22:	f240 6274 	movw	r2, #1652	; 0x674
 8010a26:	4992      	ldr	r1, [pc, #584]	; (8010c70 <lwip_netconn_do_writemore+0x27c>)
 8010a28:	4890      	ldr	r0, [pc, #576]	; (8010c6c <lwip_netconn_do_writemore+0x278>)
 8010a2a:	f00b ff27 	bl	801c87c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6a1b      	ldr	r3, [r3, #32]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d106      	bne.n	8010a44 <lwip_netconn_do_writemore+0x50>
 8010a36:	4b8b      	ldr	r3, [pc, #556]	; (8010c64 <lwip_netconn_do_writemore+0x270>)
 8010a38:	f240 6275 	movw	r2, #1653	; 0x675
 8010a3c:	498d      	ldr	r1, [pc, #564]	; (8010c74 <lwip_netconn_do_writemore+0x280>)
 8010a3e:	488b      	ldr	r0, [pc, #556]	; (8010c6c <lwip_netconn_do_writemore+0x278>)
 8010a40:	f00b ff1c 	bl	801c87c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	685b      	ldr	r3, [r3, #4]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d106      	bne.n	8010a5a <lwip_netconn_do_writemore+0x66>
 8010a4c:	4b85      	ldr	r3, [pc, #532]	; (8010c64 <lwip_netconn_do_writemore+0x270>)
 8010a4e:	f240 6276 	movw	r2, #1654	; 0x676
 8010a52:	4989      	ldr	r1, [pc, #548]	; (8010c78 <lwip_netconn_do_writemore+0x284>)
 8010a54:	4885      	ldr	r0, [pc, #532]	; (8010c6c <lwip_netconn_do_writemore+0x278>)
 8010a56:	f00b ff11 	bl	801c87c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6a1b      	ldr	r3, [r3, #32]
 8010a5e:	699a      	ldr	r2, [r3, #24]
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	6a1b      	ldr	r3, [r3, #32]
 8010a64:	695b      	ldr	r3, [r3, #20]
 8010a66:	429a      	cmp	r2, r3
 8010a68:	d306      	bcc.n	8010a78 <lwip_netconn_do_writemore+0x84>
 8010a6a:	4b7e      	ldr	r3, [pc, #504]	; (8010c64 <lwip_netconn_do_writemore+0x270>)
 8010a6c:	f240 6277 	movw	r2, #1655	; 0x677
 8010a70:	4982      	ldr	r1, [pc, #520]	; (8010c7c <lwip_netconn_do_writemore+0x288>)
 8010a72:	487e      	ldr	r0, [pc, #504]	; (8010c6c <lwip_netconn_do_writemore+0x278>)
 8010a74:	f00b ff02 	bl	801c87c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	6a1b      	ldr	r3, [r3, #32]
 8010a7c:	899b      	ldrh	r3, [r3, #12]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d106      	bne.n	8010a90 <lwip_netconn_do_writemore+0x9c>
 8010a82:	4b78      	ldr	r3, [pc, #480]	; (8010c64 <lwip_netconn_do_writemore+0x270>)
 8010a84:	f240 6279 	movw	r2, #1657	; 0x679
 8010a88:	497d      	ldr	r1, [pc, #500]	; (8010c80 <lwip_netconn_do_writemore+0x28c>)
 8010a8a:	4878      	ldr	r0, [pc, #480]	; (8010c6c <lwip_netconn_do_writemore+0x278>)
 8010a8c:	f00b fef6 	bl	801c87c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	6a1b      	ldr	r3, [r3, #32]
 8010a94:	7f1b      	ldrb	r3, [r3, #28]
 8010a96:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	7f1b      	ldrb	r3, [r3, #28]
 8010a9c:	f003 0302 	and.w	r3, r3, #2
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d104      	bne.n	8010aae <lwip_netconn_do_writemore+0xba>
 8010aa4:	7ebb      	ldrb	r3, [r7, #26]
 8010aa6:	f003 0304 	and.w	r3, r3, #4
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d001      	beq.n	8010ab2 <lwip_netconn_do_writemore+0xbe>
 8010aae:	2301      	movs	r3, #1
 8010ab0:	e000      	b.n	8010ab4 <lwip_netconn_do_writemore+0xc0>
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	6a1b      	ldr	r3, [r3, #32]
 8010aba:	689b      	ldr	r3, [r3, #8]
 8010abc:	681a      	ldr	r2, [r3, #0]
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	6a1b      	ldr	r3, [r3, #32]
 8010ac2:	691b      	ldr	r3, [r3, #16]
 8010ac4:	4413      	add	r3, r2
 8010ac6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	6a1b      	ldr	r3, [r3, #32]
 8010acc:	689b      	ldr	r3, [r3, #8]
 8010ace:	685a      	ldr	r2, [r3, #4]
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	6a1b      	ldr	r3, [r3, #32]
 8010ad4:	691b      	ldr	r3, [r3, #16]
 8010ad6:	1ad3      	subs	r3, r2, r3
 8010ad8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8010ada:	693b      	ldr	r3, [r7, #16]
 8010adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ae0:	d307      	bcc.n	8010af2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8010ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010ae6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010ae8:	7ebb      	ldrb	r3, [r7, #26]
 8010aea:	f043 0302 	orr.w	r3, r3, #2
 8010aee:	76bb      	strb	r3, [r7, #26]
 8010af0:	e001      	b.n	8010af6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8010af2:	693b      	ldr	r3, [r7, #16]
 8010af4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	685b      	ldr	r3, [r3, #4]
 8010afa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010afe:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8010b00:	89fa      	ldrh	r2, [r7, #14]
 8010b02:	8bbb      	ldrh	r3, [r7, #28]
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d216      	bcs.n	8010b36 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8010b08:	89fb      	ldrh	r3, [r7, #14]
 8010b0a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8010b0c:	7e3b      	ldrb	r3, [r7, #24]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d00d      	beq.n	8010b2e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8010b12:	8bbb      	ldrh	r3, [r7, #28]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d10e      	bne.n	8010b36 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	6a1b      	ldr	r3, [r3, #32]
 8010b1c:	699b      	ldr	r3, [r3, #24]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d102      	bne.n	8010b28 <lwip_netconn_do_writemore+0x134>
 8010b22:	f06f 0306 	mvn.w	r3, #6
 8010b26:	e000      	b.n	8010b2a <lwip_netconn_do_writemore+0x136>
 8010b28:	2300      	movs	r3, #0
 8010b2a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8010b2c:	e07d      	b.n	8010c2a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8010b2e:	7ebb      	ldrb	r3, [r7, #26]
 8010b30:	f043 0302 	orr.w	r3, r3, #2
 8010b34:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	6a1b      	ldr	r3, [r3, #32]
 8010b3a:	691a      	ldr	r2, [r3, #16]
 8010b3c:	8bbb      	ldrh	r3, [r7, #28]
 8010b3e:	441a      	add	r2, r3
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	6a1b      	ldr	r3, [r3, #32]
 8010b44:	689b      	ldr	r3, [r3, #8]
 8010b46:	685b      	ldr	r3, [r3, #4]
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d906      	bls.n	8010b5a <lwip_netconn_do_writemore+0x166>
 8010b4c:	4b45      	ldr	r3, [pc, #276]	; (8010c64 <lwip_netconn_do_writemore+0x270>)
 8010b4e:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8010b52:	494c      	ldr	r1, [pc, #304]	; (8010c84 <lwip_netconn_do_writemore+0x290>)
 8010b54:	4845      	ldr	r0, [pc, #276]	; (8010c6c <lwip_netconn_do_writemore+0x278>)
 8010b56:	f00b fe91 	bl	801c87c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8010b5a:	8bbb      	ldrh	r3, [r7, #28]
 8010b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b60:	4293      	cmp	r3, r2
 8010b62:	d103      	bne.n	8010b6c <lwip_netconn_do_writemore+0x178>
 8010b64:	693b      	ldr	r3, [r7, #16]
 8010b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b6a:	d209      	bcs.n	8010b80 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8010b6c:	693b      	ldr	r3, [r7, #16]
 8010b6e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8010b70:	8bba      	ldrh	r2, [r7, #28]
 8010b72:	429a      	cmp	r2, r3
 8010b74:	d10b      	bne.n	8010b8e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6a1b      	ldr	r3, [r3, #32]
 8010b7a:	899b      	ldrh	r3, [r3, #12]
 8010b7c:	2b01      	cmp	r3, #1
 8010b7e:	d906      	bls.n	8010b8e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8010b80:	2301      	movs	r3, #1
 8010b82:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010b84:	7ebb      	ldrb	r3, [r7, #26]
 8010b86:	f043 0302 	orr.w	r3, r3, #2
 8010b8a:	76bb      	strb	r3, [r7, #26]
 8010b8c:	e001      	b.n	8010b92 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	6858      	ldr	r0, [r3, #4]
 8010b96:	7ebb      	ldrb	r3, [r7, #26]
 8010b98:	8bba      	ldrh	r2, [r7, #28]
 8010b9a:	6979      	ldr	r1, [r7, #20]
 8010b9c:	f006 fe84 	bl	80178a8 <tcp_write>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8010ba4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d12c      	bne.n	8010c06 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6a1b      	ldr	r3, [r3, #32]
 8010bb0:	6999      	ldr	r1, [r3, #24]
 8010bb2:	8bba      	ldrh	r2, [r7, #28]
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6a1b      	ldr	r3, [r3, #32]
 8010bb8:	440a      	add	r2, r1
 8010bba:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6a1b      	ldr	r3, [r3, #32]
 8010bc0:	6919      	ldr	r1, [r3, #16]
 8010bc2:	8bba      	ldrh	r2, [r7, #28]
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6a1b      	ldr	r3, [r3, #32]
 8010bc8:	440a      	add	r2, r1
 8010bca:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	6a1b      	ldr	r3, [r3, #32]
 8010bd0:	691a      	ldr	r2, [r3, #16]
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6a1b      	ldr	r3, [r3, #32]
 8010bd6:	689b      	ldr	r3, [r3, #8]
 8010bd8:	685b      	ldr	r3, [r3, #4]
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	d113      	bne.n	8010c06 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6a1b      	ldr	r3, [r3, #32]
 8010be2:	899a      	ldrh	r2, [r3, #12]
 8010be4:	3a01      	subs	r2, #1
 8010be6:	b292      	uxth	r2, r2
 8010be8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	6a1b      	ldr	r3, [r3, #32]
 8010bee:	899b      	ldrh	r3, [r3, #12]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d008      	beq.n	8010c06 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	6a1b      	ldr	r3, [r3, #32]
 8010bf8:	689a      	ldr	r2, [r3, #8]
 8010bfa:	3208      	adds	r2, #8
 8010bfc:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	6a1b      	ldr	r3, [r3, #32]
 8010c02:	2200      	movs	r2, #0
 8010c04:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8010c06:	7e7b      	ldrb	r3, [r7, #25]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d004      	beq.n	8010c16 <lwip_netconn_do_writemore+0x222>
 8010c0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	f43f af50 	beq.w	8010ab6 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8010c16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d004      	beq.n	8010c28 <lwip_netconn_do_writemore+0x234>
 8010c1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c26:	d146      	bne.n	8010cb6 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8010c28:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8010c2a:	7e3b      	ldrb	r3, [r7, #24]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d02b      	beq.n	8010c88 <lwip_netconn_do_writemore+0x294>
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	6a1b      	ldr	r3, [r3, #32]
 8010c34:	699a      	ldr	r2, [r3, #24]
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6a1b      	ldr	r3, [r3, #32]
 8010c3a:	695b      	ldr	r3, [r3, #20]
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	d223      	bcs.n	8010c88 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d005      	beq.n	8010c54 <lwip_netconn_do_writemore+0x260>
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	2103      	movs	r1, #3
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	7f1b      	ldrb	r3, [r3, #28]
 8010c58:	f043 0310 	orr.w	r3, r3, #16
 8010c5c:	b2da      	uxtb	r2, r3
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	771a      	strb	r2, [r3, #28]
 8010c62:	e028      	b.n	8010cb6 <lwip_netconn_do_writemore+0x2c2>
 8010c64:	0801daf4 	.word	0x0801daf4
 8010c68:	0801dc4c 	.word	0x0801dc4c
 8010c6c:	0801db38 	.word	0x0801db38
 8010c70:	0801df54 	.word	0x0801df54
 8010c74:	0801dc5c 	.word	0x0801dc5c
 8010c78:	0801df74 	.word	0x0801df74
 8010c7c:	0801df8c 	.word	0x0801df8c
 8010c80:	0801dfcc 	.word	0x0801dfcc
 8010c84:	0801dff4 	.word	0x0801dff4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	685b      	ldr	r3, [r3, #4]
 8010c8c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010c90:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8010c94:	d305      	bcc.n	8010ca2 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	685b      	ldr	r3, [r3, #4]
 8010c9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010c9e:	2b04      	cmp	r3, #4
 8010ca0:	d909      	bls.n	8010cb6 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d005      	beq.n	8010cb6 <lwip_netconn_do_writemore+0x2c2>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cae:	2200      	movs	r2, #0
 8010cb0:	2103      	movs	r1, #3
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8010cb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d11d      	bne.n	8010cfa <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6a1b      	ldr	r3, [r3, #32]
 8010cc2:	699a      	ldr	r2, [r3, #24]
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6a1b      	ldr	r3, [r3, #32]
 8010cc8:	695b      	ldr	r3, [r3, #20]
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d002      	beq.n	8010cd4 <lwip_netconn_do_writemore+0x2e0>
 8010cce:	7e3b      	ldrb	r3, [r7, #24]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d001      	beq.n	8010cd8 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	685b      	ldr	r3, [r3, #4]
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f007 fbcd 	bl	801847c <tcp_output>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8010ce6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010cea:	f113 0f04 	cmn.w	r3, #4
 8010cee:	d12c      	bne.n	8010d4a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010cf0:	7b3b      	ldrb	r3, [r7, #12]
 8010cf2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	76fb      	strb	r3, [r7, #27]
 8010cf8:	e027      	b.n	8010d4a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8010cfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d02:	d120      	bne.n	8010d46 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	685b      	ldr	r3, [r3, #4]
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f007 fbb7 	bl	801847c <tcp_output>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8010d12:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010d16:	f113 0f04 	cmn.w	r3, #4
 8010d1a:	d104      	bne.n	8010d26 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010d1c:	7b7b      	ldrb	r3, [r7, #13]
 8010d1e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010d20:	2301      	movs	r3, #1
 8010d22:	76fb      	strb	r3, [r7, #27]
 8010d24:	e011      	b.n	8010d4a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8010d26:	7e3b      	ldrb	r3, [r7, #24]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d00e      	beq.n	8010d4a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6a1b      	ldr	r3, [r3, #32]
 8010d30:	699b      	ldr	r3, [r3, #24]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d102      	bne.n	8010d3c <lwip_netconn_do_writemore+0x348>
 8010d36:	f06f 0306 	mvn.w	r3, #6
 8010d3a:	e000      	b.n	8010d3e <lwip_netconn_do_writemore+0x34a>
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010d40:	2301      	movs	r3, #1
 8010d42:	76fb      	strb	r3, [r7, #27]
 8010d44:	e001      	b.n	8010d4a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8010d46:	2301      	movs	r3, #1
 8010d48:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8010d4a:	7efb      	ldrb	r3, [r7, #27]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d015      	beq.n	8010d7c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6a1b      	ldr	r3, [r3, #32]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	330c      	adds	r3, #12
 8010d58:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6a1b      	ldr	r3, [r3, #32]
 8010d5e:	7ffa      	ldrb	r2, [r7, #31]
 8010d60:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	2200      	movs	r2, #0
 8010d66:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8010d6e:	78fb      	ldrb	r3, [r7, #3]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d006      	beq.n	8010d82 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8010d74:	68b8      	ldr	r0, [r7, #8]
 8010d76:	f00b fbcd 	bl	801c514 <sys_sem_signal>
 8010d7a:	e002      	b.n	8010d82 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8010d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8010d80:	e000      	b.n	8010d84 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8010d82:	2300      	movs	r3, #0
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	3720      	adds	r7, #32
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}

08010d8c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b084      	sub	sp, #16
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7fe fd5c 	bl	800f85a <netconn_err>
 8010da2:	4603      	mov	r3, r0
 8010da4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d166      	bne.n	8010e7c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8010dae:	68bb      	ldr	r3, [r7, #8]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	781b      	ldrb	r3, [r3, #0]
 8010db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010db8:	2b10      	cmp	r3, #16
 8010dba:	d15d      	bne.n	8010e78 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	785b      	ldrb	r3, [r3, #1]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d002      	beq.n	8010dcc <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8010dc6:	23fb      	movs	r3, #251	; 0xfb
 8010dc8:	73fb      	strb	r3, [r7, #15]
 8010dca:	e057      	b.n	8010e7c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	685b      	ldr	r3, [r3, #4]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d04d      	beq.n	8010e72 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	2201      	movs	r2, #1
 8010ddc:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	6a1b      	ldr	r3, [r3, #32]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d006      	beq.n	8010df6 <lwip_netconn_do_write+0x6a>
 8010de8:	4b28      	ldr	r3, [pc, #160]	; (8010e8c <lwip_netconn_do_write+0x100>)
 8010dea:	f240 7223 	movw	r2, #1827	; 0x723
 8010dee:	4928      	ldr	r1, [pc, #160]	; (8010e90 <lwip_netconn_do_write+0x104>)
 8010df0:	4828      	ldr	r0, [pc, #160]	; (8010e94 <lwip_netconn_do_write+0x108>)
 8010df2:	f00b fd43 	bl	801c87c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	695b      	ldr	r3, [r3, #20]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d106      	bne.n	8010e0c <lwip_netconn_do_write+0x80>
 8010dfe:	4b23      	ldr	r3, [pc, #140]	; (8010e8c <lwip_netconn_do_write+0x100>)
 8010e00:	f240 7224 	movw	r2, #1828	; 0x724
 8010e04:	4924      	ldr	r1, [pc, #144]	; (8010e98 <lwip_netconn_do_write+0x10c>)
 8010e06:	4823      	ldr	r0, [pc, #140]	; (8010e94 <lwip_netconn_do_write+0x108>)
 8010e08:	f00b fd38 	bl	801c87c <iprintf>
        msg->conn->current_msg = msg;
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	68ba      	ldr	r2, [r7, #8]
 8010e12:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	2100      	movs	r1, #0
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7ff fdea 	bl	80109f4 <lwip_netconn_do_writemore>
 8010e20:	4603      	mov	r3, r0
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d02e      	beq.n	8010e84 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	785b      	ldrb	r3, [r3, #1]
 8010e2c:	2b01      	cmp	r3, #1
 8010e2e:	d006      	beq.n	8010e3e <lwip_netconn_do_write+0xb2>
 8010e30:	4b16      	ldr	r3, [pc, #88]	; (8010e8c <lwip_netconn_do_write+0x100>)
 8010e32:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8010e36:	4919      	ldr	r1, [pc, #100]	; (8010e9c <lwip_netconn_do_write+0x110>)
 8010e38:	4816      	ldr	r0, [pc, #88]	; (8010e94 <lwip_netconn_do_write+0x108>)
 8010e3a:	f00b fd1f 	bl	801c87c <iprintf>
          UNLOCK_TCPIP_CORE();
 8010e3e:	4818      	ldr	r0, [pc, #96]	; (8010ea0 <lwip_netconn_do_write+0x114>)
 8010e40:	f00b fbd1 	bl	801c5e6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	330c      	adds	r3, #12
 8010e4a:	2100      	movs	r1, #0
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f00b fb30 	bl	801c4b2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8010e52:	4813      	ldr	r0, [pc, #76]	; (8010ea0 <lwip_netconn_do_write+0x114>)
 8010e54:	f00b fbb8 	bl	801c5c8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8010e58:	68bb      	ldr	r3, [r7, #8]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	785b      	ldrb	r3, [r3, #1]
 8010e5e:	2b01      	cmp	r3, #1
 8010e60:	d110      	bne.n	8010e84 <lwip_netconn_do_write+0xf8>
 8010e62:	4b0a      	ldr	r3, [pc, #40]	; (8010e8c <lwip_netconn_do_write+0x100>)
 8010e64:	f240 722c 	movw	r2, #1836	; 0x72c
 8010e68:	490c      	ldr	r1, [pc, #48]	; (8010e9c <lwip_netconn_do_write+0x110>)
 8010e6a:	480a      	ldr	r0, [pc, #40]	; (8010e94 <lwip_netconn_do_write+0x108>)
 8010e6c:	f00b fd06 	bl	801c87c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8010e70:	e008      	b.n	8010e84 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8010e72:	23f5      	movs	r3, #245	; 0xf5
 8010e74:	73fb      	strb	r3, [r7, #15]
 8010e76:	e001      	b.n	8010e7c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8010e78:	23fa      	movs	r3, #250	; 0xfa
 8010e7a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	7bfa      	ldrb	r2, [r7, #15]
 8010e80:	711a      	strb	r2, [r3, #4]
 8010e82:	e000      	b.n	8010e86 <lwip_netconn_do_write+0xfa>
        return;
 8010e84:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8010e86:	3710      	adds	r7, #16
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}
 8010e8c:	0801daf4 	.word	0x0801daf4
 8010e90:	0801de98 	.word	0x0801de98
 8010e94:	0801db38 	.word	0x0801db38
 8010e98:	0801e020 	.word	0x0801e020
 8010e9c:	0801deb4 	.word	0x0801deb4
 8010ea0:	2000dc50 	.word	0x2000dc50

08010ea4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b084      	sub	sp, #16
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	785b      	ldrb	r3, [r3, #1]
 8010eb6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	685b      	ldr	r3, [r3, #4]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d069      	beq.n	8010f96 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	781b      	ldrb	r3, [r3, #0]
 8010ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8010ecc:	2b10      	cmp	r3, #16
 8010ece:	d162      	bne.n	8010f96 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010ed4:	2b03      	cmp	r3, #3
 8010ed6:	d002      	beq.n	8010ede <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010ed8:	7afb      	ldrb	r3, [r7, #11]
 8010eda:	2b02      	cmp	r3, #2
 8010edc:	d05b      	beq.n	8010f96 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8010ede:	7afb      	ldrb	r3, [r7, #11]
 8010ee0:	2b03      	cmp	r3, #3
 8010ee2:	d103      	bne.n	8010eec <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	22f5      	movs	r2, #245	; 0xf5
 8010ee8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010eea:	e059      	b.n	8010fa0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8010eec:	7afb      	ldrb	r3, [r7, #11]
 8010eee:	2b01      	cmp	r3, #1
 8010ef0:	d103      	bne.n	8010efa <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	22fb      	movs	r2, #251	; 0xfb
 8010ef6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010ef8:	e052      	b.n	8010fa0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	7a1b      	ldrb	r3, [r3, #8]
 8010efe:	f003 0301 	and.w	r3, r3, #1
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d004      	beq.n	8010f10 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7ff f922 	bl	8010154 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	6a1b      	ldr	r3, [r3, #32]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d006      	beq.n	8010f28 <lwip_netconn_do_close+0x84>
 8010f1a:	4b23      	ldr	r3, [pc, #140]	; (8010fa8 <lwip_netconn_do_close+0x104>)
 8010f1c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8010f20:	4922      	ldr	r1, [pc, #136]	; (8010fac <lwip_netconn_do_close+0x108>)
 8010f22:	4823      	ldr	r0, [pc, #140]	; (8010fb0 <lwip_netconn_do_close+0x10c>)
 8010f24:	f00b fcaa 	bl	801c87c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	2204      	movs	r2, #4
 8010f2e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	68fa      	ldr	r2, [r7, #12]
 8010f36:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	2100      	movs	r1, #0
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f7ff f986 	bl	8010250 <lwip_netconn_do_close_internal>
 8010f44:	4603      	mov	r3, r0
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d029      	beq.n	8010f9e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	785b      	ldrb	r3, [r3, #1]
 8010f50:	2b04      	cmp	r3, #4
 8010f52:	d006      	beq.n	8010f62 <lwip_netconn_do_close+0xbe>
 8010f54:	4b14      	ldr	r3, [pc, #80]	; (8010fa8 <lwip_netconn_do_close+0x104>)
 8010f56:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8010f5a:	4916      	ldr	r1, [pc, #88]	; (8010fb4 <lwip_netconn_do_close+0x110>)
 8010f5c:	4814      	ldr	r0, [pc, #80]	; (8010fb0 <lwip_netconn_do_close+0x10c>)
 8010f5e:	f00b fc8d 	bl	801c87c <iprintf>
        UNLOCK_TCPIP_CORE();
 8010f62:	4815      	ldr	r0, [pc, #84]	; (8010fb8 <lwip_netconn_do_close+0x114>)
 8010f64:	f00b fb3f 	bl	801c5e6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	330c      	adds	r3, #12
 8010f6e:	2100      	movs	r1, #0
 8010f70:	4618      	mov	r0, r3
 8010f72:	f00b fa9e 	bl	801c4b2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8010f76:	4810      	ldr	r0, [pc, #64]	; (8010fb8 <lwip_netconn_do_close+0x114>)
 8010f78:	f00b fb26 	bl	801c5c8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	785b      	ldrb	r3, [r3, #1]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d00b      	beq.n	8010f9e <lwip_netconn_do_close+0xfa>
 8010f86:	4b08      	ldr	r3, [pc, #32]	; (8010fa8 <lwip_netconn_do_close+0x104>)
 8010f88:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8010f8c:	4909      	ldr	r1, [pc, #36]	; (8010fb4 <lwip_netconn_do_close+0x110>)
 8010f8e:	4808      	ldr	r0, [pc, #32]	; (8010fb0 <lwip_netconn_do_close+0x10c>)
 8010f90:	f00b fc74 	bl	801c87c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8010f94:	e003      	b.n	8010f9e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	22f5      	movs	r2, #245	; 0xf5
 8010f9a:	711a      	strb	r2, [r3, #4]
 8010f9c:	e000      	b.n	8010fa0 <lwip_netconn_do_close+0xfc>
      return;
 8010f9e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010fa0:	3710      	adds	r7, #16
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	0801daf4 	.word	0x0801daf4
 8010fac:	0801de98 	.word	0x0801de98
 8010fb0:	0801db38 	.word	0x0801db38
 8010fb4:	0801deb4 	.word	0x0801deb4
 8010fb8:	2000dc50 	.word	0x2000dc50

08010fbc <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d013      	beq.n	8010ff2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d00b      	beq.n	8010fea <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f001 fef0 	bl	8012dbc <pbuf_free>
      buf->p = buf->ptr = NULL;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	605a      	str	r2, [r3, #4]
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	685a      	ldr	r2, [r3, #4]
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8010fea:	6879      	ldr	r1, [r7, #4]
 8010fec:	2006      	movs	r0, #6
 8010fee:	f001 f841 	bl	8012074 <memp_free>
  }
}
 8010ff2:	bf00      	nop
 8010ff4:	3708      	adds	r7, #8
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bd80      	pop	{r7, pc}
	...

08010ffc <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b084      	sub	sp, #16
 8011000:	af00      	add	r7, sp, #0
 8011002:	60f8      	str	r0, [r7, #12]
 8011004:	60b9      	str	r1, [r7, #8]
 8011006:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d108      	bne.n	8011020 <netbuf_data+0x24>
 801100e:	4b1b      	ldr	r3, [pc, #108]	; (801107c <netbuf_data+0x80>)
 8011010:	22c6      	movs	r2, #198	; 0xc6
 8011012:	491b      	ldr	r1, [pc, #108]	; (8011080 <netbuf_data+0x84>)
 8011014:	481b      	ldr	r0, [pc, #108]	; (8011084 <netbuf_data+0x88>)
 8011016:	f00b fc31 	bl	801c87c <iprintf>
 801101a:	f06f 030f 	mvn.w	r3, #15
 801101e:	e029      	b.n	8011074 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d108      	bne.n	8011038 <netbuf_data+0x3c>
 8011026:	4b15      	ldr	r3, [pc, #84]	; (801107c <netbuf_data+0x80>)
 8011028:	22c7      	movs	r2, #199	; 0xc7
 801102a:	4917      	ldr	r1, [pc, #92]	; (8011088 <netbuf_data+0x8c>)
 801102c:	4815      	ldr	r0, [pc, #84]	; (8011084 <netbuf_data+0x88>)
 801102e:	f00b fc25 	bl	801c87c <iprintf>
 8011032:	f06f 030f 	mvn.w	r3, #15
 8011036:	e01d      	b.n	8011074 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d108      	bne.n	8011050 <netbuf_data+0x54>
 801103e:	4b0f      	ldr	r3, [pc, #60]	; (801107c <netbuf_data+0x80>)
 8011040:	22c8      	movs	r2, #200	; 0xc8
 8011042:	4912      	ldr	r1, [pc, #72]	; (801108c <netbuf_data+0x90>)
 8011044:	480f      	ldr	r0, [pc, #60]	; (8011084 <netbuf_data+0x88>)
 8011046:	f00b fc19 	bl	801c87c <iprintf>
 801104a:	f06f 030f 	mvn.w	r3, #15
 801104e:	e011      	b.n	8011074 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	685b      	ldr	r3, [r3, #4]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d102      	bne.n	801105e <netbuf_data+0x62>
    return ERR_BUF;
 8011058:	f06f 0301 	mvn.w	r3, #1
 801105c:	e00a      	b.n	8011074 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	685a      	ldr	r2, [r3, #4]
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	685b      	ldr	r3, [r3, #4]
 801106c:	895a      	ldrh	r2, [r3, #10]
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8011072:	2300      	movs	r3, #0
}
 8011074:	4618      	mov	r0, r3
 8011076:	3710      	adds	r7, #16
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}
 801107c:	0801e04c 	.word	0x0801e04c
 8011080:	0801e154 	.word	0x0801e154
 8011084:	0801e09c 	.word	0x0801e09c
 8011088:	0801e170 	.word	0x0801e170
 801108c:	0801e190 	.word	0x0801e190

08011090 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b082      	sub	sp, #8
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d108      	bne.n	80110b0 <netbuf_next+0x20>
 801109e:	4b11      	ldr	r3, [pc, #68]	; (80110e4 <netbuf_next+0x54>)
 80110a0:	22e0      	movs	r2, #224	; 0xe0
 80110a2:	4911      	ldr	r1, [pc, #68]	; (80110e8 <netbuf_next+0x58>)
 80110a4:	4811      	ldr	r0, [pc, #68]	; (80110ec <netbuf_next+0x5c>)
 80110a6:	f00b fbe9 	bl	801c87c <iprintf>
 80110aa:	f04f 33ff 	mov.w	r3, #4294967295
 80110ae:	e014      	b.n	80110da <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d102      	bne.n	80110c0 <netbuf_next+0x30>
    return -1;
 80110ba:	f04f 33ff 	mov.w	r3, #4294967295
 80110be:	e00c      	b.n	80110da <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	681a      	ldr	r2, [r3, #0]
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	685b      	ldr	r3, [r3, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d101      	bne.n	80110d8 <netbuf_next+0x48>
    return 1;
 80110d4:	2301      	movs	r3, #1
 80110d6:	e000      	b.n	80110da <netbuf_next+0x4a>
  }
  return 0;
 80110d8:	2300      	movs	r3, #0
}
 80110da:	4618      	mov	r0, r3
 80110dc:	3708      	adds	r7, #8
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}
 80110e2:	bf00      	nop
 80110e4:	0801e04c 	.word	0x0801e04c
 80110e8:	0801e1ac 	.word	0x0801e1ac
 80110ec:	0801e09c 	.word	0x0801e09c

080110f0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b084      	sub	sp, #16
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80110fa:	f008 fa77 	bl	80195ec <sys_timeouts_sleeptime>
 80110fe:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011106:	d10b      	bne.n	8011120 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8011108:	4813      	ldr	r0, [pc, #76]	; (8011158 <tcpip_timeouts_mbox_fetch+0x68>)
 801110a:	f00b fa6c 	bl	801c5e6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801110e:	2200      	movs	r2, #0
 8011110:	6839      	ldr	r1, [r7, #0]
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f00b f942 	bl	801c39c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8011118:	480f      	ldr	r0, [pc, #60]	; (8011158 <tcpip_timeouts_mbox_fetch+0x68>)
 801111a:	f00b fa55 	bl	801c5c8 <sys_mutex_lock>
    return;
 801111e:	e018      	b.n	8011152 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d102      	bne.n	801112c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8011126:	f008 fa27 	bl	8019578 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801112a:	e7e6      	b.n	80110fa <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801112c:	480a      	ldr	r0, [pc, #40]	; (8011158 <tcpip_timeouts_mbox_fetch+0x68>)
 801112e:	f00b fa5a 	bl	801c5e6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8011132:	68fa      	ldr	r2, [r7, #12]
 8011134:	6839      	ldr	r1, [r7, #0]
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f00b f930 	bl	801c39c <sys_arch_mbox_fetch>
 801113c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801113e:	4806      	ldr	r0, [pc, #24]	; (8011158 <tcpip_timeouts_mbox_fetch+0x68>)
 8011140:	f00b fa42 	bl	801c5c8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	f1b3 3fff 	cmp.w	r3, #4294967295
 801114a:	d102      	bne.n	8011152 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801114c:	f008 fa14 	bl	8019578 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011150:	e7d3      	b.n	80110fa <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8011152:	3710      	adds	r7, #16
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}
 8011158:	2000dc50 	.word	0x2000dc50

0801115c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b084      	sub	sp, #16
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8011164:	4810      	ldr	r0, [pc, #64]	; (80111a8 <tcpip_thread+0x4c>)
 8011166:	f00b fa2f 	bl	801c5c8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801116a:	4b10      	ldr	r3, [pc, #64]	; (80111ac <tcpip_thread+0x50>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d005      	beq.n	801117e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8011172:	4b0e      	ldr	r3, [pc, #56]	; (80111ac <tcpip_thread+0x50>)
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	4a0e      	ldr	r2, [pc, #56]	; (80111b0 <tcpip_thread+0x54>)
 8011178:	6812      	ldr	r2, [r2, #0]
 801117a:	4610      	mov	r0, r2
 801117c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801117e:	f107 030c 	add.w	r3, r7, #12
 8011182:	4619      	mov	r1, r3
 8011184:	480b      	ldr	r0, [pc, #44]	; (80111b4 <tcpip_thread+0x58>)
 8011186:	f7ff ffb3 	bl	80110f0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d106      	bne.n	801119e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011190:	4b09      	ldr	r3, [pc, #36]	; (80111b8 <tcpip_thread+0x5c>)
 8011192:	2291      	movs	r2, #145	; 0x91
 8011194:	4909      	ldr	r1, [pc, #36]	; (80111bc <tcpip_thread+0x60>)
 8011196:	480a      	ldr	r0, [pc, #40]	; (80111c0 <tcpip_thread+0x64>)
 8011198:	f00b fb70 	bl	801c87c <iprintf>
      continue;
 801119c:	e003      	b.n	80111a6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	4618      	mov	r0, r3
 80111a2:	f000 f80f 	bl	80111c4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80111a6:	e7ea      	b.n	801117e <tcpip_thread+0x22>
 80111a8:	2000dc50 	.word	0x2000dc50
 80111ac:	2000dc44 	.word	0x2000dc44
 80111b0:	2000dc48 	.word	0x2000dc48
 80111b4:	2000dc4c 	.word	0x2000dc4c
 80111b8:	0801e1e4 	.word	0x0801e1e4
 80111bc:	0801e214 	.word	0x0801e214
 80111c0:	0801e234 	.word	0x0801e234

080111c4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b082      	sub	sp, #8
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	781b      	ldrb	r3, [r3, #0]
 80111d0:	2b02      	cmp	r3, #2
 80111d2:	d026      	beq.n	8011222 <tcpip_thread_handle_msg+0x5e>
 80111d4:	2b02      	cmp	r3, #2
 80111d6:	dc2b      	bgt.n	8011230 <tcpip_thread_handle_msg+0x6c>
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d002      	beq.n	80111e2 <tcpip_thread_handle_msg+0x1e>
 80111dc:	2b01      	cmp	r3, #1
 80111de:	d015      	beq.n	801120c <tcpip_thread_handle_msg+0x48>
 80111e0:	e026      	b.n	8011230 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	68db      	ldr	r3, [r3, #12]
 80111e6:	687a      	ldr	r2, [r7, #4]
 80111e8:	6850      	ldr	r0, [r2, #4]
 80111ea:	687a      	ldr	r2, [r7, #4]
 80111ec:	6892      	ldr	r2, [r2, #8]
 80111ee:	4611      	mov	r1, r2
 80111f0:	4798      	blx	r3
 80111f2:	4603      	mov	r3, r0
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d004      	beq.n	8011202 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	685b      	ldr	r3, [r3, #4]
 80111fc:	4618      	mov	r0, r3
 80111fe:	f001 fddd 	bl	8012dbc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011202:	6879      	ldr	r1, [r7, #4]
 8011204:	2009      	movs	r0, #9
 8011206:	f000 ff35 	bl	8012074 <memp_free>
      break;
 801120a:	e018      	b.n	801123e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	685b      	ldr	r3, [r3, #4]
 8011210:	687a      	ldr	r2, [r7, #4]
 8011212:	6892      	ldr	r2, [r2, #8]
 8011214:	4610      	mov	r0, r2
 8011216:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8011218:	6879      	ldr	r1, [r7, #4]
 801121a:	2008      	movs	r0, #8
 801121c:	f000 ff2a 	bl	8012074 <memp_free>
      break;
 8011220:	e00d      	b.n	801123e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	685b      	ldr	r3, [r3, #4]
 8011226:	687a      	ldr	r2, [r7, #4]
 8011228:	6892      	ldr	r2, [r2, #8]
 801122a:	4610      	mov	r0, r2
 801122c:	4798      	blx	r3
      break;
 801122e:	e006      	b.n	801123e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011230:	4b05      	ldr	r3, [pc, #20]	; (8011248 <tcpip_thread_handle_msg+0x84>)
 8011232:	22cf      	movs	r2, #207	; 0xcf
 8011234:	4905      	ldr	r1, [pc, #20]	; (801124c <tcpip_thread_handle_msg+0x88>)
 8011236:	4806      	ldr	r0, [pc, #24]	; (8011250 <tcpip_thread_handle_msg+0x8c>)
 8011238:	f00b fb20 	bl	801c87c <iprintf>
      break;
 801123c:	bf00      	nop
  }
}
 801123e:	bf00      	nop
 8011240:	3708      	adds	r7, #8
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}
 8011246:	bf00      	nop
 8011248:	0801e1e4 	.word	0x0801e1e4
 801124c:	0801e214 	.word	0x0801e214
 8011250:	0801e234 	.word	0x0801e234

08011254 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b086      	sub	sp, #24
 8011258:	af00      	add	r7, sp, #0
 801125a:	60f8      	str	r0, [r7, #12]
 801125c:	60b9      	str	r1, [r7, #8]
 801125e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011260:	481a      	ldr	r0, [pc, #104]	; (80112cc <tcpip_inpkt+0x78>)
 8011262:	f00b f8e3 	bl	801c42c <sys_mbox_valid>
 8011266:	4603      	mov	r3, r0
 8011268:	2b00      	cmp	r3, #0
 801126a:	d105      	bne.n	8011278 <tcpip_inpkt+0x24>
 801126c:	4b18      	ldr	r3, [pc, #96]	; (80112d0 <tcpip_inpkt+0x7c>)
 801126e:	22fc      	movs	r2, #252	; 0xfc
 8011270:	4918      	ldr	r1, [pc, #96]	; (80112d4 <tcpip_inpkt+0x80>)
 8011272:	4819      	ldr	r0, [pc, #100]	; (80112d8 <tcpip_inpkt+0x84>)
 8011274:	f00b fb02 	bl	801c87c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8011278:	2009      	movs	r0, #9
 801127a:	f000 fe85 	bl	8011f88 <memp_malloc>
 801127e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8011280:	697b      	ldr	r3, [r7, #20]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d102      	bne.n	801128c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8011286:	f04f 33ff 	mov.w	r3, #4294967295
 801128a:	e01a      	b.n	80112c2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801128c:	697b      	ldr	r3, [r7, #20]
 801128e:	2200      	movs	r2, #0
 8011290:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8011292:	697b      	ldr	r3, [r7, #20]
 8011294:	68fa      	ldr	r2, [r7, #12]
 8011296:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	68ba      	ldr	r2, [r7, #8]
 801129c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	687a      	ldr	r2, [r7, #4]
 80112a2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80112a4:	6979      	ldr	r1, [r7, #20]
 80112a6:	4809      	ldr	r0, [pc, #36]	; (80112cc <tcpip_inpkt+0x78>)
 80112a8:	f00b f85e 	bl	801c368 <sys_mbox_trypost>
 80112ac:	4603      	mov	r3, r0
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d006      	beq.n	80112c0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80112b2:	6979      	ldr	r1, [r7, #20]
 80112b4:	2009      	movs	r0, #9
 80112b6:	f000 fedd 	bl	8012074 <memp_free>
    return ERR_MEM;
 80112ba:	f04f 33ff 	mov.w	r3, #4294967295
 80112be:	e000      	b.n	80112c2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80112c0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	3718      	adds	r7, #24
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}
 80112ca:	bf00      	nop
 80112cc:	2000dc4c 	.word	0x2000dc4c
 80112d0:	0801e1e4 	.word	0x0801e1e4
 80112d4:	0801e25c 	.word	0x0801e25c
 80112d8:	0801e234 	.word	0x0801e234

080112dc <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b082      	sub	sp, #8
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
 80112e4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80112ec:	f003 0318 	and.w	r3, r3, #24
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d006      	beq.n	8011302 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80112f4:	4a08      	ldr	r2, [pc, #32]	; (8011318 <tcpip_input+0x3c>)
 80112f6:	6839      	ldr	r1, [r7, #0]
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f7ff ffab 	bl	8011254 <tcpip_inpkt>
 80112fe:	4603      	mov	r3, r0
 8011300:	e005      	b.n	801130e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8011302:	4a06      	ldr	r2, [pc, #24]	; (801131c <tcpip_input+0x40>)
 8011304:	6839      	ldr	r1, [r7, #0]
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f7ff ffa4 	bl	8011254 <tcpip_inpkt>
 801130c:	4603      	mov	r3, r0
}
 801130e:	4618      	mov	r0, r3
 8011310:	3708      	adds	r7, #8
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	0801c165 	.word	0x0801c165
 801131c:	0801b06d 	.word	0x0801b06d

08011320 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b084      	sub	sp, #16
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
 8011328:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801132a:	4819      	ldr	r0, [pc, #100]	; (8011390 <tcpip_try_callback+0x70>)
 801132c:	f00b f87e 	bl	801c42c <sys_mbox_valid>
 8011330:	4603      	mov	r3, r0
 8011332:	2b00      	cmp	r3, #0
 8011334:	d106      	bne.n	8011344 <tcpip_try_callback+0x24>
 8011336:	4b17      	ldr	r3, [pc, #92]	; (8011394 <tcpip_try_callback+0x74>)
 8011338:	f240 125d 	movw	r2, #349	; 0x15d
 801133c:	4916      	ldr	r1, [pc, #88]	; (8011398 <tcpip_try_callback+0x78>)
 801133e:	4817      	ldr	r0, [pc, #92]	; (801139c <tcpip_try_callback+0x7c>)
 8011340:	f00b fa9c 	bl	801c87c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8011344:	2008      	movs	r0, #8
 8011346:	f000 fe1f 	bl	8011f88 <memp_malloc>
 801134a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d102      	bne.n	8011358 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8011352:	f04f 33ff 	mov.w	r3, #4294967295
 8011356:	e017      	b.n	8011388 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	2201      	movs	r2, #1
 801135c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	687a      	ldr	r2, [r7, #4]
 8011362:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	683a      	ldr	r2, [r7, #0]
 8011368:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801136a:	68f9      	ldr	r1, [r7, #12]
 801136c:	4808      	ldr	r0, [pc, #32]	; (8011390 <tcpip_try_callback+0x70>)
 801136e:	f00a fffb 	bl	801c368 <sys_mbox_trypost>
 8011372:	4603      	mov	r3, r0
 8011374:	2b00      	cmp	r3, #0
 8011376:	d006      	beq.n	8011386 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8011378:	68f9      	ldr	r1, [r7, #12]
 801137a:	2008      	movs	r0, #8
 801137c:	f000 fe7a 	bl	8012074 <memp_free>
    return ERR_MEM;
 8011380:	f04f 33ff 	mov.w	r3, #4294967295
 8011384:	e000      	b.n	8011388 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8011386:	2300      	movs	r3, #0
}
 8011388:	4618      	mov	r0, r3
 801138a:	3710      	adds	r7, #16
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}
 8011390:	2000dc4c 	.word	0x2000dc4c
 8011394:	0801e1e4 	.word	0x0801e1e4
 8011398:	0801e25c 	.word	0x0801e25c
 801139c:	0801e234 	.word	0x0801e234

080113a0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b084      	sub	sp, #16
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	60f8      	str	r0, [r7, #12]
 80113a8:	60b9      	str	r1, [r7, #8]
 80113aa:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80113ac:	4806      	ldr	r0, [pc, #24]	; (80113c8 <tcpip_send_msg_wait_sem+0x28>)
 80113ae:	f00b f90b 	bl	801c5c8 <sys_mutex_lock>
  fn(apimsg);
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	68b8      	ldr	r0, [r7, #8]
 80113b6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80113b8:	4803      	ldr	r0, [pc, #12]	; (80113c8 <tcpip_send_msg_wait_sem+0x28>)
 80113ba:	f00b f914 	bl	801c5e6 <sys_mutex_unlock>
  return ERR_OK;
 80113be:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	3710      	adds	r7, #16
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}
 80113c8:	2000dc50 	.word	0x2000dc50

080113cc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b084      	sub	sp, #16
 80113d0:	af02      	add	r7, sp, #8
 80113d2:	6078      	str	r0, [r7, #4]
 80113d4:	6039      	str	r1, [r7, #0]
  lwip_init();
 80113d6:	f000 f92d 	bl	8011634 <lwip_init>

  tcpip_init_done = initfunc;
 80113da:	4a17      	ldr	r2, [pc, #92]	; (8011438 <tcpip_init+0x6c>)
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80113e0:	4a16      	ldr	r2, [pc, #88]	; (801143c <tcpip_init+0x70>)
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80113e6:	2106      	movs	r1, #6
 80113e8:	4815      	ldr	r0, [pc, #84]	; (8011440 <tcpip_init+0x74>)
 80113ea:	f00a ff91 	bl	801c310 <sys_mbox_new>
 80113ee:	4603      	mov	r3, r0
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d006      	beq.n	8011402 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80113f4:	4b13      	ldr	r3, [pc, #76]	; (8011444 <tcpip_init+0x78>)
 80113f6:	f240 2261 	movw	r2, #609	; 0x261
 80113fa:	4913      	ldr	r1, [pc, #76]	; (8011448 <tcpip_init+0x7c>)
 80113fc:	4813      	ldr	r0, [pc, #76]	; (801144c <tcpip_init+0x80>)
 80113fe:	f00b fa3d 	bl	801c87c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8011402:	4813      	ldr	r0, [pc, #76]	; (8011450 <tcpip_init+0x84>)
 8011404:	f00b f8ca 	bl	801c59c <sys_mutex_new>
 8011408:	4603      	mov	r3, r0
 801140a:	2b00      	cmp	r3, #0
 801140c:	d006      	beq.n	801141c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801140e:	4b0d      	ldr	r3, [pc, #52]	; (8011444 <tcpip_init+0x78>)
 8011410:	f240 2265 	movw	r2, #613	; 0x265
 8011414:	490f      	ldr	r1, [pc, #60]	; (8011454 <tcpip_init+0x88>)
 8011416:	480d      	ldr	r0, [pc, #52]	; (801144c <tcpip_init+0x80>)
 8011418:	f00b fa30 	bl	801c87c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801141c:	2318      	movs	r3, #24
 801141e:	9300      	str	r3, [sp, #0]
 8011420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011424:	2200      	movs	r2, #0
 8011426:	490c      	ldr	r1, [pc, #48]	; (8011458 <tcpip_init+0x8c>)
 8011428:	480c      	ldr	r0, [pc, #48]	; (801145c <tcpip_init+0x90>)
 801142a:	f00b f8e9 	bl	801c600 <sys_thread_new>
}
 801142e:	bf00      	nop
 8011430:	3708      	adds	r7, #8
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}
 8011436:	bf00      	nop
 8011438:	2000dc44 	.word	0x2000dc44
 801143c:	2000dc48 	.word	0x2000dc48
 8011440:	2000dc4c 	.word	0x2000dc4c
 8011444:	0801e1e4 	.word	0x0801e1e4
 8011448:	0801e26c 	.word	0x0801e26c
 801144c:	0801e234 	.word	0x0801e234
 8011450:	2000dc50 	.word	0x2000dc50
 8011454:	0801e290 	.word	0x0801e290
 8011458:	0801115d 	.word	0x0801115d
 801145c:	0801e2b4 	.word	0x0801e2b4

08011460 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8011460:	b480      	push	{r7}
 8011462:	b083      	sub	sp, #12
 8011464:	af00      	add	r7, sp, #0
 8011466:	4603      	mov	r3, r0
 8011468:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801146a:	88fb      	ldrh	r3, [r7, #6]
 801146c:	021b      	lsls	r3, r3, #8
 801146e:	b21a      	sxth	r2, r3
 8011470:	88fb      	ldrh	r3, [r7, #6]
 8011472:	0a1b      	lsrs	r3, r3, #8
 8011474:	b29b      	uxth	r3, r3
 8011476:	b21b      	sxth	r3, r3
 8011478:	4313      	orrs	r3, r2
 801147a:	b21b      	sxth	r3, r3
 801147c:	b29b      	uxth	r3, r3
}
 801147e:	4618      	mov	r0, r3
 8011480:	370c      	adds	r7, #12
 8011482:	46bd      	mov	sp, r7
 8011484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011488:	4770      	bx	lr

0801148a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801148a:	b480      	push	{r7}
 801148c:	b083      	sub	sp, #12
 801148e:	af00      	add	r7, sp, #0
 8011490:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	061a      	lsls	r2, r3, #24
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	021b      	lsls	r3, r3, #8
 801149a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801149e:	431a      	orrs	r2, r3
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	0a1b      	lsrs	r3, r3, #8
 80114a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80114a8:	431a      	orrs	r2, r3
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	0e1b      	lsrs	r3, r3, #24
 80114ae:	4313      	orrs	r3, r2
}
 80114b0:	4618      	mov	r0, r3
 80114b2:	370c      	adds	r7, #12
 80114b4:	46bd      	mov	sp, r7
 80114b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ba:	4770      	bx	lr

080114bc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80114bc:	b480      	push	{r7}
 80114be:	b089      	sub	sp, #36	; 0x24
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
 80114c4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80114ca:	2300      	movs	r3, #0
 80114cc:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80114ce:	2300      	movs	r3, #0
 80114d0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80114d2:	69fb      	ldr	r3, [r7, #28]
 80114d4:	f003 0301 	and.w	r3, r3, #1
 80114d8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80114da:	693b      	ldr	r3, [r7, #16]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d00d      	beq.n	80114fc <lwip_standard_chksum+0x40>
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	dd0a      	ble.n	80114fc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80114e6:	69fa      	ldr	r2, [r7, #28]
 80114e8:	1c53      	adds	r3, r2, #1
 80114ea:	61fb      	str	r3, [r7, #28]
 80114ec:	f107 030e 	add.w	r3, r7, #14
 80114f0:	3301      	adds	r3, #1
 80114f2:	7812      	ldrb	r2, [r2, #0]
 80114f4:	701a      	strb	r2, [r3, #0]
    len--;
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	3b01      	subs	r3, #1
 80114fa:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80114fc:	69fb      	ldr	r3, [r7, #28]
 80114fe:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8011500:	e00a      	b.n	8011518 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8011502:	69bb      	ldr	r3, [r7, #24]
 8011504:	1c9a      	adds	r2, r3, #2
 8011506:	61ba      	str	r2, [r7, #24]
 8011508:	881b      	ldrh	r3, [r3, #0]
 801150a:	461a      	mov	r2, r3
 801150c:	697b      	ldr	r3, [r7, #20]
 801150e:	4413      	add	r3, r2
 8011510:	617b      	str	r3, [r7, #20]
    len -= 2;
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	3b02      	subs	r3, #2
 8011516:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	2b01      	cmp	r3, #1
 801151c:	dcf1      	bgt.n	8011502 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	2b00      	cmp	r3, #0
 8011522:	dd04      	ble.n	801152e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8011524:	f107 030e 	add.w	r3, r7, #14
 8011528:	69ba      	ldr	r2, [r7, #24]
 801152a:	7812      	ldrb	r2, [r2, #0]
 801152c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801152e:	89fb      	ldrh	r3, [r7, #14]
 8011530:	461a      	mov	r2, r3
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	4413      	add	r3, r2
 8011536:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	0c1a      	lsrs	r2, r3, #16
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	b29b      	uxth	r3, r3
 8011540:	4413      	add	r3, r2
 8011542:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	0c1a      	lsrs	r2, r3, #16
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	b29b      	uxth	r3, r3
 801154c:	4413      	add	r3, r2
 801154e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d007      	beq.n	8011566 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	021b      	lsls	r3, r3, #8
 801155a:	b29a      	uxth	r2, r3
 801155c:	697b      	ldr	r3, [r7, #20]
 801155e:	0a1b      	lsrs	r3, r3, #8
 8011560:	b2db      	uxtb	r3, r3
 8011562:	4313      	orrs	r3, r2
 8011564:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	b29b      	uxth	r3, r3
}
 801156a:	4618      	mov	r0, r3
 801156c:	3724      	adds	r7, #36	; 0x24
 801156e:	46bd      	mov	sp, r7
 8011570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011574:	4770      	bx	lr

08011576 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8011576:	b580      	push	{r7, lr}
 8011578:	b082      	sub	sp, #8
 801157a:	af00      	add	r7, sp, #0
 801157c:	6078      	str	r0, [r7, #4]
 801157e:	460b      	mov	r3, r1
 8011580:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8011582:	887b      	ldrh	r3, [r7, #2]
 8011584:	4619      	mov	r1, r3
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	f7ff ff98 	bl	80114bc <lwip_standard_chksum>
 801158c:	4603      	mov	r3, r0
 801158e:	43db      	mvns	r3, r3
 8011590:	b29b      	uxth	r3, r3
}
 8011592:	4618      	mov	r0, r3
 8011594:	3708      	adds	r7, #8
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}

0801159a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 801159a:	b580      	push	{r7, lr}
 801159c:	b086      	sub	sp, #24
 801159e:	af00      	add	r7, sp, #0
 80115a0:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80115a2:	2300      	movs	r3, #0
 80115a4:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80115a6:	2300      	movs	r3, #0
 80115a8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	613b      	str	r3, [r7, #16]
 80115ae:	e02b      	b.n	8011608 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80115b0:	693b      	ldr	r3, [r7, #16]
 80115b2:	685a      	ldr	r2, [r3, #4]
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	895b      	ldrh	r3, [r3, #10]
 80115b8:	4619      	mov	r1, r3
 80115ba:	4610      	mov	r0, r2
 80115bc:	f7ff ff7e 	bl	80114bc <lwip_standard_chksum>
 80115c0:	4603      	mov	r3, r0
 80115c2:	461a      	mov	r2, r3
 80115c4:	697b      	ldr	r3, [r7, #20]
 80115c6:	4413      	add	r3, r2
 80115c8:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	0c1a      	lsrs	r2, r3, #16
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	b29b      	uxth	r3, r3
 80115d2:	4413      	add	r3, r2
 80115d4:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	895b      	ldrh	r3, [r3, #10]
 80115da:	f003 0301 	and.w	r3, r3, #1
 80115de:	b29b      	uxth	r3, r3
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d00e      	beq.n	8011602 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	bf0c      	ite	eq
 80115ea:	2301      	moveq	r3, #1
 80115ec:	2300      	movne	r3, #0
 80115ee:	b2db      	uxtb	r3, r3
 80115f0:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	021b      	lsls	r3, r3, #8
 80115f6:	b29a      	uxth	r2, r3
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	0a1b      	lsrs	r3, r3, #8
 80115fc:	b2db      	uxtb	r3, r3
 80115fe:	4313      	orrs	r3, r2
 8011600:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8011602:	693b      	ldr	r3, [r7, #16]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	613b      	str	r3, [r7, #16]
 8011608:	693b      	ldr	r3, [r7, #16]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d1d0      	bne.n	80115b0 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d007      	beq.n	8011624 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8011614:	697b      	ldr	r3, [r7, #20]
 8011616:	021b      	lsls	r3, r3, #8
 8011618:	b29a      	uxth	r2, r3
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	0a1b      	lsrs	r3, r3, #8
 801161e:	b2db      	uxtb	r3, r3
 8011620:	4313      	orrs	r3, r2
 8011622:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8011624:	697b      	ldr	r3, [r7, #20]
 8011626:	b29b      	uxth	r3, r3
 8011628:	43db      	mvns	r3, r3
 801162a:	b29b      	uxth	r3, r3
}
 801162c:	4618      	mov	r0, r3
 801162e:	3718      	adds	r7, #24
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}

08011634 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801163a:	2300      	movs	r3, #0
 801163c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801163e:	f00a ffa1 	bl	801c584 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8011642:	f000 f8d5 	bl	80117f0 <mem_init>
  memp_init();
 8011646:	f000 fc31 	bl	8011eac <memp_init>
  pbuf_init();
  netif_init();
 801164a:	f000 fd3d 	bl	80120c8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801164e:	f008 f805 	bl	801965c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8011652:	f001 fe4d 	bl	80132f0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8011656:	f007 ff47 	bl	80194e8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801165a:	bf00      	nop
 801165c:	3708      	adds	r7, #8
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}
	...

08011664 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8011664:	b480      	push	{r7}
 8011666:	b083      	sub	sp, #12
 8011668:	af00      	add	r7, sp, #0
 801166a:	4603      	mov	r3, r0
 801166c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801166e:	4b05      	ldr	r3, [pc, #20]	; (8011684 <ptr_to_mem+0x20>)
 8011670:	681a      	ldr	r2, [r3, #0]
 8011672:	88fb      	ldrh	r3, [r7, #6]
 8011674:	4413      	add	r3, r2
}
 8011676:	4618      	mov	r0, r3
 8011678:	370c      	adds	r7, #12
 801167a:	46bd      	mov	sp, r7
 801167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011680:	4770      	bx	lr
 8011682:	bf00      	nop
 8011684:	2000e2c0 	.word	0x2000e2c0

08011688 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8011688:	b480      	push	{r7}
 801168a:	b083      	sub	sp, #12
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8011690:	4b05      	ldr	r3, [pc, #20]	; (80116a8 <mem_to_ptr+0x20>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	687a      	ldr	r2, [r7, #4]
 8011696:	1ad3      	subs	r3, r2, r3
 8011698:	b29b      	uxth	r3, r3
}
 801169a:	4618      	mov	r0, r3
 801169c:	370c      	adds	r7, #12
 801169e:	46bd      	mov	sp, r7
 80116a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a4:	4770      	bx	lr
 80116a6:	bf00      	nop
 80116a8:	2000e2c0 	.word	0x2000e2c0

080116ac <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80116ac:	b590      	push	{r4, r7, lr}
 80116ae:	b085      	sub	sp, #20
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80116b4:	4b45      	ldr	r3, [pc, #276]	; (80117cc <plug_holes+0x120>)
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d206      	bcs.n	80116cc <plug_holes+0x20>
 80116be:	4b44      	ldr	r3, [pc, #272]	; (80117d0 <plug_holes+0x124>)
 80116c0:	f240 12df 	movw	r2, #479	; 0x1df
 80116c4:	4943      	ldr	r1, [pc, #268]	; (80117d4 <plug_holes+0x128>)
 80116c6:	4844      	ldr	r0, [pc, #272]	; (80117d8 <plug_holes+0x12c>)
 80116c8:	f00b f8d8 	bl	801c87c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80116cc:	4b43      	ldr	r3, [pc, #268]	; (80117dc <plug_holes+0x130>)
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	687a      	ldr	r2, [r7, #4]
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d306      	bcc.n	80116e4 <plug_holes+0x38>
 80116d6:	4b3e      	ldr	r3, [pc, #248]	; (80117d0 <plug_holes+0x124>)
 80116d8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80116dc:	4940      	ldr	r1, [pc, #256]	; (80117e0 <plug_holes+0x134>)
 80116de:	483e      	ldr	r0, [pc, #248]	; (80117d8 <plug_holes+0x12c>)
 80116e0:	f00b f8cc 	bl	801c87c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	791b      	ldrb	r3, [r3, #4]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d006      	beq.n	80116fa <plug_holes+0x4e>
 80116ec:	4b38      	ldr	r3, [pc, #224]	; (80117d0 <plug_holes+0x124>)
 80116ee:	f240 12e1 	movw	r2, #481	; 0x1e1
 80116f2:	493c      	ldr	r1, [pc, #240]	; (80117e4 <plug_holes+0x138>)
 80116f4:	4838      	ldr	r0, [pc, #224]	; (80117d8 <plug_holes+0x12c>)
 80116f6:	f00b f8c1 	bl	801c87c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	881b      	ldrh	r3, [r3, #0]
 80116fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011702:	d906      	bls.n	8011712 <plug_holes+0x66>
 8011704:	4b32      	ldr	r3, [pc, #200]	; (80117d0 <plug_holes+0x124>)
 8011706:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801170a:	4937      	ldr	r1, [pc, #220]	; (80117e8 <plug_holes+0x13c>)
 801170c:	4832      	ldr	r0, [pc, #200]	; (80117d8 <plug_holes+0x12c>)
 801170e:	f00b f8b5 	bl	801c87c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	881b      	ldrh	r3, [r3, #0]
 8011716:	4618      	mov	r0, r3
 8011718:	f7ff ffa4 	bl	8011664 <ptr_to_mem>
 801171c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801171e:	687a      	ldr	r2, [r7, #4]
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	429a      	cmp	r2, r3
 8011724:	d024      	beq.n	8011770 <plug_holes+0xc4>
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	791b      	ldrb	r3, [r3, #4]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d120      	bne.n	8011770 <plug_holes+0xc4>
 801172e:	4b2b      	ldr	r3, [pc, #172]	; (80117dc <plug_holes+0x130>)
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	68fa      	ldr	r2, [r7, #12]
 8011734:	429a      	cmp	r2, r3
 8011736:	d01b      	beq.n	8011770 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8011738:	4b2c      	ldr	r3, [pc, #176]	; (80117ec <plug_holes+0x140>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	68fa      	ldr	r2, [r7, #12]
 801173e:	429a      	cmp	r2, r3
 8011740:	d102      	bne.n	8011748 <plug_holes+0x9c>
      lfree = mem;
 8011742:	4a2a      	ldr	r2, [pc, #168]	; (80117ec <plug_holes+0x140>)
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	881a      	ldrh	r2, [r3, #0]
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	881b      	ldrh	r3, [r3, #0]
 8011754:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011758:	d00a      	beq.n	8011770 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	881b      	ldrh	r3, [r3, #0]
 801175e:	4618      	mov	r0, r3
 8011760:	f7ff ff80 	bl	8011664 <ptr_to_mem>
 8011764:	4604      	mov	r4, r0
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f7ff ff8e 	bl	8011688 <mem_to_ptr>
 801176c:	4603      	mov	r3, r0
 801176e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	885b      	ldrh	r3, [r3, #2]
 8011774:	4618      	mov	r0, r3
 8011776:	f7ff ff75 	bl	8011664 <ptr_to_mem>
 801177a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801177c:	68ba      	ldr	r2, [r7, #8]
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	429a      	cmp	r2, r3
 8011782:	d01f      	beq.n	80117c4 <plug_holes+0x118>
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	791b      	ldrb	r3, [r3, #4]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d11b      	bne.n	80117c4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801178c:	4b17      	ldr	r3, [pc, #92]	; (80117ec <plug_holes+0x140>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	687a      	ldr	r2, [r7, #4]
 8011792:	429a      	cmp	r2, r3
 8011794:	d102      	bne.n	801179c <plug_holes+0xf0>
      lfree = pmem;
 8011796:	4a15      	ldr	r2, [pc, #84]	; (80117ec <plug_holes+0x140>)
 8011798:	68bb      	ldr	r3, [r7, #8]
 801179a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	881a      	ldrh	r2, [r3, #0]
 80117a0:	68bb      	ldr	r3, [r7, #8]
 80117a2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	881b      	ldrh	r3, [r3, #0]
 80117a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80117ac:	d00a      	beq.n	80117c4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	881b      	ldrh	r3, [r3, #0]
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7ff ff56 	bl	8011664 <ptr_to_mem>
 80117b8:	4604      	mov	r4, r0
 80117ba:	68b8      	ldr	r0, [r7, #8]
 80117bc:	f7ff ff64 	bl	8011688 <mem_to_ptr>
 80117c0:	4603      	mov	r3, r0
 80117c2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80117c4:	bf00      	nop
 80117c6:	3714      	adds	r7, #20
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd90      	pop	{r4, r7, pc}
 80117cc:	2000e2c0 	.word	0x2000e2c0
 80117d0:	0801e2c4 	.word	0x0801e2c4
 80117d4:	0801e2f4 	.word	0x0801e2f4
 80117d8:	0801e30c 	.word	0x0801e30c
 80117dc:	2000e2c4 	.word	0x2000e2c4
 80117e0:	0801e334 	.word	0x0801e334
 80117e4:	0801e350 	.word	0x0801e350
 80117e8:	0801e36c 	.word	0x0801e36c
 80117ec:	2000e2cc 	.word	0x2000e2cc

080117f0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b082      	sub	sp, #8
 80117f4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80117f6:	4b1f      	ldr	r3, [pc, #124]	; (8011874 <mem_init+0x84>)
 80117f8:	3303      	adds	r3, #3
 80117fa:	f023 0303 	bic.w	r3, r3, #3
 80117fe:	461a      	mov	r2, r3
 8011800:	4b1d      	ldr	r3, [pc, #116]	; (8011878 <mem_init+0x88>)
 8011802:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8011804:	4b1c      	ldr	r3, [pc, #112]	; (8011878 <mem_init+0x88>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011810:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2200      	movs	r2, #0
 8011816:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2200      	movs	r2, #0
 801181c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801181e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8011822:	f7ff ff1f 	bl	8011664 <ptr_to_mem>
 8011826:	4603      	mov	r3, r0
 8011828:	4a14      	ldr	r2, [pc, #80]	; (801187c <mem_init+0x8c>)
 801182a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801182c:	4b13      	ldr	r3, [pc, #76]	; (801187c <mem_init+0x8c>)
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	2201      	movs	r2, #1
 8011832:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8011834:	4b11      	ldr	r3, [pc, #68]	; (801187c <mem_init+0x8c>)
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801183c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801183e:	4b0f      	ldr	r3, [pc, #60]	; (801187c <mem_init+0x8c>)
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011846:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8011848:	4b0b      	ldr	r3, [pc, #44]	; (8011878 <mem_init+0x88>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	4a0c      	ldr	r2, [pc, #48]	; (8011880 <mem_init+0x90>)
 801184e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8011850:	480c      	ldr	r0, [pc, #48]	; (8011884 <mem_init+0x94>)
 8011852:	f00a fea3 	bl	801c59c <sys_mutex_new>
 8011856:	4603      	mov	r3, r0
 8011858:	2b00      	cmp	r3, #0
 801185a:	d006      	beq.n	801186a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801185c:	4b0a      	ldr	r3, [pc, #40]	; (8011888 <mem_init+0x98>)
 801185e:	f240 221f 	movw	r2, #543	; 0x21f
 8011862:	490a      	ldr	r1, [pc, #40]	; (801188c <mem_init+0x9c>)
 8011864:	480a      	ldr	r0, [pc, #40]	; (8011890 <mem_init+0xa0>)
 8011866:	f00b f809 	bl	801c87c <iprintf>
  }
}
 801186a:	bf00      	nop
 801186c:	3708      	adds	r7, #8
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}
 8011872:	bf00      	nop
 8011874:	2000dc6c 	.word	0x2000dc6c
 8011878:	2000e2c0 	.word	0x2000e2c0
 801187c:	2000e2c4 	.word	0x2000e2c4
 8011880:	2000e2cc 	.word	0x2000e2cc
 8011884:	2000e2c8 	.word	0x2000e2c8
 8011888:	0801e2c4 	.word	0x0801e2c4
 801188c:	0801e398 	.word	0x0801e398
 8011890:	0801e30c 	.word	0x0801e30c

08011894 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b086      	sub	sp, #24
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801189c:	6878      	ldr	r0, [r7, #4]
 801189e:	f7ff fef3 	bl	8011688 <mem_to_ptr>
 80118a2:	4603      	mov	r3, r0
 80118a4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	881b      	ldrh	r3, [r3, #0]
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7ff feda 	bl	8011664 <ptr_to_mem>
 80118b0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	885b      	ldrh	r3, [r3, #2]
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7ff fed4 	bl	8011664 <ptr_to_mem>
 80118bc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	881b      	ldrh	r3, [r3, #0]
 80118c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80118c6:	d818      	bhi.n	80118fa <mem_link_valid+0x66>
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	885b      	ldrh	r3, [r3, #2]
 80118cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80118d0:	d813      	bhi.n	80118fa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80118d6:	8afa      	ldrh	r2, [r7, #22]
 80118d8:	429a      	cmp	r2, r3
 80118da:	d004      	beq.n	80118e6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	881b      	ldrh	r3, [r3, #0]
 80118e0:	8afa      	ldrh	r2, [r7, #22]
 80118e2:	429a      	cmp	r2, r3
 80118e4:	d109      	bne.n	80118fa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80118e6:	4b08      	ldr	r3, [pc, #32]	; (8011908 <mem_link_valid+0x74>)
 80118e8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80118ea:	693a      	ldr	r2, [r7, #16]
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d006      	beq.n	80118fe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80118f0:	693b      	ldr	r3, [r7, #16]
 80118f2:	885b      	ldrh	r3, [r3, #2]
 80118f4:	8afa      	ldrh	r2, [r7, #22]
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d001      	beq.n	80118fe <mem_link_valid+0x6a>
    return 0;
 80118fa:	2300      	movs	r3, #0
 80118fc:	e000      	b.n	8011900 <mem_link_valid+0x6c>
  }
  return 1;
 80118fe:	2301      	movs	r3, #1
}
 8011900:	4618      	mov	r0, r3
 8011902:	3718      	adds	r7, #24
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}
 8011908:	2000e2c4 	.word	0x2000e2c4

0801190c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b088      	sub	sp, #32
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d070      	beq.n	80119fc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	f003 0303 	and.w	r3, r3, #3
 8011920:	2b00      	cmp	r3, #0
 8011922:	d00d      	beq.n	8011940 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8011924:	4b37      	ldr	r3, [pc, #220]	; (8011a04 <mem_free+0xf8>)
 8011926:	f240 2273 	movw	r2, #627	; 0x273
 801192a:	4937      	ldr	r1, [pc, #220]	; (8011a08 <mem_free+0xfc>)
 801192c:	4837      	ldr	r0, [pc, #220]	; (8011a0c <mem_free+0x100>)
 801192e:	f00a ffa5 	bl	801c87c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011932:	f00a fe85 	bl	801c640 <sys_arch_protect>
 8011936:	60f8      	str	r0, [r7, #12]
 8011938:	68f8      	ldr	r0, [r7, #12]
 801193a:	f00a fe8f 	bl	801c65c <sys_arch_unprotect>
    return;
 801193e:	e05e      	b.n	80119fe <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	3b08      	subs	r3, #8
 8011944:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8011946:	4b32      	ldr	r3, [pc, #200]	; (8011a10 <mem_free+0x104>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	69fa      	ldr	r2, [r7, #28]
 801194c:	429a      	cmp	r2, r3
 801194e:	d306      	bcc.n	801195e <mem_free+0x52>
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	f103 020c 	add.w	r2, r3, #12
 8011956:	4b2f      	ldr	r3, [pc, #188]	; (8011a14 <mem_free+0x108>)
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	429a      	cmp	r2, r3
 801195c:	d90d      	bls.n	801197a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801195e:	4b29      	ldr	r3, [pc, #164]	; (8011a04 <mem_free+0xf8>)
 8011960:	f240 227f 	movw	r2, #639	; 0x27f
 8011964:	492c      	ldr	r1, [pc, #176]	; (8011a18 <mem_free+0x10c>)
 8011966:	4829      	ldr	r0, [pc, #164]	; (8011a0c <mem_free+0x100>)
 8011968:	f00a ff88 	bl	801c87c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801196c:	f00a fe68 	bl	801c640 <sys_arch_protect>
 8011970:	6138      	str	r0, [r7, #16]
 8011972:	6938      	ldr	r0, [r7, #16]
 8011974:	f00a fe72 	bl	801c65c <sys_arch_unprotect>
    return;
 8011978:	e041      	b.n	80119fe <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801197a:	4828      	ldr	r0, [pc, #160]	; (8011a1c <mem_free+0x110>)
 801197c:	f00a fe24 	bl	801c5c8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8011980:	69fb      	ldr	r3, [r7, #28]
 8011982:	791b      	ldrb	r3, [r3, #4]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d110      	bne.n	80119aa <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011988:	4b1e      	ldr	r3, [pc, #120]	; (8011a04 <mem_free+0xf8>)
 801198a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801198e:	4924      	ldr	r1, [pc, #144]	; (8011a20 <mem_free+0x114>)
 8011990:	481e      	ldr	r0, [pc, #120]	; (8011a0c <mem_free+0x100>)
 8011992:	f00a ff73 	bl	801c87c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011996:	4821      	ldr	r0, [pc, #132]	; (8011a1c <mem_free+0x110>)
 8011998:	f00a fe25 	bl	801c5e6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801199c:	f00a fe50 	bl	801c640 <sys_arch_protect>
 80119a0:	6178      	str	r0, [r7, #20]
 80119a2:	6978      	ldr	r0, [r7, #20]
 80119a4:	f00a fe5a 	bl	801c65c <sys_arch_unprotect>
    return;
 80119a8:	e029      	b.n	80119fe <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80119aa:	69f8      	ldr	r0, [r7, #28]
 80119ac:	f7ff ff72 	bl	8011894 <mem_link_valid>
 80119b0:	4603      	mov	r3, r0
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d110      	bne.n	80119d8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80119b6:	4b13      	ldr	r3, [pc, #76]	; (8011a04 <mem_free+0xf8>)
 80119b8:	f240 2295 	movw	r2, #661	; 0x295
 80119bc:	4919      	ldr	r1, [pc, #100]	; (8011a24 <mem_free+0x118>)
 80119be:	4813      	ldr	r0, [pc, #76]	; (8011a0c <mem_free+0x100>)
 80119c0:	f00a ff5c 	bl	801c87c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80119c4:	4815      	ldr	r0, [pc, #84]	; (8011a1c <mem_free+0x110>)
 80119c6:	f00a fe0e 	bl	801c5e6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80119ca:	f00a fe39 	bl	801c640 <sys_arch_protect>
 80119ce:	61b8      	str	r0, [r7, #24]
 80119d0:	69b8      	ldr	r0, [r7, #24]
 80119d2:	f00a fe43 	bl	801c65c <sys_arch_unprotect>
    return;
 80119d6:	e012      	b.n	80119fe <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80119d8:	69fb      	ldr	r3, [r7, #28]
 80119da:	2200      	movs	r2, #0
 80119dc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80119de:	4b12      	ldr	r3, [pc, #72]	; (8011a28 <mem_free+0x11c>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	69fa      	ldr	r2, [r7, #28]
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d202      	bcs.n	80119ee <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80119e8:	4a0f      	ldr	r2, [pc, #60]	; (8011a28 <mem_free+0x11c>)
 80119ea:	69fb      	ldr	r3, [r7, #28]
 80119ec:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80119ee:	69f8      	ldr	r0, [r7, #28]
 80119f0:	f7ff fe5c 	bl	80116ac <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80119f4:	4809      	ldr	r0, [pc, #36]	; (8011a1c <mem_free+0x110>)
 80119f6:	f00a fdf6 	bl	801c5e6 <sys_mutex_unlock>
 80119fa:	e000      	b.n	80119fe <mem_free+0xf2>
    return;
 80119fc:	bf00      	nop
}
 80119fe:	3720      	adds	r7, #32
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}
 8011a04:	0801e2c4 	.word	0x0801e2c4
 8011a08:	0801e3b4 	.word	0x0801e3b4
 8011a0c:	0801e30c 	.word	0x0801e30c
 8011a10:	2000e2c0 	.word	0x2000e2c0
 8011a14:	2000e2c4 	.word	0x2000e2c4
 8011a18:	0801e3d8 	.word	0x0801e3d8
 8011a1c:	2000e2c8 	.word	0x2000e2c8
 8011a20:	0801e3f4 	.word	0x0801e3f4
 8011a24:	0801e41c 	.word	0x0801e41c
 8011a28:	2000e2cc 	.word	0x2000e2cc

08011a2c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b088      	sub	sp, #32
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
 8011a34:	460b      	mov	r3, r1
 8011a36:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8011a38:	887b      	ldrh	r3, [r7, #2]
 8011a3a:	3303      	adds	r3, #3
 8011a3c:	b29b      	uxth	r3, r3
 8011a3e:	f023 0303 	bic.w	r3, r3, #3
 8011a42:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8011a44:	8bfb      	ldrh	r3, [r7, #30]
 8011a46:	2b0b      	cmp	r3, #11
 8011a48:	d801      	bhi.n	8011a4e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8011a4a:	230c      	movs	r3, #12
 8011a4c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8011a4e:	8bfb      	ldrh	r3, [r7, #30]
 8011a50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011a54:	d803      	bhi.n	8011a5e <mem_trim+0x32>
 8011a56:	8bfa      	ldrh	r2, [r7, #30]
 8011a58:	887b      	ldrh	r3, [r7, #2]
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d201      	bcs.n	8011a62 <mem_trim+0x36>
    return NULL;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	e0d8      	b.n	8011c14 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8011a62:	4b6e      	ldr	r3, [pc, #440]	; (8011c1c <mem_trim+0x1f0>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	687a      	ldr	r2, [r7, #4]
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d304      	bcc.n	8011a76 <mem_trim+0x4a>
 8011a6c:	4b6c      	ldr	r3, [pc, #432]	; (8011c20 <mem_trim+0x1f4>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	687a      	ldr	r2, [r7, #4]
 8011a72:	429a      	cmp	r2, r3
 8011a74:	d306      	bcc.n	8011a84 <mem_trim+0x58>
 8011a76:	4b6b      	ldr	r3, [pc, #428]	; (8011c24 <mem_trim+0x1f8>)
 8011a78:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011a7c:	496a      	ldr	r1, [pc, #424]	; (8011c28 <mem_trim+0x1fc>)
 8011a7e:	486b      	ldr	r0, [pc, #428]	; (8011c2c <mem_trim+0x200>)
 8011a80:	f00a fefc 	bl	801c87c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011a84:	4b65      	ldr	r3, [pc, #404]	; (8011c1c <mem_trim+0x1f0>)
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	687a      	ldr	r2, [r7, #4]
 8011a8a:	429a      	cmp	r2, r3
 8011a8c:	d304      	bcc.n	8011a98 <mem_trim+0x6c>
 8011a8e:	4b64      	ldr	r3, [pc, #400]	; (8011c20 <mem_trim+0x1f4>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	687a      	ldr	r2, [r7, #4]
 8011a94:	429a      	cmp	r2, r3
 8011a96:	d307      	bcc.n	8011aa8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011a98:	f00a fdd2 	bl	801c640 <sys_arch_protect>
 8011a9c:	60b8      	str	r0, [r7, #8]
 8011a9e:	68b8      	ldr	r0, [r7, #8]
 8011aa0:	f00a fddc 	bl	801c65c <sys_arch_unprotect>
    return rmem;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	e0b5      	b.n	8011c14 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	3b08      	subs	r3, #8
 8011aac:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011aae:	69b8      	ldr	r0, [r7, #24]
 8011ab0:	f7ff fdea 	bl	8011688 <mem_to_ptr>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011ab8:	69bb      	ldr	r3, [r7, #24]
 8011aba:	881a      	ldrh	r2, [r3, #0]
 8011abc:	8afb      	ldrh	r3, [r7, #22]
 8011abe:	1ad3      	subs	r3, r2, r3
 8011ac0:	b29b      	uxth	r3, r3
 8011ac2:	3b08      	subs	r3, #8
 8011ac4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8011ac6:	8bfa      	ldrh	r2, [r7, #30]
 8011ac8:	8abb      	ldrh	r3, [r7, #20]
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d906      	bls.n	8011adc <mem_trim+0xb0>
 8011ace:	4b55      	ldr	r3, [pc, #340]	; (8011c24 <mem_trim+0x1f8>)
 8011ad0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8011ad4:	4956      	ldr	r1, [pc, #344]	; (8011c30 <mem_trim+0x204>)
 8011ad6:	4855      	ldr	r0, [pc, #340]	; (8011c2c <mem_trim+0x200>)
 8011ad8:	f00a fed0 	bl	801c87c <iprintf>
  if (newsize > size) {
 8011adc:	8bfa      	ldrh	r2, [r7, #30]
 8011ade:	8abb      	ldrh	r3, [r7, #20]
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	d901      	bls.n	8011ae8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	e095      	b.n	8011c14 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8011ae8:	8bfa      	ldrh	r2, [r7, #30]
 8011aea:	8abb      	ldrh	r3, [r7, #20]
 8011aec:	429a      	cmp	r2, r3
 8011aee:	d101      	bne.n	8011af4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	e08f      	b.n	8011c14 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011af4:	484f      	ldr	r0, [pc, #316]	; (8011c34 <mem_trim+0x208>)
 8011af6:	f00a fd67 	bl	801c5c8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8011afa:	69bb      	ldr	r3, [r7, #24]
 8011afc:	881b      	ldrh	r3, [r3, #0]
 8011afe:	4618      	mov	r0, r3
 8011b00:	f7ff fdb0 	bl	8011664 <ptr_to_mem>
 8011b04:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	791b      	ldrb	r3, [r3, #4]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d13f      	bne.n	8011b8e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011b0e:	69bb      	ldr	r3, [r7, #24]
 8011b10:	881b      	ldrh	r3, [r3, #0]
 8011b12:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011b16:	d106      	bne.n	8011b26 <mem_trim+0xfa>
 8011b18:	4b42      	ldr	r3, [pc, #264]	; (8011c24 <mem_trim+0x1f8>)
 8011b1a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8011b1e:	4946      	ldr	r1, [pc, #280]	; (8011c38 <mem_trim+0x20c>)
 8011b20:	4842      	ldr	r0, [pc, #264]	; (8011c2c <mem_trim+0x200>)
 8011b22:	f00a feab 	bl	801c87c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	881b      	ldrh	r3, [r3, #0]
 8011b2a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011b2c:	8afa      	ldrh	r2, [r7, #22]
 8011b2e:	8bfb      	ldrh	r3, [r7, #30]
 8011b30:	4413      	add	r3, r2
 8011b32:	b29b      	uxth	r3, r3
 8011b34:	3308      	adds	r3, #8
 8011b36:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8011b38:	4b40      	ldr	r3, [pc, #256]	; (8011c3c <mem_trim+0x210>)
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	693a      	ldr	r2, [r7, #16]
 8011b3e:	429a      	cmp	r2, r3
 8011b40:	d106      	bne.n	8011b50 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8011b42:	89fb      	ldrh	r3, [r7, #14]
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7ff fd8d 	bl	8011664 <ptr_to_mem>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	4a3b      	ldr	r2, [pc, #236]	; (8011c3c <mem_trim+0x210>)
 8011b4e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011b50:	89fb      	ldrh	r3, [r7, #14]
 8011b52:	4618      	mov	r0, r3
 8011b54:	f7ff fd86 	bl	8011664 <ptr_to_mem>
 8011b58:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8011b5a:	693b      	ldr	r3, [r7, #16]
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011b60:	693b      	ldr	r3, [r7, #16]
 8011b62:	89ba      	ldrh	r2, [r7, #12]
 8011b64:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	8afa      	ldrh	r2, [r7, #22]
 8011b6a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011b6c:	69bb      	ldr	r3, [r7, #24]
 8011b6e:	89fa      	ldrh	r2, [r7, #14]
 8011b70:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	881b      	ldrh	r3, [r3, #0]
 8011b76:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011b7a:	d047      	beq.n	8011c0c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011b7c:	693b      	ldr	r3, [r7, #16]
 8011b7e:	881b      	ldrh	r3, [r3, #0]
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7ff fd6f 	bl	8011664 <ptr_to_mem>
 8011b86:	4602      	mov	r2, r0
 8011b88:	89fb      	ldrh	r3, [r7, #14]
 8011b8a:	8053      	strh	r3, [r2, #2]
 8011b8c:	e03e      	b.n	8011c0c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011b8e:	8bfb      	ldrh	r3, [r7, #30]
 8011b90:	f103 0214 	add.w	r2, r3, #20
 8011b94:	8abb      	ldrh	r3, [r7, #20]
 8011b96:	429a      	cmp	r2, r3
 8011b98:	d838      	bhi.n	8011c0c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011b9a:	8afa      	ldrh	r2, [r7, #22]
 8011b9c:	8bfb      	ldrh	r3, [r7, #30]
 8011b9e:	4413      	add	r3, r2
 8011ba0:	b29b      	uxth	r3, r3
 8011ba2:	3308      	adds	r3, #8
 8011ba4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011ba6:	69bb      	ldr	r3, [r7, #24]
 8011ba8:	881b      	ldrh	r3, [r3, #0]
 8011baa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011bae:	d106      	bne.n	8011bbe <mem_trim+0x192>
 8011bb0:	4b1c      	ldr	r3, [pc, #112]	; (8011c24 <mem_trim+0x1f8>)
 8011bb2:	f240 3216 	movw	r2, #790	; 0x316
 8011bb6:	4920      	ldr	r1, [pc, #128]	; (8011c38 <mem_trim+0x20c>)
 8011bb8:	481c      	ldr	r0, [pc, #112]	; (8011c2c <mem_trim+0x200>)
 8011bba:	f00a fe5f 	bl	801c87c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011bbe:	89fb      	ldrh	r3, [r7, #14]
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7ff fd4f 	bl	8011664 <ptr_to_mem>
 8011bc6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011bc8:	4b1c      	ldr	r3, [pc, #112]	; (8011c3c <mem_trim+0x210>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	693a      	ldr	r2, [r7, #16]
 8011bce:	429a      	cmp	r2, r3
 8011bd0:	d202      	bcs.n	8011bd8 <mem_trim+0x1ac>
      lfree = mem2;
 8011bd2:	4a1a      	ldr	r2, [pc, #104]	; (8011c3c <mem_trim+0x210>)
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011bd8:	693b      	ldr	r3, [r7, #16]
 8011bda:	2200      	movs	r2, #0
 8011bdc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011bde:	69bb      	ldr	r3, [r7, #24]
 8011be0:	881a      	ldrh	r2, [r3, #0]
 8011be2:	693b      	ldr	r3, [r7, #16]
 8011be4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	8afa      	ldrh	r2, [r7, #22]
 8011bea:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011bec:	69bb      	ldr	r3, [r7, #24]
 8011bee:	89fa      	ldrh	r2, [r7, #14]
 8011bf0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011bf2:	693b      	ldr	r3, [r7, #16]
 8011bf4:	881b      	ldrh	r3, [r3, #0]
 8011bf6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011bfa:	d007      	beq.n	8011c0c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011bfc:	693b      	ldr	r3, [r7, #16]
 8011bfe:	881b      	ldrh	r3, [r3, #0]
 8011c00:	4618      	mov	r0, r3
 8011c02:	f7ff fd2f 	bl	8011664 <ptr_to_mem>
 8011c06:	4602      	mov	r2, r0
 8011c08:	89fb      	ldrh	r3, [r7, #14]
 8011c0a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011c0c:	4809      	ldr	r0, [pc, #36]	; (8011c34 <mem_trim+0x208>)
 8011c0e:	f00a fcea 	bl	801c5e6 <sys_mutex_unlock>
  return rmem;
 8011c12:	687b      	ldr	r3, [r7, #4]
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	3720      	adds	r7, #32
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}
 8011c1c:	2000e2c0 	.word	0x2000e2c0
 8011c20:	2000e2c4 	.word	0x2000e2c4
 8011c24:	0801e2c4 	.word	0x0801e2c4
 8011c28:	0801e450 	.word	0x0801e450
 8011c2c:	0801e30c 	.word	0x0801e30c
 8011c30:	0801e468 	.word	0x0801e468
 8011c34:	2000e2c8 	.word	0x2000e2c8
 8011c38:	0801e488 	.word	0x0801e488
 8011c3c:	2000e2cc 	.word	0x2000e2cc

08011c40 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b088      	sub	sp, #32
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	4603      	mov	r3, r0
 8011c48:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011c4a:	88fb      	ldrh	r3, [r7, #6]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d101      	bne.n	8011c54 <mem_malloc+0x14>
    return NULL;
 8011c50:	2300      	movs	r3, #0
 8011c52:	e0e2      	b.n	8011e1a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011c54:	88fb      	ldrh	r3, [r7, #6]
 8011c56:	3303      	adds	r3, #3
 8011c58:	b29b      	uxth	r3, r3
 8011c5a:	f023 0303 	bic.w	r3, r3, #3
 8011c5e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011c60:	8bbb      	ldrh	r3, [r7, #28]
 8011c62:	2b0b      	cmp	r3, #11
 8011c64:	d801      	bhi.n	8011c6a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8011c66:	230c      	movs	r3, #12
 8011c68:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8011c6a:	8bbb      	ldrh	r3, [r7, #28]
 8011c6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011c70:	d803      	bhi.n	8011c7a <mem_malloc+0x3a>
 8011c72:	8bba      	ldrh	r2, [r7, #28]
 8011c74:	88fb      	ldrh	r3, [r7, #6]
 8011c76:	429a      	cmp	r2, r3
 8011c78:	d201      	bcs.n	8011c7e <mem_malloc+0x3e>
    return NULL;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	e0cd      	b.n	8011e1a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8011c7e:	4869      	ldr	r0, [pc, #420]	; (8011e24 <mem_malloc+0x1e4>)
 8011c80:	f00a fca2 	bl	801c5c8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011c84:	4b68      	ldr	r3, [pc, #416]	; (8011e28 <mem_malloc+0x1e8>)
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f7ff fcfd 	bl	8011688 <mem_to_ptr>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	83fb      	strh	r3, [r7, #30]
 8011c92:	e0b7      	b.n	8011e04 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011c94:	8bfb      	ldrh	r3, [r7, #30]
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7ff fce4 	bl	8011664 <ptr_to_mem>
 8011c9c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	791b      	ldrb	r3, [r3, #4]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	f040 80a7 	bne.w	8011df6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	881b      	ldrh	r3, [r3, #0]
 8011cac:	461a      	mov	r2, r3
 8011cae:	8bfb      	ldrh	r3, [r7, #30]
 8011cb0:	1ad3      	subs	r3, r2, r3
 8011cb2:	f1a3 0208 	sub.w	r2, r3, #8
 8011cb6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	f0c0 809c 	bcc.w	8011df6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	881b      	ldrh	r3, [r3, #0]
 8011cc2:	461a      	mov	r2, r3
 8011cc4:	8bfb      	ldrh	r3, [r7, #30]
 8011cc6:	1ad3      	subs	r3, r2, r3
 8011cc8:	f1a3 0208 	sub.w	r2, r3, #8
 8011ccc:	8bbb      	ldrh	r3, [r7, #28]
 8011cce:	3314      	adds	r3, #20
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	d333      	bcc.n	8011d3c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011cd4:	8bfa      	ldrh	r2, [r7, #30]
 8011cd6:	8bbb      	ldrh	r3, [r7, #28]
 8011cd8:	4413      	add	r3, r2
 8011cda:	b29b      	uxth	r3, r3
 8011cdc:	3308      	adds	r3, #8
 8011cde:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011ce0:	8a7b      	ldrh	r3, [r7, #18]
 8011ce2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011ce6:	d106      	bne.n	8011cf6 <mem_malloc+0xb6>
 8011ce8:	4b50      	ldr	r3, [pc, #320]	; (8011e2c <mem_malloc+0x1ec>)
 8011cea:	f240 3287 	movw	r2, #903	; 0x387
 8011cee:	4950      	ldr	r1, [pc, #320]	; (8011e30 <mem_malloc+0x1f0>)
 8011cf0:	4850      	ldr	r0, [pc, #320]	; (8011e34 <mem_malloc+0x1f4>)
 8011cf2:	f00a fdc3 	bl	801c87c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8011cf6:	8a7b      	ldrh	r3, [r7, #18]
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f7ff fcb3 	bl	8011664 <ptr_to_mem>
 8011cfe:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	2200      	movs	r2, #0
 8011d04:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8011d06:	697b      	ldr	r3, [r7, #20]
 8011d08:	881a      	ldrh	r2, [r3, #0]
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	8bfa      	ldrh	r2, [r7, #30]
 8011d12:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	8a7a      	ldrh	r2, [r7, #18]
 8011d18:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	2201      	movs	r2, #1
 8011d1e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	881b      	ldrh	r3, [r3, #0]
 8011d24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011d28:	d00b      	beq.n	8011d42 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	881b      	ldrh	r3, [r3, #0]
 8011d2e:	4618      	mov	r0, r3
 8011d30:	f7ff fc98 	bl	8011664 <ptr_to_mem>
 8011d34:	4602      	mov	r2, r0
 8011d36:	8a7b      	ldrh	r3, [r7, #18]
 8011d38:	8053      	strh	r3, [r2, #2]
 8011d3a:	e002      	b.n	8011d42 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011d3c:	697b      	ldr	r3, [r7, #20]
 8011d3e:	2201      	movs	r2, #1
 8011d40:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011d42:	4b39      	ldr	r3, [pc, #228]	; (8011e28 <mem_malloc+0x1e8>)
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	697a      	ldr	r2, [r7, #20]
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	d127      	bne.n	8011d9c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011d4c:	4b36      	ldr	r3, [pc, #216]	; (8011e28 <mem_malloc+0x1e8>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011d52:	e005      	b.n	8011d60 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011d54:	69bb      	ldr	r3, [r7, #24]
 8011d56:	881b      	ldrh	r3, [r3, #0]
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f7ff fc83 	bl	8011664 <ptr_to_mem>
 8011d5e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011d60:	69bb      	ldr	r3, [r7, #24]
 8011d62:	791b      	ldrb	r3, [r3, #4]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d004      	beq.n	8011d72 <mem_malloc+0x132>
 8011d68:	4b33      	ldr	r3, [pc, #204]	; (8011e38 <mem_malloc+0x1f8>)
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	69ba      	ldr	r2, [r7, #24]
 8011d6e:	429a      	cmp	r2, r3
 8011d70:	d1f0      	bne.n	8011d54 <mem_malloc+0x114>
          }
          lfree = cur;
 8011d72:	4a2d      	ldr	r2, [pc, #180]	; (8011e28 <mem_malloc+0x1e8>)
 8011d74:	69bb      	ldr	r3, [r7, #24]
 8011d76:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8011d78:	4b2b      	ldr	r3, [pc, #172]	; (8011e28 <mem_malloc+0x1e8>)
 8011d7a:	681a      	ldr	r2, [r3, #0]
 8011d7c:	4b2e      	ldr	r3, [pc, #184]	; (8011e38 <mem_malloc+0x1f8>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d00b      	beq.n	8011d9c <mem_malloc+0x15c>
 8011d84:	4b28      	ldr	r3, [pc, #160]	; (8011e28 <mem_malloc+0x1e8>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	791b      	ldrb	r3, [r3, #4]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d006      	beq.n	8011d9c <mem_malloc+0x15c>
 8011d8e:	4b27      	ldr	r3, [pc, #156]	; (8011e2c <mem_malloc+0x1ec>)
 8011d90:	f240 32b5 	movw	r2, #949	; 0x3b5
 8011d94:	4929      	ldr	r1, [pc, #164]	; (8011e3c <mem_malloc+0x1fc>)
 8011d96:	4827      	ldr	r0, [pc, #156]	; (8011e34 <mem_malloc+0x1f4>)
 8011d98:	f00a fd70 	bl	801c87c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8011d9c:	4821      	ldr	r0, [pc, #132]	; (8011e24 <mem_malloc+0x1e4>)
 8011d9e:	f00a fc22 	bl	801c5e6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8011da2:	8bba      	ldrh	r2, [r7, #28]
 8011da4:	697b      	ldr	r3, [r7, #20]
 8011da6:	4413      	add	r3, r2
 8011da8:	3308      	adds	r3, #8
 8011daa:	4a23      	ldr	r2, [pc, #140]	; (8011e38 <mem_malloc+0x1f8>)
 8011dac:	6812      	ldr	r2, [r2, #0]
 8011dae:	4293      	cmp	r3, r2
 8011db0:	d906      	bls.n	8011dc0 <mem_malloc+0x180>
 8011db2:	4b1e      	ldr	r3, [pc, #120]	; (8011e2c <mem_malloc+0x1ec>)
 8011db4:	f240 32b9 	movw	r2, #953	; 0x3b9
 8011db8:	4921      	ldr	r1, [pc, #132]	; (8011e40 <mem_malloc+0x200>)
 8011dba:	481e      	ldr	r0, [pc, #120]	; (8011e34 <mem_malloc+0x1f4>)
 8011dbc:	f00a fd5e 	bl	801c87c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011dc0:	697b      	ldr	r3, [r7, #20]
 8011dc2:	f003 0303 	and.w	r3, r3, #3
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d006      	beq.n	8011dd8 <mem_malloc+0x198>
 8011dca:	4b18      	ldr	r3, [pc, #96]	; (8011e2c <mem_malloc+0x1ec>)
 8011dcc:	f240 32bb 	movw	r2, #955	; 0x3bb
 8011dd0:	491c      	ldr	r1, [pc, #112]	; (8011e44 <mem_malloc+0x204>)
 8011dd2:	4818      	ldr	r0, [pc, #96]	; (8011e34 <mem_malloc+0x1f4>)
 8011dd4:	f00a fd52 	bl	801c87c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011dd8:	697b      	ldr	r3, [r7, #20]
 8011dda:	f003 0303 	and.w	r3, r3, #3
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d006      	beq.n	8011df0 <mem_malloc+0x1b0>
 8011de2:	4b12      	ldr	r3, [pc, #72]	; (8011e2c <mem_malloc+0x1ec>)
 8011de4:	f240 32bd 	movw	r2, #957	; 0x3bd
 8011de8:	4917      	ldr	r1, [pc, #92]	; (8011e48 <mem_malloc+0x208>)
 8011dea:	4812      	ldr	r0, [pc, #72]	; (8011e34 <mem_malloc+0x1f4>)
 8011dec:	f00a fd46 	bl	801c87c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011df0:	697b      	ldr	r3, [r7, #20]
 8011df2:	3308      	adds	r3, #8
 8011df4:	e011      	b.n	8011e1a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8011df6:	8bfb      	ldrh	r3, [r7, #30]
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f7ff fc33 	bl	8011664 <ptr_to_mem>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	881b      	ldrh	r3, [r3, #0]
 8011e02:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011e04:	8bfa      	ldrh	r2, [r7, #30]
 8011e06:	8bbb      	ldrh	r3, [r7, #28]
 8011e08:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	f4ff af41 	bcc.w	8011c94 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8011e12:	4804      	ldr	r0, [pc, #16]	; (8011e24 <mem_malloc+0x1e4>)
 8011e14:	f00a fbe7 	bl	801c5e6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011e18:	2300      	movs	r3, #0
}
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	3720      	adds	r7, #32
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}
 8011e22:	bf00      	nop
 8011e24:	2000e2c8 	.word	0x2000e2c8
 8011e28:	2000e2cc 	.word	0x2000e2cc
 8011e2c:	0801e2c4 	.word	0x0801e2c4
 8011e30:	0801e488 	.word	0x0801e488
 8011e34:	0801e30c 	.word	0x0801e30c
 8011e38:	2000e2c4 	.word	0x2000e2c4
 8011e3c:	0801e49c 	.word	0x0801e49c
 8011e40:	0801e4b8 	.word	0x0801e4b8
 8011e44:	0801e4e8 	.word	0x0801e4e8
 8011e48:	0801e518 	.word	0x0801e518

08011e4c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011e4c:	b480      	push	{r7}
 8011e4e:	b085      	sub	sp, #20
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	689b      	ldr	r3, [r3, #8]
 8011e58:	2200      	movs	r2, #0
 8011e5a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	685b      	ldr	r3, [r3, #4]
 8011e60:	3303      	adds	r3, #3
 8011e62:	f023 0303 	bic.w	r3, r3, #3
 8011e66:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011e68:	2300      	movs	r3, #0
 8011e6a:	60fb      	str	r3, [r7, #12]
 8011e6c:	e011      	b.n	8011e92 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	689b      	ldr	r3, [r3, #8]
 8011e72:	681a      	ldr	r2, [r3, #0]
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	689b      	ldr	r3, [r3, #8]
 8011e7c:	68ba      	ldr	r2, [r7, #8]
 8011e7e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	881b      	ldrh	r3, [r3, #0]
 8011e84:	461a      	mov	r2, r3
 8011e86:	68bb      	ldr	r3, [r7, #8]
 8011e88:	4413      	add	r3, r2
 8011e8a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	3301      	adds	r3, #1
 8011e90:	60fb      	str	r3, [r7, #12]
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	885b      	ldrh	r3, [r3, #2]
 8011e96:	461a      	mov	r2, r3
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	4293      	cmp	r3, r2
 8011e9c:	dbe7      	blt.n	8011e6e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011e9e:	bf00      	nop
 8011ea0:	bf00      	nop
 8011ea2:	3714      	adds	r7, #20
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eaa:	4770      	bx	lr

08011eac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b082      	sub	sp, #8
 8011eb0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	80fb      	strh	r3, [r7, #6]
 8011eb6:	e009      	b.n	8011ecc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011eb8:	88fb      	ldrh	r3, [r7, #6]
 8011eba:	4a08      	ldr	r2, [pc, #32]	; (8011edc <memp_init+0x30>)
 8011ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f7ff ffc3 	bl	8011e4c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011ec6:	88fb      	ldrh	r3, [r7, #6]
 8011ec8:	3301      	adds	r3, #1
 8011eca:	80fb      	strh	r3, [r7, #6]
 8011ecc:	88fb      	ldrh	r3, [r7, #6]
 8011ece:	2b0c      	cmp	r3, #12
 8011ed0:	d9f2      	bls.n	8011eb8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8011ed2:	bf00      	nop
 8011ed4:	bf00      	nop
 8011ed6:	3708      	adds	r7, #8
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}
 8011edc:	08020da0 	.word	0x08020da0

08011ee0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b084      	sub	sp, #16
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8011ee8:	f00a fbaa 	bl	801c640 <sys_arch_protect>
 8011eec:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	689b      	ldr	r3, [r3, #8]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8011ef6:	68bb      	ldr	r3, [r7, #8]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d015      	beq.n	8011f28 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	689b      	ldr	r3, [r3, #8]
 8011f00:	68ba      	ldr	r2, [r7, #8]
 8011f02:	6812      	ldr	r2, [r2, #0]
 8011f04:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	f003 0303 	and.w	r3, r3, #3
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d006      	beq.n	8011f1e <do_memp_malloc_pool+0x3e>
 8011f10:	4b09      	ldr	r3, [pc, #36]	; (8011f38 <do_memp_malloc_pool+0x58>)
 8011f12:	f44f 728c 	mov.w	r2, #280	; 0x118
 8011f16:	4909      	ldr	r1, [pc, #36]	; (8011f3c <do_memp_malloc_pool+0x5c>)
 8011f18:	4809      	ldr	r0, [pc, #36]	; (8011f40 <do_memp_malloc_pool+0x60>)
 8011f1a:	f00a fcaf 	bl	801c87c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011f1e:	68f8      	ldr	r0, [r7, #12]
 8011f20:	f00a fb9c 	bl	801c65c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011f24:	68bb      	ldr	r3, [r7, #8]
 8011f26:	e003      	b.n	8011f30 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011f28:	68f8      	ldr	r0, [r7, #12]
 8011f2a:	f00a fb97 	bl	801c65c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011f2e:	2300      	movs	r3, #0
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	3710      	adds	r7, #16
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}
 8011f38:	0801e53c 	.word	0x0801e53c
 8011f3c:	0801e56c 	.word	0x0801e56c
 8011f40:	0801e590 	.word	0x0801e590

08011f44 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b082      	sub	sp, #8
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d106      	bne.n	8011f60 <memp_malloc_pool+0x1c>
 8011f52:	4b0a      	ldr	r3, [pc, #40]	; (8011f7c <memp_malloc_pool+0x38>)
 8011f54:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8011f58:	4909      	ldr	r1, [pc, #36]	; (8011f80 <memp_malloc_pool+0x3c>)
 8011f5a:	480a      	ldr	r0, [pc, #40]	; (8011f84 <memp_malloc_pool+0x40>)
 8011f5c:	f00a fc8e 	bl	801c87c <iprintf>
  if (desc == NULL) {
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d101      	bne.n	8011f6a <memp_malloc_pool+0x26>
    return NULL;
 8011f66:	2300      	movs	r3, #0
 8011f68:	e003      	b.n	8011f72 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f7ff ffb8 	bl	8011ee0 <do_memp_malloc_pool>
 8011f70:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	3708      	adds	r7, #8
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}
 8011f7a:	bf00      	nop
 8011f7c:	0801e53c 	.word	0x0801e53c
 8011f80:	0801e5b8 	.word	0x0801e5b8
 8011f84:	0801e590 	.word	0x0801e590

08011f88 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b084      	sub	sp, #16
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	4603      	mov	r3, r0
 8011f90:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011f92:	79fb      	ldrb	r3, [r7, #7]
 8011f94:	2b0c      	cmp	r3, #12
 8011f96:	d908      	bls.n	8011faa <memp_malloc+0x22>
 8011f98:	4b0a      	ldr	r3, [pc, #40]	; (8011fc4 <memp_malloc+0x3c>)
 8011f9a:	f240 1257 	movw	r2, #343	; 0x157
 8011f9e:	490a      	ldr	r1, [pc, #40]	; (8011fc8 <memp_malloc+0x40>)
 8011fa0:	480a      	ldr	r0, [pc, #40]	; (8011fcc <memp_malloc+0x44>)
 8011fa2:	f00a fc6b 	bl	801c87c <iprintf>
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	e008      	b.n	8011fbc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8011faa:	79fb      	ldrb	r3, [r7, #7]
 8011fac:	4a08      	ldr	r2, [pc, #32]	; (8011fd0 <memp_malloc+0x48>)
 8011fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f7ff ff94 	bl	8011ee0 <do_memp_malloc_pool>
 8011fb8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8011fba:	68fb      	ldr	r3, [r7, #12]
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3710      	adds	r7, #16
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}
 8011fc4:	0801e53c 	.word	0x0801e53c
 8011fc8:	0801e5cc 	.word	0x0801e5cc
 8011fcc:	0801e590 	.word	0x0801e590
 8011fd0:	08020da0 	.word	0x08020da0

08011fd4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b084      	sub	sp, #16
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
 8011fdc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	f003 0303 	and.w	r3, r3, #3
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d006      	beq.n	8011ff6 <do_memp_free_pool+0x22>
 8011fe8:	4b0d      	ldr	r3, [pc, #52]	; (8012020 <do_memp_free_pool+0x4c>)
 8011fea:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8011fee:	490d      	ldr	r1, [pc, #52]	; (8012024 <do_memp_free_pool+0x50>)
 8011ff0:	480d      	ldr	r0, [pc, #52]	; (8012028 <do_memp_free_pool+0x54>)
 8011ff2:	f00a fc43 	bl	801c87c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8011ffa:	f00a fb21 	bl	801c640 <sys_arch_protect>
 8011ffe:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	689b      	ldr	r3, [r3, #8]
 8012004:	681a      	ldr	r2, [r3, #0]
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	689b      	ldr	r3, [r3, #8]
 801200e:	68fa      	ldr	r2, [r7, #12]
 8012010:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8012012:	68b8      	ldr	r0, [r7, #8]
 8012014:	f00a fb22 	bl	801c65c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8012018:	bf00      	nop
 801201a:	3710      	adds	r7, #16
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}
 8012020:	0801e53c 	.word	0x0801e53c
 8012024:	0801e5ec 	.word	0x0801e5ec
 8012028:	0801e590 	.word	0x0801e590

0801202c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b082      	sub	sp, #8
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d106      	bne.n	801204a <memp_free_pool+0x1e>
 801203c:	4b0a      	ldr	r3, [pc, #40]	; (8012068 <memp_free_pool+0x3c>)
 801203e:	f240 1295 	movw	r2, #405	; 0x195
 8012042:	490a      	ldr	r1, [pc, #40]	; (801206c <memp_free_pool+0x40>)
 8012044:	480a      	ldr	r0, [pc, #40]	; (8012070 <memp_free_pool+0x44>)
 8012046:	f00a fc19 	bl	801c87c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d007      	beq.n	8012060 <memp_free_pool+0x34>
 8012050:	683b      	ldr	r3, [r7, #0]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d004      	beq.n	8012060 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8012056:	6839      	ldr	r1, [r7, #0]
 8012058:	6878      	ldr	r0, [r7, #4]
 801205a:	f7ff ffbb 	bl	8011fd4 <do_memp_free_pool>
 801205e:	e000      	b.n	8012062 <memp_free_pool+0x36>
    return;
 8012060:	bf00      	nop
}
 8012062:	3708      	adds	r7, #8
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}
 8012068:	0801e53c 	.word	0x0801e53c
 801206c:	0801e5b8 	.word	0x0801e5b8
 8012070:	0801e590 	.word	0x0801e590

08012074 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b082      	sub	sp, #8
 8012078:	af00      	add	r7, sp, #0
 801207a:	4603      	mov	r3, r0
 801207c:	6039      	str	r1, [r7, #0]
 801207e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8012080:	79fb      	ldrb	r3, [r7, #7]
 8012082:	2b0c      	cmp	r3, #12
 8012084:	d907      	bls.n	8012096 <memp_free+0x22>
 8012086:	4b0c      	ldr	r3, [pc, #48]	; (80120b8 <memp_free+0x44>)
 8012088:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801208c:	490b      	ldr	r1, [pc, #44]	; (80120bc <memp_free+0x48>)
 801208e:	480c      	ldr	r0, [pc, #48]	; (80120c0 <memp_free+0x4c>)
 8012090:	f00a fbf4 	bl	801c87c <iprintf>
 8012094:	e00c      	b.n	80120b0 <memp_free+0x3c>

  if (mem == NULL) {
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d008      	beq.n	80120ae <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801209c:	79fb      	ldrb	r3, [r7, #7]
 801209e:	4a09      	ldr	r2, [pc, #36]	; (80120c4 <memp_free+0x50>)
 80120a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80120a4:	6839      	ldr	r1, [r7, #0]
 80120a6:	4618      	mov	r0, r3
 80120a8:	f7ff ff94 	bl	8011fd4 <do_memp_free_pool>
 80120ac:	e000      	b.n	80120b0 <memp_free+0x3c>
    return;
 80120ae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80120b0:	3708      	adds	r7, #8
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bd80      	pop	{r7, pc}
 80120b6:	bf00      	nop
 80120b8:	0801e53c 	.word	0x0801e53c
 80120bc:	0801e60c 	.word	0x0801e60c
 80120c0:	0801e590 	.word	0x0801e590
 80120c4:	08020da0 	.word	0x08020da0

080120c8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80120c8:	b480      	push	{r7}
 80120ca:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80120cc:	bf00      	nop
 80120ce:	46bd      	mov	sp, r7
 80120d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d4:	4770      	bx	lr
	...

080120d8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b086      	sub	sp, #24
 80120dc:	af00      	add	r7, sp, #0
 80120de:	60f8      	str	r0, [r7, #12]
 80120e0:	60b9      	str	r1, [r7, #8]
 80120e2:	607a      	str	r2, [r7, #4]
 80120e4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d108      	bne.n	80120fe <netif_add+0x26>
 80120ec:	4b57      	ldr	r3, [pc, #348]	; (801224c <netif_add+0x174>)
 80120ee:	f240 1227 	movw	r2, #295	; 0x127
 80120f2:	4957      	ldr	r1, [pc, #348]	; (8012250 <netif_add+0x178>)
 80120f4:	4857      	ldr	r0, [pc, #348]	; (8012254 <netif_add+0x17c>)
 80120f6:	f00a fbc1 	bl	801c87c <iprintf>
 80120fa:	2300      	movs	r3, #0
 80120fc:	e0a2      	b.n	8012244 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80120fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012100:	2b00      	cmp	r3, #0
 8012102:	d108      	bne.n	8012116 <netif_add+0x3e>
 8012104:	4b51      	ldr	r3, [pc, #324]	; (801224c <netif_add+0x174>)
 8012106:	f44f 7294 	mov.w	r2, #296	; 0x128
 801210a:	4953      	ldr	r1, [pc, #332]	; (8012258 <netif_add+0x180>)
 801210c:	4851      	ldr	r0, [pc, #324]	; (8012254 <netif_add+0x17c>)
 801210e:	f00a fbb5 	bl	801c87c <iprintf>
 8012112:	2300      	movs	r3, #0
 8012114:	e096      	b.n	8012244 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d101      	bne.n	8012120 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801211c:	4b4f      	ldr	r3, [pc, #316]	; (801225c <netif_add+0x184>)
 801211e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d101      	bne.n	801212a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8012126:	4b4d      	ldr	r3, [pc, #308]	; (801225c <netif_add+0x184>)
 8012128:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d101      	bne.n	8012134 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8012130:	4b4a      	ldr	r3, [pc, #296]	; (801225c <netif_add+0x184>)
 8012132:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	2200      	movs	r2, #0
 8012138:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	2200      	movs	r2, #0
 801213e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	2200      	movs	r2, #0
 8012144:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	4a45      	ldr	r2, [pc, #276]	; (8012260 <netif_add+0x188>)
 801214a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	2200      	movs	r2, #0
 8012150:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	2200      	movs	r2, #0
 8012156:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	2200      	movs	r2, #0
 801215e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	6a3a      	ldr	r2, [r7, #32]
 8012164:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8012166:	4b3f      	ldr	r3, [pc, #252]	; (8012264 <netif_add+0x18c>)
 8012168:	781a      	ldrb	r2, [r3, #0]
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012174:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	687a      	ldr	r2, [r7, #4]
 801217a:	68b9      	ldr	r1, [r7, #8]
 801217c:	68f8      	ldr	r0, [r7, #12]
 801217e:	f000 f913 	bl	80123a8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8012182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012184:	68f8      	ldr	r0, [r7, #12]
 8012186:	4798      	blx	r3
 8012188:	4603      	mov	r3, r0
 801218a:	2b00      	cmp	r3, #0
 801218c:	d001      	beq.n	8012192 <netif_add+0xba>
    return NULL;
 801218e:	2300      	movs	r3, #0
 8012190:	e058      	b.n	8012244 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012198:	2bff      	cmp	r3, #255	; 0xff
 801219a:	d103      	bne.n	80121a4 <netif_add+0xcc>
        netif->num = 0;
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	2200      	movs	r2, #0
 80121a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80121a4:	2300      	movs	r3, #0
 80121a6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80121a8:	4b2f      	ldr	r3, [pc, #188]	; (8012268 <netif_add+0x190>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	617b      	str	r3, [r7, #20]
 80121ae:	e02b      	b.n	8012208 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80121b0:	697a      	ldr	r2, [r7, #20]
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	429a      	cmp	r2, r3
 80121b6:	d106      	bne.n	80121c6 <netif_add+0xee>
 80121b8:	4b24      	ldr	r3, [pc, #144]	; (801224c <netif_add+0x174>)
 80121ba:	f240 128b 	movw	r2, #395	; 0x18b
 80121be:	492b      	ldr	r1, [pc, #172]	; (801226c <netif_add+0x194>)
 80121c0:	4824      	ldr	r0, [pc, #144]	; (8012254 <netif_add+0x17c>)
 80121c2:	f00a fb5b 	bl	801c87c <iprintf>
        num_netifs++;
 80121c6:	693b      	ldr	r3, [r7, #16]
 80121c8:	3301      	adds	r3, #1
 80121ca:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80121cc:	693b      	ldr	r3, [r7, #16]
 80121ce:	2bff      	cmp	r3, #255	; 0xff
 80121d0:	dd06      	ble.n	80121e0 <netif_add+0x108>
 80121d2:	4b1e      	ldr	r3, [pc, #120]	; (801224c <netif_add+0x174>)
 80121d4:	f240 128d 	movw	r2, #397	; 0x18d
 80121d8:	4925      	ldr	r1, [pc, #148]	; (8012270 <netif_add+0x198>)
 80121da:	481e      	ldr	r0, [pc, #120]	; (8012254 <netif_add+0x17c>)
 80121dc:	f00a fb4e 	bl	801c87c <iprintf>
        if (netif2->num == netif->num) {
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80121ec:	429a      	cmp	r2, r3
 80121ee:	d108      	bne.n	8012202 <netif_add+0x12a>
          netif->num++;
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80121f6:	3301      	adds	r3, #1
 80121f8:	b2da      	uxtb	r2, r3
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8012200:	e005      	b.n	801220e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012202:	697b      	ldr	r3, [r7, #20]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	617b      	str	r3, [r7, #20]
 8012208:	697b      	ldr	r3, [r7, #20]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d1d0      	bne.n	80121b0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d1be      	bne.n	8012192 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801221a:	2bfe      	cmp	r3, #254	; 0xfe
 801221c:	d103      	bne.n	8012226 <netif_add+0x14e>
    netif_num = 0;
 801221e:	4b11      	ldr	r3, [pc, #68]	; (8012264 <netif_add+0x18c>)
 8012220:	2200      	movs	r2, #0
 8012222:	701a      	strb	r2, [r3, #0]
 8012224:	e006      	b.n	8012234 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801222c:	3301      	adds	r3, #1
 801222e:	b2da      	uxtb	r2, r3
 8012230:	4b0c      	ldr	r3, [pc, #48]	; (8012264 <netif_add+0x18c>)
 8012232:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8012234:	4b0c      	ldr	r3, [pc, #48]	; (8012268 <netif_add+0x190>)
 8012236:	681a      	ldr	r2, [r3, #0]
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801223c:	4a0a      	ldr	r2, [pc, #40]	; (8012268 <netif_add+0x190>)
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8012242:	68fb      	ldr	r3, [r7, #12]
}
 8012244:	4618      	mov	r0, r3
 8012246:	3718      	adds	r7, #24
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}
 801224c:	0801e628 	.word	0x0801e628
 8012250:	0801e6bc 	.word	0x0801e6bc
 8012254:	0801e678 	.word	0x0801e678
 8012258:	0801e6d8 	.word	0x0801e6d8
 801225c:	08020e14 	.word	0x08020e14
 8012260:	08012683 	.word	0x08012683
 8012264:	200113a4 	.word	0x200113a4
 8012268:	2001139c 	.word	0x2001139c
 801226c:	0801e6fc 	.word	0x0801e6fc
 8012270:	0801e710 	.word	0x0801e710

08012274 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b082      	sub	sp, #8
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801227e:	6839      	ldr	r1, [r7, #0]
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	f002 fe05 	bl	8014e90 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8012286:	6839      	ldr	r1, [r7, #0]
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f007 fd25 	bl	8019cd8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801228e:	bf00      	nop
 8012290:	3708      	adds	r7, #8
 8012292:	46bd      	mov	sp, r7
 8012294:	bd80      	pop	{r7, pc}
	...

08012298 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b086      	sub	sp, #24
 801229c:	af00      	add	r7, sp, #0
 801229e:	60f8      	str	r0, [r7, #12]
 80122a0:	60b9      	str	r1, [r7, #8]
 80122a2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80122a4:	68bb      	ldr	r3, [r7, #8]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d106      	bne.n	80122b8 <netif_do_set_ipaddr+0x20>
 80122aa:	4b1d      	ldr	r3, [pc, #116]	; (8012320 <netif_do_set_ipaddr+0x88>)
 80122ac:	f240 12cb 	movw	r2, #459	; 0x1cb
 80122b0:	491c      	ldr	r1, [pc, #112]	; (8012324 <netif_do_set_ipaddr+0x8c>)
 80122b2:	481d      	ldr	r0, [pc, #116]	; (8012328 <netif_do_set_ipaddr+0x90>)
 80122b4:	f00a fae2 	bl	801c87c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d106      	bne.n	80122cc <netif_do_set_ipaddr+0x34>
 80122be:	4b18      	ldr	r3, [pc, #96]	; (8012320 <netif_do_set_ipaddr+0x88>)
 80122c0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80122c4:	4917      	ldr	r1, [pc, #92]	; (8012324 <netif_do_set_ipaddr+0x8c>)
 80122c6:	4818      	ldr	r0, [pc, #96]	; (8012328 <netif_do_set_ipaddr+0x90>)
 80122c8:	f00a fad8 	bl	801c87c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	681a      	ldr	r2, [r3, #0]
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	3304      	adds	r3, #4
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	429a      	cmp	r2, r3
 80122d8:	d01c      	beq.n	8012314 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80122da:	68bb      	ldr	r3, [r7, #8]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	3304      	adds	r3, #4
 80122e4:	681a      	ldr	r2, [r3, #0]
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80122ea:	f107 0314 	add.w	r3, r7, #20
 80122ee:	4619      	mov	r1, r3
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f7ff ffbf 	bl	8012274 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80122f6:	68bb      	ldr	r3, [r7, #8]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d002      	beq.n	8012302 <netif_do_set_ipaddr+0x6a>
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	e000      	b.n	8012304 <netif_do_set_ipaddr+0x6c>
 8012302:	2300      	movs	r3, #0
 8012304:	68fa      	ldr	r2, [r7, #12]
 8012306:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8012308:	2101      	movs	r1, #1
 801230a:	68f8      	ldr	r0, [r7, #12]
 801230c:	f000 f8d2 	bl	80124b4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8012310:	2301      	movs	r3, #1
 8012312:	e000      	b.n	8012316 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8012314:	2300      	movs	r3, #0
}
 8012316:	4618      	mov	r0, r3
 8012318:	3718      	adds	r7, #24
 801231a:	46bd      	mov	sp, r7
 801231c:	bd80      	pop	{r7, pc}
 801231e:	bf00      	nop
 8012320:	0801e628 	.word	0x0801e628
 8012324:	0801e740 	.word	0x0801e740
 8012328:	0801e678 	.word	0x0801e678

0801232c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801232c:	b480      	push	{r7}
 801232e:	b085      	sub	sp, #20
 8012330:	af00      	add	r7, sp, #0
 8012332:	60f8      	str	r0, [r7, #12]
 8012334:	60b9      	str	r1, [r7, #8]
 8012336:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	681a      	ldr	r2, [r3, #0]
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	3308      	adds	r3, #8
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	429a      	cmp	r2, r3
 8012344:	d00a      	beq.n	801235c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8012346:	68bb      	ldr	r3, [r7, #8]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d002      	beq.n	8012352 <netif_do_set_netmask+0x26>
 801234c:	68bb      	ldr	r3, [r7, #8]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	e000      	b.n	8012354 <netif_do_set_netmask+0x28>
 8012352:	2300      	movs	r3, #0
 8012354:	68fa      	ldr	r2, [r7, #12]
 8012356:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8012358:	2301      	movs	r3, #1
 801235a:	e000      	b.n	801235e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801235c:	2300      	movs	r3, #0
}
 801235e:	4618      	mov	r0, r3
 8012360:	3714      	adds	r7, #20
 8012362:	46bd      	mov	sp, r7
 8012364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012368:	4770      	bx	lr

0801236a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801236a:	b480      	push	{r7}
 801236c:	b085      	sub	sp, #20
 801236e:	af00      	add	r7, sp, #0
 8012370:	60f8      	str	r0, [r7, #12]
 8012372:	60b9      	str	r1, [r7, #8]
 8012374:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	681a      	ldr	r2, [r3, #0]
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	330c      	adds	r3, #12
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	429a      	cmp	r2, r3
 8012382:	d00a      	beq.n	801239a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d002      	beq.n	8012390 <netif_do_set_gw+0x26>
 801238a:	68bb      	ldr	r3, [r7, #8]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	e000      	b.n	8012392 <netif_do_set_gw+0x28>
 8012390:	2300      	movs	r3, #0
 8012392:	68fa      	ldr	r2, [r7, #12]
 8012394:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8012396:	2301      	movs	r3, #1
 8012398:	e000      	b.n	801239c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801239a:	2300      	movs	r3, #0
}
 801239c:	4618      	mov	r0, r3
 801239e:	3714      	adds	r7, #20
 80123a0:	46bd      	mov	sp, r7
 80123a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a6:	4770      	bx	lr

080123a8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b088      	sub	sp, #32
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	60f8      	str	r0, [r7, #12]
 80123b0:	60b9      	str	r1, [r7, #8]
 80123b2:	607a      	str	r2, [r7, #4]
 80123b4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80123b6:	2300      	movs	r3, #0
 80123b8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80123ba:	2300      	movs	r3, #0
 80123bc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d101      	bne.n	80123c8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80123c4:	4b1c      	ldr	r3, [pc, #112]	; (8012438 <netif_set_addr+0x90>)
 80123c6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d101      	bne.n	80123d2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80123ce:	4b1a      	ldr	r3, [pc, #104]	; (8012438 <netif_set_addr+0x90>)
 80123d0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d101      	bne.n	80123dc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80123d8:	4b17      	ldr	r3, [pc, #92]	; (8012438 <netif_set_addr+0x90>)
 80123da:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80123dc:	68bb      	ldr	r3, [r7, #8]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d003      	beq.n	80123ea <netif_set_addr+0x42>
 80123e2:	68bb      	ldr	r3, [r7, #8]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d101      	bne.n	80123ee <netif_set_addr+0x46>
 80123ea:	2301      	movs	r3, #1
 80123ec:	e000      	b.n	80123f0 <netif_set_addr+0x48>
 80123ee:	2300      	movs	r3, #0
 80123f0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d006      	beq.n	8012406 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80123f8:	f107 0310 	add.w	r3, r7, #16
 80123fc:	461a      	mov	r2, r3
 80123fe:	68b9      	ldr	r1, [r7, #8]
 8012400:	68f8      	ldr	r0, [r7, #12]
 8012402:	f7ff ff49 	bl	8012298 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8012406:	69fa      	ldr	r2, [r7, #28]
 8012408:	6879      	ldr	r1, [r7, #4]
 801240a:	68f8      	ldr	r0, [r7, #12]
 801240c:	f7ff ff8e 	bl	801232c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8012410:	69ba      	ldr	r2, [r7, #24]
 8012412:	6839      	ldr	r1, [r7, #0]
 8012414:	68f8      	ldr	r0, [r7, #12]
 8012416:	f7ff ffa8 	bl	801236a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801241a:	697b      	ldr	r3, [r7, #20]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d106      	bne.n	801242e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012420:	f107 0310 	add.w	r3, r7, #16
 8012424:	461a      	mov	r2, r3
 8012426:	68b9      	ldr	r1, [r7, #8]
 8012428:	68f8      	ldr	r0, [r7, #12]
 801242a:	f7ff ff35 	bl	8012298 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801242e:	bf00      	nop
 8012430:	3720      	adds	r7, #32
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
 8012436:	bf00      	nop
 8012438:	08020e14 	.word	0x08020e14

0801243c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801243c:	b480      	push	{r7}
 801243e:	b083      	sub	sp, #12
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8012444:	4a04      	ldr	r2, [pc, #16]	; (8012458 <netif_set_default+0x1c>)
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801244a:	bf00      	nop
 801244c:	370c      	adds	r7, #12
 801244e:	46bd      	mov	sp, r7
 8012450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012454:	4770      	bx	lr
 8012456:	bf00      	nop
 8012458:	200113a0 	.word	0x200113a0

0801245c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b082      	sub	sp, #8
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d107      	bne.n	801247a <netif_set_up+0x1e>
 801246a:	4b0f      	ldr	r3, [pc, #60]	; (80124a8 <netif_set_up+0x4c>)
 801246c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8012470:	490e      	ldr	r1, [pc, #56]	; (80124ac <netif_set_up+0x50>)
 8012472:	480f      	ldr	r0, [pc, #60]	; (80124b0 <netif_set_up+0x54>)
 8012474:	f00a fa02 	bl	801c87c <iprintf>
 8012478:	e013      	b.n	80124a2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012480:	f003 0301 	and.w	r3, r3, #1
 8012484:	2b00      	cmp	r3, #0
 8012486:	d10c      	bne.n	80124a2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801248e:	f043 0301 	orr.w	r3, r3, #1
 8012492:	b2da      	uxtb	r2, r3
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801249a:	2103      	movs	r1, #3
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	f000 f809 	bl	80124b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80124a2:	3708      	adds	r7, #8
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd80      	pop	{r7, pc}
 80124a8:	0801e628 	.word	0x0801e628
 80124ac:	0801e7b0 	.word	0x0801e7b0
 80124b0:	0801e678 	.word	0x0801e678

080124b4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b082      	sub	sp, #8
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
 80124bc:	460b      	mov	r3, r1
 80124be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d106      	bne.n	80124d4 <netif_issue_reports+0x20>
 80124c6:	4b18      	ldr	r3, [pc, #96]	; (8012528 <netif_issue_reports+0x74>)
 80124c8:	f240 326d 	movw	r2, #877	; 0x36d
 80124cc:	4917      	ldr	r1, [pc, #92]	; (801252c <netif_issue_reports+0x78>)
 80124ce:	4818      	ldr	r0, [pc, #96]	; (8012530 <netif_issue_reports+0x7c>)
 80124d0:	f00a f9d4 	bl	801c87c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80124da:	f003 0304 	and.w	r3, r3, #4
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d01e      	beq.n	8012520 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80124e8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d017      	beq.n	8012520 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80124f0:	78fb      	ldrb	r3, [r7, #3]
 80124f2:	f003 0301 	and.w	r3, r3, #1
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d013      	beq.n	8012522 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	3304      	adds	r3, #4
 80124fe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012500:	2b00      	cmp	r3, #0
 8012502:	d00e      	beq.n	8012522 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801250a:	f003 0308 	and.w	r3, r3, #8
 801250e:	2b00      	cmp	r3, #0
 8012510:	d007      	beq.n	8012522 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	3304      	adds	r3, #4
 8012516:	4619      	mov	r1, r3
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f008 fb47 	bl	801abac <etharp_request>
 801251e:	e000      	b.n	8012522 <netif_issue_reports+0x6e>
    return;
 8012520:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8012522:	3708      	adds	r7, #8
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}
 8012528:	0801e628 	.word	0x0801e628
 801252c:	0801e7cc 	.word	0x0801e7cc
 8012530:	0801e678 	.word	0x0801e678

08012534 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b082      	sub	sp, #8
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d107      	bne.n	8012552 <netif_set_down+0x1e>
 8012542:	4b12      	ldr	r3, [pc, #72]	; (801258c <netif_set_down+0x58>)
 8012544:	f240 329b 	movw	r2, #923	; 0x39b
 8012548:	4911      	ldr	r1, [pc, #68]	; (8012590 <netif_set_down+0x5c>)
 801254a:	4812      	ldr	r0, [pc, #72]	; (8012594 <netif_set_down+0x60>)
 801254c:	f00a f996 	bl	801c87c <iprintf>
 8012550:	e019      	b.n	8012586 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012558:	f003 0301 	and.w	r3, r3, #1
 801255c:	2b00      	cmp	r3, #0
 801255e:	d012      	beq.n	8012586 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012566:	f023 0301 	bic.w	r3, r3, #1
 801256a:	b2da      	uxtb	r2, r3
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012578:	f003 0308 	and.w	r3, r3, #8
 801257c:	2b00      	cmp	r3, #0
 801257e:	d002      	beq.n	8012586 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f007 fed1 	bl	801a328 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8012586:	3708      	adds	r7, #8
 8012588:	46bd      	mov	sp, r7
 801258a:	bd80      	pop	{r7, pc}
 801258c:	0801e628 	.word	0x0801e628
 8012590:	0801e7f0 	.word	0x0801e7f0
 8012594:	0801e678 	.word	0x0801e678

08012598 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b082      	sub	sp, #8
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d107      	bne.n	80125b6 <netif_set_link_up+0x1e>
 80125a6:	4b13      	ldr	r3, [pc, #76]	; (80125f4 <netif_set_link_up+0x5c>)
 80125a8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80125ac:	4912      	ldr	r1, [pc, #72]	; (80125f8 <netif_set_link_up+0x60>)
 80125ae:	4813      	ldr	r0, [pc, #76]	; (80125fc <netif_set_link_up+0x64>)
 80125b0:	f00a f964 	bl	801c87c <iprintf>
 80125b4:	e01b      	b.n	80125ee <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80125bc:	f003 0304 	and.w	r3, r3, #4
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d114      	bne.n	80125ee <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80125ca:	f043 0304 	orr.w	r3, r3, #4
 80125ce:	b2da      	uxtb	r2, r3
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80125d6:	2103      	movs	r1, #3
 80125d8:	6878      	ldr	r0, [r7, #4]
 80125da:	f7ff ff6b 	bl	80124b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	69db      	ldr	r3, [r3, #28]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d003      	beq.n	80125ee <netif_set_link_up+0x56>
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	69db      	ldr	r3, [r3, #28]
 80125ea:	6878      	ldr	r0, [r7, #4]
 80125ec:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80125ee:	3708      	adds	r7, #8
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}
 80125f4:	0801e628 	.word	0x0801e628
 80125f8:	0801e810 	.word	0x0801e810
 80125fc:	0801e678 	.word	0x0801e678

08012600 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b082      	sub	sp, #8
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d107      	bne.n	801261e <netif_set_link_down+0x1e>
 801260e:	4b11      	ldr	r3, [pc, #68]	; (8012654 <netif_set_link_down+0x54>)
 8012610:	f240 4206 	movw	r2, #1030	; 0x406
 8012614:	4910      	ldr	r1, [pc, #64]	; (8012658 <netif_set_link_down+0x58>)
 8012616:	4811      	ldr	r0, [pc, #68]	; (801265c <netif_set_link_down+0x5c>)
 8012618:	f00a f930 	bl	801c87c <iprintf>
 801261c:	e017      	b.n	801264e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012624:	f003 0304 	and.w	r3, r3, #4
 8012628:	2b00      	cmp	r3, #0
 801262a:	d010      	beq.n	801264e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012632:	f023 0304 	bic.w	r3, r3, #4
 8012636:	b2da      	uxtb	r2, r3
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	69db      	ldr	r3, [r3, #28]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d003      	beq.n	801264e <netif_set_link_down+0x4e>
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	69db      	ldr	r3, [r3, #28]
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801264e:	3708      	adds	r7, #8
 8012650:	46bd      	mov	sp, r7
 8012652:	bd80      	pop	{r7, pc}
 8012654:	0801e628 	.word	0x0801e628
 8012658:	0801e834 	.word	0x0801e834
 801265c:	0801e678 	.word	0x0801e678

08012660 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8012660:	b480      	push	{r7}
 8012662:	b083      	sub	sp, #12
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d002      	beq.n	8012676 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	683a      	ldr	r2, [r7, #0]
 8012674:	61da      	str	r2, [r3, #28]
  }
}
 8012676:	bf00      	nop
 8012678:	370c      	adds	r7, #12
 801267a:	46bd      	mov	sp, r7
 801267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012680:	4770      	bx	lr

08012682 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8012682:	b480      	push	{r7}
 8012684:	b085      	sub	sp, #20
 8012686:	af00      	add	r7, sp, #0
 8012688:	60f8      	str	r0, [r7, #12]
 801268a:	60b9      	str	r1, [r7, #8]
 801268c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801268e:	f06f 030b 	mvn.w	r3, #11
}
 8012692:	4618      	mov	r0, r3
 8012694:	3714      	adds	r7, #20
 8012696:	46bd      	mov	sp, r7
 8012698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269c:	4770      	bx	lr
	...

080126a0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80126a0:	b480      	push	{r7}
 80126a2:	b085      	sub	sp, #20
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	4603      	mov	r3, r0
 80126a8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80126aa:	79fb      	ldrb	r3, [r7, #7]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d013      	beq.n	80126d8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80126b0:	4b0d      	ldr	r3, [pc, #52]	; (80126e8 <netif_get_by_index+0x48>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	60fb      	str	r3, [r7, #12]
 80126b6:	e00c      	b.n	80126d2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80126be:	3301      	adds	r3, #1
 80126c0:	b2db      	uxtb	r3, r3
 80126c2:	79fa      	ldrb	r2, [r7, #7]
 80126c4:	429a      	cmp	r2, r3
 80126c6:	d101      	bne.n	80126cc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	e006      	b.n	80126da <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	60fb      	str	r3, [r7, #12]
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d1ef      	bne.n	80126b8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80126d8:	2300      	movs	r3, #0
}
 80126da:	4618      	mov	r0, r3
 80126dc:	3714      	adds	r7, #20
 80126de:	46bd      	mov	sp, r7
 80126e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e4:	4770      	bx	lr
 80126e6:	bf00      	nop
 80126e8:	2001139c 	.word	0x2001139c

080126ec <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b082      	sub	sp, #8
 80126f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80126f2:	f009 ffa5 	bl	801c640 <sys_arch_protect>
 80126f6:	6038      	str	r0, [r7, #0]
 80126f8:	4b0d      	ldr	r3, [pc, #52]	; (8012730 <pbuf_free_ooseq+0x44>)
 80126fa:	2200      	movs	r2, #0
 80126fc:	701a      	strb	r2, [r3, #0]
 80126fe:	6838      	ldr	r0, [r7, #0]
 8012700:	f009 ffac 	bl	801c65c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012704:	4b0b      	ldr	r3, [pc, #44]	; (8012734 <pbuf_free_ooseq+0x48>)
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	607b      	str	r3, [r7, #4]
 801270a:	e00a      	b.n	8012722 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012710:	2b00      	cmp	r3, #0
 8012712:	d003      	beq.n	801271c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8012714:	6878      	ldr	r0, [r7, #4]
 8012716:	f002 fbf9 	bl	8014f0c <tcp_free_ooseq>
      return;
 801271a:	e005      	b.n	8012728 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	68db      	ldr	r3, [r3, #12]
 8012720:	607b      	str	r3, [r7, #4]
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d1f1      	bne.n	801270c <pbuf_free_ooseq+0x20>
    }
  }
}
 8012728:	3708      	adds	r7, #8
 801272a:	46bd      	mov	sp, r7
 801272c:	bd80      	pop	{r7, pc}
 801272e:	bf00      	nop
 8012730:	200113a5 	.word	0x200113a5
 8012734:	200113b4 	.word	0x200113b4

08012738 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b082      	sub	sp, #8
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8012740:	f7ff ffd4 	bl	80126ec <pbuf_free_ooseq>
}
 8012744:	bf00      	nop
 8012746:	3708      	adds	r7, #8
 8012748:	46bd      	mov	sp, r7
 801274a:	bd80      	pop	{r7, pc}

0801274c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b082      	sub	sp, #8
 8012750:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8012752:	f009 ff75 	bl	801c640 <sys_arch_protect>
 8012756:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8012758:	4b0f      	ldr	r3, [pc, #60]	; (8012798 <pbuf_pool_is_empty+0x4c>)
 801275a:	781b      	ldrb	r3, [r3, #0]
 801275c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801275e:	4b0e      	ldr	r3, [pc, #56]	; (8012798 <pbuf_pool_is_empty+0x4c>)
 8012760:	2201      	movs	r2, #1
 8012762:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f009 ff79 	bl	801c65c <sys_arch_unprotect>

  if (!queued) {
 801276a:	78fb      	ldrb	r3, [r7, #3]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d10f      	bne.n	8012790 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8012770:	2100      	movs	r1, #0
 8012772:	480a      	ldr	r0, [pc, #40]	; (801279c <pbuf_pool_is_empty+0x50>)
 8012774:	f7fe fdd4 	bl	8011320 <tcpip_try_callback>
 8012778:	4603      	mov	r3, r0
 801277a:	2b00      	cmp	r3, #0
 801277c:	d008      	beq.n	8012790 <pbuf_pool_is_empty+0x44>
 801277e:	f009 ff5f 	bl	801c640 <sys_arch_protect>
 8012782:	6078      	str	r0, [r7, #4]
 8012784:	4b04      	ldr	r3, [pc, #16]	; (8012798 <pbuf_pool_is_empty+0x4c>)
 8012786:	2200      	movs	r2, #0
 8012788:	701a      	strb	r2, [r3, #0]
 801278a:	6878      	ldr	r0, [r7, #4]
 801278c:	f009 ff66 	bl	801c65c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8012790:	bf00      	nop
 8012792:	3708      	adds	r7, #8
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}
 8012798:	200113a5 	.word	0x200113a5
 801279c:	08012739 	.word	0x08012739

080127a0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80127a0:	b480      	push	{r7}
 80127a2:	b085      	sub	sp, #20
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	60f8      	str	r0, [r7, #12]
 80127a8:	60b9      	str	r1, [r7, #8]
 80127aa:	4611      	mov	r1, r2
 80127ac:	461a      	mov	r2, r3
 80127ae:	460b      	mov	r3, r1
 80127b0:	80fb      	strh	r3, [r7, #6]
 80127b2:	4613      	mov	r3, r2
 80127b4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	2200      	movs	r2, #0
 80127ba:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	68ba      	ldr	r2, [r7, #8]
 80127c0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	88fa      	ldrh	r2, [r7, #6]
 80127c6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	88ba      	ldrh	r2, [r7, #4]
 80127cc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80127ce:	8b3b      	ldrh	r3, [r7, #24]
 80127d0:	b2da      	uxtb	r2, r3
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	7f3a      	ldrb	r2, [r7, #28]
 80127da:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	2201      	movs	r2, #1
 80127e0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	2200      	movs	r2, #0
 80127e6:	73da      	strb	r2, [r3, #15]
}
 80127e8:	bf00      	nop
 80127ea:	3714      	adds	r7, #20
 80127ec:	46bd      	mov	sp, r7
 80127ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f2:	4770      	bx	lr

080127f4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b08c      	sub	sp, #48	; 0x30
 80127f8:	af02      	add	r7, sp, #8
 80127fa:	4603      	mov	r3, r0
 80127fc:	71fb      	strb	r3, [r7, #7]
 80127fe:	460b      	mov	r3, r1
 8012800:	80bb      	strh	r3, [r7, #4]
 8012802:	4613      	mov	r3, r2
 8012804:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8012806:	79fb      	ldrb	r3, [r7, #7]
 8012808:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801280a:	887b      	ldrh	r3, [r7, #2]
 801280c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8012810:	d07f      	beq.n	8012912 <pbuf_alloc+0x11e>
 8012812:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8012816:	f300 80c8 	bgt.w	80129aa <pbuf_alloc+0x1b6>
 801281a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801281e:	d010      	beq.n	8012842 <pbuf_alloc+0x4e>
 8012820:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8012824:	f300 80c1 	bgt.w	80129aa <pbuf_alloc+0x1b6>
 8012828:	2b01      	cmp	r3, #1
 801282a:	d002      	beq.n	8012832 <pbuf_alloc+0x3e>
 801282c:	2b41      	cmp	r3, #65	; 0x41
 801282e:	f040 80bc 	bne.w	80129aa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8012832:	887a      	ldrh	r2, [r7, #2]
 8012834:	88bb      	ldrh	r3, [r7, #4]
 8012836:	4619      	mov	r1, r3
 8012838:	2000      	movs	r0, #0
 801283a:	f000 f8d1 	bl	80129e0 <pbuf_alloc_reference>
 801283e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8012840:	e0bd      	b.n	80129be <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8012842:	2300      	movs	r3, #0
 8012844:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8012846:	2300      	movs	r3, #0
 8012848:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801284a:	88bb      	ldrh	r3, [r7, #4]
 801284c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801284e:	200c      	movs	r0, #12
 8012850:	f7ff fb9a 	bl	8011f88 <memp_malloc>
 8012854:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8012856:	693b      	ldr	r3, [r7, #16]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d109      	bne.n	8012870 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801285c:	f7ff ff76 	bl	801274c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8012860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012862:	2b00      	cmp	r3, #0
 8012864:	d002      	beq.n	801286c <pbuf_alloc+0x78>
            pbuf_free(p);
 8012866:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012868:	f000 faa8 	bl	8012dbc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801286c:	2300      	movs	r3, #0
 801286e:	e0a7      	b.n	80129c0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8012870:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012872:	3303      	adds	r3, #3
 8012874:	b29b      	uxth	r3, r3
 8012876:	f023 0303 	bic.w	r3, r3, #3
 801287a:	b29b      	uxth	r3, r3
 801287c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8012880:	b29b      	uxth	r3, r3
 8012882:	8b7a      	ldrh	r2, [r7, #26]
 8012884:	4293      	cmp	r3, r2
 8012886:	bf28      	it	cs
 8012888:	4613      	movcs	r3, r2
 801288a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801288c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801288e:	3310      	adds	r3, #16
 8012890:	693a      	ldr	r2, [r7, #16]
 8012892:	4413      	add	r3, r2
 8012894:	3303      	adds	r3, #3
 8012896:	f023 0303 	bic.w	r3, r3, #3
 801289a:	4618      	mov	r0, r3
 801289c:	89f9      	ldrh	r1, [r7, #14]
 801289e:	8b7a      	ldrh	r2, [r7, #26]
 80128a0:	2300      	movs	r3, #0
 80128a2:	9301      	str	r3, [sp, #4]
 80128a4:	887b      	ldrh	r3, [r7, #2]
 80128a6:	9300      	str	r3, [sp, #0]
 80128a8:	460b      	mov	r3, r1
 80128aa:	4601      	mov	r1, r0
 80128ac:	6938      	ldr	r0, [r7, #16]
 80128ae:	f7ff ff77 	bl	80127a0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80128b2:	693b      	ldr	r3, [r7, #16]
 80128b4:	685b      	ldr	r3, [r3, #4]
 80128b6:	f003 0303 	and.w	r3, r3, #3
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d006      	beq.n	80128cc <pbuf_alloc+0xd8>
 80128be:	4b42      	ldr	r3, [pc, #264]	; (80129c8 <pbuf_alloc+0x1d4>)
 80128c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80128c4:	4941      	ldr	r1, [pc, #260]	; (80129cc <pbuf_alloc+0x1d8>)
 80128c6:	4842      	ldr	r0, [pc, #264]	; (80129d0 <pbuf_alloc+0x1dc>)
 80128c8:	f009 ffd8 	bl	801c87c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80128cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80128ce:	3303      	adds	r3, #3
 80128d0:	f023 0303 	bic.w	r3, r3, #3
 80128d4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80128d8:	d106      	bne.n	80128e8 <pbuf_alloc+0xf4>
 80128da:	4b3b      	ldr	r3, [pc, #236]	; (80129c8 <pbuf_alloc+0x1d4>)
 80128dc:	f44f 7281 	mov.w	r2, #258	; 0x102
 80128e0:	493c      	ldr	r1, [pc, #240]	; (80129d4 <pbuf_alloc+0x1e0>)
 80128e2:	483b      	ldr	r0, [pc, #236]	; (80129d0 <pbuf_alloc+0x1dc>)
 80128e4:	f009 ffca 	bl	801c87c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80128e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d102      	bne.n	80128f4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80128ee:	693b      	ldr	r3, [r7, #16]
 80128f0:	627b      	str	r3, [r7, #36]	; 0x24
 80128f2:	e002      	b.n	80128fa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80128f4:	69fb      	ldr	r3, [r7, #28]
 80128f6:	693a      	ldr	r2, [r7, #16]
 80128f8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80128fa:	693b      	ldr	r3, [r7, #16]
 80128fc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80128fe:	8b7a      	ldrh	r2, [r7, #26]
 8012900:	89fb      	ldrh	r3, [r7, #14]
 8012902:	1ad3      	subs	r3, r2, r3
 8012904:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8012906:	2300      	movs	r3, #0
 8012908:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801290a:	8b7b      	ldrh	r3, [r7, #26]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d19e      	bne.n	801284e <pbuf_alloc+0x5a>
      break;
 8012910:	e055      	b.n	80129be <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8012912:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012914:	3303      	adds	r3, #3
 8012916:	b29b      	uxth	r3, r3
 8012918:	f023 0303 	bic.w	r3, r3, #3
 801291c:	b29a      	uxth	r2, r3
 801291e:	88bb      	ldrh	r3, [r7, #4]
 8012920:	3303      	adds	r3, #3
 8012922:	b29b      	uxth	r3, r3
 8012924:	f023 0303 	bic.w	r3, r3, #3
 8012928:	b29b      	uxth	r3, r3
 801292a:	4413      	add	r3, r2
 801292c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801292e:	8b3b      	ldrh	r3, [r7, #24]
 8012930:	3310      	adds	r3, #16
 8012932:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012934:	8b3a      	ldrh	r2, [r7, #24]
 8012936:	88bb      	ldrh	r3, [r7, #4]
 8012938:	3303      	adds	r3, #3
 801293a:	f023 0303 	bic.w	r3, r3, #3
 801293e:	429a      	cmp	r2, r3
 8012940:	d306      	bcc.n	8012950 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8012942:	8afa      	ldrh	r2, [r7, #22]
 8012944:	88bb      	ldrh	r3, [r7, #4]
 8012946:	3303      	adds	r3, #3
 8012948:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801294c:	429a      	cmp	r2, r3
 801294e:	d201      	bcs.n	8012954 <pbuf_alloc+0x160>
        return NULL;
 8012950:	2300      	movs	r3, #0
 8012952:	e035      	b.n	80129c0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012954:	8afb      	ldrh	r3, [r7, #22]
 8012956:	4618      	mov	r0, r3
 8012958:	f7ff f972 	bl	8011c40 <mem_malloc>
 801295c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012960:	2b00      	cmp	r3, #0
 8012962:	d101      	bne.n	8012968 <pbuf_alloc+0x174>
        return NULL;
 8012964:	2300      	movs	r3, #0
 8012966:	e02b      	b.n	80129c0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8012968:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801296a:	3310      	adds	r3, #16
 801296c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801296e:	4413      	add	r3, r2
 8012970:	3303      	adds	r3, #3
 8012972:	f023 0303 	bic.w	r3, r3, #3
 8012976:	4618      	mov	r0, r3
 8012978:	88b9      	ldrh	r1, [r7, #4]
 801297a:	88ba      	ldrh	r2, [r7, #4]
 801297c:	2300      	movs	r3, #0
 801297e:	9301      	str	r3, [sp, #4]
 8012980:	887b      	ldrh	r3, [r7, #2]
 8012982:	9300      	str	r3, [sp, #0]
 8012984:	460b      	mov	r3, r1
 8012986:	4601      	mov	r1, r0
 8012988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801298a:	f7ff ff09 	bl	80127a0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012990:	685b      	ldr	r3, [r3, #4]
 8012992:	f003 0303 	and.w	r3, r3, #3
 8012996:	2b00      	cmp	r3, #0
 8012998:	d010      	beq.n	80129bc <pbuf_alloc+0x1c8>
 801299a:	4b0b      	ldr	r3, [pc, #44]	; (80129c8 <pbuf_alloc+0x1d4>)
 801299c:	f44f 7291 	mov.w	r2, #290	; 0x122
 80129a0:	490d      	ldr	r1, [pc, #52]	; (80129d8 <pbuf_alloc+0x1e4>)
 80129a2:	480b      	ldr	r0, [pc, #44]	; (80129d0 <pbuf_alloc+0x1dc>)
 80129a4:	f009 ff6a 	bl	801c87c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80129a8:	e008      	b.n	80129bc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80129aa:	4b07      	ldr	r3, [pc, #28]	; (80129c8 <pbuf_alloc+0x1d4>)
 80129ac:	f240 1227 	movw	r2, #295	; 0x127
 80129b0:	490a      	ldr	r1, [pc, #40]	; (80129dc <pbuf_alloc+0x1e8>)
 80129b2:	4807      	ldr	r0, [pc, #28]	; (80129d0 <pbuf_alloc+0x1dc>)
 80129b4:	f009 ff62 	bl	801c87c <iprintf>
      return NULL;
 80129b8:	2300      	movs	r3, #0
 80129ba:	e001      	b.n	80129c0 <pbuf_alloc+0x1cc>
      break;
 80129bc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80129be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80129c0:	4618      	mov	r0, r3
 80129c2:	3728      	adds	r7, #40	; 0x28
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}
 80129c8:	0801e858 	.word	0x0801e858
 80129cc:	0801e888 	.word	0x0801e888
 80129d0:	0801e8b8 	.word	0x0801e8b8
 80129d4:	0801e8e0 	.word	0x0801e8e0
 80129d8:	0801e914 	.word	0x0801e914
 80129dc:	0801e940 	.word	0x0801e940

080129e0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b086      	sub	sp, #24
 80129e4:	af02      	add	r7, sp, #8
 80129e6:	6078      	str	r0, [r7, #4]
 80129e8:	460b      	mov	r3, r1
 80129ea:	807b      	strh	r3, [r7, #2]
 80129ec:	4613      	mov	r3, r2
 80129ee:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80129f0:	883b      	ldrh	r3, [r7, #0]
 80129f2:	2b41      	cmp	r3, #65	; 0x41
 80129f4:	d009      	beq.n	8012a0a <pbuf_alloc_reference+0x2a>
 80129f6:	883b      	ldrh	r3, [r7, #0]
 80129f8:	2b01      	cmp	r3, #1
 80129fa:	d006      	beq.n	8012a0a <pbuf_alloc_reference+0x2a>
 80129fc:	4b0f      	ldr	r3, [pc, #60]	; (8012a3c <pbuf_alloc_reference+0x5c>)
 80129fe:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8012a02:	490f      	ldr	r1, [pc, #60]	; (8012a40 <pbuf_alloc_reference+0x60>)
 8012a04:	480f      	ldr	r0, [pc, #60]	; (8012a44 <pbuf_alloc_reference+0x64>)
 8012a06:	f009 ff39 	bl	801c87c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8012a0a:	200b      	movs	r0, #11
 8012a0c:	f7ff fabc 	bl	8011f88 <memp_malloc>
 8012a10:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d101      	bne.n	8012a1c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	e00b      	b.n	8012a34 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012a1c:	8879      	ldrh	r1, [r7, #2]
 8012a1e:	887a      	ldrh	r2, [r7, #2]
 8012a20:	2300      	movs	r3, #0
 8012a22:	9301      	str	r3, [sp, #4]
 8012a24:	883b      	ldrh	r3, [r7, #0]
 8012a26:	9300      	str	r3, [sp, #0]
 8012a28:	460b      	mov	r3, r1
 8012a2a:	6879      	ldr	r1, [r7, #4]
 8012a2c:	68f8      	ldr	r0, [r7, #12]
 8012a2e:	f7ff feb7 	bl	80127a0 <pbuf_init_alloced_pbuf>
  return p;
 8012a32:	68fb      	ldr	r3, [r7, #12]
}
 8012a34:	4618      	mov	r0, r3
 8012a36:	3710      	adds	r7, #16
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}
 8012a3c:	0801e858 	.word	0x0801e858
 8012a40:	0801e95c 	.word	0x0801e95c
 8012a44:	0801e8b8 	.word	0x0801e8b8

08012a48 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b088      	sub	sp, #32
 8012a4c:	af02      	add	r7, sp, #8
 8012a4e:	607b      	str	r3, [r7, #4]
 8012a50:	4603      	mov	r3, r0
 8012a52:	73fb      	strb	r3, [r7, #15]
 8012a54:	460b      	mov	r3, r1
 8012a56:	81bb      	strh	r3, [r7, #12]
 8012a58:	4613      	mov	r3, r2
 8012a5a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8012a5c:	7bfb      	ldrb	r3, [r7, #15]
 8012a5e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8012a60:	8a7b      	ldrh	r3, [r7, #18]
 8012a62:	3303      	adds	r3, #3
 8012a64:	f023 0203 	bic.w	r2, r3, #3
 8012a68:	89bb      	ldrh	r3, [r7, #12]
 8012a6a:	441a      	add	r2, r3
 8012a6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a6e:	429a      	cmp	r2, r3
 8012a70:	d901      	bls.n	8012a76 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8012a72:	2300      	movs	r3, #0
 8012a74:	e018      	b.n	8012aa8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012a76:	6a3b      	ldr	r3, [r7, #32]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d007      	beq.n	8012a8c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012a7c:	8a7b      	ldrh	r3, [r7, #18]
 8012a7e:	3303      	adds	r3, #3
 8012a80:	f023 0303 	bic.w	r3, r3, #3
 8012a84:	6a3a      	ldr	r2, [r7, #32]
 8012a86:	4413      	add	r3, r2
 8012a88:	617b      	str	r3, [r7, #20]
 8012a8a:	e001      	b.n	8012a90 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	89b9      	ldrh	r1, [r7, #12]
 8012a94:	89ba      	ldrh	r2, [r7, #12]
 8012a96:	2302      	movs	r3, #2
 8012a98:	9301      	str	r3, [sp, #4]
 8012a9a:	897b      	ldrh	r3, [r7, #10]
 8012a9c:	9300      	str	r3, [sp, #0]
 8012a9e:	460b      	mov	r3, r1
 8012aa0:	6979      	ldr	r1, [r7, #20]
 8012aa2:	f7ff fe7d 	bl	80127a0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012aa6:	687b      	ldr	r3, [r7, #4]
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3718      	adds	r7, #24
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}

08012ab0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b084      	sub	sp, #16
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
 8012ab8:	460b      	mov	r3, r1
 8012aba:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d106      	bne.n	8012ad0 <pbuf_realloc+0x20>
 8012ac2:	4b3a      	ldr	r3, [pc, #232]	; (8012bac <pbuf_realloc+0xfc>)
 8012ac4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8012ac8:	4939      	ldr	r1, [pc, #228]	; (8012bb0 <pbuf_realloc+0x100>)
 8012aca:	483a      	ldr	r0, [pc, #232]	; (8012bb4 <pbuf_realloc+0x104>)
 8012acc:	f009 fed6 	bl	801c87c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	891b      	ldrh	r3, [r3, #8]
 8012ad4:	887a      	ldrh	r2, [r7, #2]
 8012ad6:	429a      	cmp	r2, r3
 8012ad8:	d263      	bcs.n	8012ba2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	891a      	ldrh	r2, [r3, #8]
 8012ade:	887b      	ldrh	r3, [r7, #2]
 8012ae0:	1ad3      	subs	r3, r2, r3
 8012ae2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012ae4:	887b      	ldrh	r3, [r7, #2]
 8012ae6:	817b      	strh	r3, [r7, #10]
  q = p;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8012aec:	e018      	b.n	8012b20 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	895b      	ldrh	r3, [r3, #10]
 8012af2:	897a      	ldrh	r2, [r7, #10]
 8012af4:	1ad3      	subs	r3, r2, r3
 8012af6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	891a      	ldrh	r2, [r3, #8]
 8012afc:	893b      	ldrh	r3, [r7, #8]
 8012afe:	1ad3      	subs	r3, r2, r3
 8012b00:	b29a      	uxth	r2, r3
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d106      	bne.n	8012b20 <pbuf_realloc+0x70>
 8012b12:	4b26      	ldr	r3, [pc, #152]	; (8012bac <pbuf_realloc+0xfc>)
 8012b14:	f240 12af 	movw	r2, #431	; 0x1af
 8012b18:	4927      	ldr	r1, [pc, #156]	; (8012bb8 <pbuf_realloc+0x108>)
 8012b1a:	4826      	ldr	r0, [pc, #152]	; (8012bb4 <pbuf_realloc+0x104>)
 8012b1c:	f009 feae 	bl	801c87c <iprintf>
  while (rem_len > q->len) {
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	895b      	ldrh	r3, [r3, #10]
 8012b24:	897a      	ldrh	r2, [r7, #10]
 8012b26:	429a      	cmp	r2, r3
 8012b28:	d8e1      	bhi.n	8012aee <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	7b1b      	ldrb	r3, [r3, #12]
 8012b2e:	f003 030f 	and.w	r3, r3, #15
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d121      	bne.n	8012b7a <pbuf_realloc+0xca>
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	895b      	ldrh	r3, [r3, #10]
 8012b3a:	897a      	ldrh	r2, [r7, #10]
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	d01c      	beq.n	8012b7a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	7b5b      	ldrb	r3, [r3, #13]
 8012b44:	f003 0302 	and.w	r3, r3, #2
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d116      	bne.n	8012b7a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	685a      	ldr	r2, [r3, #4]
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	1ad3      	subs	r3, r2, r3
 8012b54:	b29a      	uxth	r2, r3
 8012b56:	897b      	ldrh	r3, [r7, #10]
 8012b58:	4413      	add	r3, r2
 8012b5a:	b29b      	uxth	r3, r3
 8012b5c:	4619      	mov	r1, r3
 8012b5e:	68f8      	ldr	r0, [r7, #12]
 8012b60:	f7fe ff64 	bl	8011a2c <mem_trim>
 8012b64:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d106      	bne.n	8012b7a <pbuf_realloc+0xca>
 8012b6c:	4b0f      	ldr	r3, [pc, #60]	; (8012bac <pbuf_realloc+0xfc>)
 8012b6e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8012b72:	4912      	ldr	r1, [pc, #72]	; (8012bbc <pbuf_realloc+0x10c>)
 8012b74:	480f      	ldr	r0, [pc, #60]	; (8012bb4 <pbuf_realloc+0x104>)
 8012b76:	f009 fe81 	bl	801c87c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	897a      	ldrh	r2, [r7, #10]
 8012b7e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	895a      	ldrh	r2, [r3, #10]
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d004      	beq.n	8012b9a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	4618      	mov	r0, r3
 8012b96:	f000 f911 	bl	8012dbc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	601a      	str	r2, [r3, #0]
 8012ba0:	e000      	b.n	8012ba4 <pbuf_realloc+0xf4>
    return;
 8012ba2:	bf00      	nop

}
 8012ba4:	3710      	adds	r7, #16
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd80      	pop	{r7, pc}
 8012baa:	bf00      	nop
 8012bac:	0801e858 	.word	0x0801e858
 8012bb0:	0801e970 	.word	0x0801e970
 8012bb4:	0801e8b8 	.word	0x0801e8b8
 8012bb8:	0801e988 	.word	0x0801e988
 8012bbc:	0801e9a0 	.word	0x0801e9a0

08012bc0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b086      	sub	sp, #24
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	60f8      	str	r0, [r7, #12]
 8012bc8:	60b9      	str	r1, [r7, #8]
 8012bca:	4613      	mov	r3, r2
 8012bcc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d106      	bne.n	8012be2 <pbuf_add_header_impl+0x22>
 8012bd4:	4b2b      	ldr	r3, [pc, #172]	; (8012c84 <pbuf_add_header_impl+0xc4>)
 8012bd6:	f240 12df 	movw	r2, #479	; 0x1df
 8012bda:	492b      	ldr	r1, [pc, #172]	; (8012c88 <pbuf_add_header_impl+0xc8>)
 8012bdc:	482b      	ldr	r0, [pc, #172]	; (8012c8c <pbuf_add_header_impl+0xcc>)
 8012bde:	f009 fe4d 	bl	801c87c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d003      	beq.n	8012bf0 <pbuf_add_header_impl+0x30>
 8012be8:	68bb      	ldr	r3, [r7, #8]
 8012bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012bee:	d301      	bcc.n	8012bf4 <pbuf_add_header_impl+0x34>
    return 1;
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	e043      	b.n	8012c7c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d101      	bne.n	8012bfe <pbuf_add_header_impl+0x3e>
    return 0;
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	e03e      	b.n	8012c7c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8012bfe:	68bb      	ldr	r3, [r7, #8]
 8012c00:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	891a      	ldrh	r2, [r3, #8]
 8012c06:	8a7b      	ldrh	r3, [r7, #18]
 8012c08:	4413      	add	r3, r2
 8012c0a:	b29b      	uxth	r3, r3
 8012c0c:	8a7a      	ldrh	r2, [r7, #18]
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	d901      	bls.n	8012c16 <pbuf_add_header_impl+0x56>
    return 1;
 8012c12:	2301      	movs	r3, #1
 8012c14:	e032      	b.n	8012c7c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	7b1b      	ldrb	r3, [r3, #12]
 8012c1a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012c1c:	8a3b      	ldrh	r3, [r7, #16]
 8012c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d00c      	beq.n	8012c40 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	685a      	ldr	r2, [r3, #4]
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	425b      	negs	r3, r3
 8012c2e:	4413      	add	r3, r2
 8012c30:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	3310      	adds	r3, #16
 8012c36:	697a      	ldr	r2, [r7, #20]
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	d20d      	bcs.n	8012c58 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	e01d      	b.n	8012c7c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012c40:	79fb      	ldrb	r3, [r7, #7]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d006      	beq.n	8012c54 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	685a      	ldr	r2, [r3, #4]
 8012c4a:	68bb      	ldr	r3, [r7, #8]
 8012c4c:	425b      	negs	r3, r3
 8012c4e:	4413      	add	r3, r2
 8012c50:	617b      	str	r3, [r7, #20]
 8012c52:	e001      	b.n	8012c58 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012c54:	2301      	movs	r3, #1
 8012c56:	e011      	b.n	8012c7c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	697a      	ldr	r2, [r7, #20]
 8012c5c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	895a      	ldrh	r2, [r3, #10]
 8012c62:	8a7b      	ldrh	r3, [r7, #18]
 8012c64:	4413      	add	r3, r2
 8012c66:	b29a      	uxth	r2, r3
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	891a      	ldrh	r2, [r3, #8]
 8012c70:	8a7b      	ldrh	r3, [r7, #18]
 8012c72:	4413      	add	r3, r2
 8012c74:	b29a      	uxth	r2, r3
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	811a      	strh	r2, [r3, #8]


  return 0;
 8012c7a:	2300      	movs	r3, #0
}
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	3718      	adds	r7, #24
 8012c80:	46bd      	mov	sp, r7
 8012c82:	bd80      	pop	{r7, pc}
 8012c84:	0801e858 	.word	0x0801e858
 8012c88:	0801e9bc 	.word	0x0801e9bc
 8012c8c:	0801e8b8 	.word	0x0801e8b8

08012c90 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b082      	sub	sp, #8
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
 8012c98:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	6839      	ldr	r1, [r7, #0]
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f7ff ff8e 	bl	8012bc0 <pbuf_add_header_impl>
 8012ca4:	4603      	mov	r3, r0
}
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	3708      	adds	r7, #8
 8012caa:	46bd      	mov	sp, r7
 8012cac:	bd80      	pop	{r7, pc}
	...

08012cb0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b084      	sub	sp, #16
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
 8012cb8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d106      	bne.n	8012cce <pbuf_remove_header+0x1e>
 8012cc0:	4b20      	ldr	r3, [pc, #128]	; (8012d44 <pbuf_remove_header+0x94>)
 8012cc2:	f240 224b 	movw	r2, #587	; 0x24b
 8012cc6:	4920      	ldr	r1, [pc, #128]	; (8012d48 <pbuf_remove_header+0x98>)
 8012cc8:	4820      	ldr	r0, [pc, #128]	; (8012d4c <pbuf_remove_header+0x9c>)
 8012cca:	f009 fdd7 	bl	801c87c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d003      	beq.n	8012cdc <pbuf_remove_header+0x2c>
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012cda:	d301      	bcc.n	8012ce0 <pbuf_remove_header+0x30>
    return 1;
 8012cdc:	2301      	movs	r3, #1
 8012cde:	e02c      	b.n	8012d3a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012ce0:	683b      	ldr	r3, [r7, #0]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d101      	bne.n	8012cea <pbuf_remove_header+0x3a>
    return 0;
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	e027      	b.n	8012d3a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	895b      	ldrh	r3, [r3, #10]
 8012cf2:	89fa      	ldrh	r2, [r7, #14]
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	d908      	bls.n	8012d0a <pbuf_remove_header+0x5a>
 8012cf8:	4b12      	ldr	r3, [pc, #72]	; (8012d44 <pbuf_remove_header+0x94>)
 8012cfa:	f240 2255 	movw	r2, #597	; 0x255
 8012cfe:	4914      	ldr	r1, [pc, #80]	; (8012d50 <pbuf_remove_header+0xa0>)
 8012d00:	4812      	ldr	r0, [pc, #72]	; (8012d4c <pbuf_remove_header+0x9c>)
 8012d02:	f009 fdbb 	bl	801c87c <iprintf>
 8012d06:	2301      	movs	r3, #1
 8012d08:	e017      	b.n	8012d3a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	685b      	ldr	r3, [r3, #4]
 8012d0e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	685a      	ldr	r2, [r3, #4]
 8012d14:	683b      	ldr	r3, [r7, #0]
 8012d16:	441a      	add	r2, r3
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	895a      	ldrh	r2, [r3, #10]
 8012d20:	89fb      	ldrh	r3, [r7, #14]
 8012d22:	1ad3      	subs	r3, r2, r3
 8012d24:	b29a      	uxth	r2, r3
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	891a      	ldrh	r2, [r3, #8]
 8012d2e:	89fb      	ldrh	r3, [r7, #14]
 8012d30:	1ad3      	subs	r3, r2, r3
 8012d32:	b29a      	uxth	r2, r3
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012d38:	2300      	movs	r3, #0
}
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	3710      	adds	r7, #16
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	bd80      	pop	{r7, pc}
 8012d42:	bf00      	nop
 8012d44:	0801e858 	.word	0x0801e858
 8012d48:	0801e9bc 	.word	0x0801e9bc
 8012d4c:	0801e8b8 	.word	0x0801e8b8
 8012d50:	0801e9c8 	.word	0x0801e9c8

08012d54 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b082      	sub	sp, #8
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
 8012d5c:	460b      	mov	r3, r1
 8012d5e:	807b      	strh	r3, [r7, #2]
 8012d60:	4613      	mov	r3, r2
 8012d62:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012d64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	da08      	bge.n	8012d7e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012d6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d70:	425b      	negs	r3, r3
 8012d72:	4619      	mov	r1, r3
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f7ff ff9b 	bl	8012cb0 <pbuf_remove_header>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	e007      	b.n	8012d8e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012d7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d82:	787a      	ldrb	r2, [r7, #1]
 8012d84:	4619      	mov	r1, r3
 8012d86:	6878      	ldr	r0, [r7, #4]
 8012d88:	f7ff ff1a 	bl	8012bc0 <pbuf_add_header_impl>
 8012d8c:	4603      	mov	r3, r0
  }
}
 8012d8e:	4618      	mov	r0, r3
 8012d90:	3708      	adds	r7, #8
 8012d92:	46bd      	mov	sp, r7
 8012d94:	bd80      	pop	{r7, pc}

08012d96 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012d96:	b580      	push	{r7, lr}
 8012d98:	b082      	sub	sp, #8
 8012d9a:	af00      	add	r7, sp, #0
 8012d9c:	6078      	str	r0, [r7, #4]
 8012d9e:	460b      	mov	r3, r1
 8012da0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8012da2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012da6:	2201      	movs	r2, #1
 8012da8:	4619      	mov	r1, r3
 8012daa:	6878      	ldr	r0, [r7, #4]
 8012dac:	f7ff ffd2 	bl	8012d54 <pbuf_header_impl>
 8012db0:	4603      	mov	r3, r0
}
 8012db2:	4618      	mov	r0, r3
 8012db4:	3708      	adds	r7, #8
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}
	...

08012dbc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b088      	sub	sp, #32
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d10b      	bne.n	8012de2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d106      	bne.n	8012dde <pbuf_free+0x22>
 8012dd0:	4b3b      	ldr	r3, [pc, #236]	; (8012ec0 <pbuf_free+0x104>)
 8012dd2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8012dd6:	493b      	ldr	r1, [pc, #236]	; (8012ec4 <pbuf_free+0x108>)
 8012dd8:	483b      	ldr	r0, [pc, #236]	; (8012ec8 <pbuf_free+0x10c>)
 8012dda:	f009 fd4f 	bl	801c87c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8012dde:	2300      	movs	r3, #0
 8012de0:	e069      	b.n	8012eb6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8012de2:	2300      	movs	r3, #0
 8012de4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012de6:	e062      	b.n	8012eae <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012de8:	f009 fc2a 	bl	801c640 <sys_arch_protect>
 8012dec:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	7b9b      	ldrb	r3, [r3, #14]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d106      	bne.n	8012e04 <pbuf_free+0x48>
 8012df6:	4b32      	ldr	r3, [pc, #200]	; (8012ec0 <pbuf_free+0x104>)
 8012df8:	f240 22f1 	movw	r2, #753	; 0x2f1
 8012dfc:	4933      	ldr	r1, [pc, #204]	; (8012ecc <pbuf_free+0x110>)
 8012dfe:	4832      	ldr	r0, [pc, #200]	; (8012ec8 <pbuf_free+0x10c>)
 8012e00:	f009 fd3c 	bl	801c87c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	7b9b      	ldrb	r3, [r3, #14]
 8012e08:	3b01      	subs	r3, #1
 8012e0a:	b2da      	uxtb	r2, r3
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	739a      	strb	r2, [r3, #14]
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	7b9b      	ldrb	r3, [r3, #14]
 8012e14:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012e16:	69b8      	ldr	r0, [r7, #24]
 8012e18:	f009 fc20 	bl	801c65c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012e1c:	7dfb      	ldrb	r3, [r7, #23]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d143      	bne.n	8012eaa <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	7b1b      	ldrb	r3, [r3, #12]
 8012e2c:	f003 030f 	and.w	r3, r3, #15
 8012e30:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	7b5b      	ldrb	r3, [r3, #13]
 8012e36:	f003 0302 	and.w	r3, r3, #2
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d011      	beq.n	8012e62 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	691b      	ldr	r3, [r3, #16]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d106      	bne.n	8012e58 <pbuf_free+0x9c>
 8012e4a:	4b1d      	ldr	r3, [pc, #116]	; (8012ec0 <pbuf_free+0x104>)
 8012e4c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8012e50:	491f      	ldr	r1, [pc, #124]	; (8012ed0 <pbuf_free+0x114>)
 8012e52:	481d      	ldr	r0, [pc, #116]	; (8012ec8 <pbuf_free+0x10c>)
 8012e54:	f009 fd12 	bl	801c87c <iprintf>
        pc->custom_free_function(p);
 8012e58:	68bb      	ldr	r3, [r7, #8]
 8012e5a:	691b      	ldr	r3, [r3, #16]
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	4798      	blx	r3
 8012e60:	e01d      	b.n	8012e9e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012e62:	7bfb      	ldrb	r3, [r7, #15]
 8012e64:	2b02      	cmp	r3, #2
 8012e66:	d104      	bne.n	8012e72 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012e68:	6879      	ldr	r1, [r7, #4]
 8012e6a:	200c      	movs	r0, #12
 8012e6c:	f7ff f902 	bl	8012074 <memp_free>
 8012e70:	e015      	b.n	8012e9e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012e72:	7bfb      	ldrb	r3, [r7, #15]
 8012e74:	2b01      	cmp	r3, #1
 8012e76:	d104      	bne.n	8012e82 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012e78:	6879      	ldr	r1, [r7, #4]
 8012e7a:	200b      	movs	r0, #11
 8012e7c:	f7ff f8fa 	bl	8012074 <memp_free>
 8012e80:	e00d      	b.n	8012e9e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012e82:	7bfb      	ldrb	r3, [r7, #15]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d103      	bne.n	8012e90 <pbuf_free+0xd4>
          mem_free(p);
 8012e88:	6878      	ldr	r0, [r7, #4]
 8012e8a:	f7fe fd3f 	bl	801190c <mem_free>
 8012e8e:	e006      	b.n	8012e9e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012e90:	4b0b      	ldr	r3, [pc, #44]	; (8012ec0 <pbuf_free+0x104>)
 8012e92:	f240 320f 	movw	r2, #783	; 0x30f
 8012e96:	490f      	ldr	r1, [pc, #60]	; (8012ed4 <pbuf_free+0x118>)
 8012e98:	480b      	ldr	r0, [pc, #44]	; (8012ec8 <pbuf_free+0x10c>)
 8012e9a:	f009 fcef 	bl	801c87c <iprintf>
        }
      }
      count++;
 8012e9e:	7ffb      	ldrb	r3, [r7, #31]
 8012ea0:	3301      	adds	r3, #1
 8012ea2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012ea4:	693b      	ldr	r3, [r7, #16]
 8012ea6:	607b      	str	r3, [r7, #4]
 8012ea8:	e001      	b.n	8012eae <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8012eaa:	2300      	movs	r3, #0
 8012eac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d199      	bne.n	8012de8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012eb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	3720      	adds	r7, #32
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}
 8012ebe:	bf00      	nop
 8012ec0:	0801e858 	.word	0x0801e858
 8012ec4:	0801e9bc 	.word	0x0801e9bc
 8012ec8:	0801e8b8 	.word	0x0801e8b8
 8012ecc:	0801e9e8 	.word	0x0801e9e8
 8012ed0:	0801ea00 	.word	0x0801ea00
 8012ed4:	0801ea24 	.word	0x0801ea24

08012ed8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012ed8:	b480      	push	{r7}
 8012eda:	b085      	sub	sp, #20
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012ee4:	e005      	b.n	8012ef2 <pbuf_clen+0x1a>
    ++len;
 8012ee6:	89fb      	ldrh	r3, [r7, #14]
 8012ee8:	3301      	adds	r3, #1
 8012eea:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d1f6      	bne.n	8012ee6 <pbuf_clen+0xe>
  }
  return len;
 8012ef8:	89fb      	ldrh	r3, [r7, #14]
}
 8012efa:	4618      	mov	r0, r3
 8012efc:	3714      	adds	r7, #20
 8012efe:	46bd      	mov	sp, r7
 8012f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f04:	4770      	bx	lr
	...

08012f08 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b084      	sub	sp, #16
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d016      	beq.n	8012f44 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8012f16:	f009 fb93 	bl	801c640 <sys_arch_protect>
 8012f1a:	60f8      	str	r0, [r7, #12]
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	7b9b      	ldrb	r3, [r3, #14]
 8012f20:	3301      	adds	r3, #1
 8012f22:	b2da      	uxtb	r2, r3
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	739a      	strb	r2, [r3, #14]
 8012f28:	68f8      	ldr	r0, [r7, #12]
 8012f2a:	f009 fb97 	bl	801c65c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	7b9b      	ldrb	r3, [r3, #14]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d106      	bne.n	8012f44 <pbuf_ref+0x3c>
 8012f36:	4b05      	ldr	r3, [pc, #20]	; (8012f4c <pbuf_ref+0x44>)
 8012f38:	f240 3242 	movw	r2, #834	; 0x342
 8012f3c:	4904      	ldr	r1, [pc, #16]	; (8012f50 <pbuf_ref+0x48>)
 8012f3e:	4805      	ldr	r0, [pc, #20]	; (8012f54 <pbuf_ref+0x4c>)
 8012f40:	f009 fc9c 	bl	801c87c <iprintf>
  }
}
 8012f44:	bf00      	nop
 8012f46:	3710      	adds	r7, #16
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	bd80      	pop	{r7, pc}
 8012f4c:	0801e858 	.word	0x0801e858
 8012f50:	0801ea38 	.word	0x0801ea38
 8012f54:	0801e8b8 	.word	0x0801e8b8

08012f58 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b084      	sub	sp, #16
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
 8012f60:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d002      	beq.n	8012f6e <pbuf_cat+0x16>
 8012f68:	683b      	ldr	r3, [r7, #0]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d107      	bne.n	8012f7e <pbuf_cat+0x26>
 8012f6e:	4b20      	ldr	r3, [pc, #128]	; (8012ff0 <pbuf_cat+0x98>)
 8012f70:	f240 3259 	movw	r2, #857	; 0x359
 8012f74:	491f      	ldr	r1, [pc, #124]	; (8012ff4 <pbuf_cat+0x9c>)
 8012f76:	4820      	ldr	r0, [pc, #128]	; (8012ff8 <pbuf_cat+0xa0>)
 8012f78:	f009 fc80 	bl	801c87c <iprintf>
 8012f7c:	e034      	b.n	8012fe8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	60fb      	str	r3, [r7, #12]
 8012f82:	e00a      	b.n	8012f9a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	891a      	ldrh	r2, [r3, #8]
 8012f88:	683b      	ldr	r3, [r7, #0]
 8012f8a:	891b      	ldrh	r3, [r3, #8]
 8012f8c:	4413      	add	r3, r2
 8012f8e:	b29a      	uxth	r2, r3
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	60fb      	str	r3, [r7, #12]
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d1f0      	bne.n	8012f84 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	891a      	ldrh	r2, [r3, #8]
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	895b      	ldrh	r3, [r3, #10]
 8012faa:	429a      	cmp	r2, r3
 8012fac:	d006      	beq.n	8012fbc <pbuf_cat+0x64>
 8012fae:	4b10      	ldr	r3, [pc, #64]	; (8012ff0 <pbuf_cat+0x98>)
 8012fb0:	f240 3262 	movw	r2, #866	; 0x362
 8012fb4:	4911      	ldr	r1, [pc, #68]	; (8012ffc <pbuf_cat+0xa4>)
 8012fb6:	4810      	ldr	r0, [pc, #64]	; (8012ff8 <pbuf_cat+0xa0>)
 8012fb8:	f009 fc60 	bl	801c87c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d006      	beq.n	8012fd2 <pbuf_cat+0x7a>
 8012fc4:	4b0a      	ldr	r3, [pc, #40]	; (8012ff0 <pbuf_cat+0x98>)
 8012fc6:	f240 3263 	movw	r2, #867	; 0x363
 8012fca:	490d      	ldr	r1, [pc, #52]	; (8013000 <pbuf_cat+0xa8>)
 8012fcc:	480a      	ldr	r0, [pc, #40]	; (8012ff8 <pbuf_cat+0xa0>)
 8012fce:	f009 fc55 	bl	801c87c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	891a      	ldrh	r2, [r3, #8]
 8012fd6:	683b      	ldr	r3, [r7, #0]
 8012fd8:	891b      	ldrh	r3, [r3, #8]
 8012fda:	4413      	add	r3, r2
 8012fdc:	b29a      	uxth	r2, r3
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	683a      	ldr	r2, [r7, #0]
 8012fe6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8012fe8:	3710      	adds	r7, #16
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}
 8012fee:	bf00      	nop
 8012ff0:	0801e858 	.word	0x0801e858
 8012ff4:	0801ea4c 	.word	0x0801ea4c
 8012ff8:	0801e8b8 	.word	0x0801e8b8
 8012ffc:	0801ea84 	.word	0x0801ea84
 8013000:	0801eab4 	.word	0x0801eab4

08013004 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b086      	sub	sp, #24
 8013008:	af00      	add	r7, sp, #0
 801300a:	6078      	str	r0, [r7, #4]
 801300c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801300e:	2300      	movs	r3, #0
 8013010:	617b      	str	r3, [r7, #20]
 8013012:	2300      	movs	r3, #0
 8013014:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d008      	beq.n	801302e <pbuf_copy+0x2a>
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d005      	beq.n	801302e <pbuf_copy+0x2a>
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	891a      	ldrh	r2, [r3, #8]
 8013026:	683b      	ldr	r3, [r7, #0]
 8013028:	891b      	ldrh	r3, [r3, #8]
 801302a:	429a      	cmp	r2, r3
 801302c:	d209      	bcs.n	8013042 <pbuf_copy+0x3e>
 801302e:	4b57      	ldr	r3, [pc, #348]	; (801318c <pbuf_copy+0x188>)
 8013030:	f240 32c9 	movw	r2, #969	; 0x3c9
 8013034:	4956      	ldr	r1, [pc, #344]	; (8013190 <pbuf_copy+0x18c>)
 8013036:	4857      	ldr	r0, [pc, #348]	; (8013194 <pbuf_copy+0x190>)
 8013038:	f009 fc20 	bl	801c87c <iprintf>
 801303c:	f06f 030f 	mvn.w	r3, #15
 8013040:	e09f      	b.n	8013182 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	895b      	ldrh	r3, [r3, #10]
 8013046:	461a      	mov	r2, r3
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	1ad2      	subs	r2, r2, r3
 801304c:	683b      	ldr	r3, [r7, #0]
 801304e:	895b      	ldrh	r3, [r3, #10]
 8013050:	4619      	mov	r1, r3
 8013052:	693b      	ldr	r3, [r7, #16]
 8013054:	1acb      	subs	r3, r1, r3
 8013056:	429a      	cmp	r2, r3
 8013058:	d306      	bcc.n	8013068 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801305a:	683b      	ldr	r3, [r7, #0]
 801305c:	895b      	ldrh	r3, [r3, #10]
 801305e:	461a      	mov	r2, r3
 8013060:	693b      	ldr	r3, [r7, #16]
 8013062:	1ad3      	subs	r3, r2, r3
 8013064:	60fb      	str	r3, [r7, #12]
 8013066:	e005      	b.n	8013074 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	895b      	ldrh	r3, [r3, #10]
 801306c:	461a      	mov	r2, r3
 801306e:	697b      	ldr	r3, [r7, #20]
 8013070:	1ad3      	subs	r3, r2, r3
 8013072:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	685a      	ldr	r2, [r3, #4]
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	18d0      	adds	r0, r2, r3
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	685a      	ldr	r2, [r3, #4]
 8013080:	693b      	ldr	r3, [r7, #16]
 8013082:	4413      	add	r3, r2
 8013084:	68fa      	ldr	r2, [r7, #12]
 8013086:	4619      	mov	r1, r3
 8013088:	f009 fcd9 	bl	801ca3e <memcpy>
    offset_to += len;
 801308c:	697a      	ldr	r2, [r7, #20]
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	4413      	add	r3, r2
 8013092:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8013094:	693a      	ldr	r2, [r7, #16]
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	4413      	add	r3, r2
 801309a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	895b      	ldrh	r3, [r3, #10]
 80130a0:	461a      	mov	r2, r3
 80130a2:	697b      	ldr	r3, [r7, #20]
 80130a4:	4293      	cmp	r3, r2
 80130a6:	d906      	bls.n	80130b6 <pbuf_copy+0xb2>
 80130a8:	4b38      	ldr	r3, [pc, #224]	; (801318c <pbuf_copy+0x188>)
 80130aa:	f240 32d9 	movw	r2, #985	; 0x3d9
 80130ae:	493a      	ldr	r1, [pc, #232]	; (8013198 <pbuf_copy+0x194>)
 80130b0:	4838      	ldr	r0, [pc, #224]	; (8013194 <pbuf_copy+0x190>)
 80130b2:	f009 fbe3 	bl	801c87c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	895b      	ldrh	r3, [r3, #10]
 80130ba:	461a      	mov	r2, r3
 80130bc:	693b      	ldr	r3, [r7, #16]
 80130be:	4293      	cmp	r3, r2
 80130c0:	d906      	bls.n	80130d0 <pbuf_copy+0xcc>
 80130c2:	4b32      	ldr	r3, [pc, #200]	; (801318c <pbuf_copy+0x188>)
 80130c4:	f240 32da 	movw	r2, #986	; 0x3da
 80130c8:	4934      	ldr	r1, [pc, #208]	; (801319c <pbuf_copy+0x198>)
 80130ca:	4832      	ldr	r0, [pc, #200]	; (8013194 <pbuf_copy+0x190>)
 80130cc:	f009 fbd6 	bl	801c87c <iprintf>
    if (offset_from >= p_from->len) {
 80130d0:	683b      	ldr	r3, [r7, #0]
 80130d2:	895b      	ldrh	r3, [r3, #10]
 80130d4:	461a      	mov	r2, r3
 80130d6:	693b      	ldr	r3, [r7, #16]
 80130d8:	4293      	cmp	r3, r2
 80130da:	d304      	bcc.n	80130e6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80130dc:	2300      	movs	r3, #0
 80130de:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80130e0:	683b      	ldr	r3, [r7, #0]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	895b      	ldrh	r3, [r3, #10]
 80130ea:	461a      	mov	r2, r3
 80130ec:	697b      	ldr	r3, [r7, #20]
 80130ee:	4293      	cmp	r3, r2
 80130f0:	d114      	bne.n	801311c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80130f2:	2300      	movs	r3, #0
 80130f4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d10c      	bne.n	801311c <pbuf_copy+0x118>
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d009      	beq.n	801311c <pbuf_copy+0x118>
 8013108:	4b20      	ldr	r3, [pc, #128]	; (801318c <pbuf_copy+0x188>)
 801310a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801310e:	4924      	ldr	r1, [pc, #144]	; (80131a0 <pbuf_copy+0x19c>)
 8013110:	4820      	ldr	r0, [pc, #128]	; (8013194 <pbuf_copy+0x190>)
 8013112:	f009 fbb3 	bl	801c87c <iprintf>
 8013116:	f06f 030f 	mvn.w	r3, #15
 801311a:	e032      	b.n	8013182 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801311c:	683b      	ldr	r3, [r7, #0]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d013      	beq.n	801314a <pbuf_copy+0x146>
 8013122:	683b      	ldr	r3, [r7, #0]
 8013124:	895a      	ldrh	r2, [r3, #10]
 8013126:	683b      	ldr	r3, [r7, #0]
 8013128:	891b      	ldrh	r3, [r3, #8]
 801312a:	429a      	cmp	r2, r3
 801312c:	d10d      	bne.n	801314a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801312e:	683b      	ldr	r3, [r7, #0]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d009      	beq.n	801314a <pbuf_copy+0x146>
 8013136:	4b15      	ldr	r3, [pc, #84]	; (801318c <pbuf_copy+0x188>)
 8013138:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801313c:	4919      	ldr	r1, [pc, #100]	; (80131a4 <pbuf_copy+0x1a0>)
 801313e:	4815      	ldr	r0, [pc, #84]	; (8013194 <pbuf_copy+0x190>)
 8013140:	f009 fb9c 	bl	801c87c <iprintf>
 8013144:	f06f 0305 	mvn.w	r3, #5
 8013148:	e01b      	b.n	8013182 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d013      	beq.n	8013178 <pbuf_copy+0x174>
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	895a      	ldrh	r2, [r3, #10]
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	891b      	ldrh	r3, [r3, #8]
 8013158:	429a      	cmp	r2, r3
 801315a:	d10d      	bne.n	8013178 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d009      	beq.n	8013178 <pbuf_copy+0x174>
 8013164:	4b09      	ldr	r3, [pc, #36]	; (801318c <pbuf_copy+0x188>)
 8013166:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801316a:	490e      	ldr	r1, [pc, #56]	; (80131a4 <pbuf_copy+0x1a0>)
 801316c:	4809      	ldr	r0, [pc, #36]	; (8013194 <pbuf_copy+0x190>)
 801316e:	f009 fb85 	bl	801c87c <iprintf>
 8013172:	f06f 0305 	mvn.w	r3, #5
 8013176:	e004      	b.n	8013182 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8013178:	683b      	ldr	r3, [r7, #0]
 801317a:	2b00      	cmp	r3, #0
 801317c:	f47f af61 	bne.w	8013042 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8013180:	2300      	movs	r3, #0
}
 8013182:	4618      	mov	r0, r3
 8013184:	3718      	adds	r7, #24
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}
 801318a:	bf00      	nop
 801318c:	0801e858 	.word	0x0801e858
 8013190:	0801eb00 	.word	0x0801eb00
 8013194:	0801e8b8 	.word	0x0801e8b8
 8013198:	0801eb30 	.word	0x0801eb30
 801319c:	0801eb48 	.word	0x0801eb48
 80131a0:	0801eb64 	.word	0x0801eb64
 80131a4:	0801eb74 	.word	0x0801eb74

080131a8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b088      	sub	sp, #32
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	60f8      	str	r0, [r7, #12]
 80131b0:	60b9      	str	r1, [r7, #8]
 80131b2:	4611      	mov	r1, r2
 80131b4:	461a      	mov	r2, r3
 80131b6:	460b      	mov	r3, r1
 80131b8:	80fb      	strh	r3, [r7, #6]
 80131ba:	4613      	mov	r3, r2
 80131bc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80131be:	2300      	movs	r3, #0
 80131c0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80131c2:	2300      	movs	r3, #0
 80131c4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d108      	bne.n	80131de <pbuf_copy_partial+0x36>
 80131cc:	4b2b      	ldr	r3, [pc, #172]	; (801327c <pbuf_copy_partial+0xd4>)
 80131ce:	f240 420a 	movw	r2, #1034	; 0x40a
 80131d2:	492b      	ldr	r1, [pc, #172]	; (8013280 <pbuf_copy_partial+0xd8>)
 80131d4:	482b      	ldr	r0, [pc, #172]	; (8013284 <pbuf_copy_partial+0xdc>)
 80131d6:	f009 fb51 	bl	801c87c <iprintf>
 80131da:	2300      	movs	r3, #0
 80131dc:	e04a      	b.n	8013274 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80131de:	68bb      	ldr	r3, [r7, #8]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d108      	bne.n	80131f6 <pbuf_copy_partial+0x4e>
 80131e4:	4b25      	ldr	r3, [pc, #148]	; (801327c <pbuf_copy_partial+0xd4>)
 80131e6:	f240 420b 	movw	r2, #1035	; 0x40b
 80131ea:	4927      	ldr	r1, [pc, #156]	; (8013288 <pbuf_copy_partial+0xe0>)
 80131ec:	4825      	ldr	r0, [pc, #148]	; (8013284 <pbuf_copy_partial+0xdc>)
 80131ee:	f009 fb45 	bl	801c87c <iprintf>
 80131f2:	2300      	movs	r3, #0
 80131f4:	e03e      	b.n	8013274 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	61fb      	str	r3, [r7, #28]
 80131fa:	e034      	b.n	8013266 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80131fc:	88bb      	ldrh	r3, [r7, #4]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d00a      	beq.n	8013218 <pbuf_copy_partial+0x70>
 8013202:	69fb      	ldr	r3, [r7, #28]
 8013204:	895b      	ldrh	r3, [r3, #10]
 8013206:	88ba      	ldrh	r2, [r7, #4]
 8013208:	429a      	cmp	r2, r3
 801320a:	d305      	bcc.n	8013218 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801320c:	69fb      	ldr	r3, [r7, #28]
 801320e:	895b      	ldrh	r3, [r3, #10]
 8013210:	88ba      	ldrh	r2, [r7, #4]
 8013212:	1ad3      	subs	r3, r2, r3
 8013214:	80bb      	strh	r3, [r7, #4]
 8013216:	e023      	b.n	8013260 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8013218:	69fb      	ldr	r3, [r7, #28]
 801321a:	895a      	ldrh	r2, [r3, #10]
 801321c:	88bb      	ldrh	r3, [r7, #4]
 801321e:	1ad3      	subs	r3, r2, r3
 8013220:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8013222:	8b3a      	ldrh	r2, [r7, #24]
 8013224:	88fb      	ldrh	r3, [r7, #6]
 8013226:	429a      	cmp	r2, r3
 8013228:	d901      	bls.n	801322e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801322a:	88fb      	ldrh	r3, [r7, #6]
 801322c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801322e:	8b7b      	ldrh	r3, [r7, #26]
 8013230:	68ba      	ldr	r2, [r7, #8]
 8013232:	18d0      	adds	r0, r2, r3
 8013234:	69fb      	ldr	r3, [r7, #28]
 8013236:	685a      	ldr	r2, [r3, #4]
 8013238:	88bb      	ldrh	r3, [r7, #4]
 801323a:	4413      	add	r3, r2
 801323c:	8b3a      	ldrh	r2, [r7, #24]
 801323e:	4619      	mov	r1, r3
 8013240:	f009 fbfd 	bl	801ca3e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8013244:	8afa      	ldrh	r2, [r7, #22]
 8013246:	8b3b      	ldrh	r3, [r7, #24]
 8013248:	4413      	add	r3, r2
 801324a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801324c:	8b7a      	ldrh	r2, [r7, #26]
 801324e:	8b3b      	ldrh	r3, [r7, #24]
 8013250:	4413      	add	r3, r2
 8013252:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8013254:	88fa      	ldrh	r2, [r7, #6]
 8013256:	8b3b      	ldrh	r3, [r7, #24]
 8013258:	1ad3      	subs	r3, r2, r3
 801325a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801325c:	2300      	movs	r3, #0
 801325e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013260:	69fb      	ldr	r3, [r7, #28]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	61fb      	str	r3, [r7, #28]
 8013266:	88fb      	ldrh	r3, [r7, #6]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d002      	beq.n	8013272 <pbuf_copy_partial+0xca>
 801326c:	69fb      	ldr	r3, [r7, #28]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d1c4      	bne.n	80131fc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8013272:	8afb      	ldrh	r3, [r7, #22]
}
 8013274:	4618      	mov	r0, r3
 8013276:	3720      	adds	r7, #32
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}
 801327c:	0801e858 	.word	0x0801e858
 8013280:	0801eba0 	.word	0x0801eba0
 8013284:	0801e8b8 	.word	0x0801e8b8
 8013288:	0801ebc0 	.word	0x0801ebc0

0801328c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801328c:	b580      	push	{r7, lr}
 801328e:	b084      	sub	sp, #16
 8013290:	af00      	add	r7, sp, #0
 8013292:	4603      	mov	r3, r0
 8013294:	603a      	str	r2, [r7, #0]
 8013296:	71fb      	strb	r3, [r7, #7]
 8013298:	460b      	mov	r3, r1
 801329a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801329c:	683b      	ldr	r3, [r7, #0]
 801329e:	8919      	ldrh	r1, [r3, #8]
 80132a0:	88ba      	ldrh	r2, [r7, #4]
 80132a2:	79fb      	ldrb	r3, [r7, #7]
 80132a4:	4618      	mov	r0, r3
 80132a6:	f7ff faa5 	bl	80127f4 <pbuf_alloc>
 80132aa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d101      	bne.n	80132b6 <pbuf_clone+0x2a>
    return NULL;
 80132b2:	2300      	movs	r3, #0
 80132b4:	e011      	b.n	80132da <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80132b6:	6839      	ldr	r1, [r7, #0]
 80132b8:	68f8      	ldr	r0, [r7, #12]
 80132ba:	f7ff fea3 	bl	8013004 <pbuf_copy>
 80132be:	4603      	mov	r3, r0
 80132c0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80132c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d006      	beq.n	80132d8 <pbuf_clone+0x4c>
 80132ca:	4b06      	ldr	r3, [pc, #24]	; (80132e4 <pbuf_clone+0x58>)
 80132cc:	f240 5224 	movw	r2, #1316	; 0x524
 80132d0:	4905      	ldr	r1, [pc, #20]	; (80132e8 <pbuf_clone+0x5c>)
 80132d2:	4806      	ldr	r0, [pc, #24]	; (80132ec <pbuf_clone+0x60>)
 80132d4:	f009 fad2 	bl	801c87c <iprintf>
  return q;
 80132d8:	68fb      	ldr	r3, [r7, #12]
}
 80132da:	4618      	mov	r0, r3
 80132dc:	3710      	adds	r7, #16
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}
 80132e2:	bf00      	nop
 80132e4:	0801e858 	.word	0x0801e858
 80132e8:	0801eccc 	.word	0x0801eccc
 80132ec:	0801e8b8 	.word	0x0801e8b8

080132f0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80132f4:	f009 f9c2 	bl	801c67c <rand>
 80132f8:	4603      	mov	r3, r0
 80132fa:	b29b      	uxth	r3, r3
 80132fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013300:	b29b      	uxth	r3, r3
 8013302:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013306:	b29a      	uxth	r2, r3
 8013308:	4b01      	ldr	r3, [pc, #4]	; (8013310 <tcp_init+0x20>)
 801330a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801330c:	bf00      	nop
 801330e:	bd80      	pop	{r7, pc}
 8013310:	20000028 	.word	0x20000028

08013314 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b082      	sub	sp, #8
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	7d1b      	ldrb	r3, [r3, #20]
 8013320:	2b01      	cmp	r3, #1
 8013322:	d105      	bne.n	8013330 <tcp_free+0x1c>
 8013324:	4b06      	ldr	r3, [pc, #24]	; (8013340 <tcp_free+0x2c>)
 8013326:	22d4      	movs	r2, #212	; 0xd4
 8013328:	4906      	ldr	r1, [pc, #24]	; (8013344 <tcp_free+0x30>)
 801332a:	4807      	ldr	r0, [pc, #28]	; (8013348 <tcp_free+0x34>)
 801332c:	f009 faa6 	bl	801c87c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8013330:	6879      	ldr	r1, [r7, #4]
 8013332:	2001      	movs	r0, #1
 8013334:	f7fe fe9e 	bl	8012074 <memp_free>
}
 8013338:	bf00      	nop
 801333a:	3708      	adds	r7, #8
 801333c:	46bd      	mov	sp, r7
 801333e:	bd80      	pop	{r7, pc}
 8013340:	0801ed58 	.word	0x0801ed58
 8013344:	0801ed88 	.word	0x0801ed88
 8013348:	0801ed9c 	.word	0x0801ed9c

0801334c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b082      	sub	sp, #8
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	7d1b      	ldrb	r3, [r3, #20]
 8013358:	2b01      	cmp	r3, #1
 801335a:	d105      	bne.n	8013368 <tcp_free_listen+0x1c>
 801335c:	4b06      	ldr	r3, [pc, #24]	; (8013378 <tcp_free_listen+0x2c>)
 801335e:	22df      	movs	r2, #223	; 0xdf
 8013360:	4906      	ldr	r1, [pc, #24]	; (801337c <tcp_free_listen+0x30>)
 8013362:	4807      	ldr	r0, [pc, #28]	; (8013380 <tcp_free_listen+0x34>)
 8013364:	f009 fa8a 	bl	801c87c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8013368:	6879      	ldr	r1, [r7, #4]
 801336a:	2002      	movs	r0, #2
 801336c:	f7fe fe82 	bl	8012074 <memp_free>
}
 8013370:	bf00      	nop
 8013372:	3708      	adds	r7, #8
 8013374:	46bd      	mov	sp, r7
 8013376:	bd80      	pop	{r7, pc}
 8013378:	0801ed58 	.word	0x0801ed58
 801337c:	0801edc4 	.word	0x0801edc4
 8013380:	0801ed9c 	.word	0x0801ed9c

08013384 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8013384:	b580      	push	{r7, lr}
 8013386:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8013388:	f001 f85c 	bl	8014444 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801338c:	4b07      	ldr	r3, [pc, #28]	; (80133ac <tcp_tmr+0x28>)
 801338e:	781b      	ldrb	r3, [r3, #0]
 8013390:	3301      	adds	r3, #1
 8013392:	b2da      	uxtb	r2, r3
 8013394:	4b05      	ldr	r3, [pc, #20]	; (80133ac <tcp_tmr+0x28>)
 8013396:	701a      	strb	r2, [r3, #0]
 8013398:	4b04      	ldr	r3, [pc, #16]	; (80133ac <tcp_tmr+0x28>)
 801339a:	781b      	ldrb	r3, [r3, #0]
 801339c:	f003 0301 	and.w	r3, r3, #1
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d001      	beq.n	80133a8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80133a4:	f000 fd0e 	bl	8013dc4 <tcp_slowtmr>
  }
}
 80133a8:	bf00      	nop
 80133aa:	bd80      	pop	{r7, pc}
 80133ac:	200113bd 	.word	0x200113bd

080133b0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b084      	sub	sp, #16
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
 80133b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d105      	bne.n	80133cc <tcp_remove_listener+0x1c>
 80133c0:	4b0d      	ldr	r3, [pc, #52]	; (80133f8 <tcp_remove_listener+0x48>)
 80133c2:	22ff      	movs	r2, #255	; 0xff
 80133c4:	490d      	ldr	r1, [pc, #52]	; (80133fc <tcp_remove_listener+0x4c>)
 80133c6:	480e      	ldr	r0, [pc, #56]	; (8013400 <tcp_remove_listener+0x50>)
 80133c8:	f009 fa58 	bl	801c87c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	60fb      	str	r3, [r7, #12]
 80133d0:	e00a      	b.n	80133e8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80133d6:	683a      	ldr	r2, [r7, #0]
 80133d8:	429a      	cmp	r2, r3
 80133da:	d102      	bne.n	80133e2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	2200      	movs	r2, #0
 80133e0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	68db      	ldr	r3, [r3, #12]
 80133e6:	60fb      	str	r3, [r7, #12]
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d1f1      	bne.n	80133d2 <tcp_remove_listener+0x22>
    }
  }
}
 80133ee:	bf00      	nop
 80133f0:	bf00      	nop
 80133f2:	3710      	adds	r7, #16
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd80      	pop	{r7, pc}
 80133f8:	0801ed58 	.word	0x0801ed58
 80133fc:	0801ede0 	.word	0x0801ede0
 8013400:	0801ed9c 	.word	0x0801ed9c

08013404 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8013404:	b580      	push	{r7, lr}
 8013406:	b084      	sub	sp, #16
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d106      	bne.n	8013420 <tcp_listen_closed+0x1c>
 8013412:	4b14      	ldr	r3, [pc, #80]	; (8013464 <tcp_listen_closed+0x60>)
 8013414:	f240 1211 	movw	r2, #273	; 0x111
 8013418:	4913      	ldr	r1, [pc, #76]	; (8013468 <tcp_listen_closed+0x64>)
 801341a:	4814      	ldr	r0, [pc, #80]	; (801346c <tcp_listen_closed+0x68>)
 801341c:	f009 fa2e 	bl	801c87c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	7d1b      	ldrb	r3, [r3, #20]
 8013424:	2b01      	cmp	r3, #1
 8013426:	d006      	beq.n	8013436 <tcp_listen_closed+0x32>
 8013428:	4b0e      	ldr	r3, [pc, #56]	; (8013464 <tcp_listen_closed+0x60>)
 801342a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801342e:	4910      	ldr	r1, [pc, #64]	; (8013470 <tcp_listen_closed+0x6c>)
 8013430:	480e      	ldr	r0, [pc, #56]	; (801346c <tcp_listen_closed+0x68>)
 8013432:	f009 fa23 	bl	801c87c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013436:	2301      	movs	r3, #1
 8013438:	60fb      	str	r3, [r7, #12]
 801343a:	e00b      	b.n	8013454 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801343c:	4a0d      	ldr	r2, [pc, #52]	; (8013474 <tcp_listen_closed+0x70>)
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	6879      	ldr	r1, [r7, #4]
 8013448:	4618      	mov	r0, r3
 801344a:	f7ff ffb1 	bl	80133b0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	3301      	adds	r3, #1
 8013452:	60fb      	str	r3, [r7, #12]
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	2b03      	cmp	r3, #3
 8013458:	d9f0      	bls.n	801343c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801345a:	bf00      	nop
 801345c:	bf00      	nop
 801345e:	3710      	adds	r7, #16
 8013460:	46bd      	mov	sp, r7
 8013462:	bd80      	pop	{r7, pc}
 8013464:	0801ed58 	.word	0x0801ed58
 8013468:	0801ee08 	.word	0x0801ee08
 801346c:	0801ed9c 	.word	0x0801ed9c
 8013470:	0801ee14 	.word	0x0801ee14
 8013474:	08020dec 	.word	0x08020dec

08013478 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8013478:	b5b0      	push	{r4, r5, r7, lr}
 801347a:	b088      	sub	sp, #32
 801347c:	af04      	add	r7, sp, #16
 801347e:	6078      	str	r0, [r7, #4]
 8013480:	460b      	mov	r3, r1
 8013482:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d106      	bne.n	8013498 <tcp_close_shutdown+0x20>
 801348a:	4b63      	ldr	r3, [pc, #396]	; (8013618 <tcp_close_shutdown+0x1a0>)
 801348c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8013490:	4962      	ldr	r1, [pc, #392]	; (801361c <tcp_close_shutdown+0x1a4>)
 8013492:	4863      	ldr	r0, [pc, #396]	; (8013620 <tcp_close_shutdown+0x1a8>)
 8013494:	f009 f9f2 	bl	801c87c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8013498:	78fb      	ldrb	r3, [r7, #3]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d066      	beq.n	801356c <tcp_close_shutdown+0xf4>
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	7d1b      	ldrb	r3, [r3, #20]
 80134a2:	2b04      	cmp	r3, #4
 80134a4:	d003      	beq.n	80134ae <tcp_close_shutdown+0x36>
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	7d1b      	ldrb	r3, [r3, #20]
 80134aa:	2b07      	cmp	r3, #7
 80134ac:	d15e      	bne.n	801356c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d104      	bne.n	80134c0 <tcp_close_shutdown+0x48>
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80134ba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80134be:	d055      	beq.n	801356c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	8b5b      	ldrh	r3, [r3, #26]
 80134c4:	f003 0310 	and.w	r3, r3, #16
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d106      	bne.n	80134da <tcp_close_shutdown+0x62>
 80134cc:	4b52      	ldr	r3, [pc, #328]	; (8013618 <tcp_close_shutdown+0x1a0>)
 80134ce:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80134d2:	4954      	ldr	r1, [pc, #336]	; (8013624 <tcp_close_shutdown+0x1ac>)
 80134d4:	4852      	ldr	r0, [pc, #328]	; (8013620 <tcp_close_shutdown+0x1a8>)
 80134d6:	f009 f9d1 	bl	801c87c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80134e2:	687d      	ldr	r5, [r7, #4]
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	3304      	adds	r3, #4
 80134e8:	687a      	ldr	r2, [r7, #4]
 80134ea:	8ad2      	ldrh	r2, [r2, #22]
 80134ec:	6879      	ldr	r1, [r7, #4]
 80134ee:	8b09      	ldrh	r1, [r1, #24]
 80134f0:	9102      	str	r1, [sp, #8]
 80134f2:	9201      	str	r2, [sp, #4]
 80134f4:	9300      	str	r3, [sp, #0]
 80134f6:	462b      	mov	r3, r5
 80134f8:	4622      	mov	r2, r4
 80134fa:	4601      	mov	r1, r0
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	f005 fd71 	bl	8018fe4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8013502:	6878      	ldr	r0, [r7, #4]
 8013504:	f001 fb4e 	bl	8014ba4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013508:	4b47      	ldr	r3, [pc, #284]	; (8013628 <tcp_close_shutdown+0x1b0>)
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	687a      	ldr	r2, [r7, #4]
 801350e:	429a      	cmp	r2, r3
 8013510:	d105      	bne.n	801351e <tcp_close_shutdown+0xa6>
 8013512:	4b45      	ldr	r3, [pc, #276]	; (8013628 <tcp_close_shutdown+0x1b0>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	68db      	ldr	r3, [r3, #12]
 8013518:	4a43      	ldr	r2, [pc, #268]	; (8013628 <tcp_close_shutdown+0x1b0>)
 801351a:	6013      	str	r3, [r2, #0]
 801351c:	e013      	b.n	8013546 <tcp_close_shutdown+0xce>
 801351e:	4b42      	ldr	r3, [pc, #264]	; (8013628 <tcp_close_shutdown+0x1b0>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	60fb      	str	r3, [r7, #12]
 8013524:	e00c      	b.n	8013540 <tcp_close_shutdown+0xc8>
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	68db      	ldr	r3, [r3, #12]
 801352a:	687a      	ldr	r2, [r7, #4]
 801352c:	429a      	cmp	r2, r3
 801352e:	d104      	bne.n	801353a <tcp_close_shutdown+0xc2>
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	68da      	ldr	r2, [r3, #12]
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	60da      	str	r2, [r3, #12]
 8013538:	e005      	b.n	8013546 <tcp_close_shutdown+0xce>
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	68db      	ldr	r3, [r3, #12]
 801353e:	60fb      	str	r3, [r7, #12]
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d1ef      	bne.n	8013526 <tcp_close_shutdown+0xae>
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2200      	movs	r2, #0
 801354a:	60da      	str	r2, [r3, #12]
 801354c:	4b37      	ldr	r3, [pc, #220]	; (801362c <tcp_close_shutdown+0x1b4>)
 801354e:	2201      	movs	r2, #1
 8013550:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8013552:	4b37      	ldr	r3, [pc, #220]	; (8013630 <tcp_close_shutdown+0x1b8>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	687a      	ldr	r2, [r7, #4]
 8013558:	429a      	cmp	r2, r3
 801355a:	d102      	bne.n	8013562 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801355c:	f003 ffe6 	bl	801752c <tcp_trigger_input_pcb_close>
 8013560:	e002      	b.n	8013568 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8013562:	6878      	ldr	r0, [r7, #4]
 8013564:	f7ff fed6 	bl	8013314 <tcp_free>
      }
      return ERR_OK;
 8013568:	2300      	movs	r3, #0
 801356a:	e050      	b.n	801360e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	7d1b      	ldrb	r3, [r3, #20]
 8013570:	2b02      	cmp	r3, #2
 8013572:	d03b      	beq.n	80135ec <tcp_close_shutdown+0x174>
 8013574:	2b02      	cmp	r3, #2
 8013576:	dc44      	bgt.n	8013602 <tcp_close_shutdown+0x18a>
 8013578:	2b00      	cmp	r3, #0
 801357a:	d002      	beq.n	8013582 <tcp_close_shutdown+0x10a>
 801357c:	2b01      	cmp	r3, #1
 801357e:	d02a      	beq.n	80135d6 <tcp_close_shutdown+0x15e>
 8013580:	e03f      	b.n	8013602 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	8adb      	ldrh	r3, [r3, #22]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d021      	beq.n	80135ce <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801358a:	4b2a      	ldr	r3, [pc, #168]	; (8013634 <tcp_close_shutdown+0x1bc>)
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	687a      	ldr	r2, [r7, #4]
 8013590:	429a      	cmp	r2, r3
 8013592:	d105      	bne.n	80135a0 <tcp_close_shutdown+0x128>
 8013594:	4b27      	ldr	r3, [pc, #156]	; (8013634 <tcp_close_shutdown+0x1bc>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	68db      	ldr	r3, [r3, #12]
 801359a:	4a26      	ldr	r2, [pc, #152]	; (8013634 <tcp_close_shutdown+0x1bc>)
 801359c:	6013      	str	r3, [r2, #0]
 801359e:	e013      	b.n	80135c8 <tcp_close_shutdown+0x150>
 80135a0:	4b24      	ldr	r3, [pc, #144]	; (8013634 <tcp_close_shutdown+0x1bc>)
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	60bb      	str	r3, [r7, #8]
 80135a6:	e00c      	b.n	80135c2 <tcp_close_shutdown+0x14a>
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	68db      	ldr	r3, [r3, #12]
 80135ac:	687a      	ldr	r2, [r7, #4]
 80135ae:	429a      	cmp	r2, r3
 80135b0:	d104      	bne.n	80135bc <tcp_close_shutdown+0x144>
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	68da      	ldr	r2, [r3, #12]
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	60da      	str	r2, [r3, #12]
 80135ba:	e005      	b.n	80135c8 <tcp_close_shutdown+0x150>
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	68db      	ldr	r3, [r3, #12]
 80135c0:	60bb      	str	r3, [r7, #8]
 80135c2:	68bb      	ldr	r3, [r7, #8]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d1ef      	bne.n	80135a8 <tcp_close_shutdown+0x130>
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	2200      	movs	r2, #0
 80135cc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80135ce:	6878      	ldr	r0, [r7, #4]
 80135d0:	f7ff fea0 	bl	8013314 <tcp_free>
      break;
 80135d4:	e01a      	b.n	801360c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	f7ff ff14 	bl	8013404 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80135dc:	6879      	ldr	r1, [r7, #4]
 80135de:	4816      	ldr	r0, [pc, #88]	; (8013638 <tcp_close_shutdown+0x1c0>)
 80135e0:	f001 fb30 	bl	8014c44 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80135e4:	6878      	ldr	r0, [r7, #4]
 80135e6:	f7ff feb1 	bl	801334c <tcp_free_listen>
      break;
 80135ea:	e00f      	b.n	801360c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80135ec:	6879      	ldr	r1, [r7, #4]
 80135ee:	480e      	ldr	r0, [pc, #56]	; (8013628 <tcp_close_shutdown+0x1b0>)
 80135f0:	f001 fb28 	bl	8014c44 <tcp_pcb_remove>
 80135f4:	4b0d      	ldr	r3, [pc, #52]	; (801362c <tcp_close_shutdown+0x1b4>)
 80135f6:	2201      	movs	r2, #1
 80135f8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f7ff fe8a 	bl	8013314 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8013600:	e004      	b.n	801360c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8013602:	6878      	ldr	r0, [r7, #4]
 8013604:	f000 f81a 	bl	801363c <tcp_close_shutdown_fin>
 8013608:	4603      	mov	r3, r0
 801360a:	e000      	b.n	801360e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801360c:	2300      	movs	r3, #0
}
 801360e:	4618      	mov	r0, r3
 8013610:	3710      	adds	r7, #16
 8013612:	46bd      	mov	sp, r7
 8013614:	bdb0      	pop	{r4, r5, r7, pc}
 8013616:	bf00      	nop
 8013618:	0801ed58 	.word	0x0801ed58
 801361c:	0801ee2c 	.word	0x0801ee2c
 8013620:	0801ed9c 	.word	0x0801ed9c
 8013624:	0801ee4c 	.word	0x0801ee4c
 8013628:	200113b4 	.word	0x200113b4
 801362c:	200113bc 	.word	0x200113bc
 8013630:	200113f4 	.word	0x200113f4
 8013634:	200113ac 	.word	0x200113ac
 8013638:	200113b0 	.word	0x200113b0

0801363c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b084      	sub	sp, #16
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d106      	bne.n	8013658 <tcp_close_shutdown_fin+0x1c>
 801364a:	4b2e      	ldr	r3, [pc, #184]	; (8013704 <tcp_close_shutdown_fin+0xc8>)
 801364c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8013650:	492d      	ldr	r1, [pc, #180]	; (8013708 <tcp_close_shutdown_fin+0xcc>)
 8013652:	482e      	ldr	r0, [pc, #184]	; (801370c <tcp_close_shutdown_fin+0xd0>)
 8013654:	f009 f912 	bl	801c87c <iprintf>

  switch (pcb->state) {
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	7d1b      	ldrb	r3, [r3, #20]
 801365c:	2b07      	cmp	r3, #7
 801365e:	d020      	beq.n	80136a2 <tcp_close_shutdown_fin+0x66>
 8013660:	2b07      	cmp	r3, #7
 8013662:	dc2b      	bgt.n	80136bc <tcp_close_shutdown_fin+0x80>
 8013664:	2b03      	cmp	r3, #3
 8013666:	d002      	beq.n	801366e <tcp_close_shutdown_fin+0x32>
 8013668:	2b04      	cmp	r3, #4
 801366a:	d00d      	beq.n	8013688 <tcp_close_shutdown_fin+0x4c>
 801366c:	e026      	b.n	80136bc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801366e:	6878      	ldr	r0, [r7, #4]
 8013670:	f004 fdc6 	bl	8018200 <tcp_send_fin>
 8013674:	4603      	mov	r3, r0
 8013676:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d11f      	bne.n	80136c0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	2205      	movs	r2, #5
 8013684:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013686:	e01b      	b.n	80136c0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8013688:	6878      	ldr	r0, [r7, #4]
 801368a:	f004 fdb9 	bl	8018200 <tcp_send_fin>
 801368e:	4603      	mov	r3, r0
 8013690:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013696:	2b00      	cmp	r3, #0
 8013698:	d114      	bne.n	80136c4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	2205      	movs	r2, #5
 801369e:	751a      	strb	r2, [r3, #20]
      }
      break;
 80136a0:	e010      	b.n	80136c4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80136a2:	6878      	ldr	r0, [r7, #4]
 80136a4:	f004 fdac 	bl	8018200 <tcp_send_fin>
 80136a8:	4603      	mov	r3, r0
 80136aa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80136ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d109      	bne.n	80136c8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	2209      	movs	r2, #9
 80136b8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80136ba:	e005      	b.n	80136c8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80136bc:	2300      	movs	r3, #0
 80136be:	e01c      	b.n	80136fa <tcp_close_shutdown_fin+0xbe>
      break;
 80136c0:	bf00      	nop
 80136c2:	e002      	b.n	80136ca <tcp_close_shutdown_fin+0x8e>
      break;
 80136c4:	bf00      	nop
 80136c6:	e000      	b.n	80136ca <tcp_close_shutdown_fin+0x8e>
      break;
 80136c8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80136ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d103      	bne.n	80136da <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80136d2:	6878      	ldr	r0, [r7, #4]
 80136d4:	f004 fed2 	bl	801847c <tcp_output>
 80136d8:	e00d      	b.n	80136f6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80136da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136e2:	d108      	bne.n	80136f6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	8b5b      	ldrh	r3, [r3, #26]
 80136e8:	f043 0308 	orr.w	r3, r3, #8
 80136ec:	b29a      	uxth	r2, r3
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80136f2:	2300      	movs	r3, #0
 80136f4:	e001      	b.n	80136fa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80136f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80136fa:	4618      	mov	r0, r3
 80136fc:	3710      	adds	r7, #16
 80136fe:	46bd      	mov	sp, r7
 8013700:	bd80      	pop	{r7, pc}
 8013702:	bf00      	nop
 8013704:	0801ed58 	.word	0x0801ed58
 8013708:	0801ee08 	.word	0x0801ee08
 801370c:	0801ed9c 	.word	0x0801ed9c

08013710 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b082      	sub	sp, #8
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d109      	bne.n	8013732 <tcp_close+0x22>
 801371e:	4b0f      	ldr	r3, [pc, #60]	; (801375c <tcp_close+0x4c>)
 8013720:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8013724:	490e      	ldr	r1, [pc, #56]	; (8013760 <tcp_close+0x50>)
 8013726:	480f      	ldr	r0, [pc, #60]	; (8013764 <tcp_close+0x54>)
 8013728:	f009 f8a8 	bl	801c87c <iprintf>
 801372c:	f06f 030f 	mvn.w	r3, #15
 8013730:	e00f      	b.n	8013752 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	7d1b      	ldrb	r3, [r3, #20]
 8013736:	2b01      	cmp	r3, #1
 8013738:	d006      	beq.n	8013748 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	8b5b      	ldrh	r3, [r3, #26]
 801373e:	f043 0310 	orr.w	r3, r3, #16
 8013742:	b29a      	uxth	r2, r3
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8013748:	2101      	movs	r1, #1
 801374a:	6878      	ldr	r0, [r7, #4]
 801374c:	f7ff fe94 	bl	8013478 <tcp_close_shutdown>
 8013750:	4603      	mov	r3, r0
}
 8013752:	4618      	mov	r0, r3
 8013754:	3708      	adds	r7, #8
 8013756:	46bd      	mov	sp, r7
 8013758:	bd80      	pop	{r7, pc}
 801375a:	bf00      	nop
 801375c:	0801ed58 	.word	0x0801ed58
 8013760:	0801ee68 	.word	0x0801ee68
 8013764:	0801ed9c 	.word	0x0801ed9c

08013768 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b084      	sub	sp, #16
 801376c:	af00      	add	r7, sp, #0
 801376e:	60f8      	str	r0, [r7, #12]
 8013770:	60b9      	str	r1, [r7, #8]
 8013772:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d109      	bne.n	801378e <tcp_shutdown+0x26>
 801377a:	4b26      	ldr	r3, [pc, #152]	; (8013814 <tcp_shutdown+0xac>)
 801377c:	f240 2207 	movw	r2, #519	; 0x207
 8013780:	4925      	ldr	r1, [pc, #148]	; (8013818 <tcp_shutdown+0xb0>)
 8013782:	4826      	ldr	r0, [pc, #152]	; (801381c <tcp_shutdown+0xb4>)
 8013784:	f009 f87a 	bl	801c87c <iprintf>
 8013788:	f06f 030f 	mvn.w	r3, #15
 801378c:	e03d      	b.n	801380a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	7d1b      	ldrb	r3, [r3, #20]
 8013792:	2b01      	cmp	r3, #1
 8013794:	d102      	bne.n	801379c <tcp_shutdown+0x34>
    return ERR_CONN;
 8013796:	f06f 030a 	mvn.w	r3, #10
 801379a:	e036      	b.n	801380a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 801379c:	68bb      	ldr	r3, [r7, #8]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d01b      	beq.n	80137da <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	8b5b      	ldrh	r3, [r3, #26]
 80137a6:	f043 0310 	orr.w	r3, r3, #16
 80137aa:	b29a      	uxth	r2, r3
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d005      	beq.n	80137c2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80137b6:	2101      	movs	r1, #1
 80137b8:	68f8      	ldr	r0, [r7, #12]
 80137ba:	f7ff fe5d 	bl	8013478 <tcp_close_shutdown>
 80137be:	4603      	mov	r3, r0
 80137c0:	e023      	b.n	801380a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d007      	beq.n	80137da <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80137ce:	4618      	mov	r0, r3
 80137d0:	f7ff faf4 	bl	8012dbc <pbuf_free>
      pcb->refused_data = NULL;
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	2200      	movs	r2, #0
 80137d8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d013      	beq.n	8013808 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	7d1b      	ldrb	r3, [r3, #20]
 80137e4:	2b04      	cmp	r3, #4
 80137e6:	dc02      	bgt.n	80137ee <tcp_shutdown+0x86>
 80137e8:	2b03      	cmp	r3, #3
 80137ea:	da02      	bge.n	80137f2 <tcp_shutdown+0x8a>
 80137ec:	e009      	b.n	8013802 <tcp_shutdown+0x9a>
 80137ee:	2b07      	cmp	r3, #7
 80137f0:	d107      	bne.n	8013802 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80137f2:	68bb      	ldr	r3, [r7, #8]
 80137f4:	b2db      	uxtb	r3, r3
 80137f6:	4619      	mov	r1, r3
 80137f8:	68f8      	ldr	r0, [r7, #12]
 80137fa:	f7ff fe3d 	bl	8013478 <tcp_close_shutdown>
 80137fe:	4603      	mov	r3, r0
 8013800:	e003      	b.n	801380a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8013802:	f06f 030a 	mvn.w	r3, #10
 8013806:	e000      	b.n	801380a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8013808:	2300      	movs	r3, #0
}
 801380a:	4618      	mov	r0, r3
 801380c:	3710      	adds	r7, #16
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}
 8013812:	bf00      	nop
 8013814:	0801ed58 	.word	0x0801ed58
 8013818:	0801ee80 	.word	0x0801ee80
 801381c:	0801ed9c 	.word	0x0801ed9c

08013820 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b08e      	sub	sp, #56	; 0x38
 8013824:	af04      	add	r7, sp, #16
 8013826:	6078      	str	r0, [r7, #4]
 8013828:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d107      	bne.n	8013840 <tcp_abandon+0x20>
 8013830:	4b52      	ldr	r3, [pc, #328]	; (801397c <tcp_abandon+0x15c>)
 8013832:	f240 223d 	movw	r2, #573	; 0x23d
 8013836:	4952      	ldr	r1, [pc, #328]	; (8013980 <tcp_abandon+0x160>)
 8013838:	4852      	ldr	r0, [pc, #328]	; (8013984 <tcp_abandon+0x164>)
 801383a:	f009 f81f 	bl	801c87c <iprintf>
 801383e:	e099      	b.n	8013974 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	7d1b      	ldrb	r3, [r3, #20]
 8013844:	2b01      	cmp	r3, #1
 8013846:	d106      	bne.n	8013856 <tcp_abandon+0x36>
 8013848:	4b4c      	ldr	r3, [pc, #304]	; (801397c <tcp_abandon+0x15c>)
 801384a:	f44f 7210 	mov.w	r2, #576	; 0x240
 801384e:	494e      	ldr	r1, [pc, #312]	; (8013988 <tcp_abandon+0x168>)
 8013850:	484c      	ldr	r0, [pc, #304]	; (8013984 <tcp_abandon+0x164>)
 8013852:	f009 f813 	bl	801c87c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	7d1b      	ldrb	r3, [r3, #20]
 801385a:	2b0a      	cmp	r3, #10
 801385c:	d107      	bne.n	801386e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801385e:	6879      	ldr	r1, [r7, #4]
 8013860:	484a      	ldr	r0, [pc, #296]	; (801398c <tcp_abandon+0x16c>)
 8013862:	f001 f9ef 	bl	8014c44 <tcp_pcb_remove>
    tcp_free(pcb);
 8013866:	6878      	ldr	r0, [r7, #4]
 8013868:	f7ff fd54 	bl	8013314 <tcp_free>
 801386c:	e082      	b.n	8013974 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801386e:	2300      	movs	r3, #0
 8013870:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8013872:	2300      	movs	r3, #0
 8013874:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801387a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013880:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013888:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	691b      	ldr	r3, [r3, #16]
 801388e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	7d1b      	ldrb	r3, [r3, #20]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d126      	bne.n	80138e6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	8adb      	ldrh	r3, [r3, #22]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d02e      	beq.n	80138fe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80138a0:	4b3b      	ldr	r3, [pc, #236]	; (8013990 <tcp_abandon+0x170>)
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	687a      	ldr	r2, [r7, #4]
 80138a6:	429a      	cmp	r2, r3
 80138a8:	d105      	bne.n	80138b6 <tcp_abandon+0x96>
 80138aa:	4b39      	ldr	r3, [pc, #228]	; (8013990 <tcp_abandon+0x170>)
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	68db      	ldr	r3, [r3, #12]
 80138b0:	4a37      	ldr	r2, [pc, #220]	; (8013990 <tcp_abandon+0x170>)
 80138b2:	6013      	str	r3, [r2, #0]
 80138b4:	e013      	b.n	80138de <tcp_abandon+0xbe>
 80138b6:	4b36      	ldr	r3, [pc, #216]	; (8013990 <tcp_abandon+0x170>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	61fb      	str	r3, [r7, #28]
 80138bc:	e00c      	b.n	80138d8 <tcp_abandon+0xb8>
 80138be:	69fb      	ldr	r3, [r7, #28]
 80138c0:	68db      	ldr	r3, [r3, #12]
 80138c2:	687a      	ldr	r2, [r7, #4]
 80138c4:	429a      	cmp	r2, r3
 80138c6:	d104      	bne.n	80138d2 <tcp_abandon+0xb2>
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	68da      	ldr	r2, [r3, #12]
 80138cc:	69fb      	ldr	r3, [r7, #28]
 80138ce:	60da      	str	r2, [r3, #12]
 80138d0:	e005      	b.n	80138de <tcp_abandon+0xbe>
 80138d2:	69fb      	ldr	r3, [r7, #28]
 80138d4:	68db      	ldr	r3, [r3, #12]
 80138d6:	61fb      	str	r3, [r7, #28]
 80138d8:	69fb      	ldr	r3, [r7, #28]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d1ef      	bne.n	80138be <tcp_abandon+0x9e>
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	2200      	movs	r2, #0
 80138e2:	60da      	str	r2, [r3, #12]
 80138e4:	e00b      	b.n	80138fe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80138e6:	683b      	ldr	r3, [r7, #0]
 80138e8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	8adb      	ldrh	r3, [r3, #22]
 80138ee:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80138f0:	6879      	ldr	r1, [r7, #4]
 80138f2:	4828      	ldr	r0, [pc, #160]	; (8013994 <tcp_abandon+0x174>)
 80138f4:	f001 f9a6 	bl	8014c44 <tcp_pcb_remove>
 80138f8:	4b27      	ldr	r3, [pc, #156]	; (8013998 <tcp_abandon+0x178>)
 80138fa:	2201      	movs	r2, #1
 80138fc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013902:	2b00      	cmp	r3, #0
 8013904:	d004      	beq.n	8013910 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801390a:	4618      	mov	r0, r3
 801390c:	f000 fe7a 	bl	8014604 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013914:	2b00      	cmp	r3, #0
 8013916:	d004      	beq.n	8013922 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801391c:	4618      	mov	r0, r3
 801391e:	f000 fe71 	bl	8014604 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013926:	2b00      	cmp	r3, #0
 8013928:	d004      	beq.n	8013934 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801392e:	4618      	mov	r0, r3
 8013930:	f000 fe68 	bl	8014604 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013936:	2b00      	cmp	r3, #0
 8013938:	d00e      	beq.n	8013958 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801393a:	6879      	ldr	r1, [r7, #4]
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	3304      	adds	r3, #4
 8013940:	687a      	ldr	r2, [r7, #4]
 8013942:	8b12      	ldrh	r2, [r2, #24]
 8013944:	9202      	str	r2, [sp, #8]
 8013946:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013948:	9201      	str	r2, [sp, #4]
 801394a:	9300      	str	r3, [sp, #0]
 801394c:	460b      	mov	r3, r1
 801394e:	697a      	ldr	r2, [r7, #20]
 8013950:	69b9      	ldr	r1, [r7, #24]
 8013952:	6878      	ldr	r0, [r7, #4]
 8013954:	f005 fb46 	bl	8018fe4 <tcp_rst>
    }
    last_state = pcb->state;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	7d1b      	ldrb	r3, [r3, #20]
 801395c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801395e:	6878      	ldr	r0, [r7, #4]
 8013960:	f7ff fcd8 	bl	8013314 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8013964:	693b      	ldr	r3, [r7, #16]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d004      	beq.n	8013974 <tcp_abandon+0x154>
 801396a:	693b      	ldr	r3, [r7, #16]
 801396c:	f06f 010c 	mvn.w	r1, #12
 8013970:	68f8      	ldr	r0, [r7, #12]
 8013972:	4798      	blx	r3
  }
}
 8013974:	3728      	adds	r7, #40	; 0x28
 8013976:	46bd      	mov	sp, r7
 8013978:	bd80      	pop	{r7, pc}
 801397a:	bf00      	nop
 801397c:	0801ed58 	.word	0x0801ed58
 8013980:	0801ee9c 	.word	0x0801ee9c
 8013984:	0801ed9c 	.word	0x0801ed9c
 8013988:	0801eeb8 	.word	0x0801eeb8
 801398c:	200113b8 	.word	0x200113b8
 8013990:	200113ac 	.word	0x200113ac
 8013994:	200113b4 	.word	0x200113b4
 8013998:	200113bc 	.word	0x200113bc

0801399c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b082      	sub	sp, #8
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80139a4:	2101      	movs	r1, #1
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	f7ff ff3a 	bl	8013820 <tcp_abandon>
}
 80139ac:	bf00      	nop
 80139ae:	3708      	adds	r7, #8
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd80      	pop	{r7, pc}

080139b4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b084      	sub	sp, #16
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d106      	bne.n	80139d0 <tcp_update_rcv_ann_wnd+0x1c>
 80139c2:	4b25      	ldr	r3, [pc, #148]	; (8013a58 <tcp_update_rcv_ann_wnd+0xa4>)
 80139c4:	f240 32a6 	movw	r2, #934	; 0x3a6
 80139c8:	4924      	ldr	r1, [pc, #144]	; (8013a5c <tcp_update_rcv_ann_wnd+0xa8>)
 80139ca:	4825      	ldr	r0, [pc, #148]	; (8013a60 <tcp_update_rcv_ann_wnd+0xac>)
 80139cc:	f008 ff56 	bl	801c87c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139d4:	687a      	ldr	r2, [r7, #4]
 80139d6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80139d8:	4413      	add	r3, r2
 80139da:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139e0:	687a      	ldr	r2, [r7, #4]
 80139e2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80139e4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80139e8:	bf28      	it	cs
 80139ea:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80139ee:	b292      	uxth	r2, r2
 80139f0:	4413      	add	r3, r2
 80139f2:	68fa      	ldr	r2, [r7, #12]
 80139f4:	1ad3      	subs	r3, r2, r3
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	db08      	blt.n	8013a0c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a06:	68fa      	ldr	r2, [r7, #12]
 8013a08:	1ad3      	subs	r3, r2, r3
 8013a0a:	e020      	b.n	8013a4e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a14:	1ad3      	subs	r3, r2, r3
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	dd03      	ble.n	8013a22 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013a20:	e014      	b.n	8013a4c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a2a:	1ad3      	subs	r3, r2, r3
 8013a2c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8013a2e:	68bb      	ldr	r3, [r7, #8]
 8013a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013a34:	d306      	bcc.n	8013a44 <tcp_update_rcv_ann_wnd+0x90>
 8013a36:	4b08      	ldr	r3, [pc, #32]	; (8013a58 <tcp_update_rcv_ann_wnd+0xa4>)
 8013a38:	f240 32b6 	movw	r2, #950	; 0x3b6
 8013a3c:	4909      	ldr	r1, [pc, #36]	; (8013a64 <tcp_update_rcv_ann_wnd+0xb0>)
 8013a3e:	4808      	ldr	r0, [pc, #32]	; (8013a60 <tcp_update_rcv_ann_wnd+0xac>)
 8013a40:	f008 ff1c 	bl	801c87c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	b29a      	uxth	r2, r3
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8013a4c:	2300      	movs	r3, #0
  }
}
 8013a4e:	4618      	mov	r0, r3
 8013a50:	3710      	adds	r7, #16
 8013a52:	46bd      	mov	sp, r7
 8013a54:	bd80      	pop	{r7, pc}
 8013a56:	bf00      	nop
 8013a58:	0801ed58 	.word	0x0801ed58
 8013a5c:	0801efb4 	.word	0x0801efb4
 8013a60:	0801ed9c 	.word	0x0801ed9c
 8013a64:	0801efd8 	.word	0x0801efd8

08013a68 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b084      	sub	sp, #16
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
 8013a70:	460b      	mov	r3, r1
 8013a72:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d107      	bne.n	8013a8a <tcp_recved+0x22>
 8013a7a:	4b1f      	ldr	r3, [pc, #124]	; (8013af8 <tcp_recved+0x90>)
 8013a7c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8013a80:	491e      	ldr	r1, [pc, #120]	; (8013afc <tcp_recved+0x94>)
 8013a82:	481f      	ldr	r0, [pc, #124]	; (8013b00 <tcp_recved+0x98>)
 8013a84:	f008 fefa 	bl	801c87c <iprintf>
 8013a88:	e032      	b.n	8013af0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	7d1b      	ldrb	r3, [r3, #20]
 8013a8e:	2b01      	cmp	r3, #1
 8013a90:	d106      	bne.n	8013aa0 <tcp_recved+0x38>
 8013a92:	4b19      	ldr	r3, [pc, #100]	; (8013af8 <tcp_recved+0x90>)
 8013a94:	f240 32d2 	movw	r2, #978	; 0x3d2
 8013a98:	491a      	ldr	r1, [pc, #104]	; (8013b04 <tcp_recved+0x9c>)
 8013a9a:	4819      	ldr	r0, [pc, #100]	; (8013b00 <tcp_recved+0x98>)
 8013a9c:	f008 feee 	bl	801c87c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013aa4:	887b      	ldrh	r3, [r7, #2]
 8013aa6:	4413      	add	r3, r2
 8013aa8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8013aaa:	89fb      	ldrh	r3, [r7, #14]
 8013aac:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013ab0:	d804      	bhi.n	8013abc <tcp_recved+0x54>
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013ab6:	89fa      	ldrh	r2, [r7, #14]
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	d204      	bcs.n	8013ac6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013ac2:	851a      	strh	r2, [r3, #40]	; 0x28
 8013ac4:	e002      	b.n	8013acc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	89fa      	ldrh	r2, [r7, #14]
 8013aca:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013acc:	6878      	ldr	r0, [r7, #4]
 8013ace:	f7ff ff71 	bl	80139b4 <tcp_update_rcv_ann_wnd>
 8013ad2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013ad4:	68bb      	ldr	r3, [r7, #8]
 8013ad6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013ada:	d309      	bcc.n	8013af0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	8b5b      	ldrh	r3, [r3, #26]
 8013ae0:	f043 0302 	orr.w	r3, r3, #2
 8013ae4:	b29a      	uxth	r2, r3
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013aea:	6878      	ldr	r0, [r7, #4]
 8013aec:	f004 fcc6 	bl	801847c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8013af0:	3710      	adds	r7, #16
 8013af2:	46bd      	mov	sp, r7
 8013af4:	bd80      	pop	{r7, pc}
 8013af6:	bf00      	nop
 8013af8:	0801ed58 	.word	0x0801ed58
 8013afc:	0801eff4 	.word	0x0801eff4
 8013b00:	0801ed9c 	.word	0x0801ed9c
 8013b04:	0801f00c 	.word	0x0801f00c

08013b08 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8013b08:	b480      	push	{r7}
 8013b0a:	b083      	sub	sp, #12
 8013b0c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8013b0e:	2300      	movs	r3, #0
 8013b10:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8013b12:	4b1e      	ldr	r3, [pc, #120]	; (8013b8c <tcp_new_port+0x84>)
 8013b14:	881b      	ldrh	r3, [r3, #0]
 8013b16:	3301      	adds	r3, #1
 8013b18:	b29a      	uxth	r2, r3
 8013b1a:	4b1c      	ldr	r3, [pc, #112]	; (8013b8c <tcp_new_port+0x84>)
 8013b1c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8013b1e:	4b1b      	ldr	r3, [pc, #108]	; (8013b8c <tcp_new_port+0x84>)
 8013b20:	881b      	ldrh	r3, [r3, #0]
 8013b22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b26:	4293      	cmp	r3, r2
 8013b28:	d103      	bne.n	8013b32 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8013b2a:	4b18      	ldr	r3, [pc, #96]	; (8013b8c <tcp_new_port+0x84>)
 8013b2c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013b30:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013b32:	2300      	movs	r3, #0
 8013b34:	71fb      	strb	r3, [r7, #7]
 8013b36:	e01e      	b.n	8013b76 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013b38:	79fb      	ldrb	r3, [r7, #7]
 8013b3a:	4a15      	ldr	r2, [pc, #84]	; (8013b90 <tcp_new_port+0x88>)
 8013b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	603b      	str	r3, [r7, #0]
 8013b44:	e011      	b.n	8013b6a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8013b46:	683b      	ldr	r3, [r7, #0]
 8013b48:	8ada      	ldrh	r2, [r3, #22]
 8013b4a:	4b10      	ldr	r3, [pc, #64]	; (8013b8c <tcp_new_port+0x84>)
 8013b4c:	881b      	ldrh	r3, [r3, #0]
 8013b4e:	429a      	cmp	r2, r3
 8013b50:	d108      	bne.n	8013b64 <tcp_new_port+0x5c>
        n++;
 8013b52:	88bb      	ldrh	r3, [r7, #4]
 8013b54:	3301      	adds	r3, #1
 8013b56:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8013b58:	88bb      	ldrh	r3, [r7, #4]
 8013b5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013b5e:	d3d8      	bcc.n	8013b12 <tcp_new_port+0xa>
          return 0;
 8013b60:	2300      	movs	r3, #0
 8013b62:	e00d      	b.n	8013b80 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013b64:	683b      	ldr	r3, [r7, #0]
 8013b66:	68db      	ldr	r3, [r3, #12]
 8013b68:	603b      	str	r3, [r7, #0]
 8013b6a:	683b      	ldr	r3, [r7, #0]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d1ea      	bne.n	8013b46 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013b70:	79fb      	ldrb	r3, [r7, #7]
 8013b72:	3301      	adds	r3, #1
 8013b74:	71fb      	strb	r3, [r7, #7]
 8013b76:	79fb      	ldrb	r3, [r7, #7]
 8013b78:	2b03      	cmp	r3, #3
 8013b7a:	d9dd      	bls.n	8013b38 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8013b7c:	4b03      	ldr	r3, [pc, #12]	; (8013b8c <tcp_new_port+0x84>)
 8013b7e:	881b      	ldrh	r3, [r3, #0]
}
 8013b80:	4618      	mov	r0, r3
 8013b82:	370c      	adds	r7, #12
 8013b84:	46bd      	mov	sp, r7
 8013b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8a:	4770      	bx	lr
 8013b8c:	20000028 	.word	0x20000028
 8013b90:	08020dec 	.word	0x08020dec

08013b94 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b08a      	sub	sp, #40	; 0x28
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	60f8      	str	r0, [r7, #12]
 8013b9c:	60b9      	str	r1, [r7, #8]
 8013b9e:	603b      	str	r3, [r7, #0]
 8013ba0:	4613      	mov	r3, r2
 8013ba2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d109      	bne.n	8013bc2 <tcp_connect+0x2e>
 8013bae:	4b7d      	ldr	r3, [pc, #500]	; (8013da4 <tcp_connect+0x210>)
 8013bb0:	f240 4235 	movw	r2, #1077	; 0x435
 8013bb4:	497c      	ldr	r1, [pc, #496]	; (8013da8 <tcp_connect+0x214>)
 8013bb6:	487d      	ldr	r0, [pc, #500]	; (8013dac <tcp_connect+0x218>)
 8013bb8:	f008 fe60 	bl	801c87c <iprintf>
 8013bbc:	f06f 030f 	mvn.w	r3, #15
 8013bc0:	e0ec      	b.n	8013d9c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013bc2:	68bb      	ldr	r3, [r7, #8]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d109      	bne.n	8013bdc <tcp_connect+0x48>
 8013bc8:	4b76      	ldr	r3, [pc, #472]	; (8013da4 <tcp_connect+0x210>)
 8013bca:	f240 4236 	movw	r2, #1078	; 0x436
 8013bce:	4978      	ldr	r1, [pc, #480]	; (8013db0 <tcp_connect+0x21c>)
 8013bd0:	4876      	ldr	r0, [pc, #472]	; (8013dac <tcp_connect+0x218>)
 8013bd2:	f008 fe53 	bl	801c87c <iprintf>
 8013bd6:	f06f 030f 	mvn.w	r3, #15
 8013bda:	e0df      	b.n	8013d9c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	7d1b      	ldrb	r3, [r3, #20]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d009      	beq.n	8013bf8 <tcp_connect+0x64>
 8013be4:	4b6f      	ldr	r3, [pc, #444]	; (8013da4 <tcp_connect+0x210>)
 8013be6:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8013bea:	4972      	ldr	r1, [pc, #456]	; (8013db4 <tcp_connect+0x220>)
 8013bec:	486f      	ldr	r0, [pc, #444]	; (8013dac <tcp_connect+0x218>)
 8013bee:	f008 fe45 	bl	801c87c <iprintf>
 8013bf2:	f06f 0309 	mvn.w	r3, #9
 8013bf6:	e0d1      	b.n	8013d9c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8013bf8:	68bb      	ldr	r3, [r7, #8]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d002      	beq.n	8013c04 <tcp_connect+0x70>
 8013bfe:	68bb      	ldr	r3, [r7, #8]
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	e000      	b.n	8013c06 <tcp_connect+0x72>
 8013c04:	2300      	movs	r3, #0
 8013c06:	68fa      	ldr	r2, [r7, #12]
 8013c08:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	88fa      	ldrh	r2, [r7, #6]
 8013c0e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	7a1b      	ldrb	r3, [r3, #8]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d006      	beq.n	8013c26 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	7a1b      	ldrb	r3, [r3, #8]
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f7fe fd3f 	bl	80126a0 <netif_get_by_index>
 8013c22:	6278      	str	r0, [r7, #36]	; 0x24
 8013c24:	e005      	b.n	8013c32 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	3304      	adds	r3, #4
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f007 f984 	bl	801af38 <ip4_route>
 8013c30:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8013c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d102      	bne.n	8013c3e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8013c38:	f06f 0303 	mvn.w	r3, #3
 8013c3c:	e0ae      	b.n	8013d9c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d003      	beq.n	8013c4c <tcp_connect+0xb8>
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d111      	bne.n	8013c70 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8013c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d002      	beq.n	8013c58 <tcp_connect+0xc4>
 8013c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c54:	3304      	adds	r3, #4
 8013c56:	e000      	b.n	8013c5a <tcp_connect+0xc6>
 8013c58:	2300      	movs	r3, #0
 8013c5a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8013c5c:	69fb      	ldr	r3, [r7, #28]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d102      	bne.n	8013c68 <tcp_connect+0xd4>
      return ERR_RTE;
 8013c62:	f06f 0303 	mvn.w	r3, #3
 8013c66:	e099      	b.n	8013d9c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013c68:	69fb      	ldr	r3, [r7, #28]
 8013c6a:	681a      	ldr	r2, [r3, #0]
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	8adb      	ldrh	r3, [r3, #22]
 8013c74:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	8adb      	ldrh	r3, [r3, #22]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d10c      	bne.n	8013c98 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8013c7e:	f7ff ff43 	bl	8013b08 <tcp_new_port>
 8013c82:	4603      	mov	r3, r0
 8013c84:	461a      	mov	r2, r3
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	8adb      	ldrh	r3, [r3, #22]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d102      	bne.n	8013c98 <tcp_connect+0x104>
      return ERR_BUF;
 8013c92:	f06f 0301 	mvn.w	r3, #1
 8013c96:	e081      	b.n	8013d9c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8013c98:	68f8      	ldr	r0, [r7, #12]
 8013c9a:	f001 f867 	bl	8014d6c <tcp_next_iss>
 8013c9e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	697a      	ldr	r2, [r7, #20]
 8013caa:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8013cac:	697b      	ldr	r3, [r7, #20]
 8013cae:	1e5a      	subs	r2, r3, #1
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8013cb4:	697b      	ldr	r3, [r7, #20]
 8013cb6:	1e5a      	subs	r2, r3, #1
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8013cbc:	697b      	ldr	r3, [r7, #20]
 8013cbe:	1e5a      	subs	r2, r3, #1
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013cca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013ce2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013cec:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	3304      	adds	r3, #4
 8013cf6:	461a      	mov	r2, r3
 8013cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013cfa:	f001 f85d 	bl	8014db8 <tcp_eff_send_mss_netif>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	461a      	mov	r2, r3
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	2201      	movs	r2, #1
 8013d0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	683a      	ldr	r2, [r7, #0]
 8013d12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8013d16:	2102      	movs	r1, #2
 8013d18:	68f8      	ldr	r0, [r7, #12]
 8013d1a:	f004 fac1 	bl	80182a0 <tcp_enqueue_flags>
 8013d1e:	4603      	mov	r3, r0
 8013d20:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8013d22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d136      	bne.n	8013d98 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	2202      	movs	r2, #2
 8013d2e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8013d30:	8b7b      	ldrh	r3, [r7, #26]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d021      	beq.n	8013d7a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8013d36:	4b20      	ldr	r3, [pc, #128]	; (8013db8 <tcp_connect+0x224>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	68fa      	ldr	r2, [r7, #12]
 8013d3c:	429a      	cmp	r2, r3
 8013d3e:	d105      	bne.n	8013d4c <tcp_connect+0x1b8>
 8013d40:	4b1d      	ldr	r3, [pc, #116]	; (8013db8 <tcp_connect+0x224>)
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	68db      	ldr	r3, [r3, #12]
 8013d46:	4a1c      	ldr	r2, [pc, #112]	; (8013db8 <tcp_connect+0x224>)
 8013d48:	6013      	str	r3, [r2, #0]
 8013d4a:	e013      	b.n	8013d74 <tcp_connect+0x1e0>
 8013d4c:	4b1a      	ldr	r3, [pc, #104]	; (8013db8 <tcp_connect+0x224>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	623b      	str	r3, [r7, #32]
 8013d52:	e00c      	b.n	8013d6e <tcp_connect+0x1da>
 8013d54:	6a3b      	ldr	r3, [r7, #32]
 8013d56:	68db      	ldr	r3, [r3, #12]
 8013d58:	68fa      	ldr	r2, [r7, #12]
 8013d5a:	429a      	cmp	r2, r3
 8013d5c:	d104      	bne.n	8013d68 <tcp_connect+0x1d4>
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	68da      	ldr	r2, [r3, #12]
 8013d62:	6a3b      	ldr	r3, [r7, #32]
 8013d64:	60da      	str	r2, [r3, #12]
 8013d66:	e005      	b.n	8013d74 <tcp_connect+0x1e0>
 8013d68:	6a3b      	ldr	r3, [r7, #32]
 8013d6a:	68db      	ldr	r3, [r3, #12]
 8013d6c:	623b      	str	r3, [r7, #32]
 8013d6e:	6a3b      	ldr	r3, [r7, #32]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d1ef      	bne.n	8013d54 <tcp_connect+0x1c0>
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	2200      	movs	r2, #0
 8013d78:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8013d7a:	4b10      	ldr	r3, [pc, #64]	; (8013dbc <tcp_connect+0x228>)
 8013d7c:	681a      	ldr	r2, [r3, #0]
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	60da      	str	r2, [r3, #12]
 8013d82:	4a0e      	ldr	r2, [pc, #56]	; (8013dbc <tcp_connect+0x228>)
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	6013      	str	r3, [r2, #0]
 8013d88:	f005 faee 	bl	8019368 <tcp_timer_needed>
 8013d8c:	4b0c      	ldr	r3, [pc, #48]	; (8013dc0 <tcp_connect+0x22c>)
 8013d8e:	2201      	movs	r2, #1
 8013d90:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8013d92:	68f8      	ldr	r0, [r7, #12]
 8013d94:	f004 fb72 	bl	801847c <tcp_output>
  }
  return ret;
 8013d98:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	3728      	adds	r7, #40	; 0x28
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}
 8013da4:	0801ed58 	.word	0x0801ed58
 8013da8:	0801f034 	.word	0x0801f034
 8013dac:	0801ed9c 	.word	0x0801ed9c
 8013db0:	0801f050 	.word	0x0801f050
 8013db4:	0801f06c 	.word	0x0801f06c
 8013db8:	200113ac 	.word	0x200113ac
 8013dbc:	200113b4 	.word	0x200113b4
 8013dc0:	200113bc 	.word	0x200113bc

08013dc4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8013dc4:	b5b0      	push	{r4, r5, r7, lr}
 8013dc6:	b090      	sub	sp, #64	; 0x40
 8013dc8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8013dca:	2300      	movs	r3, #0
 8013dcc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8013dd0:	4b94      	ldr	r3, [pc, #592]	; (8014024 <tcp_slowtmr+0x260>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	3301      	adds	r3, #1
 8013dd6:	4a93      	ldr	r2, [pc, #588]	; (8014024 <tcp_slowtmr+0x260>)
 8013dd8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8013dda:	4b93      	ldr	r3, [pc, #588]	; (8014028 <tcp_slowtmr+0x264>)
 8013ddc:	781b      	ldrb	r3, [r3, #0]
 8013dde:	3301      	adds	r3, #1
 8013de0:	b2da      	uxtb	r2, r3
 8013de2:	4b91      	ldr	r3, [pc, #580]	; (8014028 <tcp_slowtmr+0x264>)
 8013de4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8013de6:	2300      	movs	r3, #0
 8013de8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8013dea:	4b90      	ldr	r3, [pc, #576]	; (801402c <tcp_slowtmr+0x268>)
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8013df0:	e29f      	b.n	8014332 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013df4:	7d1b      	ldrb	r3, [r3, #20]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d106      	bne.n	8013e08 <tcp_slowtmr+0x44>
 8013dfa:	4b8d      	ldr	r3, [pc, #564]	; (8014030 <tcp_slowtmr+0x26c>)
 8013dfc:	f240 42be 	movw	r2, #1214	; 0x4be
 8013e00:	498c      	ldr	r1, [pc, #560]	; (8014034 <tcp_slowtmr+0x270>)
 8013e02:	488d      	ldr	r0, [pc, #564]	; (8014038 <tcp_slowtmr+0x274>)
 8013e04:	f008 fd3a 	bl	801c87c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e0a:	7d1b      	ldrb	r3, [r3, #20]
 8013e0c:	2b01      	cmp	r3, #1
 8013e0e:	d106      	bne.n	8013e1e <tcp_slowtmr+0x5a>
 8013e10:	4b87      	ldr	r3, [pc, #540]	; (8014030 <tcp_slowtmr+0x26c>)
 8013e12:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8013e16:	4989      	ldr	r1, [pc, #548]	; (801403c <tcp_slowtmr+0x278>)
 8013e18:	4887      	ldr	r0, [pc, #540]	; (8014038 <tcp_slowtmr+0x274>)
 8013e1a:	f008 fd2f 	bl	801c87c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8013e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e20:	7d1b      	ldrb	r3, [r3, #20]
 8013e22:	2b0a      	cmp	r3, #10
 8013e24:	d106      	bne.n	8013e34 <tcp_slowtmr+0x70>
 8013e26:	4b82      	ldr	r3, [pc, #520]	; (8014030 <tcp_slowtmr+0x26c>)
 8013e28:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8013e2c:	4984      	ldr	r1, [pc, #528]	; (8014040 <tcp_slowtmr+0x27c>)
 8013e2e:	4882      	ldr	r0, [pc, #520]	; (8014038 <tcp_slowtmr+0x274>)
 8013e30:	f008 fd24 	bl	801c87c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e36:	7f9a      	ldrb	r2, [r3, #30]
 8013e38:	4b7b      	ldr	r3, [pc, #492]	; (8014028 <tcp_slowtmr+0x264>)
 8013e3a:	781b      	ldrb	r3, [r3, #0]
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	d105      	bne.n	8013e4c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8013e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e42:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e46:	68db      	ldr	r3, [r3, #12]
 8013e48:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8013e4a:	e272      	b.n	8014332 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8013e4c:	4b76      	ldr	r3, [pc, #472]	; (8014028 <tcp_slowtmr+0x264>)
 8013e4e:	781a      	ldrb	r2, [r3, #0]
 8013e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e52:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8013e54:	2300      	movs	r3, #0
 8013e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8013e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e62:	7d1b      	ldrb	r3, [r3, #20]
 8013e64:	2b02      	cmp	r3, #2
 8013e66:	d10a      	bne.n	8013e7e <tcp_slowtmr+0xba>
 8013e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013e6e:	2b05      	cmp	r3, #5
 8013e70:	d905      	bls.n	8013e7e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8013e72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e76:	3301      	adds	r3, #1
 8013e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013e7c:	e11e      	b.n	80140bc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8013e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013e84:	2b0b      	cmp	r3, #11
 8013e86:	d905      	bls.n	8013e94 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8013e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e8c:	3301      	adds	r3, #1
 8013e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013e92:	e113      	b.n	80140bc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8013e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e96:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d075      	beq.n	8013f8a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8013e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d006      	beq.n	8013eb4 <tcp_slowtmr+0xf0>
 8013ea6:	4b62      	ldr	r3, [pc, #392]	; (8014030 <tcp_slowtmr+0x26c>)
 8013ea8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8013eac:	4965      	ldr	r1, [pc, #404]	; (8014044 <tcp_slowtmr+0x280>)
 8013eae:	4862      	ldr	r0, [pc, #392]	; (8014038 <tcp_slowtmr+0x274>)
 8013eb0:	f008 fce4 	bl	801c87c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d106      	bne.n	8013eca <tcp_slowtmr+0x106>
 8013ebc:	4b5c      	ldr	r3, [pc, #368]	; (8014030 <tcp_slowtmr+0x26c>)
 8013ebe:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8013ec2:	4961      	ldr	r1, [pc, #388]	; (8014048 <tcp_slowtmr+0x284>)
 8013ec4:	485c      	ldr	r0, [pc, #368]	; (8014038 <tcp_slowtmr+0x274>)
 8013ec6:	f008 fcd9 	bl	801c87c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8013eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ecc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013ed0:	2b0b      	cmp	r3, #11
 8013ed2:	d905      	bls.n	8013ee0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8013ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ed8:	3301      	adds	r3, #1
 8013eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013ede:	e0ed      	b.n	80140bc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013ee6:	3b01      	subs	r3, #1
 8013ee8:	4a58      	ldr	r2, [pc, #352]	; (801404c <tcp_slowtmr+0x288>)
 8013eea:	5cd3      	ldrb	r3, [r2, r3]
 8013eec:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8013eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ef0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013ef4:	7c7a      	ldrb	r2, [r7, #17]
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	d907      	bls.n	8013f0a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8013efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013efc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013f00:	3301      	adds	r3, #1
 8013f02:	b2da      	uxtb	r2, r3
 8013f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f06:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8013f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f0c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013f10:	7c7a      	ldrb	r2, [r7, #17]
 8013f12:	429a      	cmp	r2, r3
 8013f14:	f200 80d2 	bhi.w	80140bc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8013f18:	2301      	movs	r3, #1
 8013f1a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8013f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d108      	bne.n	8013f38 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013f26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f28:	f005 f950 	bl	80191cc <tcp_zero_window_probe>
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d014      	beq.n	8013f5c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8013f32:	2300      	movs	r3, #0
 8013f34:	623b      	str	r3, [r7, #32]
 8013f36:	e011      	b.n	8013f5c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013f3e:	4619      	mov	r1, r3
 8013f40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f42:	f004 f815 	bl	8017f70 <tcp_split_unsent_seg>
 8013f46:	4603      	mov	r3, r0
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d107      	bne.n	8013f5c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8013f4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f4e:	f004 fa95 	bl	801847c <tcp_output>
 8013f52:	4603      	mov	r3, r0
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d101      	bne.n	8013f5c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8013f58:	2300      	movs	r3, #0
 8013f5a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8013f5c:	6a3b      	ldr	r3, [r7, #32]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	f000 80ac 	beq.w	80140bc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8013f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f66:	2200      	movs	r2, #0
 8013f68:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8013f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f6e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013f72:	2b06      	cmp	r3, #6
 8013f74:	f200 80a2 	bhi.w	80140bc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8013f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f7a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013f7e:	3301      	adds	r3, #1
 8013f80:	b2da      	uxtb	r2, r3
 8013f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f84:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8013f88:	e098      	b.n	80140bc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8013f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f8c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	db0f      	blt.n	8013fb4 <tcp_slowtmr+0x1f0>
 8013f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f96:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013f9a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013f9e:	4293      	cmp	r3, r2
 8013fa0:	d008      	beq.n	8013fb4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8013fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013fa8:	b29b      	uxth	r3, r3
 8013faa:	3301      	adds	r3, #1
 8013fac:	b29b      	uxth	r3, r3
 8013fae:	b21a      	sxth	r2, r3
 8013fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fb2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8013fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fb6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8013fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fbc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013fc0:	429a      	cmp	r2, r3
 8013fc2:	db7b      	blt.n	80140bc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8013fc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013fc6:	f004 fd4d 	bl	8018a64 <tcp_rexmit_rto_prepare>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d007      	beq.n	8013fe0 <tcp_slowtmr+0x21c>
 8013fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d171      	bne.n	80140bc <tcp_slowtmr+0x2f8>
 8013fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d06d      	beq.n	80140bc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8013fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fe2:	7d1b      	ldrb	r3, [r3, #20]
 8013fe4:	2b02      	cmp	r3, #2
 8013fe6:	d03a      	beq.n	801405e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8013fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013fee:	2b0c      	cmp	r3, #12
 8013ff0:	bf28      	it	cs
 8013ff2:	230c      	movcs	r3, #12
 8013ff4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8013ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013ffc:	10db      	asrs	r3, r3, #3
 8013ffe:	b21b      	sxth	r3, r3
 8014000:	461a      	mov	r2, r3
 8014002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014004:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014008:	4413      	add	r3, r2
 801400a:	7efa      	ldrb	r2, [r7, #27]
 801400c:	4910      	ldr	r1, [pc, #64]	; (8014050 <tcp_slowtmr+0x28c>)
 801400e:	5c8a      	ldrb	r2, [r1, r2]
 8014010:	4093      	lsls	r3, r2
 8014012:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8014014:	697b      	ldr	r3, [r7, #20]
 8014016:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801401a:	4293      	cmp	r3, r2
 801401c:	dc1a      	bgt.n	8014054 <tcp_slowtmr+0x290>
 801401e:	697b      	ldr	r3, [r7, #20]
 8014020:	b21a      	sxth	r2, r3
 8014022:	e019      	b.n	8014058 <tcp_slowtmr+0x294>
 8014024:	200113a8 	.word	0x200113a8
 8014028:	200113be 	.word	0x200113be
 801402c:	200113b4 	.word	0x200113b4
 8014030:	0801ed58 	.word	0x0801ed58
 8014034:	0801f09c 	.word	0x0801f09c
 8014038:	0801ed9c 	.word	0x0801ed9c
 801403c:	0801f0c8 	.word	0x0801f0c8
 8014040:	0801f0f4 	.word	0x0801f0f4
 8014044:	0801f124 	.word	0x0801f124
 8014048:	0801f158 	.word	0x0801f158
 801404c:	08020de4 	.word	0x08020de4
 8014050:	08020dd4 	.word	0x08020dd4
 8014054:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801405a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801405e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014060:	2200      	movs	r2, #0
 8014062:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8014064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014066:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801406c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014070:	4293      	cmp	r3, r2
 8014072:	bf28      	it	cs
 8014074:	4613      	movcs	r3, r2
 8014076:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8014078:	8a7b      	ldrh	r3, [r7, #18]
 801407a:	085b      	lsrs	r3, r3, #1
 801407c:	b29a      	uxth	r2, r3
 801407e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014080:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8014084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014086:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801408a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801408c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801408e:	005b      	lsls	r3, r3, #1
 8014090:	b29b      	uxth	r3, r3
 8014092:	429a      	cmp	r2, r3
 8014094:	d206      	bcs.n	80140a4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8014096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014098:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801409a:	005b      	lsls	r3, r3, #1
 801409c:	b29a      	uxth	r2, r3
 801409e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80140a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80140a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80140ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140b0:	2200      	movs	r2, #0
 80140b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80140b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80140b8:	f004 fd44 	bl	8018b44 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80140bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140be:	7d1b      	ldrb	r3, [r3, #20]
 80140c0:	2b06      	cmp	r3, #6
 80140c2:	d111      	bne.n	80140e8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80140c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140c6:	8b5b      	ldrh	r3, [r3, #26]
 80140c8:	f003 0310 	and.w	r3, r3, #16
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d00b      	beq.n	80140e8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80140d0:	4b9d      	ldr	r3, [pc, #628]	; (8014348 <tcp_slowtmr+0x584>)
 80140d2:	681a      	ldr	r2, [r3, #0]
 80140d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140d6:	6a1b      	ldr	r3, [r3, #32]
 80140d8:	1ad3      	subs	r3, r2, r3
 80140da:	2b28      	cmp	r3, #40	; 0x28
 80140dc:	d904      	bls.n	80140e8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80140de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140e2:	3301      	adds	r3, #1
 80140e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80140e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ea:	7a5b      	ldrb	r3, [r3, #9]
 80140ec:	f003 0308 	and.w	r3, r3, #8
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d04c      	beq.n	801418e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80140f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140f6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80140f8:	2b04      	cmp	r3, #4
 80140fa:	d003      	beq.n	8014104 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80140fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140fe:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8014100:	2b07      	cmp	r3, #7
 8014102:	d144      	bne.n	801418e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014104:	4b90      	ldr	r3, [pc, #576]	; (8014348 <tcp_slowtmr+0x584>)
 8014106:	681a      	ldr	r2, [r3, #0]
 8014108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801410a:	6a1b      	ldr	r3, [r3, #32]
 801410c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801410e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014114:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8014118:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801411c:	498b      	ldr	r1, [pc, #556]	; (801434c <tcp_slowtmr+0x588>)
 801411e:	fba1 1303 	umull	r1, r3, r1, r3
 8014122:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014124:	429a      	cmp	r2, r3
 8014126:	d90a      	bls.n	801413e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8014128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801412c:	3301      	adds	r3, #1
 801412e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8014132:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014136:	3301      	adds	r3, #1
 8014138:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801413c:	e027      	b.n	801418e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801413e:	4b82      	ldr	r3, [pc, #520]	; (8014348 <tcp_slowtmr+0x584>)
 8014140:	681a      	ldr	r2, [r3, #0]
 8014142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014144:	6a1b      	ldr	r3, [r3, #32]
 8014146:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8014148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801414a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801414e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014150:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8014154:	4618      	mov	r0, r3
 8014156:	4b7e      	ldr	r3, [pc, #504]	; (8014350 <tcp_slowtmr+0x58c>)
 8014158:	fb00 f303 	mul.w	r3, r0, r3
 801415c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801415e:	497b      	ldr	r1, [pc, #492]	; (801434c <tcp_slowtmr+0x588>)
 8014160:	fba1 1303 	umull	r1, r3, r1, r3
 8014164:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014166:	429a      	cmp	r2, r3
 8014168:	d911      	bls.n	801418e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801416a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801416c:	f004 ffee 	bl	801914c <tcp_keepalive>
 8014170:	4603      	mov	r3, r0
 8014172:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8014176:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801417a:	2b00      	cmp	r3, #0
 801417c:	d107      	bne.n	801418e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801417e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014180:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8014184:	3301      	adds	r3, #1
 8014186:	b2da      	uxtb	r2, r3
 8014188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801418a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801418e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014192:	2b00      	cmp	r3, #0
 8014194:	d011      	beq.n	80141ba <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8014196:	4b6c      	ldr	r3, [pc, #432]	; (8014348 <tcp_slowtmr+0x584>)
 8014198:	681a      	ldr	r2, [r3, #0]
 801419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801419c:	6a1b      	ldr	r3, [r3, #32]
 801419e:	1ad2      	subs	r2, r2, r3
 80141a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141a2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80141a6:	4619      	mov	r1, r3
 80141a8:	460b      	mov	r3, r1
 80141aa:	005b      	lsls	r3, r3, #1
 80141ac:	440b      	add	r3, r1
 80141ae:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80141b0:	429a      	cmp	r2, r3
 80141b2:	d302      	bcc.n	80141ba <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80141b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80141b6:	f000 fea9 	bl	8014f0c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80141ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141bc:	7d1b      	ldrb	r3, [r3, #20]
 80141be:	2b03      	cmp	r3, #3
 80141c0:	d10b      	bne.n	80141da <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80141c2:	4b61      	ldr	r3, [pc, #388]	; (8014348 <tcp_slowtmr+0x584>)
 80141c4:	681a      	ldr	r2, [r3, #0]
 80141c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141c8:	6a1b      	ldr	r3, [r3, #32]
 80141ca:	1ad3      	subs	r3, r2, r3
 80141cc:	2b28      	cmp	r3, #40	; 0x28
 80141ce:	d904      	bls.n	80141da <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80141d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141d4:	3301      	adds	r3, #1
 80141d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80141da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141dc:	7d1b      	ldrb	r3, [r3, #20]
 80141de:	2b09      	cmp	r3, #9
 80141e0:	d10b      	bne.n	80141fa <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80141e2:	4b59      	ldr	r3, [pc, #356]	; (8014348 <tcp_slowtmr+0x584>)
 80141e4:	681a      	ldr	r2, [r3, #0]
 80141e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141e8:	6a1b      	ldr	r3, [r3, #32]
 80141ea:	1ad3      	subs	r3, r2, r3
 80141ec:	2bf0      	cmp	r3, #240	; 0xf0
 80141ee:	d904      	bls.n	80141fa <tcp_slowtmr+0x436>
        ++pcb_remove;
 80141f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141f4:	3301      	adds	r3, #1
 80141f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80141fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d060      	beq.n	80142c4 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8014202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014208:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801420a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801420c:	f000 fcca 	bl	8014ba4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8014210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014212:	2b00      	cmp	r3, #0
 8014214:	d010      	beq.n	8014238 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8014216:	4b4f      	ldr	r3, [pc, #316]	; (8014354 <tcp_slowtmr+0x590>)
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801421c:	429a      	cmp	r2, r3
 801421e:	d106      	bne.n	801422e <tcp_slowtmr+0x46a>
 8014220:	4b4d      	ldr	r3, [pc, #308]	; (8014358 <tcp_slowtmr+0x594>)
 8014222:	f240 526d 	movw	r2, #1389	; 0x56d
 8014226:	494d      	ldr	r1, [pc, #308]	; (801435c <tcp_slowtmr+0x598>)
 8014228:	484d      	ldr	r0, [pc, #308]	; (8014360 <tcp_slowtmr+0x59c>)
 801422a:	f008 fb27 	bl	801c87c <iprintf>
        prev->next = pcb->next;
 801422e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014230:	68da      	ldr	r2, [r3, #12]
 8014232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014234:	60da      	str	r2, [r3, #12]
 8014236:	e00f      	b.n	8014258 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8014238:	4b46      	ldr	r3, [pc, #280]	; (8014354 <tcp_slowtmr+0x590>)
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801423e:	429a      	cmp	r2, r3
 8014240:	d006      	beq.n	8014250 <tcp_slowtmr+0x48c>
 8014242:	4b45      	ldr	r3, [pc, #276]	; (8014358 <tcp_slowtmr+0x594>)
 8014244:	f240 5271 	movw	r2, #1393	; 0x571
 8014248:	4946      	ldr	r1, [pc, #280]	; (8014364 <tcp_slowtmr+0x5a0>)
 801424a:	4845      	ldr	r0, [pc, #276]	; (8014360 <tcp_slowtmr+0x59c>)
 801424c:	f008 fb16 	bl	801c87c <iprintf>
        tcp_active_pcbs = pcb->next;
 8014250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014252:	68db      	ldr	r3, [r3, #12]
 8014254:	4a3f      	ldr	r2, [pc, #252]	; (8014354 <tcp_slowtmr+0x590>)
 8014256:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8014258:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801425c:	2b00      	cmp	r3, #0
 801425e:	d013      	beq.n	8014288 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014262:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014266:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014268:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801426c:	3304      	adds	r3, #4
 801426e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014270:	8ad2      	ldrh	r2, [r2, #22]
 8014272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014274:	8b09      	ldrh	r1, [r1, #24]
 8014276:	9102      	str	r1, [sp, #8]
 8014278:	9201      	str	r2, [sp, #4]
 801427a:	9300      	str	r3, [sp, #0]
 801427c:	462b      	mov	r3, r5
 801427e:	4622      	mov	r2, r4
 8014280:	4601      	mov	r1, r0
 8014282:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014284:	f004 feae 	bl	8018fe4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8014288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801428a:	691b      	ldr	r3, [r3, #16]
 801428c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801428e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014290:	7d1b      	ldrb	r3, [r3, #20]
 8014292:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8014294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014296:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8014298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801429a:	68db      	ldr	r3, [r3, #12]
 801429c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801429e:	6838      	ldr	r0, [r7, #0]
 80142a0:	f7ff f838 	bl	8013314 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80142a4:	4b30      	ldr	r3, [pc, #192]	; (8014368 <tcp_slowtmr+0x5a4>)
 80142a6:	2200      	movs	r2, #0
 80142a8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d004      	beq.n	80142ba <tcp_slowtmr+0x4f6>
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	f06f 010c 	mvn.w	r1, #12
 80142b6:	68b8      	ldr	r0, [r7, #8]
 80142b8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80142ba:	4b2b      	ldr	r3, [pc, #172]	; (8014368 <tcp_slowtmr+0x5a4>)
 80142bc:	781b      	ldrb	r3, [r3, #0]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d037      	beq.n	8014332 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80142c2:	e590      	b.n	8013de6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80142c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142c6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80142c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ca:	68db      	ldr	r3, [r3, #12]
 80142cc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80142ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142d0:	7f1b      	ldrb	r3, [r3, #28]
 80142d2:	3301      	adds	r3, #1
 80142d4:	b2da      	uxtb	r2, r3
 80142d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142d8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80142da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142dc:	7f1a      	ldrb	r2, [r3, #28]
 80142de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142e0:	7f5b      	ldrb	r3, [r3, #29]
 80142e2:	429a      	cmp	r2, r3
 80142e4:	d325      	bcc.n	8014332 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80142e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142e8:	2200      	movs	r2, #0
 80142ea:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80142ec:	4b1e      	ldr	r3, [pc, #120]	; (8014368 <tcp_slowtmr+0x5a4>)
 80142ee:	2200      	movs	r2, #0
 80142f0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80142f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d00b      	beq.n	8014314 <tcp_slowtmr+0x550>
 80142fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014304:	6912      	ldr	r2, [r2, #16]
 8014306:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014308:	4610      	mov	r0, r2
 801430a:	4798      	blx	r3
 801430c:	4603      	mov	r3, r0
 801430e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8014312:	e002      	b.n	801431a <tcp_slowtmr+0x556>
 8014314:	2300      	movs	r3, #0
 8014316:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801431a:	4b13      	ldr	r3, [pc, #76]	; (8014368 <tcp_slowtmr+0x5a4>)
 801431c:	781b      	ldrb	r3, [r3, #0]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d000      	beq.n	8014324 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8014322:	e560      	b.n	8013de6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8014324:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014328:	2b00      	cmp	r3, #0
 801432a:	d102      	bne.n	8014332 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801432c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801432e:	f004 f8a5 	bl	801847c <tcp_output>
  while (pcb != NULL) {
 8014332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014334:	2b00      	cmp	r3, #0
 8014336:	f47f ad5c 	bne.w	8013df2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801433a:	2300      	movs	r3, #0
 801433c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801433e:	4b0b      	ldr	r3, [pc, #44]	; (801436c <tcp_slowtmr+0x5a8>)
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8014344:	e067      	b.n	8014416 <tcp_slowtmr+0x652>
 8014346:	bf00      	nop
 8014348:	200113a8 	.word	0x200113a8
 801434c:	10624dd3 	.word	0x10624dd3
 8014350:	000124f8 	.word	0x000124f8
 8014354:	200113b4 	.word	0x200113b4
 8014358:	0801ed58 	.word	0x0801ed58
 801435c:	0801f190 	.word	0x0801f190
 8014360:	0801ed9c 	.word	0x0801ed9c
 8014364:	0801f1bc 	.word	0x0801f1bc
 8014368:	200113bc 	.word	0x200113bc
 801436c:	200113b8 	.word	0x200113b8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014372:	7d1b      	ldrb	r3, [r3, #20]
 8014374:	2b0a      	cmp	r3, #10
 8014376:	d006      	beq.n	8014386 <tcp_slowtmr+0x5c2>
 8014378:	4b2b      	ldr	r3, [pc, #172]	; (8014428 <tcp_slowtmr+0x664>)
 801437a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801437e:	492b      	ldr	r1, [pc, #172]	; (801442c <tcp_slowtmr+0x668>)
 8014380:	482b      	ldr	r0, [pc, #172]	; (8014430 <tcp_slowtmr+0x66c>)
 8014382:	f008 fa7b 	bl	801c87c <iprintf>
    pcb_remove = 0;
 8014386:	2300      	movs	r3, #0
 8014388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801438c:	4b29      	ldr	r3, [pc, #164]	; (8014434 <tcp_slowtmr+0x670>)
 801438e:	681a      	ldr	r2, [r3, #0]
 8014390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014392:	6a1b      	ldr	r3, [r3, #32]
 8014394:	1ad3      	subs	r3, r2, r3
 8014396:	2bf0      	cmp	r3, #240	; 0xf0
 8014398:	d904      	bls.n	80143a4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801439a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801439e:	3301      	adds	r3, #1
 80143a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80143a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d02f      	beq.n	801440c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80143ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80143ae:	f000 fbf9 	bl	8014ba4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80143b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d010      	beq.n	80143da <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80143b8:	4b1f      	ldr	r3, [pc, #124]	; (8014438 <tcp_slowtmr+0x674>)
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80143be:	429a      	cmp	r2, r3
 80143c0:	d106      	bne.n	80143d0 <tcp_slowtmr+0x60c>
 80143c2:	4b19      	ldr	r3, [pc, #100]	; (8014428 <tcp_slowtmr+0x664>)
 80143c4:	f240 52af 	movw	r2, #1455	; 0x5af
 80143c8:	491c      	ldr	r1, [pc, #112]	; (801443c <tcp_slowtmr+0x678>)
 80143ca:	4819      	ldr	r0, [pc, #100]	; (8014430 <tcp_slowtmr+0x66c>)
 80143cc:	f008 fa56 	bl	801c87c <iprintf>
        prev->next = pcb->next;
 80143d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d2:	68da      	ldr	r2, [r3, #12]
 80143d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143d6:	60da      	str	r2, [r3, #12]
 80143d8:	e00f      	b.n	80143fa <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80143da:	4b17      	ldr	r3, [pc, #92]	; (8014438 <tcp_slowtmr+0x674>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80143e0:	429a      	cmp	r2, r3
 80143e2:	d006      	beq.n	80143f2 <tcp_slowtmr+0x62e>
 80143e4:	4b10      	ldr	r3, [pc, #64]	; (8014428 <tcp_slowtmr+0x664>)
 80143e6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80143ea:	4915      	ldr	r1, [pc, #84]	; (8014440 <tcp_slowtmr+0x67c>)
 80143ec:	4810      	ldr	r0, [pc, #64]	; (8014430 <tcp_slowtmr+0x66c>)
 80143ee:	f008 fa45 	bl	801c87c <iprintf>
        tcp_tw_pcbs = pcb->next;
 80143f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143f4:	68db      	ldr	r3, [r3, #12]
 80143f6:	4a10      	ldr	r2, [pc, #64]	; (8014438 <tcp_slowtmr+0x674>)
 80143f8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80143fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143fc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80143fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014400:	68db      	ldr	r3, [r3, #12]
 8014402:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8014404:	69f8      	ldr	r0, [r7, #28]
 8014406:	f7fe ff85 	bl	8013314 <tcp_free>
 801440a:	e004      	b.n	8014416 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801440c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801440e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014412:	68db      	ldr	r3, [r3, #12]
 8014414:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8014416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014418:	2b00      	cmp	r3, #0
 801441a:	d1a9      	bne.n	8014370 <tcp_slowtmr+0x5ac>
    }
  }
}
 801441c:	bf00      	nop
 801441e:	bf00      	nop
 8014420:	3730      	adds	r7, #48	; 0x30
 8014422:	46bd      	mov	sp, r7
 8014424:	bdb0      	pop	{r4, r5, r7, pc}
 8014426:	bf00      	nop
 8014428:	0801ed58 	.word	0x0801ed58
 801442c:	0801f1e8 	.word	0x0801f1e8
 8014430:	0801ed9c 	.word	0x0801ed9c
 8014434:	200113a8 	.word	0x200113a8
 8014438:	200113b8 	.word	0x200113b8
 801443c:	0801f218 	.word	0x0801f218
 8014440:	0801f240 	.word	0x0801f240

08014444 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b082      	sub	sp, #8
 8014448:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801444a:	4b2d      	ldr	r3, [pc, #180]	; (8014500 <tcp_fasttmr+0xbc>)
 801444c:	781b      	ldrb	r3, [r3, #0]
 801444e:	3301      	adds	r3, #1
 8014450:	b2da      	uxtb	r2, r3
 8014452:	4b2b      	ldr	r3, [pc, #172]	; (8014500 <tcp_fasttmr+0xbc>)
 8014454:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8014456:	4b2b      	ldr	r3, [pc, #172]	; (8014504 <tcp_fasttmr+0xc0>)
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801445c:	e048      	b.n	80144f0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	7f9a      	ldrb	r2, [r3, #30]
 8014462:	4b27      	ldr	r3, [pc, #156]	; (8014500 <tcp_fasttmr+0xbc>)
 8014464:	781b      	ldrb	r3, [r3, #0]
 8014466:	429a      	cmp	r2, r3
 8014468:	d03f      	beq.n	80144ea <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801446a:	4b25      	ldr	r3, [pc, #148]	; (8014500 <tcp_fasttmr+0xbc>)
 801446c:	781a      	ldrb	r2, [r3, #0]
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	8b5b      	ldrh	r3, [r3, #26]
 8014476:	f003 0301 	and.w	r3, r3, #1
 801447a:	2b00      	cmp	r3, #0
 801447c:	d010      	beq.n	80144a0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	8b5b      	ldrh	r3, [r3, #26]
 8014482:	f043 0302 	orr.w	r3, r3, #2
 8014486:	b29a      	uxth	r2, r3
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801448c:	6878      	ldr	r0, [r7, #4]
 801448e:	f003 fff5 	bl	801847c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	8b5b      	ldrh	r3, [r3, #26]
 8014496:	f023 0303 	bic.w	r3, r3, #3
 801449a:	b29a      	uxth	r2, r3
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	8b5b      	ldrh	r3, [r3, #26]
 80144a4:	f003 0308 	and.w	r3, r3, #8
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d009      	beq.n	80144c0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	8b5b      	ldrh	r3, [r3, #26]
 80144b0:	f023 0308 	bic.w	r3, r3, #8
 80144b4:	b29a      	uxth	r2, r3
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80144ba:	6878      	ldr	r0, [r7, #4]
 80144bc:	f7ff f8be 	bl	801363c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	68db      	ldr	r3, [r3, #12]
 80144c4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d00a      	beq.n	80144e4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80144ce:	4b0e      	ldr	r3, [pc, #56]	; (8014508 <tcp_fasttmr+0xc4>)
 80144d0:	2200      	movs	r2, #0
 80144d2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80144d4:	6878      	ldr	r0, [r7, #4]
 80144d6:	f000 f819 	bl	801450c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80144da:	4b0b      	ldr	r3, [pc, #44]	; (8014508 <tcp_fasttmr+0xc4>)
 80144dc:	781b      	ldrb	r3, [r3, #0]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d000      	beq.n	80144e4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80144e2:	e7b8      	b.n	8014456 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80144e4:	683b      	ldr	r3, [r7, #0]
 80144e6:	607b      	str	r3, [r7, #4]
 80144e8:	e002      	b.n	80144f0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	68db      	ldr	r3, [r3, #12]
 80144ee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d1b3      	bne.n	801445e <tcp_fasttmr+0x1a>
    }
  }
}
 80144f6:	bf00      	nop
 80144f8:	bf00      	nop
 80144fa:	3708      	adds	r7, #8
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}
 8014500:	200113be 	.word	0x200113be
 8014504:	200113b4 	.word	0x200113b4
 8014508:	200113bc 	.word	0x200113bc

0801450c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801450c:	b590      	push	{r4, r7, lr}
 801450e:	b085      	sub	sp, #20
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d109      	bne.n	801452e <tcp_process_refused_data+0x22>
 801451a:	4b37      	ldr	r3, [pc, #220]	; (80145f8 <tcp_process_refused_data+0xec>)
 801451c:	f240 6209 	movw	r2, #1545	; 0x609
 8014520:	4936      	ldr	r1, [pc, #216]	; (80145fc <tcp_process_refused_data+0xf0>)
 8014522:	4837      	ldr	r0, [pc, #220]	; (8014600 <tcp_process_refused_data+0xf4>)
 8014524:	f008 f9aa 	bl	801c87c <iprintf>
 8014528:	f06f 030f 	mvn.w	r3, #15
 801452c:	e060      	b.n	80145f0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014532:	7b5b      	ldrb	r3, [r3, #13]
 8014534:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801453a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	2200      	movs	r2, #0
 8014540:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014548:	2b00      	cmp	r3, #0
 801454a:	d00b      	beq.n	8014564 <tcp_process_refused_data+0x58>
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	6918      	ldr	r0, [r3, #16]
 8014556:	2300      	movs	r3, #0
 8014558:	68ba      	ldr	r2, [r7, #8]
 801455a:	6879      	ldr	r1, [r7, #4]
 801455c:	47a0      	blx	r4
 801455e:	4603      	mov	r3, r0
 8014560:	73fb      	strb	r3, [r7, #15]
 8014562:	e007      	b.n	8014574 <tcp_process_refused_data+0x68>
 8014564:	2300      	movs	r3, #0
 8014566:	68ba      	ldr	r2, [r7, #8]
 8014568:	6879      	ldr	r1, [r7, #4]
 801456a:	2000      	movs	r0, #0
 801456c:	f000 f8a4 	bl	80146b8 <tcp_recv_null>
 8014570:	4603      	mov	r3, r0
 8014572:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8014574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d12a      	bne.n	80145d2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801457c:	7bbb      	ldrb	r3, [r7, #14]
 801457e:	f003 0320 	and.w	r3, r3, #32
 8014582:	2b00      	cmp	r3, #0
 8014584:	d033      	beq.n	80145ee <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801458a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801458e:	d005      	beq.n	801459c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014594:	3301      	adds	r3, #1
 8014596:	b29a      	uxth	r2, r3
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d00b      	beq.n	80145be <tcp_process_refused_data+0xb2>
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	6918      	ldr	r0, [r3, #16]
 80145b0:	2300      	movs	r3, #0
 80145b2:	2200      	movs	r2, #0
 80145b4:	6879      	ldr	r1, [r7, #4]
 80145b6:	47a0      	blx	r4
 80145b8:	4603      	mov	r3, r0
 80145ba:	73fb      	strb	r3, [r7, #15]
 80145bc:	e001      	b.n	80145c2 <tcp_process_refused_data+0xb6>
 80145be:	2300      	movs	r3, #0
 80145c0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80145c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80145c6:	f113 0f0d 	cmn.w	r3, #13
 80145ca:	d110      	bne.n	80145ee <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80145cc:	f06f 030c 	mvn.w	r3, #12
 80145d0:	e00e      	b.n	80145f0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80145d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80145d6:	f113 0f0d 	cmn.w	r3, #13
 80145da:	d102      	bne.n	80145e2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80145dc:	f06f 030c 	mvn.w	r3, #12
 80145e0:	e006      	b.n	80145f0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	68ba      	ldr	r2, [r7, #8]
 80145e6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80145e8:	f06f 0304 	mvn.w	r3, #4
 80145ec:	e000      	b.n	80145f0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80145ee:	2300      	movs	r3, #0
}
 80145f0:	4618      	mov	r0, r3
 80145f2:	3714      	adds	r7, #20
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd90      	pop	{r4, r7, pc}
 80145f8:	0801ed58 	.word	0x0801ed58
 80145fc:	0801f268 	.word	0x0801f268
 8014600:	0801ed9c 	.word	0x0801ed9c

08014604 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b084      	sub	sp, #16
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801460c:	e007      	b.n	801461e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8014614:	6878      	ldr	r0, [r7, #4]
 8014616:	f000 f80a 	bl	801462e <tcp_seg_free>
    seg = next;
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d1f4      	bne.n	801460e <tcp_segs_free+0xa>
  }
}
 8014624:	bf00      	nop
 8014626:	bf00      	nop
 8014628:	3710      	adds	r7, #16
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}

0801462e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801462e:	b580      	push	{r7, lr}
 8014630:	b082      	sub	sp, #8
 8014632:	af00      	add	r7, sp, #0
 8014634:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d00c      	beq.n	8014656 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	685b      	ldr	r3, [r3, #4]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d004      	beq.n	801464e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	685b      	ldr	r3, [r3, #4]
 8014648:	4618      	mov	r0, r3
 801464a:	f7fe fbb7 	bl	8012dbc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801464e:	6879      	ldr	r1, [r7, #4]
 8014650:	2003      	movs	r0, #3
 8014652:	f7fd fd0f 	bl	8012074 <memp_free>
  }
}
 8014656:	bf00      	nop
 8014658:	3708      	adds	r7, #8
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}
	...

08014660 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8014660:	b580      	push	{r7, lr}
 8014662:	b084      	sub	sp, #16
 8014664:	af00      	add	r7, sp, #0
 8014666:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d106      	bne.n	801467c <tcp_seg_copy+0x1c>
 801466e:	4b0f      	ldr	r3, [pc, #60]	; (80146ac <tcp_seg_copy+0x4c>)
 8014670:	f240 6282 	movw	r2, #1666	; 0x682
 8014674:	490e      	ldr	r1, [pc, #56]	; (80146b0 <tcp_seg_copy+0x50>)
 8014676:	480f      	ldr	r0, [pc, #60]	; (80146b4 <tcp_seg_copy+0x54>)
 8014678:	f008 f900 	bl	801c87c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801467c:	2003      	movs	r0, #3
 801467e:	f7fd fc83 	bl	8011f88 <memp_malloc>
 8014682:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d101      	bne.n	801468e <tcp_seg_copy+0x2e>
    return NULL;
 801468a:	2300      	movs	r3, #0
 801468c:	e00a      	b.n	80146a4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801468e:	2210      	movs	r2, #16
 8014690:	6879      	ldr	r1, [r7, #4]
 8014692:	68f8      	ldr	r0, [r7, #12]
 8014694:	f008 f9d3 	bl	801ca3e <memcpy>
  pbuf_ref(cseg->p);
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	685b      	ldr	r3, [r3, #4]
 801469c:	4618      	mov	r0, r3
 801469e:	f7fe fc33 	bl	8012f08 <pbuf_ref>
  return cseg;
 80146a2:	68fb      	ldr	r3, [r7, #12]
}
 80146a4:	4618      	mov	r0, r3
 80146a6:	3710      	adds	r7, #16
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd80      	pop	{r7, pc}
 80146ac:	0801ed58 	.word	0x0801ed58
 80146b0:	0801f2ac 	.word	0x0801f2ac
 80146b4:	0801ed9c 	.word	0x0801ed9c

080146b8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b084      	sub	sp, #16
 80146bc:	af00      	add	r7, sp, #0
 80146be:	60f8      	str	r0, [r7, #12]
 80146c0:	60b9      	str	r1, [r7, #8]
 80146c2:	607a      	str	r2, [r7, #4]
 80146c4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80146c6:	68bb      	ldr	r3, [r7, #8]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d109      	bne.n	80146e0 <tcp_recv_null+0x28>
 80146cc:	4b12      	ldr	r3, [pc, #72]	; (8014718 <tcp_recv_null+0x60>)
 80146ce:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80146d2:	4912      	ldr	r1, [pc, #72]	; (801471c <tcp_recv_null+0x64>)
 80146d4:	4812      	ldr	r0, [pc, #72]	; (8014720 <tcp_recv_null+0x68>)
 80146d6:	f008 f8d1 	bl	801c87c <iprintf>
 80146da:	f06f 030f 	mvn.w	r3, #15
 80146de:	e016      	b.n	801470e <tcp_recv_null+0x56>

  if (p != NULL) {
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d009      	beq.n	80146fa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	891b      	ldrh	r3, [r3, #8]
 80146ea:	4619      	mov	r1, r3
 80146ec:	68b8      	ldr	r0, [r7, #8]
 80146ee:	f7ff f9bb 	bl	8013a68 <tcp_recved>
    pbuf_free(p);
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	f7fe fb62 	bl	8012dbc <pbuf_free>
 80146f8:	e008      	b.n	801470c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80146fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d104      	bne.n	801470c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8014702:	68b8      	ldr	r0, [r7, #8]
 8014704:	f7ff f804 	bl	8013710 <tcp_close>
 8014708:	4603      	mov	r3, r0
 801470a:	e000      	b.n	801470e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801470c:	2300      	movs	r3, #0
}
 801470e:	4618      	mov	r0, r3
 8014710:	3710      	adds	r7, #16
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}
 8014716:	bf00      	nop
 8014718:	0801ed58 	.word	0x0801ed58
 801471c:	0801f2c8 	.word	0x0801f2c8
 8014720:	0801ed9c 	.word	0x0801ed9c

08014724 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b086      	sub	sp, #24
 8014728:	af00      	add	r7, sp, #0
 801472a:	4603      	mov	r3, r0
 801472c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801472e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014732:	2b00      	cmp	r3, #0
 8014734:	db01      	blt.n	801473a <tcp_kill_prio+0x16>
 8014736:	79fb      	ldrb	r3, [r7, #7]
 8014738:	e000      	b.n	801473c <tcp_kill_prio+0x18>
 801473a:	237f      	movs	r3, #127	; 0x7f
 801473c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801473e:	7afb      	ldrb	r3, [r7, #11]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d034      	beq.n	80147ae <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8014744:	7afb      	ldrb	r3, [r7, #11]
 8014746:	3b01      	subs	r3, #1
 8014748:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801474a:	2300      	movs	r3, #0
 801474c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801474e:	2300      	movs	r3, #0
 8014750:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014752:	4b19      	ldr	r3, [pc, #100]	; (80147b8 <tcp_kill_prio+0x94>)
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	617b      	str	r3, [r7, #20]
 8014758:	e01f      	b.n	801479a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801475a:	697b      	ldr	r3, [r7, #20]
 801475c:	7d5b      	ldrb	r3, [r3, #21]
 801475e:	7afa      	ldrb	r2, [r7, #11]
 8014760:	429a      	cmp	r2, r3
 8014762:	d80c      	bhi.n	801477e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014764:	697b      	ldr	r3, [r7, #20]
 8014766:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8014768:	7afa      	ldrb	r2, [r7, #11]
 801476a:	429a      	cmp	r2, r3
 801476c:	d112      	bne.n	8014794 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801476e:	4b13      	ldr	r3, [pc, #76]	; (80147bc <tcp_kill_prio+0x98>)
 8014770:	681a      	ldr	r2, [r3, #0]
 8014772:	697b      	ldr	r3, [r7, #20]
 8014774:	6a1b      	ldr	r3, [r3, #32]
 8014776:	1ad3      	subs	r3, r2, r3
 8014778:	68fa      	ldr	r2, [r7, #12]
 801477a:	429a      	cmp	r2, r3
 801477c:	d80a      	bhi.n	8014794 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801477e:	4b0f      	ldr	r3, [pc, #60]	; (80147bc <tcp_kill_prio+0x98>)
 8014780:	681a      	ldr	r2, [r3, #0]
 8014782:	697b      	ldr	r3, [r7, #20]
 8014784:	6a1b      	ldr	r3, [r3, #32]
 8014786:	1ad3      	subs	r3, r2, r3
 8014788:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801478a:	697b      	ldr	r3, [r7, #20]
 801478c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801478e:	697b      	ldr	r3, [r7, #20]
 8014790:	7d5b      	ldrb	r3, [r3, #21]
 8014792:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014794:	697b      	ldr	r3, [r7, #20]
 8014796:	68db      	ldr	r3, [r3, #12]
 8014798:	617b      	str	r3, [r7, #20]
 801479a:	697b      	ldr	r3, [r7, #20]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d1dc      	bne.n	801475a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80147a0:	693b      	ldr	r3, [r7, #16]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d004      	beq.n	80147b0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80147a6:	6938      	ldr	r0, [r7, #16]
 80147a8:	f7ff f8f8 	bl	801399c <tcp_abort>
 80147ac:	e000      	b.n	80147b0 <tcp_kill_prio+0x8c>
    return;
 80147ae:	bf00      	nop
  }
}
 80147b0:	3718      	adds	r7, #24
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd80      	pop	{r7, pc}
 80147b6:	bf00      	nop
 80147b8:	200113b4 	.word	0x200113b4
 80147bc:	200113a8 	.word	0x200113a8

080147c0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b086      	sub	sp, #24
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	4603      	mov	r3, r0
 80147c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80147ca:	79fb      	ldrb	r3, [r7, #7]
 80147cc:	2b08      	cmp	r3, #8
 80147ce:	d009      	beq.n	80147e4 <tcp_kill_state+0x24>
 80147d0:	79fb      	ldrb	r3, [r7, #7]
 80147d2:	2b09      	cmp	r3, #9
 80147d4:	d006      	beq.n	80147e4 <tcp_kill_state+0x24>
 80147d6:	4b1a      	ldr	r3, [pc, #104]	; (8014840 <tcp_kill_state+0x80>)
 80147d8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80147dc:	4919      	ldr	r1, [pc, #100]	; (8014844 <tcp_kill_state+0x84>)
 80147de:	481a      	ldr	r0, [pc, #104]	; (8014848 <tcp_kill_state+0x88>)
 80147e0:	f008 f84c 	bl	801c87c <iprintf>

  inactivity = 0;
 80147e4:	2300      	movs	r3, #0
 80147e6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80147e8:	2300      	movs	r3, #0
 80147ea:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80147ec:	4b17      	ldr	r3, [pc, #92]	; (801484c <tcp_kill_state+0x8c>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	617b      	str	r3, [r7, #20]
 80147f2:	e017      	b.n	8014824 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80147f4:	697b      	ldr	r3, [r7, #20]
 80147f6:	7d1b      	ldrb	r3, [r3, #20]
 80147f8:	79fa      	ldrb	r2, [r7, #7]
 80147fa:	429a      	cmp	r2, r3
 80147fc:	d10f      	bne.n	801481e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80147fe:	4b14      	ldr	r3, [pc, #80]	; (8014850 <tcp_kill_state+0x90>)
 8014800:	681a      	ldr	r2, [r3, #0]
 8014802:	697b      	ldr	r3, [r7, #20]
 8014804:	6a1b      	ldr	r3, [r3, #32]
 8014806:	1ad3      	subs	r3, r2, r3
 8014808:	68fa      	ldr	r2, [r7, #12]
 801480a:	429a      	cmp	r2, r3
 801480c:	d807      	bhi.n	801481e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801480e:	4b10      	ldr	r3, [pc, #64]	; (8014850 <tcp_kill_state+0x90>)
 8014810:	681a      	ldr	r2, [r3, #0]
 8014812:	697b      	ldr	r3, [r7, #20]
 8014814:	6a1b      	ldr	r3, [r3, #32]
 8014816:	1ad3      	subs	r3, r2, r3
 8014818:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801481a:	697b      	ldr	r3, [r7, #20]
 801481c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801481e:	697b      	ldr	r3, [r7, #20]
 8014820:	68db      	ldr	r3, [r3, #12]
 8014822:	617b      	str	r3, [r7, #20]
 8014824:	697b      	ldr	r3, [r7, #20]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d1e4      	bne.n	80147f4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801482a:	693b      	ldr	r3, [r7, #16]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d003      	beq.n	8014838 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8014830:	2100      	movs	r1, #0
 8014832:	6938      	ldr	r0, [r7, #16]
 8014834:	f7fe fff4 	bl	8013820 <tcp_abandon>
  }
}
 8014838:	bf00      	nop
 801483a:	3718      	adds	r7, #24
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}
 8014840:	0801ed58 	.word	0x0801ed58
 8014844:	0801f2e4 	.word	0x0801f2e4
 8014848:	0801ed9c 	.word	0x0801ed9c
 801484c:	200113b4 	.word	0x200113b4
 8014850:	200113a8 	.word	0x200113a8

08014854 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b084      	sub	sp, #16
 8014858:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801485a:	2300      	movs	r3, #0
 801485c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801485e:	2300      	movs	r3, #0
 8014860:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014862:	4b12      	ldr	r3, [pc, #72]	; (80148ac <tcp_kill_timewait+0x58>)
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	60fb      	str	r3, [r7, #12]
 8014868:	e012      	b.n	8014890 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801486a:	4b11      	ldr	r3, [pc, #68]	; (80148b0 <tcp_kill_timewait+0x5c>)
 801486c:	681a      	ldr	r2, [r3, #0]
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	6a1b      	ldr	r3, [r3, #32]
 8014872:	1ad3      	subs	r3, r2, r3
 8014874:	687a      	ldr	r2, [r7, #4]
 8014876:	429a      	cmp	r2, r3
 8014878:	d807      	bhi.n	801488a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801487a:	4b0d      	ldr	r3, [pc, #52]	; (80148b0 <tcp_kill_timewait+0x5c>)
 801487c:	681a      	ldr	r2, [r3, #0]
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	6a1b      	ldr	r3, [r3, #32]
 8014882:	1ad3      	subs	r3, r2, r3
 8014884:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	68db      	ldr	r3, [r3, #12]
 801488e:	60fb      	str	r3, [r7, #12]
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d1e9      	bne.n	801486a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8014896:	68bb      	ldr	r3, [r7, #8]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d002      	beq.n	80148a2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801489c:	68b8      	ldr	r0, [r7, #8]
 801489e:	f7ff f87d 	bl	801399c <tcp_abort>
  }
}
 80148a2:	bf00      	nop
 80148a4:	3710      	adds	r7, #16
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bd80      	pop	{r7, pc}
 80148aa:	bf00      	nop
 80148ac:	200113b8 	.word	0x200113b8
 80148b0:	200113a8 	.word	0x200113a8

080148b4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b082      	sub	sp, #8
 80148b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80148ba:	4b10      	ldr	r3, [pc, #64]	; (80148fc <tcp_handle_closepend+0x48>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80148c0:	e014      	b.n	80148ec <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	68db      	ldr	r3, [r3, #12]
 80148c6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	8b5b      	ldrh	r3, [r3, #26]
 80148cc:	f003 0308 	and.w	r3, r3, #8
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d009      	beq.n	80148e8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	8b5b      	ldrh	r3, [r3, #26]
 80148d8:	f023 0308 	bic.w	r3, r3, #8
 80148dc:	b29a      	uxth	r2, r3
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f7fe feaa 	bl	801363c <tcp_close_shutdown_fin>
    }
    pcb = next;
 80148e8:	683b      	ldr	r3, [r7, #0]
 80148ea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d1e7      	bne.n	80148c2 <tcp_handle_closepend+0xe>
  }
}
 80148f2:	bf00      	nop
 80148f4:	bf00      	nop
 80148f6:	3708      	adds	r7, #8
 80148f8:	46bd      	mov	sp, r7
 80148fa:	bd80      	pop	{r7, pc}
 80148fc:	200113b4 	.word	0x200113b4

08014900 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b084      	sub	sp, #16
 8014904:	af00      	add	r7, sp, #0
 8014906:	4603      	mov	r3, r0
 8014908:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801490a:	2001      	movs	r0, #1
 801490c:	f7fd fb3c 	bl	8011f88 <memp_malloc>
 8014910:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d126      	bne.n	8014966 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8014918:	f7ff ffcc 	bl	80148b4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801491c:	f7ff ff9a 	bl	8014854 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014920:	2001      	movs	r0, #1
 8014922:	f7fd fb31 	bl	8011f88 <memp_malloc>
 8014926:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d11b      	bne.n	8014966 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801492e:	2009      	movs	r0, #9
 8014930:	f7ff ff46 	bl	80147c0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014934:	2001      	movs	r0, #1
 8014936:	f7fd fb27 	bl	8011f88 <memp_malloc>
 801493a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d111      	bne.n	8014966 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8014942:	2008      	movs	r0, #8
 8014944:	f7ff ff3c 	bl	80147c0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014948:	2001      	movs	r0, #1
 801494a:	f7fd fb1d 	bl	8011f88 <memp_malloc>
 801494e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d107      	bne.n	8014966 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8014956:	79fb      	ldrb	r3, [r7, #7]
 8014958:	4618      	mov	r0, r3
 801495a:	f7ff fee3 	bl	8014724 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801495e:	2001      	movs	r0, #1
 8014960:	f7fd fb12 	bl	8011f88 <memp_malloc>
 8014964:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	2b00      	cmp	r3, #0
 801496a:	d03f      	beq.n	80149ec <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801496c:	229c      	movs	r2, #156	; 0x9c
 801496e:	2100      	movs	r1, #0
 8014970:	68f8      	ldr	r0, [r7, #12]
 8014972:	f007 ffe8 	bl	801c946 <memset>
    pcb->prio = prio;
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	79fa      	ldrb	r2, [r7, #7]
 801497a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014982:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801498c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	22ff      	movs	r2, #255	; 0xff
 801499a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	f44f 7206 	mov.w	r2, #536	; 0x218
 80149a2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	2206      	movs	r2, #6
 80149a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	2206      	movs	r2, #6
 80149b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80149b8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	2201      	movs	r2, #1
 80149be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80149c2:	4b0d      	ldr	r3, [pc, #52]	; (80149f8 <tcp_alloc+0xf8>)
 80149c4:	681a      	ldr	r2, [r3, #0]
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80149ca:	4b0c      	ldr	r3, [pc, #48]	; (80149fc <tcp_alloc+0xfc>)
 80149cc:	781a      	ldrb	r2, [r3, #0]
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80149d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	4a08      	ldr	r2, [pc, #32]	; (8014a00 <tcp_alloc+0x100>)
 80149e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	4a07      	ldr	r2, [pc, #28]	; (8014a04 <tcp_alloc+0x104>)
 80149e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80149ec:	68fb      	ldr	r3, [r7, #12]
}
 80149ee:	4618      	mov	r0, r3
 80149f0:	3710      	adds	r7, #16
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}
 80149f6:	bf00      	nop
 80149f8:	200113a8 	.word	0x200113a8
 80149fc:	200113be 	.word	0x200113be
 8014a00:	080146b9 	.word	0x080146b9
 8014a04:	006ddd00 	.word	0x006ddd00

08014a08 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b084      	sub	sp, #16
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	4603      	mov	r3, r0
 8014a10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8014a12:	2040      	movs	r0, #64	; 0x40
 8014a14:	f7ff ff74 	bl	8014900 <tcp_alloc>
 8014a18:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014a1a:	68fb      	ldr	r3, [r7, #12]
}
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	3710      	adds	r7, #16
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd80      	pop	{r7, pc}

08014a24 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8014a24:	b480      	push	{r7}
 8014a26:	b083      	sub	sp, #12
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
 8014a2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d002      	beq.n	8014a3a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	683a      	ldr	r2, [r7, #0]
 8014a38:	611a      	str	r2, [r3, #16]
  }
}
 8014a3a:	bf00      	nop
 8014a3c:	370c      	adds	r7, #12
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a44:	4770      	bx	lr
	...

08014a48 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b082      	sub	sp, #8
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6078      	str	r0, [r7, #4]
 8014a50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d00e      	beq.n	8014a76 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	7d1b      	ldrb	r3, [r3, #20]
 8014a5c:	2b01      	cmp	r3, #1
 8014a5e:	d106      	bne.n	8014a6e <tcp_recv+0x26>
 8014a60:	4b07      	ldr	r3, [pc, #28]	; (8014a80 <tcp_recv+0x38>)
 8014a62:	f240 72df 	movw	r2, #2015	; 0x7df
 8014a66:	4907      	ldr	r1, [pc, #28]	; (8014a84 <tcp_recv+0x3c>)
 8014a68:	4807      	ldr	r0, [pc, #28]	; (8014a88 <tcp_recv+0x40>)
 8014a6a:	f007 ff07 	bl	801c87c <iprintf>
    pcb->recv = recv;
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	683a      	ldr	r2, [r7, #0]
 8014a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8014a76:	bf00      	nop
 8014a78:	3708      	adds	r7, #8
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd80      	pop	{r7, pc}
 8014a7e:	bf00      	nop
 8014a80:	0801ed58 	.word	0x0801ed58
 8014a84:	0801f2f4 	.word	0x0801f2f4
 8014a88:	0801ed9c 	.word	0x0801ed9c

08014a8c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b082      	sub	sp, #8
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
 8014a94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d00e      	beq.n	8014aba <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	7d1b      	ldrb	r3, [r3, #20]
 8014aa0:	2b01      	cmp	r3, #1
 8014aa2:	d106      	bne.n	8014ab2 <tcp_sent+0x26>
 8014aa4:	4b07      	ldr	r3, [pc, #28]	; (8014ac4 <tcp_sent+0x38>)
 8014aa6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8014aaa:	4907      	ldr	r1, [pc, #28]	; (8014ac8 <tcp_sent+0x3c>)
 8014aac:	4807      	ldr	r0, [pc, #28]	; (8014acc <tcp_sent+0x40>)
 8014aae:	f007 fee5 	bl	801c87c <iprintf>
    pcb->sent = sent;
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	683a      	ldr	r2, [r7, #0]
 8014ab6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8014aba:	bf00      	nop
 8014abc:	3708      	adds	r7, #8
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	bd80      	pop	{r7, pc}
 8014ac2:	bf00      	nop
 8014ac4:	0801ed58 	.word	0x0801ed58
 8014ac8:	0801f31c 	.word	0x0801f31c
 8014acc:	0801ed9c 	.word	0x0801ed9c

08014ad0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b082      	sub	sp, #8
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
 8014ad8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d00e      	beq.n	8014afe <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	7d1b      	ldrb	r3, [r3, #20]
 8014ae4:	2b01      	cmp	r3, #1
 8014ae6:	d106      	bne.n	8014af6 <tcp_err+0x26>
 8014ae8:	4b07      	ldr	r3, [pc, #28]	; (8014b08 <tcp_err+0x38>)
 8014aea:	f640 020d 	movw	r2, #2061	; 0x80d
 8014aee:	4907      	ldr	r1, [pc, #28]	; (8014b0c <tcp_err+0x3c>)
 8014af0:	4807      	ldr	r0, [pc, #28]	; (8014b10 <tcp_err+0x40>)
 8014af2:	f007 fec3 	bl	801c87c <iprintf>
    pcb->errf = err;
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	683a      	ldr	r2, [r7, #0]
 8014afa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8014afe:	bf00      	nop
 8014b00:	3708      	adds	r7, #8
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd80      	pop	{r7, pc}
 8014b06:	bf00      	nop
 8014b08:	0801ed58 	.word	0x0801ed58
 8014b0c:	0801f344 	.word	0x0801f344
 8014b10:	0801ed9c 	.word	0x0801ed9c

08014b14 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8014b14:	b480      	push	{r7}
 8014b16:	b085      	sub	sp, #20
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
 8014b1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d008      	beq.n	8014b36 <tcp_accept+0x22>
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	7d1b      	ldrb	r3, [r3, #20]
 8014b28:	2b01      	cmp	r3, #1
 8014b2a:	d104      	bne.n	8014b36 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	683a      	ldr	r2, [r7, #0]
 8014b34:	619a      	str	r2, [r3, #24]
  }
}
 8014b36:	bf00      	nop
 8014b38:	3714      	adds	r7, #20
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b40:	4770      	bx	lr
	...

08014b44 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b084      	sub	sp, #16
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	60f8      	str	r0, [r7, #12]
 8014b4c:	60b9      	str	r1, [r7, #8]
 8014b4e:	4613      	mov	r3, r2
 8014b50:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d107      	bne.n	8014b68 <tcp_poll+0x24>
 8014b58:	4b0e      	ldr	r3, [pc, #56]	; (8014b94 <tcp_poll+0x50>)
 8014b5a:	f640 023d 	movw	r2, #2109	; 0x83d
 8014b5e:	490e      	ldr	r1, [pc, #56]	; (8014b98 <tcp_poll+0x54>)
 8014b60:	480e      	ldr	r0, [pc, #56]	; (8014b9c <tcp_poll+0x58>)
 8014b62:	f007 fe8b 	bl	801c87c <iprintf>
 8014b66:	e011      	b.n	8014b8c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	7d1b      	ldrb	r3, [r3, #20]
 8014b6c:	2b01      	cmp	r3, #1
 8014b6e:	d106      	bne.n	8014b7e <tcp_poll+0x3a>
 8014b70:	4b08      	ldr	r3, [pc, #32]	; (8014b94 <tcp_poll+0x50>)
 8014b72:	f640 023e 	movw	r2, #2110	; 0x83e
 8014b76:	490a      	ldr	r1, [pc, #40]	; (8014ba0 <tcp_poll+0x5c>)
 8014b78:	4808      	ldr	r0, [pc, #32]	; (8014b9c <tcp_poll+0x58>)
 8014b7a:	f007 fe7f 	bl	801c87c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	68ba      	ldr	r2, [r7, #8]
 8014b82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	79fa      	ldrb	r2, [r7, #7]
 8014b8a:	775a      	strb	r2, [r3, #29]
}
 8014b8c:	3710      	adds	r7, #16
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd80      	pop	{r7, pc}
 8014b92:	bf00      	nop
 8014b94:	0801ed58 	.word	0x0801ed58
 8014b98:	0801f36c 	.word	0x0801f36c
 8014b9c:	0801ed9c 	.word	0x0801ed9c
 8014ba0:	0801f384 	.word	0x0801f384

08014ba4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b082      	sub	sp, #8
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d107      	bne.n	8014bc2 <tcp_pcb_purge+0x1e>
 8014bb2:	4b21      	ldr	r3, [pc, #132]	; (8014c38 <tcp_pcb_purge+0x94>)
 8014bb4:	f640 0251 	movw	r2, #2129	; 0x851
 8014bb8:	4920      	ldr	r1, [pc, #128]	; (8014c3c <tcp_pcb_purge+0x98>)
 8014bba:	4821      	ldr	r0, [pc, #132]	; (8014c40 <tcp_pcb_purge+0x9c>)
 8014bbc:	f007 fe5e 	bl	801c87c <iprintf>
 8014bc0:	e037      	b.n	8014c32 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	7d1b      	ldrb	r3, [r3, #20]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d033      	beq.n	8014c32 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014bce:	2b0a      	cmp	r3, #10
 8014bd0:	d02f      	beq.n	8014c32 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014bd6:	2b01      	cmp	r3, #1
 8014bd8:	d02b      	beq.n	8014c32 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d007      	beq.n	8014bf2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014be6:	4618      	mov	r0, r3
 8014be8:	f7fe f8e8 	bl	8012dbc <pbuf_free>
      pcb->refused_data = NULL;
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	2200      	movs	r2, #0
 8014bf0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d002      	beq.n	8014c00 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014bfa:	6878      	ldr	r0, [r7, #4]
 8014bfc:	f000 f986 	bl	8014f0c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014c06:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	f7ff fcf9 	bl	8014604 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c16:	4618      	mov	r0, r3
 8014c18:	f7ff fcf4 	bl	8014604 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	2200      	movs	r2, #0
 8014c20:	66da      	str	r2, [r3, #108]	; 0x6c
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8014c32:	3708      	adds	r7, #8
 8014c34:	46bd      	mov	sp, r7
 8014c36:	bd80      	pop	{r7, pc}
 8014c38:	0801ed58 	.word	0x0801ed58
 8014c3c:	0801f3a4 	.word	0x0801f3a4
 8014c40:	0801ed9c 	.word	0x0801ed9c

08014c44 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b084      	sub	sp, #16
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
 8014c4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8014c4e:	683b      	ldr	r3, [r7, #0]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d106      	bne.n	8014c62 <tcp_pcb_remove+0x1e>
 8014c54:	4b3e      	ldr	r3, [pc, #248]	; (8014d50 <tcp_pcb_remove+0x10c>)
 8014c56:	f640 0283 	movw	r2, #2179	; 0x883
 8014c5a:	493e      	ldr	r1, [pc, #248]	; (8014d54 <tcp_pcb_remove+0x110>)
 8014c5c:	483e      	ldr	r0, [pc, #248]	; (8014d58 <tcp_pcb_remove+0x114>)
 8014c5e:	f007 fe0d 	bl	801c87c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d106      	bne.n	8014c76 <tcp_pcb_remove+0x32>
 8014c68:	4b39      	ldr	r3, [pc, #228]	; (8014d50 <tcp_pcb_remove+0x10c>)
 8014c6a:	f640 0284 	movw	r2, #2180	; 0x884
 8014c6e:	493b      	ldr	r1, [pc, #236]	; (8014d5c <tcp_pcb_remove+0x118>)
 8014c70:	4839      	ldr	r0, [pc, #228]	; (8014d58 <tcp_pcb_remove+0x114>)
 8014c72:	f007 fe03 	bl	801c87c <iprintf>

  TCP_RMV(pcblist, pcb);
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	683a      	ldr	r2, [r7, #0]
 8014c7c:	429a      	cmp	r2, r3
 8014c7e:	d105      	bne.n	8014c8c <tcp_pcb_remove+0x48>
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	68da      	ldr	r2, [r3, #12]
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	601a      	str	r2, [r3, #0]
 8014c8a:	e013      	b.n	8014cb4 <tcp_pcb_remove+0x70>
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	60fb      	str	r3, [r7, #12]
 8014c92:	e00c      	b.n	8014cae <tcp_pcb_remove+0x6a>
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	68db      	ldr	r3, [r3, #12]
 8014c98:	683a      	ldr	r2, [r7, #0]
 8014c9a:	429a      	cmp	r2, r3
 8014c9c:	d104      	bne.n	8014ca8 <tcp_pcb_remove+0x64>
 8014c9e:	683b      	ldr	r3, [r7, #0]
 8014ca0:	68da      	ldr	r2, [r3, #12]
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	60da      	str	r2, [r3, #12]
 8014ca6:	e005      	b.n	8014cb4 <tcp_pcb_remove+0x70>
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	68db      	ldr	r3, [r3, #12]
 8014cac:	60fb      	str	r3, [r7, #12]
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d1ef      	bne.n	8014c94 <tcp_pcb_remove+0x50>
 8014cb4:	683b      	ldr	r3, [r7, #0]
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8014cba:	6838      	ldr	r0, [r7, #0]
 8014cbc:	f7ff ff72 	bl	8014ba4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014cc0:	683b      	ldr	r3, [r7, #0]
 8014cc2:	7d1b      	ldrb	r3, [r3, #20]
 8014cc4:	2b0a      	cmp	r3, #10
 8014cc6:	d013      	beq.n	8014cf0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014cc8:	683b      	ldr	r3, [r7, #0]
 8014cca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014ccc:	2b01      	cmp	r3, #1
 8014cce:	d00f      	beq.n	8014cf0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014cd0:	683b      	ldr	r3, [r7, #0]
 8014cd2:	8b5b      	ldrh	r3, [r3, #26]
 8014cd4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d009      	beq.n	8014cf0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014cdc:	683b      	ldr	r3, [r7, #0]
 8014cde:	8b5b      	ldrh	r3, [r3, #26]
 8014ce0:	f043 0302 	orr.w	r3, r3, #2
 8014ce4:	b29a      	uxth	r2, r3
 8014ce6:	683b      	ldr	r3, [r7, #0]
 8014ce8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014cea:	6838      	ldr	r0, [r7, #0]
 8014cec:	f003 fbc6 	bl	801847c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014cf0:	683b      	ldr	r3, [r7, #0]
 8014cf2:	7d1b      	ldrb	r3, [r3, #20]
 8014cf4:	2b01      	cmp	r3, #1
 8014cf6:	d020      	beq.n	8014d3a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014cf8:	683b      	ldr	r3, [r7, #0]
 8014cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d006      	beq.n	8014d0e <tcp_pcb_remove+0xca>
 8014d00:	4b13      	ldr	r3, [pc, #76]	; (8014d50 <tcp_pcb_remove+0x10c>)
 8014d02:	f640 0293 	movw	r2, #2195	; 0x893
 8014d06:	4916      	ldr	r1, [pc, #88]	; (8014d60 <tcp_pcb_remove+0x11c>)
 8014d08:	4813      	ldr	r0, [pc, #76]	; (8014d58 <tcp_pcb_remove+0x114>)
 8014d0a:	f007 fdb7 	bl	801c87c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8014d0e:	683b      	ldr	r3, [r7, #0]
 8014d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d006      	beq.n	8014d24 <tcp_pcb_remove+0xe0>
 8014d16:	4b0e      	ldr	r3, [pc, #56]	; (8014d50 <tcp_pcb_remove+0x10c>)
 8014d18:	f640 0294 	movw	r2, #2196	; 0x894
 8014d1c:	4911      	ldr	r1, [pc, #68]	; (8014d64 <tcp_pcb_remove+0x120>)
 8014d1e:	480e      	ldr	r0, [pc, #56]	; (8014d58 <tcp_pcb_remove+0x114>)
 8014d20:	f007 fdac 	bl	801c87c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014d24:	683b      	ldr	r3, [r7, #0]
 8014d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d006      	beq.n	8014d3a <tcp_pcb_remove+0xf6>
 8014d2c:	4b08      	ldr	r3, [pc, #32]	; (8014d50 <tcp_pcb_remove+0x10c>)
 8014d2e:	f640 0296 	movw	r2, #2198	; 0x896
 8014d32:	490d      	ldr	r1, [pc, #52]	; (8014d68 <tcp_pcb_remove+0x124>)
 8014d34:	4808      	ldr	r0, [pc, #32]	; (8014d58 <tcp_pcb_remove+0x114>)
 8014d36:	f007 fda1 	bl	801c87c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8014d3a:	683b      	ldr	r3, [r7, #0]
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014d40:	683b      	ldr	r3, [r7, #0]
 8014d42:	2200      	movs	r2, #0
 8014d44:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014d46:	bf00      	nop
 8014d48:	3710      	adds	r7, #16
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	bd80      	pop	{r7, pc}
 8014d4e:	bf00      	nop
 8014d50:	0801ed58 	.word	0x0801ed58
 8014d54:	0801f3c0 	.word	0x0801f3c0
 8014d58:	0801ed9c 	.word	0x0801ed9c
 8014d5c:	0801f3dc 	.word	0x0801f3dc
 8014d60:	0801f3fc 	.word	0x0801f3fc
 8014d64:	0801f414 	.word	0x0801f414
 8014d68:	0801f430 	.word	0x0801f430

08014d6c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b082      	sub	sp, #8
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d106      	bne.n	8014d88 <tcp_next_iss+0x1c>
 8014d7a:	4b0a      	ldr	r3, [pc, #40]	; (8014da4 <tcp_next_iss+0x38>)
 8014d7c:	f640 02af 	movw	r2, #2223	; 0x8af
 8014d80:	4909      	ldr	r1, [pc, #36]	; (8014da8 <tcp_next_iss+0x3c>)
 8014d82:	480a      	ldr	r0, [pc, #40]	; (8014dac <tcp_next_iss+0x40>)
 8014d84:	f007 fd7a 	bl	801c87c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014d88:	4b09      	ldr	r3, [pc, #36]	; (8014db0 <tcp_next_iss+0x44>)
 8014d8a:	681a      	ldr	r2, [r3, #0]
 8014d8c:	4b09      	ldr	r3, [pc, #36]	; (8014db4 <tcp_next_iss+0x48>)
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	4413      	add	r3, r2
 8014d92:	4a07      	ldr	r2, [pc, #28]	; (8014db0 <tcp_next_iss+0x44>)
 8014d94:	6013      	str	r3, [r2, #0]
  return iss;
 8014d96:	4b06      	ldr	r3, [pc, #24]	; (8014db0 <tcp_next_iss+0x44>)
 8014d98:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	3708      	adds	r7, #8
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	bd80      	pop	{r7, pc}
 8014da2:	bf00      	nop
 8014da4:	0801ed58 	.word	0x0801ed58
 8014da8:	0801f448 	.word	0x0801f448
 8014dac:	0801ed9c 	.word	0x0801ed9c
 8014db0:	2000002c 	.word	0x2000002c
 8014db4:	200113a8 	.word	0x200113a8

08014db8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b086      	sub	sp, #24
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	60b9      	str	r1, [r7, #8]
 8014dc2:	607a      	str	r2, [r7, #4]
 8014dc4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d106      	bne.n	8014dda <tcp_eff_send_mss_netif+0x22>
 8014dcc:	4b14      	ldr	r3, [pc, #80]	; (8014e20 <tcp_eff_send_mss_netif+0x68>)
 8014dce:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8014dd2:	4914      	ldr	r1, [pc, #80]	; (8014e24 <tcp_eff_send_mss_netif+0x6c>)
 8014dd4:	4814      	ldr	r0, [pc, #80]	; (8014e28 <tcp_eff_send_mss_netif+0x70>)
 8014dd6:	f007 fd51 	bl	801c87c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014dda:	68bb      	ldr	r3, [r7, #8]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d101      	bne.n	8014de4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8014de0:	89fb      	ldrh	r3, [r7, #14]
 8014de2:	e019      	b.n	8014e18 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014de4:	68bb      	ldr	r3, [r7, #8]
 8014de6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014de8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8014dea:	8afb      	ldrh	r3, [r7, #22]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d012      	beq.n	8014e16 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8014df0:	2328      	movs	r3, #40	; 0x28
 8014df2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014df4:	8afa      	ldrh	r2, [r7, #22]
 8014df6:	8abb      	ldrh	r3, [r7, #20]
 8014df8:	429a      	cmp	r2, r3
 8014dfa:	d904      	bls.n	8014e06 <tcp_eff_send_mss_netif+0x4e>
 8014dfc:	8afa      	ldrh	r2, [r7, #22]
 8014dfe:	8abb      	ldrh	r3, [r7, #20]
 8014e00:	1ad3      	subs	r3, r2, r3
 8014e02:	b29b      	uxth	r3, r3
 8014e04:	e000      	b.n	8014e08 <tcp_eff_send_mss_netif+0x50>
 8014e06:	2300      	movs	r3, #0
 8014e08:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8014e0a:	8a7a      	ldrh	r2, [r7, #18]
 8014e0c:	89fb      	ldrh	r3, [r7, #14]
 8014e0e:	4293      	cmp	r3, r2
 8014e10:	bf28      	it	cs
 8014e12:	4613      	movcs	r3, r2
 8014e14:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8014e16:	89fb      	ldrh	r3, [r7, #14]
}
 8014e18:	4618      	mov	r0, r3
 8014e1a:	3718      	adds	r7, #24
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	bd80      	pop	{r7, pc}
 8014e20:	0801ed58 	.word	0x0801ed58
 8014e24:	0801f464 	.word	0x0801f464
 8014e28:	0801ed9c 	.word	0x0801ed9c

08014e2c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b084      	sub	sp, #16
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]
 8014e34:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8014e36:	683b      	ldr	r3, [r7, #0]
 8014e38:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d119      	bne.n	8014e74 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8014e40:	4b10      	ldr	r3, [pc, #64]	; (8014e84 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8014e42:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8014e46:	4910      	ldr	r1, [pc, #64]	; (8014e88 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014e48:	4810      	ldr	r0, [pc, #64]	; (8014e8c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8014e4a:	f007 fd17 	bl	801c87c <iprintf>

  while (pcb != NULL) {
 8014e4e:	e011      	b.n	8014e74 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	681a      	ldr	r2, [r3, #0]
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	429a      	cmp	r2, r3
 8014e5a:	d108      	bne.n	8014e6e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	68db      	ldr	r3, [r3, #12]
 8014e60:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8014e62:	68f8      	ldr	r0, [r7, #12]
 8014e64:	f7fe fd9a 	bl	801399c <tcp_abort>
      pcb = next;
 8014e68:	68bb      	ldr	r3, [r7, #8]
 8014e6a:	60fb      	str	r3, [r7, #12]
 8014e6c:	e002      	b.n	8014e74 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	68db      	ldr	r3, [r3, #12]
 8014e72:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d1ea      	bne.n	8014e50 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8014e7a:	bf00      	nop
 8014e7c:	bf00      	nop
 8014e7e:	3710      	adds	r7, #16
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}
 8014e84:	0801ed58 	.word	0x0801ed58
 8014e88:	0801f48c 	.word	0x0801f48c
 8014e8c:	0801ed9c 	.word	0x0801ed9c

08014e90 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b084      	sub	sp, #16
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
 8014e98:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d02a      	beq.n	8014ef6 <tcp_netif_ip_addr_changed+0x66>
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d026      	beq.n	8014ef6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014ea8:	4b15      	ldr	r3, [pc, #84]	; (8014f00 <tcp_netif_ip_addr_changed+0x70>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	4619      	mov	r1, r3
 8014eae:	6878      	ldr	r0, [r7, #4]
 8014eb0:	f7ff ffbc 	bl	8014e2c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014eb4:	4b13      	ldr	r3, [pc, #76]	; (8014f04 <tcp_netif_ip_addr_changed+0x74>)
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	4619      	mov	r1, r3
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	f7ff ffb6 	bl	8014e2c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014ec0:	683b      	ldr	r3, [r7, #0]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d017      	beq.n	8014ef6 <tcp_netif_ip_addr_changed+0x66>
 8014ec6:	683b      	ldr	r3, [r7, #0]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d013      	beq.n	8014ef6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014ece:	4b0e      	ldr	r3, [pc, #56]	; (8014f08 <tcp_netif_ip_addr_changed+0x78>)
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	60fb      	str	r3, [r7, #12]
 8014ed4:	e00c      	b.n	8014ef0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	681a      	ldr	r2, [r3, #0]
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	429a      	cmp	r2, r3
 8014ee0:	d103      	bne.n	8014eea <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014ee2:	683b      	ldr	r3, [r7, #0]
 8014ee4:	681a      	ldr	r2, [r3, #0]
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	68db      	ldr	r3, [r3, #12]
 8014eee:	60fb      	str	r3, [r7, #12]
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d1ef      	bne.n	8014ed6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014ef6:	bf00      	nop
 8014ef8:	3710      	adds	r7, #16
 8014efa:	46bd      	mov	sp, r7
 8014efc:	bd80      	pop	{r7, pc}
 8014efe:	bf00      	nop
 8014f00:	200113b4 	.word	0x200113b4
 8014f04:	200113ac 	.word	0x200113ac
 8014f08:	200113b0 	.word	0x200113b0

08014f0c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b082      	sub	sp, #8
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d007      	beq.n	8014f2c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f20:	4618      	mov	r0, r3
 8014f22:	f7ff fb6f 	bl	8014604 <tcp_segs_free>
    pcb->ooseq = NULL;
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	2200      	movs	r2, #0
 8014f2a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8014f2c:	bf00      	nop
 8014f2e:	3708      	adds	r7, #8
 8014f30:	46bd      	mov	sp, r7
 8014f32:	bd80      	pop	{r7, pc}

08014f34 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8014f34:	b590      	push	{r4, r7, lr}
 8014f36:	b08d      	sub	sp, #52	; 0x34
 8014f38:	af04      	add	r7, sp, #16
 8014f3a:	6078      	str	r0, [r7, #4]
 8014f3c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d105      	bne.n	8014f50 <tcp_input+0x1c>
 8014f44:	4b9b      	ldr	r3, [pc, #620]	; (80151b4 <tcp_input+0x280>)
 8014f46:	2283      	movs	r2, #131	; 0x83
 8014f48:	499b      	ldr	r1, [pc, #620]	; (80151b8 <tcp_input+0x284>)
 8014f4a:	489c      	ldr	r0, [pc, #624]	; (80151bc <tcp_input+0x288>)
 8014f4c:	f007 fc96 	bl	801c87c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	685b      	ldr	r3, [r3, #4]
 8014f54:	4a9a      	ldr	r2, [pc, #616]	; (80151c0 <tcp_input+0x28c>)
 8014f56:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	895b      	ldrh	r3, [r3, #10]
 8014f5c:	2b13      	cmp	r3, #19
 8014f5e:	f240 83d1 	bls.w	8015704 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014f62:	4b98      	ldr	r3, [pc, #608]	; (80151c4 <tcp_input+0x290>)
 8014f64:	695b      	ldr	r3, [r3, #20]
 8014f66:	4a97      	ldr	r2, [pc, #604]	; (80151c4 <tcp_input+0x290>)
 8014f68:	6812      	ldr	r2, [r2, #0]
 8014f6a:	4611      	mov	r1, r2
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f006 fa79 	bl	801b464 <ip4_addr_isbroadcast_u32>
 8014f72:	4603      	mov	r3, r0
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	f040 83c7 	bne.w	8015708 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8014f7a:	4b92      	ldr	r3, [pc, #584]	; (80151c4 <tcp_input+0x290>)
 8014f7c:	695b      	ldr	r3, [r3, #20]
 8014f7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014f82:	2be0      	cmp	r3, #224	; 0xe0
 8014f84:	f000 83c0 	beq.w	8015708 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8014f88:	4b8d      	ldr	r3, [pc, #564]	; (80151c0 <tcp_input+0x28c>)
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	899b      	ldrh	r3, [r3, #12]
 8014f8e:	b29b      	uxth	r3, r3
 8014f90:	4618      	mov	r0, r3
 8014f92:	f7fc fa65 	bl	8011460 <lwip_htons>
 8014f96:	4603      	mov	r3, r0
 8014f98:	0b1b      	lsrs	r3, r3, #12
 8014f9a:	b29b      	uxth	r3, r3
 8014f9c:	b2db      	uxtb	r3, r3
 8014f9e:	009b      	lsls	r3, r3, #2
 8014fa0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8014fa2:	7cbb      	ldrb	r3, [r7, #18]
 8014fa4:	2b13      	cmp	r3, #19
 8014fa6:	f240 83b1 	bls.w	801570c <tcp_input+0x7d8>
 8014faa:	7cbb      	ldrb	r3, [r7, #18]
 8014fac:	b29a      	uxth	r2, r3
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	891b      	ldrh	r3, [r3, #8]
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	f200 83aa 	bhi.w	801570c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8014fb8:	7cbb      	ldrb	r3, [r7, #18]
 8014fba:	b29b      	uxth	r3, r3
 8014fbc:	3b14      	subs	r3, #20
 8014fbe:	b29a      	uxth	r2, r3
 8014fc0:	4b81      	ldr	r3, [pc, #516]	; (80151c8 <tcp_input+0x294>)
 8014fc2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8014fc4:	4b81      	ldr	r3, [pc, #516]	; (80151cc <tcp_input+0x298>)
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	895a      	ldrh	r2, [r3, #10]
 8014fce:	7cbb      	ldrb	r3, [r7, #18]
 8014fd0:	b29b      	uxth	r3, r3
 8014fd2:	429a      	cmp	r2, r3
 8014fd4:	d309      	bcc.n	8014fea <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8014fd6:	4b7c      	ldr	r3, [pc, #496]	; (80151c8 <tcp_input+0x294>)
 8014fd8:	881a      	ldrh	r2, [r3, #0]
 8014fda:	4b7d      	ldr	r3, [pc, #500]	; (80151d0 <tcp_input+0x29c>)
 8014fdc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8014fde:	7cbb      	ldrb	r3, [r7, #18]
 8014fe0:	4619      	mov	r1, r3
 8014fe2:	6878      	ldr	r0, [r7, #4]
 8014fe4:	f7fd fe64 	bl	8012cb0 <pbuf_remove_header>
 8014fe8:	e04e      	b.n	8015088 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d105      	bne.n	8014ffe <tcp_input+0xca>
 8014ff2:	4b70      	ldr	r3, [pc, #448]	; (80151b4 <tcp_input+0x280>)
 8014ff4:	22c2      	movs	r2, #194	; 0xc2
 8014ff6:	4977      	ldr	r1, [pc, #476]	; (80151d4 <tcp_input+0x2a0>)
 8014ff8:	4870      	ldr	r0, [pc, #448]	; (80151bc <tcp_input+0x288>)
 8014ffa:	f007 fc3f 	bl	801c87c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8014ffe:	2114      	movs	r1, #20
 8015000:	6878      	ldr	r0, [r7, #4]
 8015002:	f7fd fe55 	bl	8012cb0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	895a      	ldrh	r2, [r3, #10]
 801500a:	4b71      	ldr	r3, [pc, #452]	; (80151d0 <tcp_input+0x29c>)
 801500c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801500e:	4b6e      	ldr	r3, [pc, #440]	; (80151c8 <tcp_input+0x294>)
 8015010:	881a      	ldrh	r2, [r3, #0]
 8015012:	4b6f      	ldr	r3, [pc, #444]	; (80151d0 <tcp_input+0x29c>)
 8015014:	881b      	ldrh	r3, [r3, #0]
 8015016:	1ad3      	subs	r3, r2, r3
 8015018:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801501a:	4b6d      	ldr	r3, [pc, #436]	; (80151d0 <tcp_input+0x29c>)
 801501c:	881b      	ldrh	r3, [r3, #0]
 801501e:	4619      	mov	r1, r3
 8015020:	6878      	ldr	r0, [r7, #4]
 8015022:	f7fd fe45 	bl	8012cb0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	895b      	ldrh	r3, [r3, #10]
 801502c:	8a3a      	ldrh	r2, [r7, #16]
 801502e:	429a      	cmp	r2, r3
 8015030:	f200 836e 	bhi.w	8015710 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	685b      	ldr	r3, [r3, #4]
 801503a:	4a64      	ldr	r2, [pc, #400]	; (80151cc <tcp_input+0x298>)
 801503c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	8a3a      	ldrh	r2, [r7, #16]
 8015044:	4611      	mov	r1, r2
 8015046:	4618      	mov	r0, r3
 8015048:	f7fd fe32 	bl	8012cb0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	891a      	ldrh	r2, [r3, #8]
 8015050:	8a3b      	ldrh	r3, [r7, #16]
 8015052:	1ad3      	subs	r3, r2, r3
 8015054:	b29a      	uxth	r2, r3
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	895b      	ldrh	r3, [r3, #10]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d005      	beq.n	801506e <tcp_input+0x13a>
 8015062:	4b54      	ldr	r3, [pc, #336]	; (80151b4 <tcp_input+0x280>)
 8015064:	22df      	movs	r2, #223	; 0xdf
 8015066:	495c      	ldr	r1, [pc, #368]	; (80151d8 <tcp_input+0x2a4>)
 8015068:	4854      	ldr	r0, [pc, #336]	; (80151bc <tcp_input+0x288>)
 801506a:	f007 fc07 	bl	801c87c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	891a      	ldrh	r2, [r3, #8]
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	891b      	ldrh	r3, [r3, #8]
 8015078:	429a      	cmp	r2, r3
 801507a:	d005      	beq.n	8015088 <tcp_input+0x154>
 801507c:	4b4d      	ldr	r3, [pc, #308]	; (80151b4 <tcp_input+0x280>)
 801507e:	22e0      	movs	r2, #224	; 0xe0
 8015080:	4956      	ldr	r1, [pc, #344]	; (80151dc <tcp_input+0x2a8>)
 8015082:	484e      	ldr	r0, [pc, #312]	; (80151bc <tcp_input+0x288>)
 8015084:	f007 fbfa 	bl	801c87c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8015088:	4b4d      	ldr	r3, [pc, #308]	; (80151c0 <tcp_input+0x28c>)
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	881b      	ldrh	r3, [r3, #0]
 801508e:	b29b      	uxth	r3, r3
 8015090:	4a4b      	ldr	r2, [pc, #300]	; (80151c0 <tcp_input+0x28c>)
 8015092:	6814      	ldr	r4, [r2, #0]
 8015094:	4618      	mov	r0, r3
 8015096:	f7fc f9e3 	bl	8011460 <lwip_htons>
 801509a:	4603      	mov	r3, r0
 801509c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801509e:	4b48      	ldr	r3, [pc, #288]	; (80151c0 <tcp_input+0x28c>)
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	885b      	ldrh	r3, [r3, #2]
 80150a4:	b29b      	uxth	r3, r3
 80150a6:	4a46      	ldr	r2, [pc, #280]	; (80151c0 <tcp_input+0x28c>)
 80150a8:	6814      	ldr	r4, [r2, #0]
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7fc f9d8 	bl	8011460 <lwip_htons>
 80150b0:	4603      	mov	r3, r0
 80150b2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80150b4:	4b42      	ldr	r3, [pc, #264]	; (80151c0 <tcp_input+0x28c>)
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	685b      	ldr	r3, [r3, #4]
 80150ba:	4a41      	ldr	r2, [pc, #260]	; (80151c0 <tcp_input+0x28c>)
 80150bc:	6814      	ldr	r4, [r2, #0]
 80150be:	4618      	mov	r0, r3
 80150c0:	f7fc f9e3 	bl	801148a <lwip_htonl>
 80150c4:	4603      	mov	r3, r0
 80150c6:	6063      	str	r3, [r4, #4]
 80150c8:	6863      	ldr	r3, [r4, #4]
 80150ca:	4a45      	ldr	r2, [pc, #276]	; (80151e0 <tcp_input+0x2ac>)
 80150cc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80150ce:	4b3c      	ldr	r3, [pc, #240]	; (80151c0 <tcp_input+0x28c>)
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	689b      	ldr	r3, [r3, #8]
 80150d4:	4a3a      	ldr	r2, [pc, #232]	; (80151c0 <tcp_input+0x28c>)
 80150d6:	6814      	ldr	r4, [r2, #0]
 80150d8:	4618      	mov	r0, r3
 80150da:	f7fc f9d6 	bl	801148a <lwip_htonl>
 80150de:	4603      	mov	r3, r0
 80150e0:	60a3      	str	r3, [r4, #8]
 80150e2:	68a3      	ldr	r3, [r4, #8]
 80150e4:	4a3f      	ldr	r2, [pc, #252]	; (80151e4 <tcp_input+0x2b0>)
 80150e6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80150e8:	4b35      	ldr	r3, [pc, #212]	; (80151c0 <tcp_input+0x28c>)
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	89db      	ldrh	r3, [r3, #14]
 80150ee:	b29b      	uxth	r3, r3
 80150f0:	4a33      	ldr	r2, [pc, #204]	; (80151c0 <tcp_input+0x28c>)
 80150f2:	6814      	ldr	r4, [r2, #0]
 80150f4:	4618      	mov	r0, r3
 80150f6:	f7fc f9b3 	bl	8011460 <lwip_htons>
 80150fa:	4603      	mov	r3, r0
 80150fc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80150fe:	4b30      	ldr	r3, [pc, #192]	; (80151c0 <tcp_input+0x28c>)
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	899b      	ldrh	r3, [r3, #12]
 8015104:	b29b      	uxth	r3, r3
 8015106:	4618      	mov	r0, r3
 8015108:	f7fc f9aa 	bl	8011460 <lwip_htons>
 801510c:	4603      	mov	r3, r0
 801510e:	b2db      	uxtb	r3, r3
 8015110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015114:	b2da      	uxtb	r2, r3
 8015116:	4b34      	ldr	r3, [pc, #208]	; (80151e8 <tcp_input+0x2b4>)
 8015118:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	891a      	ldrh	r2, [r3, #8]
 801511e:	4b33      	ldr	r3, [pc, #204]	; (80151ec <tcp_input+0x2b8>)
 8015120:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8015122:	4b31      	ldr	r3, [pc, #196]	; (80151e8 <tcp_input+0x2b4>)
 8015124:	781b      	ldrb	r3, [r3, #0]
 8015126:	f003 0303 	and.w	r3, r3, #3
 801512a:	2b00      	cmp	r3, #0
 801512c:	d00c      	beq.n	8015148 <tcp_input+0x214>
    tcplen++;
 801512e:	4b2f      	ldr	r3, [pc, #188]	; (80151ec <tcp_input+0x2b8>)
 8015130:	881b      	ldrh	r3, [r3, #0]
 8015132:	3301      	adds	r3, #1
 8015134:	b29a      	uxth	r2, r3
 8015136:	4b2d      	ldr	r3, [pc, #180]	; (80151ec <tcp_input+0x2b8>)
 8015138:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	891a      	ldrh	r2, [r3, #8]
 801513e:	4b2b      	ldr	r3, [pc, #172]	; (80151ec <tcp_input+0x2b8>)
 8015140:	881b      	ldrh	r3, [r3, #0]
 8015142:	429a      	cmp	r2, r3
 8015144:	f200 82e6 	bhi.w	8015714 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8015148:	2300      	movs	r3, #0
 801514a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801514c:	4b28      	ldr	r3, [pc, #160]	; (80151f0 <tcp_input+0x2bc>)
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	61fb      	str	r3, [r7, #28]
 8015152:	e09d      	b.n	8015290 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8015154:	69fb      	ldr	r3, [r7, #28]
 8015156:	7d1b      	ldrb	r3, [r3, #20]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d105      	bne.n	8015168 <tcp_input+0x234>
 801515c:	4b15      	ldr	r3, [pc, #84]	; (80151b4 <tcp_input+0x280>)
 801515e:	22fb      	movs	r2, #251	; 0xfb
 8015160:	4924      	ldr	r1, [pc, #144]	; (80151f4 <tcp_input+0x2c0>)
 8015162:	4816      	ldr	r0, [pc, #88]	; (80151bc <tcp_input+0x288>)
 8015164:	f007 fb8a 	bl	801c87c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8015168:	69fb      	ldr	r3, [r7, #28]
 801516a:	7d1b      	ldrb	r3, [r3, #20]
 801516c:	2b0a      	cmp	r3, #10
 801516e:	d105      	bne.n	801517c <tcp_input+0x248>
 8015170:	4b10      	ldr	r3, [pc, #64]	; (80151b4 <tcp_input+0x280>)
 8015172:	22fc      	movs	r2, #252	; 0xfc
 8015174:	4920      	ldr	r1, [pc, #128]	; (80151f8 <tcp_input+0x2c4>)
 8015176:	4811      	ldr	r0, [pc, #68]	; (80151bc <tcp_input+0x288>)
 8015178:	f007 fb80 	bl	801c87c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801517c:	69fb      	ldr	r3, [r7, #28]
 801517e:	7d1b      	ldrb	r3, [r3, #20]
 8015180:	2b01      	cmp	r3, #1
 8015182:	d105      	bne.n	8015190 <tcp_input+0x25c>
 8015184:	4b0b      	ldr	r3, [pc, #44]	; (80151b4 <tcp_input+0x280>)
 8015186:	22fd      	movs	r2, #253	; 0xfd
 8015188:	491c      	ldr	r1, [pc, #112]	; (80151fc <tcp_input+0x2c8>)
 801518a:	480c      	ldr	r0, [pc, #48]	; (80151bc <tcp_input+0x288>)
 801518c:	f007 fb76 	bl	801c87c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015190:	69fb      	ldr	r3, [r7, #28]
 8015192:	7a1b      	ldrb	r3, [r3, #8]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d033      	beq.n	8015200 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015198:	69fb      	ldr	r3, [r7, #28]
 801519a:	7a1a      	ldrb	r2, [r3, #8]
 801519c:	4b09      	ldr	r3, [pc, #36]	; (80151c4 <tcp_input+0x290>)
 801519e:	685b      	ldr	r3, [r3, #4]
 80151a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80151a4:	3301      	adds	r3, #1
 80151a6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80151a8:	429a      	cmp	r2, r3
 80151aa:	d029      	beq.n	8015200 <tcp_input+0x2cc>
      prev = pcb;
 80151ac:	69fb      	ldr	r3, [r7, #28]
 80151ae:	61bb      	str	r3, [r7, #24]
      continue;
 80151b0:	e06b      	b.n	801528a <tcp_input+0x356>
 80151b2:	bf00      	nop
 80151b4:	0801f4c0 	.word	0x0801f4c0
 80151b8:	0801f4f4 	.word	0x0801f4f4
 80151bc:	0801f50c 	.word	0x0801f50c
 80151c0:	200113d0 	.word	0x200113d0
 80151c4:	2000dc54 	.word	0x2000dc54
 80151c8:	200113d4 	.word	0x200113d4
 80151cc:	200113d8 	.word	0x200113d8
 80151d0:	200113d6 	.word	0x200113d6
 80151d4:	0801f534 	.word	0x0801f534
 80151d8:	0801f544 	.word	0x0801f544
 80151dc:	0801f550 	.word	0x0801f550
 80151e0:	200113e0 	.word	0x200113e0
 80151e4:	200113e4 	.word	0x200113e4
 80151e8:	200113ec 	.word	0x200113ec
 80151ec:	200113ea 	.word	0x200113ea
 80151f0:	200113b4 	.word	0x200113b4
 80151f4:	0801f570 	.word	0x0801f570
 80151f8:	0801f598 	.word	0x0801f598
 80151fc:	0801f5c4 	.word	0x0801f5c4
    }

    if (pcb->remote_port == tcphdr->src &&
 8015200:	69fb      	ldr	r3, [r7, #28]
 8015202:	8b1a      	ldrh	r2, [r3, #24]
 8015204:	4b72      	ldr	r3, [pc, #456]	; (80153d0 <tcp_input+0x49c>)
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	881b      	ldrh	r3, [r3, #0]
 801520a:	b29b      	uxth	r3, r3
 801520c:	429a      	cmp	r2, r3
 801520e:	d13a      	bne.n	8015286 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8015210:	69fb      	ldr	r3, [r7, #28]
 8015212:	8ada      	ldrh	r2, [r3, #22]
 8015214:	4b6e      	ldr	r3, [pc, #440]	; (80153d0 <tcp_input+0x49c>)
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	885b      	ldrh	r3, [r3, #2]
 801521a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801521c:	429a      	cmp	r2, r3
 801521e:	d132      	bne.n	8015286 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015220:	69fb      	ldr	r3, [r7, #28]
 8015222:	685a      	ldr	r2, [r3, #4]
 8015224:	4b6b      	ldr	r3, [pc, #428]	; (80153d4 <tcp_input+0x4a0>)
 8015226:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8015228:	429a      	cmp	r2, r3
 801522a:	d12c      	bne.n	8015286 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801522c:	69fb      	ldr	r3, [r7, #28]
 801522e:	681a      	ldr	r2, [r3, #0]
 8015230:	4b68      	ldr	r3, [pc, #416]	; (80153d4 <tcp_input+0x4a0>)
 8015232:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015234:	429a      	cmp	r2, r3
 8015236:	d126      	bne.n	8015286 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8015238:	69fb      	ldr	r3, [r7, #28]
 801523a:	68db      	ldr	r3, [r3, #12]
 801523c:	69fa      	ldr	r2, [r7, #28]
 801523e:	429a      	cmp	r2, r3
 8015240:	d106      	bne.n	8015250 <tcp_input+0x31c>
 8015242:	4b65      	ldr	r3, [pc, #404]	; (80153d8 <tcp_input+0x4a4>)
 8015244:	f240 120d 	movw	r2, #269	; 0x10d
 8015248:	4964      	ldr	r1, [pc, #400]	; (80153dc <tcp_input+0x4a8>)
 801524a:	4865      	ldr	r0, [pc, #404]	; (80153e0 <tcp_input+0x4ac>)
 801524c:	f007 fb16 	bl	801c87c <iprintf>
      if (prev != NULL) {
 8015250:	69bb      	ldr	r3, [r7, #24]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d00a      	beq.n	801526c <tcp_input+0x338>
        prev->next = pcb->next;
 8015256:	69fb      	ldr	r3, [r7, #28]
 8015258:	68da      	ldr	r2, [r3, #12]
 801525a:	69bb      	ldr	r3, [r7, #24]
 801525c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801525e:	4b61      	ldr	r3, [pc, #388]	; (80153e4 <tcp_input+0x4b0>)
 8015260:	681a      	ldr	r2, [r3, #0]
 8015262:	69fb      	ldr	r3, [r7, #28]
 8015264:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8015266:	4a5f      	ldr	r2, [pc, #380]	; (80153e4 <tcp_input+0x4b0>)
 8015268:	69fb      	ldr	r3, [r7, #28]
 801526a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801526c:	69fb      	ldr	r3, [r7, #28]
 801526e:	68db      	ldr	r3, [r3, #12]
 8015270:	69fa      	ldr	r2, [r7, #28]
 8015272:	429a      	cmp	r2, r3
 8015274:	d111      	bne.n	801529a <tcp_input+0x366>
 8015276:	4b58      	ldr	r3, [pc, #352]	; (80153d8 <tcp_input+0x4a4>)
 8015278:	f240 1215 	movw	r2, #277	; 0x115
 801527c:	495a      	ldr	r1, [pc, #360]	; (80153e8 <tcp_input+0x4b4>)
 801527e:	4858      	ldr	r0, [pc, #352]	; (80153e0 <tcp_input+0x4ac>)
 8015280:	f007 fafc 	bl	801c87c <iprintf>
      break;
 8015284:	e009      	b.n	801529a <tcp_input+0x366>
    }
    prev = pcb;
 8015286:	69fb      	ldr	r3, [r7, #28]
 8015288:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801528a:	69fb      	ldr	r3, [r7, #28]
 801528c:	68db      	ldr	r3, [r3, #12]
 801528e:	61fb      	str	r3, [r7, #28]
 8015290:	69fb      	ldr	r3, [r7, #28]
 8015292:	2b00      	cmp	r3, #0
 8015294:	f47f af5e 	bne.w	8015154 <tcp_input+0x220>
 8015298:	e000      	b.n	801529c <tcp_input+0x368>
      break;
 801529a:	bf00      	nop
  }

  if (pcb == NULL) {
 801529c:	69fb      	ldr	r3, [r7, #28]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	f040 80aa 	bne.w	80153f8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80152a4:	4b51      	ldr	r3, [pc, #324]	; (80153ec <tcp_input+0x4b8>)
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	61fb      	str	r3, [r7, #28]
 80152aa:	e03f      	b.n	801532c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80152ac:	69fb      	ldr	r3, [r7, #28]
 80152ae:	7d1b      	ldrb	r3, [r3, #20]
 80152b0:	2b0a      	cmp	r3, #10
 80152b2:	d006      	beq.n	80152c2 <tcp_input+0x38e>
 80152b4:	4b48      	ldr	r3, [pc, #288]	; (80153d8 <tcp_input+0x4a4>)
 80152b6:	f240 121f 	movw	r2, #287	; 0x11f
 80152ba:	494d      	ldr	r1, [pc, #308]	; (80153f0 <tcp_input+0x4bc>)
 80152bc:	4848      	ldr	r0, [pc, #288]	; (80153e0 <tcp_input+0x4ac>)
 80152be:	f007 fadd 	bl	801c87c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80152c2:	69fb      	ldr	r3, [r7, #28]
 80152c4:	7a1b      	ldrb	r3, [r3, #8]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d009      	beq.n	80152de <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80152ca:	69fb      	ldr	r3, [r7, #28]
 80152cc:	7a1a      	ldrb	r2, [r3, #8]
 80152ce:	4b41      	ldr	r3, [pc, #260]	; (80153d4 <tcp_input+0x4a0>)
 80152d0:	685b      	ldr	r3, [r3, #4]
 80152d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80152d6:	3301      	adds	r3, #1
 80152d8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80152da:	429a      	cmp	r2, r3
 80152dc:	d122      	bne.n	8015324 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80152de:	69fb      	ldr	r3, [r7, #28]
 80152e0:	8b1a      	ldrh	r2, [r3, #24]
 80152e2:	4b3b      	ldr	r3, [pc, #236]	; (80153d0 <tcp_input+0x49c>)
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	881b      	ldrh	r3, [r3, #0]
 80152e8:	b29b      	uxth	r3, r3
 80152ea:	429a      	cmp	r2, r3
 80152ec:	d11b      	bne.n	8015326 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80152ee:	69fb      	ldr	r3, [r7, #28]
 80152f0:	8ada      	ldrh	r2, [r3, #22]
 80152f2:	4b37      	ldr	r3, [pc, #220]	; (80153d0 <tcp_input+0x49c>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	885b      	ldrh	r3, [r3, #2]
 80152f8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80152fa:	429a      	cmp	r2, r3
 80152fc:	d113      	bne.n	8015326 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80152fe:	69fb      	ldr	r3, [r7, #28]
 8015300:	685a      	ldr	r2, [r3, #4]
 8015302:	4b34      	ldr	r3, [pc, #208]	; (80153d4 <tcp_input+0x4a0>)
 8015304:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8015306:	429a      	cmp	r2, r3
 8015308:	d10d      	bne.n	8015326 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801530a:	69fb      	ldr	r3, [r7, #28]
 801530c:	681a      	ldr	r2, [r3, #0]
 801530e:	4b31      	ldr	r3, [pc, #196]	; (80153d4 <tcp_input+0x4a0>)
 8015310:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015312:	429a      	cmp	r2, r3
 8015314:	d107      	bne.n	8015326 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8015316:	69f8      	ldr	r0, [r7, #28]
 8015318:	f000 fb56 	bl	80159c8 <tcp_timewait_input>
        }
        pbuf_free(p);
 801531c:	6878      	ldr	r0, [r7, #4]
 801531e:	f7fd fd4d 	bl	8012dbc <pbuf_free>
        return;
 8015322:	e1fd      	b.n	8015720 <tcp_input+0x7ec>
        continue;
 8015324:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015326:	69fb      	ldr	r3, [r7, #28]
 8015328:	68db      	ldr	r3, [r3, #12]
 801532a:	61fb      	str	r3, [r7, #28]
 801532c:	69fb      	ldr	r3, [r7, #28]
 801532e:	2b00      	cmp	r3, #0
 8015330:	d1bc      	bne.n	80152ac <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8015332:	2300      	movs	r3, #0
 8015334:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015336:	4b2f      	ldr	r3, [pc, #188]	; (80153f4 <tcp_input+0x4c0>)
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	617b      	str	r3, [r7, #20]
 801533c:	e02a      	b.n	8015394 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801533e:	697b      	ldr	r3, [r7, #20]
 8015340:	7a1b      	ldrb	r3, [r3, #8]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d00c      	beq.n	8015360 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015346:	697b      	ldr	r3, [r7, #20]
 8015348:	7a1a      	ldrb	r2, [r3, #8]
 801534a:	4b22      	ldr	r3, [pc, #136]	; (80153d4 <tcp_input+0x4a0>)
 801534c:	685b      	ldr	r3, [r3, #4]
 801534e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015352:	3301      	adds	r3, #1
 8015354:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015356:	429a      	cmp	r2, r3
 8015358:	d002      	beq.n	8015360 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801535a:	697b      	ldr	r3, [r7, #20]
 801535c:	61bb      	str	r3, [r7, #24]
        continue;
 801535e:	e016      	b.n	801538e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8015360:	697b      	ldr	r3, [r7, #20]
 8015362:	8ada      	ldrh	r2, [r3, #22]
 8015364:	4b1a      	ldr	r3, [pc, #104]	; (80153d0 <tcp_input+0x49c>)
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	885b      	ldrh	r3, [r3, #2]
 801536a:	b29b      	uxth	r3, r3
 801536c:	429a      	cmp	r2, r3
 801536e:	d10c      	bne.n	801538a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8015370:	697b      	ldr	r3, [r7, #20]
 8015372:	681a      	ldr	r2, [r3, #0]
 8015374:	4b17      	ldr	r3, [pc, #92]	; (80153d4 <tcp_input+0x4a0>)
 8015376:	695b      	ldr	r3, [r3, #20]
 8015378:	429a      	cmp	r2, r3
 801537a:	d00f      	beq.n	801539c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801537c:	697b      	ldr	r3, [r7, #20]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d00d      	beq.n	801539e <tcp_input+0x46a>
 8015382:	697b      	ldr	r3, [r7, #20]
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d009      	beq.n	801539e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801538a:	697b      	ldr	r3, [r7, #20]
 801538c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801538e:	697b      	ldr	r3, [r7, #20]
 8015390:	68db      	ldr	r3, [r3, #12]
 8015392:	617b      	str	r3, [r7, #20]
 8015394:	697b      	ldr	r3, [r7, #20]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d1d1      	bne.n	801533e <tcp_input+0x40a>
 801539a:	e000      	b.n	801539e <tcp_input+0x46a>
            break;
 801539c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801539e:	697b      	ldr	r3, [r7, #20]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d029      	beq.n	80153f8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80153a4:	69bb      	ldr	r3, [r7, #24]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d00a      	beq.n	80153c0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80153aa:	697b      	ldr	r3, [r7, #20]
 80153ac:	68da      	ldr	r2, [r3, #12]
 80153ae:	69bb      	ldr	r3, [r7, #24]
 80153b0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80153b2:	4b10      	ldr	r3, [pc, #64]	; (80153f4 <tcp_input+0x4c0>)
 80153b4:	681a      	ldr	r2, [r3, #0]
 80153b6:	697b      	ldr	r3, [r7, #20]
 80153b8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80153ba:	4a0e      	ldr	r2, [pc, #56]	; (80153f4 <tcp_input+0x4c0>)
 80153bc:	697b      	ldr	r3, [r7, #20]
 80153be:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80153c0:	6978      	ldr	r0, [r7, #20]
 80153c2:	f000 fa03 	bl	80157cc <tcp_listen_input>
      }
      pbuf_free(p);
 80153c6:	6878      	ldr	r0, [r7, #4]
 80153c8:	f7fd fcf8 	bl	8012dbc <pbuf_free>
      return;
 80153cc:	e1a8      	b.n	8015720 <tcp_input+0x7ec>
 80153ce:	bf00      	nop
 80153d0:	200113d0 	.word	0x200113d0
 80153d4:	2000dc54 	.word	0x2000dc54
 80153d8:	0801f4c0 	.word	0x0801f4c0
 80153dc:	0801f5ec 	.word	0x0801f5ec
 80153e0:	0801f50c 	.word	0x0801f50c
 80153e4:	200113b4 	.word	0x200113b4
 80153e8:	0801f618 	.word	0x0801f618
 80153ec:	200113b8 	.word	0x200113b8
 80153f0:	0801f644 	.word	0x0801f644
 80153f4:	200113b0 	.word	0x200113b0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80153f8:	69fb      	ldr	r3, [r7, #28]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	f000 8158 	beq.w	80156b0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8015400:	4b95      	ldr	r3, [pc, #596]	; (8015658 <tcp_input+0x724>)
 8015402:	2200      	movs	r2, #0
 8015404:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	891a      	ldrh	r2, [r3, #8]
 801540a:	4b93      	ldr	r3, [pc, #588]	; (8015658 <tcp_input+0x724>)
 801540c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801540e:	4a92      	ldr	r2, [pc, #584]	; (8015658 <tcp_input+0x724>)
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8015414:	4b91      	ldr	r3, [pc, #580]	; (801565c <tcp_input+0x728>)
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	4a8f      	ldr	r2, [pc, #572]	; (8015658 <tcp_input+0x724>)
 801541a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801541c:	4b90      	ldr	r3, [pc, #576]	; (8015660 <tcp_input+0x72c>)
 801541e:	2200      	movs	r2, #0
 8015420:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8015422:	4b90      	ldr	r3, [pc, #576]	; (8015664 <tcp_input+0x730>)
 8015424:	2200      	movs	r2, #0
 8015426:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8015428:	4b8f      	ldr	r3, [pc, #572]	; (8015668 <tcp_input+0x734>)
 801542a:	2200      	movs	r2, #0
 801542c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801542e:	4b8f      	ldr	r3, [pc, #572]	; (801566c <tcp_input+0x738>)
 8015430:	781b      	ldrb	r3, [r3, #0]
 8015432:	f003 0308 	and.w	r3, r3, #8
 8015436:	2b00      	cmp	r3, #0
 8015438:	d006      	beq.n	8015448 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	7b5b      	ldrb	r3, [r3, #13]
 801543e:	f043 0301 	orr.w	r3, r3, #1
 8015442:	b2da      	uxtb	r2, r3
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8015448:	69fb      	ldr	r3, [r7, #28]
 801544a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801544c:	2b00      	cmp	r3, #0
 801544e:	d017      	beq.n	8015480 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015450:	69f8      	ldr	r0, [r7, #28]
 8015452:	f7ff f85b 	bl	801450c <tcp_process_refused_data>
 8015456:	4603      	mov	r3, r0
 8015458:	f113 0f0d 	cmn.w	r3, #13
 801545c:	d007      	beq.n	801546e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801545e:	69fb      	ldr	r3, [r7, #28]
 8015460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015462:	2b00      	cmp	r3, #0
 8015464:	d00c      	beq.n	8015480 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015466:	4b82      	ldr	r3, [pc, #520]	; (8015670 <tcp_input+0x73c>)
 8015468:	881b      	ldrh	r3, [r3, #0]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d008      	beq.n	8015480 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801546e:	69fb      	ldr	r3, [r7, #28]
 8015470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015472:	2b00      	cmp	r3, #0
 8015474:	f040 80e3 	bne.w	801563e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8015478:	69f8      	ldr	r0, [r7, #28]
 801547a:	f003 fe05 	bl	8019088 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801547e:	e0de      	b.n	801563e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8015480:	4a7c      	ldr	r2, [pc, #496]	; (8015674 <tcp_input+0x740>)
 8015482:	69fb      	ldr	r3, [r7, #28]
 8015484:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8015486:	69f8      	ldr	r0, [r7, #28]
 8015488:	f000 fb18 	bl	8015abc <tcp_process>
 801548c:	4603      	mov	r3, r0
 801548e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8015490:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015494:	f113 0f0d 	cmn.w	r3, #13
 8015498:	f000 80d3 	beq.w	8015642 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801549c:	4b71      	ldr	r3, [pc, #452]	; (8015664 <tcp_input+0x730>)
 801549e:	781b      	ldrb	r3, [r3, #0]
 80154a0:	f003 0308 	and.w	r3, r3, #8
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d015      	beq.n	80154d4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80154a8:	69fb      	ldr	r3, [r7, #28]
 80154aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d008      	beq.n	80154c4 <tcp_input+0x590>
 80154b2:	69fb      	ldr	r3, [r7, #28]
 80154b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80154b8:	69fa      	ldr	r2, [r7, #28]
 80154ba:	6912      	ldr	r2, [r2, #16]
 80154bc:	f06f 010d 	mvn.w	r1, #13
 80154c0:	4610      	mov	r0, r2
 80154c2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80154c4:	69f9      	ldr	r1, [r7, #28]
 80154c6:	486c      	ldr	r0, [pc, #432]	; (8015678 <tcp_input+0x744>)
 80154c8:	f7ff fbbc 	bl	8014c44 <tcp_pcb_remove>
        tcp_free(pcb);
 80154cc:	69f8      	ldr	r0, [r7, #28]
 80154ce:	f7fd ff21 	bl	8013314 <tcp_free>
 80154d2:	e0da      	b.n	801568a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80154d4:	2300      	movs	r3, #0
 80154d6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80154d8:	4b63      	ldr	r3, [pc, #396]	; (8015668 <tcp_input+0x734>)
 80154da:	881b      	ldrh	r3, [r3, #0]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d01d      	beq.n	801551c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80154e0:	4b61      	ldr	r3, [pc, #388]	; (8015668 <tcp_input+0x734>)
 80154e2:	881b      	ldrh	r3, [r3, #0]
 80154e4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80154e6:	69fb      	ldr	r3, [r7, #28]
 80154e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d00a      	beq.n	8015506 <tcp_input+0x5d2>
 80154f0:	69fb      	ldr	r3, [r7, #28]
 80154f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80154f6:	69fa      	ldr	r2, [r7, #28]
 80154f8:	6910      	ldr	r0, [r2, #16]
 80154fa:	89fa      	ldrh	r2, [r7, #14]
 80154fc:	69f9      	ldr	r1, [r7, #28]
 80154fe:	4798      	blx	r3
 8015500:	4603      	mov	r3, r0
 8015502:	74fb      	strb	r3, [r7, #19]
 8015504:	e001      	b.n	801550a <tcp_input+0x5d6>
 8015506:	2300      	movs	r3, #0
 8015508:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801550a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801550e:	f113 0f0d 	cmn.w	r3, #13
 8015512:	f000 8098 	beq.w	8015646 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8015516:	4b54      	ldr	r3, [pc, #336]	; (8015668 <tcp_input+0x734>)
 8015518:	2200      	movs	r2, #0
 801551a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801551c:	69f8      	ldr	r0, [r7, #28]
 801551e:	f000 f915 	bl	801574c <tcp_input_delayed_close>
 8015522:	4603      	mov	r3, r0
 8015524:	2b00      	cmp	r3, #0
 8015526:	f040 8090 	bne.w	801564a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801552a:	4b4d      	ldr	r3, [pc, #308]	; (8015660 <tcp_input+0x72c>)
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d041      	beq.n	80155b6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8015532:	69fb      	ldr	r3, [r7, #28]
 8015534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015536:	2b00      	cmp	r3, #0
 8015538:	d006      	beq.n	8015548 <tcp_input+0x614>
 801553a:	4b50      	ldr	r3, [pc, #320]	; (801567c <tcp_input+0x748>)
 801553c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8015540:	494f      	ldr	r1, [pc, #316]	; (8015680 <tcp_input+0x74c>)
 8015542:	4850      	ldr	r0, [pc, #320]	; (8015684 <tcp_input+0x750>)
 8015544:	f007 f99a 	bl	801c87c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8015548:	69fb      	ldr	r3, [r7, #28]
 801554a:	8b5b      	ldrh	r3, [r3, #26]
 801554c:	f003 0310 	and.w	r3, r3, #16
 8015550:	2b00      	cmp	r3, #0
 8015552:	d008      	beq.n	8015566 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8015554:	4b42      	ldr	r3, [pc, #264]	; (8015660 <tcp_input+0x72c>)
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	4618      	mov	r0, r3
 801555a:	f7fd fc2f 	bl	8012dbc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801555e:	69f8      	ldr	r0, [r7, #28]
 8015560:	f7fe fa1c 	bl	801399c <tcp_abort>
            goto aborted;
 8015564:	e091      	b.n	801568a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8015566:	69fb      	ldr	r3, [r7, #28]
 8015568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801556c:	2b00      	cmp	r3, #0
 801556e:	d00c      	beq.n	801558a <tcp_input+0x656>
 8015570:	69fb      	ldr	r3, [r7, #28]
 8015572:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015576:	69fb      	ldr	r3, [r7, #28]
 8015578:	6918      	ldr	r0, [r3, #16]
 801557a:	4b39      	ldr	r3, [pc, #228]	; (8015660 <tcp_input+0x72c>)
 801557c:	681a      	ldr	r2, [r3, #0]
 801557e:	2300      	movs	r3, #0
 8015580:	69f9      	ldr	r1, [r7, #28]
 8015582:	47a0      	blx	r4
 8015584:	4603      	mov	r3, r0
 8015586:	74fb      	strb	r3, [r7, #19]
 8015588:	e008      	b.n	801559c <tcp_input+0x668>
 801558a:	4b35      	ldr	r3, [pc, #212]	; (8015660 <tcp_input+0x72c>)
 801558c:	681a      	ldr	r2, [r3, #0]
 801558e:	2300      	movs	r3, #0
 8015590:	69f9      	ldr	r1, [r7, #28]
 8015592:	2000      	movs	r0, #0
 8015594:	f7ff f890 	bl	80146b8 <tcp_recv_null>
 8015598:	4603      	mov	r3, r0
 801559a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801559c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80155a0:	f113 0f0d 	cmn.w	r3, #13
 80155a4:	d053      	beq.n	801564e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80155a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d003      	beq.n	80155b6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80155ae:	4b2c      	ldr	r3, [pc, #176]	; (8015660 <tcp_input+0x72c>)
 80155b0:	681a      	ldr	r2, [r3, #0]
 80155b2:	69fb      	ldr	r3, [r7, #28]
 80155b4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80155b6:	4b2b      	ldr	r3, [pc, #172]	; (8015664 <tcp_input+0x730>)
 80155b8:	781b      	ldrb	r3, [r3, #0]
 80155ba:	f003 0320 	and.w	r3, r3, #32
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d030      	beq.n	8015624 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80155c2:	69fb      	ldr	r3, [r7, #28]
 80155c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d009      	beq.n	80155de <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80155ca:	69fb      	ldr	r3, [r7, #28]
 80155cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80155ce:	7b5a      	ldrb	r2, [r3, #13]
 80155d0:	69fb      	ldr	r3, [r7, #28]
 80155d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80155d4:	f042 0220 	orr.w	r2, r2, #32
 80155d8:	b2d2      	uxtb	r2, r2
 80155da:	735a      	strb	r2, [r3, #13]
 80155dc:	e022      	b.n	8015624 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80155de:	69fb      	ldr	r3, [r7, #28]
 80155e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80155e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80155e6:	d005      	beq.n	80155f4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80155e8:	69fb      	ldr	r3, [r7, #28]
 80155ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80155ec:	3301      	adds	r3, #1
 80155ee:	b29a      	uxth	r2, r3
 80155f0:	69fb      	ldr	r3, [r7, #28]
 80155f2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80155f4:	69fb      	ldr	r3, [r7, #28]
 80155f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d00b      	beq.n	8015616 <tcp_input+0x6e2>
 80155fe:	69fb      	ldr	r3, [r7, #28]
 8015600:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015604:	69fb      	ldr	r3, [r7, #28]
 8015606:	6918      	ldr	r0, [r3, #16]
 8015608:	2300      	movs	r3, #0
 801560a:	2200      	movs	r2, #0
 801560c:	69f9      	ldr	r1, [r7, #28]
 801560e:	47a0      	blx	r4
 8015610:	4603      	mov	r3, r0
 8015612:	74fb      	strb	r3, [r7, #19]
 8015614:	e001      	b.n	801561a <tcp_input+0x6e6>
 8015616:	2300      	movs	r3, #0
 8015618:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801561a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801561e:	f113 0f0d 	cmn.w	r3, #13
 8015622:	d016      	beq.n	8015652 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8015624:	4b13      	ldr	r3, [pc, #76]	; (8015674 <tcp_input+0x740>)
 8015626:	2200      	movs	r2, #0
 8015628:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801562a:	69f8      	ldr	r0, [r7, #28]
 801562c:	f000 f88e 	bl	801574c <tcp_input_delayed_close>
 8015630:	4603      	mov	r3, r0
 8015632:	2b00      	cmp	r3, #0
 8015634:	d128      	bne.n	8015688 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8015636:	69f8      	ldr	r0, [r7, #28]
 8015638:	f002 ff20 	bl	801847c <tcp_output>
 801563c:	e025      	b.n	801568a <tcp_input+0x756>
        goto aborted;
 801563e:	bf00      	nop
 8015640:	e023      	b.n	801568a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8015642:	bf00      	nop
 8015644:	e021      	b.n	801568a <tcp_input+0x756>
              goto aborted;
 8015646:	bf00      	nop
 8015648:	e01f      	b.n	801568a <tcp_input+0x756>
          goto aborted;
 801564a:	bf00      	nop
 801564c:	e01d      	b.n	801568a <tcp_input+0x756>
            goto aborted;
 801564e:	bf00      	nop
 8015650:	e01b      	b.n	801568a <tcp_input+0x756>
              goto aborted;
 8015652:	bf00      	nop
 8015654:	e019      	b.n	801568a <tcp_input+0x756>
 8015656:	bf00      	nop
 8015658:	200113c0 	.word	0x200113c0
 801565c:	200113d0 	.word	0x200113d0
 8015660:	200113f0 	.word	0x200113f0
 8015664:	200113ed 	.word	0x200113ed
 8015668:	200113e8 	.word	0x200113e8
 801566c:	200113ec 	.word	0x200113ec
 8015670:	200113ea 	.word	0x200113ea
 8015674:	200113f4 	.word	0x200113f4
 8015678:	200113b4 	.word	0x200113b4
 801567c:	0801f4c0 	.word	0x0801f4c0
 8015680:	0801f674 	.word	0x0801f674
 8015684:	0801f50c 	.word	0x0801f50c
          goto aborted;
 8015688:	bf00      	nop
    tcp_input_pcb = NULL;
 801568a:	4b27      	ldr	r3, [pc, #156]	; (8015728 <tcp_input+0x7f4>)
 801568c:	2200      	movs	r2, #0
 801568e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8015690:	4b26      	ldr	r3, [pc, #152]	; (801572c <tcp_input+0x7f8>)
 8015692:	2200      	movs	r2, #0
 8015694:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8015696:	4b26      	ldr	r3, [pc, #152]	; (8015730 <tcp_input+0x7fc>)
 8015698:	685b      	ldr	r3, [r3, #4]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d03f      	beq.n	801571e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801569e:	4b24      	ldr	r3, [pc, #144]	; (8015730 <tcp_input+0x7fc>)
 80156a0:	685b      	ldr	r3, [r3, #4]
 80156a2:	4618      	mov	r0, r3
 80156a4:	f7fd fb8a 	bl	8012dbc <pbuf_free>
      inseg.p = NULL;
 80156a8:	4b21      	ldr	r3, [pc, #132]	; (8015730 <tcp_input+0x7fc>)
 80156aa:	2200      	movs	r2, #0
 80156ac:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80156ae:	e036      	b.n	801571e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80156b0:	4b20      	ldr	r3, [pc, #128]	; (8015734 <tcp_input+0x800>)
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	899b      	ldrh	r3, [r3, #12]
 80156b6:	b29b      	uxth	r3, r3
 80156b8:	4618      	mov	r0, r3
 80156ba:	f7fb fed1 	bl	8011460 <lwip_htons>
 80156be:	4603      	mov	r3, r0
 80156c0:	b2db      	uxtb	r3, r3
 80156c2:	f003 0304 	and.w	r3, r3, #4
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d118      	bne.n	80156fc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80156ca:	4b1b      	ldr	r3, [pc, #108]	; (8015738 <tcp_input+0x804>)
 80156cc:	6819      	ldr	r1, [r3, #0]
 80156ce:	4b1b      	ldr	r3, [pc, #108]	; (801573c <tcp_input+0x808>)
 80156d0:	881b      	ldrh	r3, [r3, #0]
 80156d2:	461a      	mov	r2, r3
 80156d4:	4b1a      	ldr	r3, [pc, #104]	; (8015740 <tcp_input+0x80c>)
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80156da:	4b16      	ldr	r3, [pc, #88]	; (8015734 <tcp_input+0x800>)
 80156dc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80156de:	885b      	ldrh	r3, [r3, #2]
 80156e0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80156e2:	4a14      	ldr	r2, [pc, #80]	; (8015734 <tcp_input+0x800>)
 80156e4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80156e6:	8812      	ldrh	r2, [r2, #0]
 80156e8:	b292      	uxth	r2, r2
 80156ea:	9202      	str	r2, [sp, #8]
 80156ec:	9301      	str	r3, [sp, #4]
 80156ee:	4b15      	ldr	r3, [pc, #84]	; (8015744 <tcp_input+0x810>)
 80156f0:	9300      	str	r3, [sp, #0]
 80156f2:	4b15      	ldr	r3, [pc, #84]	; (8015748 <tcp_input+0x814>)
 80156f4:	4602      	mov	r2, r0
 80156f6:	2000      	movs	r0, #0
 80156f8:	f003 fc74 	bl	8018fe4 <tcp_rst>
    pbuf_free(p);
 80156fc:	6878      	ldr	r0, [r7, #4]
 80156fe:	f7fd fb5d 	bl	8012dbc <pbuf_free>
  return;
 8015702:	e00c      	b.n	801571e <tcp_input+0x7ea>
    goto dropped;
 8015704:	bf00      	nop
 8015706:	e006      	b.n	8015716 <tcp_input+0x7e2>
    goto dropped;
 8015708:	bf00      	nop
 801570a:	e004      	b.n	8015716 <tcp_input+0x7e2>
    goto dropped;
 801570c:	bf00      	nop
 801570e:	e002      	b.n	8015716 <tcp_input+0x7e2>
      goto dropped;
 8015710:	bf00      	nop
 8015712:	e000      	b.n	8015716 <tcp_input+0x7e2>
      goto dropped;
 8015714:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8015716:	6878      	ldr	r0, [r7, #4]
 8015718:	f7fd fb50 	bl	8012dbc <pbuf_free>
 801571c:	e000      	b.n	8015720 <tcp_input+0x7ec>
  return;
 801571e:	bf00      	nop
}
 8015720:	3724      	adds	r7, #36	; 0x24
 8015722:	46bd      	mov	sp, r7
 8015724:	bd90      	pop	{r4, r7, pc}
 8015726:	bf00      	nop
 8015728:	200113f4 	.word	0x200113f4
 801572c:	200113f0 	.word	0x200113f0
 8015730:	200113c0 	.word	0x200113c0
 8015734:	200113d0 	.word	0x200113d0
 8015738:	200113e4 	.word	0x200113e4
 801573c:	200113ea 	.word	0x200113ea
 8015740:	200113e0 	.word	0x200113e0
 8015744:	2000dc64 	.word	0x2000dc64
 8015748:	2000dc68 	.word	0x2000dc68

0801574c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b082      	sub	sp, #8
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d106      	bne.n	8015768 <tcp_input_delayed_close+0x1c>
 801575a:	4b17      	ldr	r3, [pc, #92]	; (80157b8 <tcp_input_delayed_close+0x6c>)
 801575c:	f240 225a 	movw	r2, #602	; 0x25a
 8015760:	4916      	ldr	r1, [pc, #88]	; (80157bc <tcp_input_delayed_close+0x70>)
 8015762:	4817      	ldr	r0, [pc, #92]	; (80157c0 <tcp_input_delayed_close+0x74>)
 8015764:	f007 f88a 	bl	801c87c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8015768:	4b16      	ldr	r3, [pc, #88]	; (80157c4 <tcp_input_delayed_close+0x78>)
 801576a:	781b      	ldrb	r3, [r3, #0]
 801576c:	f003 0310 	and.w	r3, r3, #16
 8015770:	2b00      	cmp	r3, #0
 8015772:	d01c      	beq.n	80157ae <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	8b5b      	ldrh	r3, [r3, #26]
 8015778:	f003 0310 	and.w	r3, r3, #16
 801577c:	2b00      	cmp	r3, #0
 801577e:	d10d      	bne.n	801579c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015786:	2b00      	cmp	r3, #0
 8015788:	d008      	beq.n	801579c <tcp_input_delayed_close+0x50>
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015790:	687a      	ldr	r2, [r7, #4]
 8015792:	6912      	ldr	r2, [r2, #16]
 8015794:	f06f 010e 	mvn.w	r1, #14
 8015798:	4610      	mov	r0, r2
 801579a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801579c:	6879      	ldr	r1, [r7, #4]
 801579e:	480a      	ldr	r0, [pc, #40]	; (80157c8 <tcp_input_delayed_close+0x7c>)
 80157a0:	f7ff fa50 	bl	8014c44 <tcp_pcb_remove>
    tcp_free(pcb);
 80157a4:	6878      	ldr	r0, [r7, #4]
 80157a6:	f7fd fdb5 	bl	8013314 <tcp_free>
    return 1;
 80157aa:	2301      	movs	r3, #1
 80157ac:	e000      	b.n	80157b0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80157ae:	2300      	movs	r3, #0
}
 80157b0:	4618      	mov	r0, r3
 80157b2:	3708      	adds	r7, #8
 80157b4:	46bd      	mov	sp, r7
 80157b6:	bd80      	pop	{r7, pc}
 80157b8:	0801f4c0 	.word	0x0801f4c0
 80157bc:	0801f690 	.word	0x0801f690
 80157c0:	0801f50c 	.word	0x0801f50c
 80157c4:	200113ed 	.word	0x200113ed
 80157c8:	200113b4 	.word	0x200113b4

080157cc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80157cc:	b590      	push	{r4, r7, lr}
 80157ce:	b08b      	sub	sp, #44	; 0x2c
 80157d0:	af04      	add	r7, sp, #16
 80157d2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80157d4:	4b6f      	ldr	r3, [pc, #444]	; (8015994 <tcp_listen_input+0x1c8>)
 80157d6:	781b      	ldrb	r3, [r3, #0]
 80157d8:	f003 0304 	and.w	r3, r3, #4
 80157dc:	2b00      	cmp	r3, #0
 80157de:	f040 80d2 	bne.w	8015986 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d106      	bne.n	80157f6 <tcp_listen_input+0x2a>
 80157e8:	4b6b      	ldr	r3, [pc, #428]	; (8015998 <tcp_listen_input+0x1cc>)
 80157ea:	f240 2281 	movw	r2, #641	; 0x281
 80157ee:	496b      	ldr	r1, [pc, #428]	; (801599c <tcp_listen_input+0x1d0>)
 80157f0:	486b      	ldr	r0, [pc, #428]	; (80159a0 <tcp_listen_input+0x1d4>)
 80157f2:	f007 f843 	bl	801c87c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80157f6:	4b67      	ldr	r3, [pc, #412]	; (8015994 <tcp_listen_input+0x1c8>)
 80157f8:	781b      	ldrb	r3, [r3, #0]
 80157fa:	f003 0310 	and.w	r3, r3, #16
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d019      	beq.n	8015836 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015802:	4b68      	ldr	r3, [pc, #416]	; (80159a4 <tcp_listen_input+0x1d8>)
 8015804:	6819      	ldr	r1, [r3, #0]
 8015806:	4b68      	ldr	r3, [pc, #416]	; (80159a8 <tcp_listen_input+0x1dc>)
 8015808:	881b      	ldrh	r3, [r3, #0]
 801580a:	461a      	mov	r2, r3
 801580c:	4b67      	ldr	r3, [pc, #412]	; (80159ac <tcp_listen_input+0x1e0>)
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015812:	4b67      	ldr	r3, [pc, #412]	; (80159b0 <tcp_listen_input+0x1e4>)
 8015814:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015816:	885b      	ldrh	r3, [r3, #2]
 8015818:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801581a:	4a65      	ldr	r2, [pc, #404]	; (80159b0 <tcp_listen_input+0x1e4>)
 801581c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801581e:	8812      	ldrh	r2, [r2, #0]
 8015820:	b292      	uxth	r2, r2
 8015822:	9202      	str	r2, [sp, #8]
 8015824:	9301      	str	r3, [sp, #4]
 8015826:	4b63      	ldr	r3, [pc, #396]	; (80159b4 <tcp_listen_input+0x1e8>)
 8015828:	9300      	str	r3, [sp, #0]
 801582a:	4b63      	ldr	r3, [pc, #396]	; (80159b8 <tcp_listen_input+0x1ec>)
 801582c:	4602      	mov	r2, r0
 801582e:	6878      	ldr	r0, [r7, #4]
 8015830:	f003 fbd8 	bl	8018fe4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8015834:	e0a9      	b.n	801598a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8015836:	4b57      	ldr	r3, [pc, #348]	; (8015994 <tcp_listen_input+0x1c8>)
 8015838:	781b      	ldrb	r3, [r3, #0]
 801583a:	f003 0302 	and.w	r3, r3, #2
 801583e:	2b00      	cmp	r3, #0
 8015840:	f000 80a3 	beq.w	801598a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	7d5b      	ldrb	r3, [r3, #21]
 8015848:	4618      	mov	r0, r3
 801584a:	f7ff f859 	bl	8014900 <tcp_alloc>
 801584e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8015850:	697b      	ldr	r3, [r7, #20]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d111      	bne.n	801587a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	699b      	ldr	r3, [r3, #24]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d00a      	beq.n	8015874 <tcp_listen_input+0xa8>
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	699b      	ldr	r3, [r3, #24]
 8015862:	687a      	ldr	r2, [r7, #4]
 8015864:	6910      	ldr	r0, [r2, #16]
 8015866:	f04f 32ff 	mov.w	r2, #4294967295
 801586a:	2100      	movs	r1, #0
 801586c:	4798      	blx	r3
 801586e:	4603      	mov	r3, r0
 8015870:	73bb      	strb	r3, [r7, #14]
      return;
 8015872:	e08b      	b.n	801598c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015874:	23f0      	movs	r3, #240	; 0xf0
 8015876:	73bb      	strb	r3, [r7, #14]
      return;
 8015878:	e088      	b.n	801598c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801587a:	4b50      	ldr	r3, [pc, #320]	; (80159bc <tcp_listen_input+0x1f0>)
 801587c:	695a      	ldr	r2, [r3, #20]
 801587e:	697b      	ldr	r3, [r7, #20]
 8015880:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8015882:	4b4e      	ldr	r3, [pc, #312]	; (80159bc <tcp_listen_input+0x1f0>)
 8015884:	691a      	ldr	r2, [r3, #16]
 8015886:	697b      	ldr	r3, [r7, #20]
 8015888:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	8ada      	ldrh	r2, [r3, #22]
 801588e:	697b      	ldr	r3, [r7, #20]
 8015890:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8015892:	4b47      	ldr	r3, [pc, #284]	; (80159b0 <tcp_listen_input+0x1e4>)
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	881b      	ldrh	r3, [r3, #0]
 8015898:	b29a      	uxth	r2, r3
 801589a:	697b      	ldr	r3, [r7, #20]
 801589c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801589e:	697b      	ldr	r3, [r7, #20]
 80158a0:	2203      	movs	r2, #3
 80158a2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80158a4:	4b41      	ldr	r3, [pc, #260]	; (80159ac <tcp_listen_input+0x1e0>)
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	1c5a      	adds	r2, r3, #1
 80158aa:	697b      	ldr	r3, [r7, #20]
 80158ac:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80158ae:	697b      	ldr	r3, [r7, #20]
 80158b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80158b2:	697b      	ldr	r3, [r7, #20]
 80158b4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80158b6:	6978      	ldr	r0, [r7, #20]
 80158b8:	f7ff fa58 	bl	8014d6c <tcp_next_iss>
 80158bc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80158be:	697b      	ldr	r3, [r7, #20]
 80158c0:	693a      	ldr	r2, [r7, #16]
 80158c2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80158c4:	697b      	ldr	r3, [r7, #20]
 80158c6:	693a      	ldr	r2, [r7, #16]
 80158c8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80158ca:	697b      	ldr	r3, [r7, #20]
 80158cc:	693a      	ldr	r2, [r7, #16]
 80158ce:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80158d0:	697b      	ldr	r3, [r7, #20]
 80158d2:	693a      	ldr	r2, [r7, #16]
 80158d4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80158d6:	4b35      	ldr	r3, [pc, #212]	; (80159ac <tcp_listen_input+0x1e0>)
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	1e5a      	subs	r2, r3, #1
 80158dc:	697b      	ldr	r3, [r7, #20]
 80158de:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	691a      	ldr	r2, [r3, #16]
 80158e4:	697b      	ldr	r3, [r7, #20]
 80158e6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80158e8:	697b      	ldr	r3, [r7, #20]
 80158ea:	687a      	ldr	r2, [r7, #4]
 80158ec:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	7a5b      	ldrb	r3, [r3, #9]
 80158f2:	f003 030c 	and.w	r3, r3, #12
 80158f6:	b2da      	uxtb	r2, r3
 80158f8:	697b      	ldr	r3, [r7, #20]
 80158fa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	7a1a      	ldrb	r2, [r3, #8]
 8015900:	697b      	ldr	r3, [r7, #20]
 8015902:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8015904:	4b2e      	ldr	r3, [pc, #184]	; (80159c0 <tcp_listen_input+0x1f4>)
 8015906:	681a      	ldr	r2, [r3, #0]
 8015908:	697b      	ldr	r3, [r7, #20]
 801590a:	60da      	str	r2, [r3, #12]
 801590c:	4a2c      	ldr	r2, [pc, #176]	; (80159c0 <tcp_listen_input+0x1f4>)
 801590e:	697b      	ldr	r3, [r7, #20]
 8015910:	6013      	str	r3, [r2, #0]
 8015912:	f003 fd29 	bl	8019368 <tcp_timer_needed>
 8015916:	4b2b      	ldr	r3, [pc, #172]	; (80159c4 <tcp_listen_input+0x1f8>)
 8015918:	2201      	movs	r2, #1
 801591a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801591c:	6978      	ldr	r0, [r7, #20]
 801591e:	f001 fd8f 	bl	8017440 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8015922:	4b23      	ldr	r3, [pc, #140]	; (80159b0 <tcp_listen_input+0x1e4>)
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	89db      	ldrh	r3, [r3, #14]
 8015928:	b29a      	uxth	r2, r3
 801592a:	697b      	ldr	r3, [r7, #20]
 801592c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8015930:	697b      	ldr	r3, [r7, #20]
 8015932:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015936:	697b      	ldr	r3, [r7, #20]
 8015938:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801593c:	697b      	ldr	r3, [r7, #20]
 801593e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015940:	697b      	ldr	r3, [r7, #20]
 8015942:	3304      	adds	r3, #4
 8015944:	4618      	mov	r0, r3
 8015946:	f005 faf7 	bl	801af38 <ip4_route>
 801594a:	4601      	mov	r1, r0
 801594c:	697b      	ldr	r3, [r7, #20]
 801594e:	3304      	adds	r3, #4
 8015950:	461a      	mov	r2, r3
 8015952:	4620      	mov	r0, r4
 8015954:	f7ff fa30 	bl	8014db8 <tcp_eff_send_mss_netif>
 8015958:	4603      	mov	r3, r0
 801595a:	461a      	mov	r2, r3
 801595c:	697b      	ldr	r3, [r7, #20]
 801595e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8015960:	2112      	movs	r1, #18
 8015962:	6978      	ldr	r0, [r7, #20]
 8015964:	f002 fc9c 	bl	80182a0 <tcp_enqueue_flags>
 8015968:	4603      	mov	r3, r0
 801596a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801596c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d004      	beq.n	801597e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8015974:	2100      	movs	r1, #0
 8015976:	6978      	ldr	r0, [r7, #20]
 8015978:	f7fd ff52 	bl	8013820 <tcp_abandon>
      return;
 801597c:	e006      	b.n	801598c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801597e:	6978      	ldr	r0, [r7, #20]
 8015980:	f002 fd7c 	bl	801847c <tcp_output>
  return;
 8015984:	e001      	b.n	801598a <tcp_listen_input+0x1be>
    return;
 8015986:	bf00      	nop
 8015988:	e000      	b.n	801598c <tcp_listen_input+0x1c0>
  return;
 801598a:	bf00      	nop
}
 801598c:	371c      	adds	r7, #28
 801598e:	46bd      	mov	sp, r7
 8015990:	bd90      	pop	{r4, r7, pc}
 8015992:	bf00      	nop
 8015994:	200113ec 	.word	0x200113ec
 8015998:	0801f4c0 	.word	0x0801f4c0
 801599c:	0801f6b8 	.word	0x0801f6b8
 80159a0:	0801f50c 	.word	0x0801f50c
 80159a4:	200113e4 	.word	0x200113e4
 80159a8:	200113ea 	.word	0x200113ea
 80159ac:	200113e0 	.word	0x200113e0
 80159b0:	200113d0 	.word	0x200113d0
 80159b4:	2000dc64 	.word	0x2000dc64
 80159b8:	2000dc68 	.word	0x2000dc68
 80159bc:	2000dc54 	.word	0x2000dc54
 80159c0:	200113b4 	.word	0x200113b4
 80159c4:	200113bc 	.word	0x200113bc

080159c8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b086      	sub	sp, #24
 80159cc:	af04      	add	r7, sp, #16
 80159ce:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80159d0:	4b2f      	ldr	r3, [pc, #188]	; (8015a90 <tcp_timewait_input+0xc8>)
 80159d2:	781b      	ldrb	r3, [r3, #0]
 80159d4:	f003 0304 	and.w	r3, r3, #4
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d153      	bne.n	8015a84 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d106      	bne.n	80159f0 <tcp_timewait_input+0x28>
 80159e2:	4b2c      	ldr	r3, [pc, #176]	; (8015a94 <tcp_timewait_input+0xcc>)
 80159e4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80159e8:	492b      	ldr	r1, [pc, #172]	; (8015a98 <tcp_timewait_input+0xd0>)
 80159ea:	482c      	ldr	r0, [pc, #176]	; (8015a9c <tcp_timewait_input+0xd4>)
 80159ec:	f006 ff46 	bl	801c87c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80159f0:	4b27      	ldr	r3, [pc, #156]	; (8015a90 <tcp_timewait_input+0xc8>)
 80159f2:	781b      	ldrb	r3, [r3, #0]
 80159f4:	f003 0302 	and.w	r3, r3, #2
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d02a      	beq.n	8015a52 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80159fc:	4b28      	ldr	r3, [pc, #160]	; (8015aa0 <tcp_timewait_input+0xd8>)
 80159fe:	681a      	ldr	r2, [r3, #0]
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a04:	1ad3      	subs	r3, r2, r3
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	db2d      	blt.n	8015a66 <tcp_timewait_input+0x9e>
 8015a0a:	4b25      	ldr	r3, [pc, #148]	; (8015aa0 <tcp_timewait_input+0xd8>)
 8015a0c:	681a      	ldr	r2, [r3, #0]
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a12:	6879      	ldr	r1, [r7, #4]
 8015a14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015a16:	440b      	add	r3, r1
 8015a18:	1ad3      	subs	r3, r2, r3
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	dc23      	bgt.n	8015a66 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015a1e:	4b21      	ldr	r3, [pc, #132]	; (8015aa4 <tcp_timewait_input+0xdc>)
 8015a20:	6819      	ldr	r1, [r3, #0]
 8015a22:	4b21      	ldr	r3, [pc, #132]	; (8015aa8 <tcp_timewait_input+0xe0>)
 8015a24:	881b      	ldrh	r3, [r3, #0]
 8015a26:	461a      	mov	r2, r3
 8015a28:	4b1d      	ldr	r3, [pc, #116]	; (8015aa0 <tcp_timewait_input+0xd8>)
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015a2e:	4b1f      	ldr	r3, [pc, #124]	; (8015aac <tcp_timewait_input+0xe4>)
 8015a30:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015a32:	885b      	ldrh	r3, [r3, #2]
 8015a34:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015a36:	4a1d      	ldr	r2, [pc, #116]	; (8015aac <tcp_timewait_input+0xe4>)
 8015a38:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015a3a:	8812      	ldrh	r2, [r2, #0]
 8015a3c:	b292      	uxth	r2, r2
 8015a3e:	9202      	str	r2, [sp, #8]
 8015a40:	9301      	str	r3, [sp, #4]
 8015a42:	4b1b      	ldr	r3, [pc, #108]	; (8015ab0 <tcp_timewait_input+0xe8>)
 8015a44:	9300      	str	r3, [sp, #0]
 8015a46:	4b1b      	ldr	r3, [pc, #108]	; (8015ab4 <tcp_timewait_input+0xec>)
 8015a48:	4602      	mov	r2, r0
 8015a4a:	6878      	ldr	r0, [r7, #4]
 8015a4c:	f003 faca 	bl	8018fe4 <tcp_rst>
      return;
 8015a50:	e01b      	b.n	8015a8a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8015a52:	4b0f      	ldr	r3, [pc, #60]	; (8015a90 <tcp_timewait_input+0xc8>)
 8015a54:	781b      	ldrb	r3, [r3, #0]
 8015a56:	f003 0301 	and.w	r3, r3, #1
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d003      	beq.n	8015a66 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8015a5e:	4b16      	ldr	r3, [pc, #88]	; (8015ab8 <tcp_timewait_input+0xf0>)
 8015a60:	681a      	ldr	r2, [r3, #0]
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8015a66:	4b10      	ldr	r3, [pc, #64]	; (8015aa8 <tcp_timewait_input+0xe0>)
 8015a68:	881b      	ldrh	r3, [r3, #0]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d00c      	beq.n	8015a88 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	8b5b      	ldrh	r3, [r3, #26]
 8015a72:	f043 0302 	orr.w	r3, r3, #2
 8015a76:	b29a      	uxth	r2, r3
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015a7c:	6878      	ldr	r0, [r7, #4]
 8015a7e:	f002 fcfd 	bl	801847c <tcp_output>
  }
  return;
 8015a82:	e001      	b.n	8015a88 <tcp_timewait_input+0xc0>
    return;
 8015a84:	bf00      	nop
 8015a86:	e000      	b.n	8015a8a <tcp_timewait_input+0xc2>
  return;
 8015a88:	bf00      	nop
}
 8015a8a:	3708      	adds	r7, #8
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	bd80      	pop	{r7, pc}
 8015a90:	200113ec 	.word	0x200113ec
 8015a94:	0801f4c0 	.word	0x0801f4c0
 8015a98:	0801f6d8 	.word	0x0801f6d8
 8015a9c:	0801f50c 	.word	0x0801f50c
 8015aa0:	200113e0 	.word	0x200113e0
 8015aa4:	200113e4 	.word	0x200113e4
 8015aa8:	200113ea 	.word	0x200113ea
 8015aac:	200113d0 	.word	0x200113d0
 8015ab0:	2000dc64 	.word	0x2000dc64
 8015ab4:	2000dc68 	.word	0x2000dc68
 8015ab8:	200113a8 	.word	0x200113a8

08015abc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015abc:	b590      	push	{r4, r7, lr}
 8015abe:	b08d      	sub	sp, #52	; 0x34
 8015ac0:	af04      	add	r7, sp, #16
 8015ac2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015ac8:	2300      	movs	r3, #0
 8015aca:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d106      	bne.n	8015ae0 <tcp_process+0x24>
 8015ad2:	4b9d      	ldr	r3, [pc, #628]	; (8015d48 <tcp_process+0x28c>)
 8015ad4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015ad8:	499c      	ldr	r1, [pc, #624]	; (8015d4c <tcp_process+0x290>)
 8015ada:	489d      	ldr	r0, [pc, #628]	; (8015d50 <tcp_process+0x294>)
 8015adc:	f006 fece 	bl	801c87c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015ae0:	4b9c      	ldr	r3, [pc, #624]	; (8015d54 <tcp_process+0x298>)
 8015ae2:	781b      	ldrb	r3, [r3, #0]
 8015ae4:	f003 0304 	and.w	r3, r3, #4
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d04e      	beq.n	8015b8a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	7d1b      	ldrb	r3, [r3, #20]
 8015af0:	2b02      	cmp	r3, #2
 8015af2:	d108      	bne.n	8015b06 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015af8:	4b97      	ldr	r3, [pc, #604]	; (8015d58 <tcp_process+0x29c>)
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	429a      	cmp	r2, r3
 8015afe:	d123      	bne.n	8015b48 <tcp_process+0x8c>
        acceptable = 1;
 8015b00:	2301      	movs	r3, #1
 8015b02:	76fb      	strb	r3, [r7, #27]
 8015b04:	e020      	b.n	8015b48 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015b0a:	4b94      	ldr	r3, [pc, #592]	; (8015d5c <tcp_process+0x2a0>)
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	429a      	cmp	r2, r3
 8015b10:	d102      	bne.n	8015b18 <tcp_process+0x5c>
        acceptable = 1;
 8015b12:	2301      	movs	r3, #1
 8015b14:	76fb      	strb	r3, [r7, #27]
 8015b16:	e017      	b.n	8015b48 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015b18:	4b90      	ldr	r3, [pc, #576]	; (8015d5c <tcp_process+0x2a0>)
 8015b1a:	681a      	ldr	r2, [r3, #0]
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b20:	1ad3      	subs	r3, r2, r3
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	db10      	blt.n	8015b48 <tcp_process+0x8c>
 8015b26:	4b8d      	ldr	r3, [pc, #564]	; (8015d5c <tcp_process+0x2a0>)
 8015b28:	681a      	ldr	r2, [r3, #0]
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b2e:	6879      	ldr	r1, [r7, #4]
 8015b30:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015b32:	440b      	add	r3, r1
 8015b34:	1ad3      	subs	r3, r2, r3
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	dc06      	bgt.n	8015b48 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	8b5b      	ldrh	r3, [r3, #26]
 8015b3e:	f043 0302 	orr.w	r3, r3, #2
 8015b42:	b29a      	uxth	r2, r3
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015b48:	7efb      	ldrb	r3, [r7, #27]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d01b      	beq.n	8015b86 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	7d1b      	ldrb	r3, [r3, #20]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d106      	bne.n	8015b64 <tcp_process+0xa8>
 8015b56:	4b7c      	ldr	r3, [pc, #496]	; (8015d48 <tcp_process+0x28c>)
 8015b58:	f44f 724e 	mov.w	r2, #824	; 0x338
 8015b5c:	4980      	ldr	r1, [pc, #512]	; (8015d60 <tcp_process+0x2a4>)
 8015b5e:	487c      	ldr	r0, [pc, #496]	; (8015d50 <tcp_process+0x294>)
 8015b60:	f006 fe8c 	bl	801c87c <iprintf>
      recv_flags |= TF_RESET;
 8015b64:	4b7f      	ldr	r3, [pc, #508]	; (8015d64 <tcp_process+0x2a8>)
 8015b66:	781b      	ldrb	r3, [r3, #0]
 8015b68:	f043 0308 	orr.w	r3, r3, #8
 8015b6c:	b2da      	uxtb	r2, r3
 8015b6e:	4b7d      	ldr	r3, [pc, #500]	; (8015d64 <tcp_process+0x2a8>)
 8015b70:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	8b5b      	ldrh	r3, [r3, #26]
 8015b76:	f023 0301 	bic.w	r3, r3, #1
 8015b7a:	b29a      	uxth	r2, r3
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015b80:	f06f 030d 	mvn.w	r3, #13
 8015b84:	e37a      	b.n	801627c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015b86:	2300      	movs	r3, #0
 8015b88:	e378      	b.n	801627c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8015b8a:	4b72      	ldr	r3, [pc, #456]	; (8015d54 <tcp_process+0x298>)
 8015b8c:	781b      	ldrb	r3, [r3, #0]
 8015b8e:	f003 0302 	and.w	r3, r3, #2
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d010      	beq.n	8015bb8 <tcp_process+0xfc>
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	7d1b      	ldrb	r3, [r3, #20]
 8015b9a:	2b02      	cmp	r3, #2
 8015b9c:	d00c      	beq.n	8015bb8 <tcp_process+0xfc>
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	7d1b      	ldrb	r3, [r3, #20]
 8015ba2:	2b03      	cmp	r3, #3
 8015ba4:	d008      	beq.n	8015bb8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	8b5b      	ldrh	r3, [r3, #26]
 8015baa:	f043 0302 	orr.w	r3, r3, #2
 8015bae:	b29a      	uxth	r2, r3
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	e361      	b.n	801627c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	8b5b      	ldrh	r3, [r3, #26]
 8015bbc:	f003 0310 	and.w	r3, r3, #16
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d103      	bne.n	8015bcc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015bc4:	4b68      	ldr	r3, [pc, #416]	; (8015d68 <tcp_process+0x2ac>)
 8015bc6:	681a      	ldr	r2, [r3, #0]
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	2200      	movs	r2, #0
 8015bd0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8015bdc:	6878      	ldr	r0, [r7, #4]
 8015bde:	f001 fc2f 	bl	8017440 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	7d1b      	ldrb	r3, [r3, #20]
 8015be6:	3b02      	subs	r3, #2
 8015be8:	2b07      	cmp	r3, #7
 8015bea:	f200 8337 	bhi.w	801625c <tcp_process+0x7a0>
 8015bee:	a201      	add	r2, pc, #4	; (adr r2, 8015bf4 <tcp_process+0x138>)
 8015bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bf4:	08015c15 	.word	0x08015c15
 8015bf8:	08015e45 	.word	0x08015e45
 8015bfc:	08015fbd 	.word	0x08015fbd
 8015c00:	08015fe7 	.word	0x08015fe7
 8015c04:	0801610b 	.word	0x0801610b
 8015c08:	08015fbd 	.word	0x08015fbd
 8015c0c:	08016197 	.word	0x08016197
 8015c10:	08016227 	.word	0x08016227
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015c14:	4b4f      	ldr	r3, [pc, #316]	; (8015d54 <tcp_process+0x298>)
 8015c16:	781b      	ldrb	r3, [r3, #0]
 8015c18:	f003 0310 	and.w	r3, r3, #16
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	f000 80e4 	beq.w	8015dea <tcp_process+0x32e>
 8015c22:	4b4c      	ldr	r3, [pc, #304]	; (8015d54 <tcp_process+0x298>)
 8015c24:	781b      	ldrb	r3, [r3, #0]
 8015c26:	f003 0302 	and.w	r3, r3, #2
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	f000 80dd 	beq.w	8015dea <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c34:	1c5a      	adds	r2, r3, #1
 8015c36:	4b48      	ldr	r3, [pc, #288]	; (8015d58 <tcp_process+0x29c>)
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	429a      	cmp	r2, r3
 8015c3c:	f040 80d5 	bne.w	8015dea <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015c40:	4b46      	ldr	r3, [pc, #280]	; (8015d5c <tcp_process+0x2a0>)
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	1c5a      	adds	r2, r3, #1
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8015c52:	4b41      	ldr	r3, [pc, #260]	; (8015d58 <tcp_process+0x29c>)
 8015c54:	681a      	ldr	r2, [r3, #0]
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8015c5a:	4b44      	ldr	r3, [pc, #272]	; (8015d6c <tcp_process+0x2b0>)
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	89db      	ldrh	r3, [r3, #14]
 8015c60:	b29a      	uxth	r2, r3
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015c74:	4b39      	ldr	r3, [pc, #228]	; (8015d5c <tcp_process+0x2a0>)
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	1e5a      	subs	r2, r3, #1
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	2204      	movs	r2, #4
 8015c82:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	3304      	adds	r3, #4
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	f005 f953 	bl	801af38 <ip4_route>
 8015c92:	4601      	mov	r1, r0
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	3304      	adds	r3, #4
 8015c98:	461a      	mov	r2, r3
 8015c9a:	4620      	mov	r0, r4
 8015c9c:	f7ff f88c 	bl	8014db8 <tcp_eff_send_mss_netif>
 8015ca0:	4603      	mov	r3, r0
 8015ca2:	461a      	mov	r2, r3
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015cac:	009a      	lsls	r2, r3, #2
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015cb2:	005b      	lsls	r3, r3, #1
 8015cb4:	f241 111c 	movw	r1, #4380	; 0x111c
 8015cb8:	428b      	cmp	r3, r1
 8015cba:	bf38      	it	cc
 8015cbc:	460b      	movcc	r3, r1
 8015cbe:	429a      	cmp	r2, r3
 8015cc0:	d204      	bcs.n	8015ccc <tcp_process+0x210>
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015cc6:	009b      	lsls	r3, r3, #2
 8015cc8:	b29b      	uxth	r3, r3
 8015cca:	e00d      	b.n	8015ce8 <tcp_process+0x22c>
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015cd0:	005b      	lsls	r3, r3, #1
 8015cd2:	f241 121c 	movw	r2, #4380	; 0x111c
 8015cd6:	4293      	cmp	r3, r2
 8015cd8:	d904      	bls.n	8015ce4 <tcp_process+0x228>
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015cde:	005b      	lsls	r3, r3, #1
 8015ce0:	b29b      	uxth	r3, r3
 8015ce2:	e001      	b.n	8015ce8 <tcp_process+0x22c>
 8015ce4:	f241 131c 	movw	r3, #4380	; 0x111c
 8015ce8:	687a      	ldr	r2, [r7, #4]
 8015cea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d106      	bne.n	8015d06 <tcp_process+0x24a>
 8015cf8:	4b13      	ldr	r3, [pc, #76]	; (8015d48 <tcp_process+0x28c>)
 8015cfa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8015cfe:	491c      	ldr	r1, [pc, #112]	; (8015d70 <tcp_process+0x2b4>)
 8015d00:	4813      	ldr	r0, [pc, #76]	; (8015d50 <tcp_process+0x294>)
 8015d02:	f006 fdbb 	bl	801c87c <iprintf>
        --pcb->snd_queuelen;
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015d0c:	3b01      	subs	r3, #1
 8015d0e:	b29a      	uxth	r2, r3
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d1a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015d1c:	69fb      	ldr	r3, [r7, #28]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d12a      	bne.n	8015d78 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d26:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015d28:	69fb      	ldr	r3, [r7, #28]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d106      	bne.n	8015d3c <tcp_process+0x280>
 8015d2e:	4b06      	ldr	r3, [pc, #24]	; (8015d48 <tcp_process+0x28c>)
 8015d30:	f44f 725d 	mov.w	r2, #884	; 0x374
 8015d34:	490f      	ldr	r1, [pc, #60]	; (8015d74 <tcp_process+0x2b8>)
 8015d36:	4806      	ldr	r0, [pc, #24]	; (8015d50 <tcp_process+0x294>)
 8015d38:	f006 fda0 	bl	801c87c <iprintf>
          pcb->unsent = rseg->next;
 8015d3c:	69fb      	ldr	r3, [r7, #28]
 8015d3e:	681a      	ldr	r2, [r3, #0]
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	66da      	str	r2, [r3, #108]	; 0x6c
 8015d44:	e01c      	b.n	8015d80 <tcp_process+0x2c4>
 8015d46:	bf00      	nop
 8015d48:	0801f4c0 	.word	0x0801f4c0
 8015d4c:	0801f6f8 	.word	0x0801f6f8
 8015d50:	0801f50c 	.word	0x0801f50c
 8015d54:	200113ec 	.word	0x200113ec
 8015d58:	200113e4 	.word	0x200113e4
 8015d5c:	200113e0 	.word	0x200113e0
 8015d60:	0801f714 	.word	0x0801f714
 8015d64:	200113ed 	.word	0x200113ed
 8015d68:	200113a8 	.word	0x200113a8
 8015d6c:	200113d0 	.word	0x200113d0
 8015d70:	0801f734 	.word	0x0801f734
 8015d74:	0801f74c 	.word	0x0801f74c
        } else {
          pcb->unacked = rseg->next;
 8015d78:	69fb      	ldr	r3, [r7, #28]
 8015d7a:	681a      	ldr	r2, [r3, #0]
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8015d80:	69f8      	ldr	r0, [r7, #28]
 8015d82:	f7fe fc54 	bl	801462e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d104      	bne.n	8015d98 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015d94:	861a      	strh	r2, [r3, #48]	; 0x30
 8015d96:	e006      	b.n	8015da6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	2200      	movs	r2, #0
 8015d9c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	2200      	movs	r2, #0
 8015da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d00a      	beq.n	8015dc6 <tcp_process+0x30a>
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015db6:	687a      	ldr	r2, [r7, #4]
 8015db8:	6910      	ldr	r0, [r2, #16]
 8015dba:	2200      	movs	r2, #0
 8015dbc:	6879      	ldr	r1, [r7, #4]
 8015dbe:	4798      	blx	r3
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	76bb      	strb	r3, [r7, #26]
 8015dc4:	e001      	b.n	8015dca <tcp_process+0x30e>
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015dca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015dce:	f113 0f0d 	cmn.w	r3, #13
 8015dd2:	d102      	bne.n	8015dda <tcp_process+0x31e>
          return ERR_ABRT;
 8015dd4:	f06f 030c 	mvn.w	r3, #12
 8015dd8:	e250      	b.n	801627c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	8b5b      	ldrh	r3, [r3, #26]
 8015dde:	f043 0302 	orr.w	r3, r3, #2
 8015de2:	b29a      	uxth	r2, r3
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015de8:	e23a      	b.n	8016260 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8015dea:	4b98      	ldr	r3, [pc, #608]	; (801604c <tcp_process+0x590>)
 8015dec:	781b      	ldrb	r3, [r3, #0]
 8015dee:	f003 0310 	and.w	r3, r3, #16
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	f000 8234 	beq.w	8016260 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015df8:	4b95      	ldr	r3, [pc, #596]	; (8016050 <tcp_process+0x594>)
 8015dfa:	6819      	ldr	r1, [r3, #0]
 8015dfc:	4b95      	ldr	r3, [pc, #596]	; (8016054 <tcp_process+0x598>)
 8015dfe:	881b      	ldrh	r3, [r3, #0]
 8015e00:	461a      	mov	r2, r3
 8015e02:	4b95      	ldr	r3, [pc, #596]	; (8016058 <tcp_process+0x59c>)
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015e08:	4b94      	ldr	r3, [pc, #592]	; (801605c <tcp_process+0x5a0>)
 8015e0a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e0c:	885b      	ldrh	r3, [r3, #2]
 8015e0e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015e10:	4a92      	ldr	r2, [pc, #584]	; (801605c <tcp_process+0x5a0>)
 8015e12:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e14:	8812      	ldrh	r2, [r2, #0]
 8015e16:	b292      	uxth	r2, r2
 8015e18:	9202      	str	r2, [sp, #8]
 8015e1a:	9301      	str	r3, [sp, #4]
 8015e1c:	4b90      	ldr	r3, [pc, #576]	; (8016060 <tcp_process+0x5a4>)
 8015e1e:	9300      	str	r3, [sp, #0]
 8015e20:	4b90      	ldr	r3, [pc, #576]	; (8016064 <tcp_process+0x5a8>)
 8015e22:	4602      	mov	r2, r0
 8015e24:	6878      	ldr	r0, [r7, #4]
 8015e26:	f003 f8dd 	bl	8018fe4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015e30:	2b05      	cmp	r3, #5
 8015e32:	f200 8215 	bhi.w	8016260 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	2200      	movs	r2, #0
 8015e3a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8015e3c:	6878      	ldr	r0, [r7, #4]
 8015e3e:	f002 fea9 	bl	8018b94 <tcp_rexmit_rto>
      break;
 8015e42:	e20d      	b.n	8016260 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8015e44:	4b81      	ldr	r3, [pc, #516]	; (801604c <tcp_process+0x590>)
 8015e46:	781b      	ldrb	r3, [r3, #0]
 8015e48:	f003 0310 	and.w	r3, r3, #16
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	f000 80a1 	beq.w	8015f94 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015e52:	4b7f      	ldr	r3, [pc, #508]	; (8016050 <tcp_process+0x594>)
 8015e54:	681a      	ldr	r2, [r3, #0]
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e5a:	1ad3      	subs	r3, r2, r3
 8015e5c:	3b01      	subs	r3, #1
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	db7e      	blt.n	8015f60 <tcp_process+0x4a4>
 8015e62:	4b7b      	ldr	r3, [pc, #492]	; (8016050 <tcp_process+0x594>)
 8015e64:	681a      	ldr	r2, [r3, #0]
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015e6a:	1ad3      	subs	r3, r2, r3
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	dc77      	bgt.n	8015f60 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	2204      	movs	r2, #4
 8015e74:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d102      	bne.n	8015e84 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8015e7e:	23fa      	movs	r3, #250	; 0xfa
 8015e80:	76bb      	strb	r3, [r7, #26]
 8015e82:	e01d      	b.n	8015ec0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015e88:	699b      	ldr	r3, [r3, #24]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d106      	bne.n	8015e9c <tcp_process+0x3e0>
 8015e8e:	4b76      	ldr	r3, [pc, #472]	; (8016068 <tcp_process+0x5ac>)
 8015e90:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8015e94:	4975      	ldr	r1, [pc, #468]	; (801606c <tcp_process+0x5b0>)
 8015e96:	4876      	ldr	r0, [pc, #472]	; (8016070 <tcp_process+0x5b4>)
 8015e98:	f006 fcf0 	bl	801c87c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015ea0:	699b      	ldr	r3, [r3, #24]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d00a      	beq.n	8015ebc <tcp_process+0x400>
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015eaa:	699b      	ldr	r3, [r3, #24]
 8015eac:	687a      	ldr	r2, [r7, #4]
 8015eae:	6910      	ldr	r0, [r2, #16]
 8015eb0:	2200      	movs	r2, #0
 8015eb2:	6879      	ldr	r1, [r7, #4]
 8015eb4:	4798      	blx	r3
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	76bb      	strb	r3, [r7, #26]
 8015eba:	e001      	b.n	8015ec0 <tcp_process+0x404>
 8015ebc:	23f0      	movs	r3, #240	; 0xf0
 8015ebe:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8015ec0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d00a      	beq.n	8015ede <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015ec8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015ecc:	f113 0f0d 	cmn.w	r3, #13
 8015ed0:	d002      	beq.n	8015ed8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8015ed2:	6878      	ldr	r0, [r7, #4]
 8015ed4:	f7fd fd62 	bl	801399c <tcp_abort>
            }
            return ERR_ABRT;
 8015ed8:	f06f 030c 	mvn.w	r3, #12
 8015edc:	e1ce      	b.n	801627c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8015ede:	6878      	ldr	r0, [r7, #4]
 8015ee0:	f000 fae0 	bl	80164a4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015ee4:	4b63      	ldr	r3, [pc, #396]	; (8016074 <tcp_process+0x5b8>)
 8015ee6:	881b      	ldrh	r3, [r3, #0]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d005      	beq.n	8015ef8 <tcp_process+0x43c>
            recv_acked--;
 8015eec:	4b61      	ldr	r3, [pc, #388]	; (8016074 <tcp_process+0x5b8>)
 8015eee:	881b      	ldrh	r3, [r3, #0]
 8015ef0:	3b01      	subs	r3, #1
 8015ef2:	b29a      	uxth	r2, r3
 8015ef4:	4b5f      	ldr	r3, [pc, #380]	; (8016074 <tcp_process+0x5b8>)
 8015ef6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015efc:	009a      	lsls	r2, r3, #2
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f02:	005b      	lsls	r3, r3, #1
 8015f04:	f241 111c 	movw	r1, #4380	; 0x111c
 8015f08:	428b      	cmp	r3, r1
 8015f0a:	bf38      	it	cc
 8015f0c:	460b      	movcc	r3, r1
 8015f0e:	429a      	cmp	r2, r3
 8015f10:	d204      	bcs.n	8015f1c <tcp_process+0x460>
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f16:	009b      	lsls	r3, r3, #2
 8015f18:	b29b      	uxth	r3, r3
 8015f1a:	e00d      	b.n	8015f38 <tcp_process+0x47c>
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f20:	005b      	lsls	r3, r3, #1
 8015f22:	f241 121c 	movw	r2, #4380	; 0x111c
 8015f26:	4293      	cmp	r3, r2
 8015f28:	d904      	bls.n	8015f34 <tcp_process+0x478>
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f2e:	005b      	lsls	r3, r3, #1
 8015f30:	b29b      	uxth	r3, r3
 8015f32:	e001      	b.n	8015f38 <tcp_process+0x47c>
 8015f34:	f241 131c 	movw	r3, #4380	; 0x111c
 8015f38:	687a      	ldr	r2, [r7, #4]
 8015f3a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8015f3e:	4b4e      	ldr	r3, [pc, #312]	; (8016078 <tcp_process+0x5bc>)
 8015f40:	781b      	ldrb	r3, [r3, #0]
 8015f42:	f003 0320 	and.w	r3, r3, #32
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d037      	beq.n	8015fba <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	8b5b      	ldrh	r3, [r3, #26]
 8015f4e:	f043 0302 	orr.w	r3, r3, #2
 8015f52:	b29a      	uxth	r2, r3
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2207      	movs	r2, #7
 8015f5c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8015f5e:	e02c      	b.n	8015fba <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015f60:	4b3b      	ldr	r3, [pc, #236]	; (8016050 <tcp_process+0x594>)
 8015f62:	6819      	ldr	r1, [r3, #0]
 8015f64:	4b3b      	ldr	r3, [pc, #236]	; (8016054 <tcp_process+0x598>)
 8015f66:	881b      	ldrh	r3, [r3, #0]
 8015f68:	461a      	mov	r2, r3
 8015f6a:	4b3b      	ldr	r3, [pc, #236]	; (8016058 <tcp_process+0x59c>)
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015f70:	4b3a      	ldr	r3, [pc, #232]	; (801605c <tcp_process+0x5a0>)
 8015f72:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015f74:	885b      	ldrh	r3, [r3, #2]
 8015f76:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015f78:	4a38      	ldr	r2, [pc, #224]	; (801605c <tcp_process+0x5a0>)
 8015f7a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015f7c:	8812      	ldrh	r2, [r2, #0]
 8015f7e:	b292      	uxth	r2, r2
 8015f80:	9202      	str	r2, [sp, #8]
 8015f82:	9301      	str	r3, [sp, #4]
 8015f84:	4b36      	ldr	r3, [pc, #216]	; (8016060 <tcp_process+0x5a4>)
 8015f86:	9300      	str	r3, [sp, #0]
 8015f88:	4b36      	ldr	r3, [pc, #216]	; (8016064 <tcp_process+0x5a8>)
 8015f8a:	4602      	mov	r2, r0
 8015f8c:	6878      	ldr	r0, [r7, #4]
 8015f8e:	f003 f829 	bl	8018fe4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8015f92:	e167      	b.n	8016264 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015f94:	4b2d      	ldr	r3, [pc, #180]	; (801604c <tcp_process+0x590>)
 8015f96:	781b      	ldrb	r3, [r3, #0]
 8015f98:	f003 0302 	and.w	r3, r3, #2
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	f000 8161 	beq.w	8016264 <tcp_process+0x7a8>
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fa6:	1e5a      	subs	r2, r3, #1
 8015fa8:	4b2b      	ldr	r3, [pc, #172]	; (8016058 <tcp_process+0x59c>)
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	429a      	cmp	r2, r3
 8015fae:	f040 8159 	bne.w	8016264 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8015fb2:	6878      	ldr	r0, [r7, #4]
 8015fb4:	f002 fe10 	bl	8018bd8 <tcp_rexmit>
      break;
 8015fb8:	e154      	b.n	8016264 <tcp_process+0x7a8>
 8015fba:	e153      	b.n	8016264 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8015fbc:	6878      	ldr	r0, [r7, #4]
 8015fbe:	f000 fa71 	bl	80164a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8015fc2:	4b2d      	ldr	r3, [pc, #180]	; (8016078 <tcp_process+0x5bc>)
 8015fc4:	781b      	ldrb	r3, [r3, #0]
 8015fc6:	f003 0320 	and.w	r3, r3, #32
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	f000 814c 	beq.w	8016268 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	8b5b      	ldrh	r3, [r3, #26]
 8015fd4:	f043 0302 	orr.w	r3, r3, #2
 8015fd8:	b29a      	uxth	r2, r3
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	2207      	movs	r2, #7
 8015fe2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015fe4:	e140      	b.n	8016268 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8015fe6:	6878      	ldr	r0, [r7, #4]
 8015fe8:	f000 fa5c 	bl	80164a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015fec:	4b22      	ldr	r3, [pc, #136]	; (8016078 <tcp_process+0x5bc>)
 8015fee:	781b      	ldrb	r3, [r3, #0]
 8015ff0:	f003 0320 	and.w	r3, r3, #32
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d071      	beq.n	80160dc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015ff8:	4b14      	ldr	r3, [pc, #80]	; (801604c <tcp_process+0x590>)
 8015ffa:	781b      	ldrb	r3, [r3, #0]
 8015ffc:	f003 0310 	and.w	r3, r3, #16
 8016000:	2b00      	cmp	r3, #0
 8016002:	d060      	beq.n	80160c6 <tcp_process+0x60a>
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016008:	4b11      	ldr	r3, [pc, #68]	; (8016050 <tcp_process+0x594>)
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	429a      	cmp	r2, r3
 801600e:	d15a      	bne.n	80160c6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016014:	2b00      	cmp	r3, #0
 8016016:	d156      	bne.n	80160c6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	8b5b      	ldrh	r3, [r3, #26]
 801601c:	f043 0302 	orr.w	r3, r3, #2
 8016020:	b29a      	uxth	r2, r3
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8016026:	6878      	ldr	r0, [r7, #4]
 8016028:	f7fe fdbc 	bl	8014ba4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801602c:	4b13      	ldr	r3, [pc, #76]	; (801607c <tcp_process+0x5c0>)
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	687a      	ldr	r2, [r7, #4]
 8016032:	429a      	cmp	r2, r3
 8016034:	d105      	bne.n	8016042 <tcp_process+0x586>
 8016036:	4b11      	ldr	r3, [pc, #68]	; (801607c <tcp_process+0x5c0>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	68db      	ldr	r3, [r3, #12]
 801603c:	4a0f      	ldr	r2, [pc, #60]	; (801607c <tcp_process+0x5c0>)
 801603e:	6013      	str	r3, [r2, #0]
 8016040:	e02e      	b.n	80160a0 <tcp_process+0x5e4>
 8016042:	4b0e      	ldr	r3, [pc, #56]	; (801607c <tcp_process+0x5c0>)
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	617b      	str	r3, [r7, #20]
 8016048:	e027      	b.n	801609a <tcp_process+0x5de>
 801604a:	bf00      	nop
 801604c:	200113ec 	.word	0x200113ec
 8016050:	200113e4 	.word	0x200113e4
 8016054:	200113ea 	.word	0x200113ea
 8016058:	200113e0 	.word	0x200113e0
 801605c:	200113d0 	.word	0x200113d0
 8016060:	2000dc64 	.word	0x2000dc64
 8016064:	2000dc68 	.word	0x2000dc68
 8016068:	0801f4c0 	.word	0x0801f4c0
 801606c:	0801f760 	.word	0x0801f760
 8016070:	0801f50c 	.word	0x0801f50c
 8016074:	200113e8 	.word	0x200113e8
 8016078:	200113ed 	.word	0x200113ed
 801607c:	200113b4 	.word	0x200113b4
 8016080:	697b      	ldr	r3, [r7, #20]
 8016082:	68db      	ldr	r3, [r3, #12]
 8016084:	687a      	ldr	r2, [r7, #4]
 8016086:	429a      	cmp	r2, r3
 8016088:	d104      	bne.n	8016094 <tcp_process+0x5d8>
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	68da      	ldr	r2, [r3, #12]
 801608e:	697b      	ldr	r3, [r7, #20]
 8016090:	60da      	str	r2, [r3, #12]
 8016092:	e005      	b.n	80160a0 <tcp_process+0x5e4>
 8016094:	697b      	ldr	r3, [r7, #20]
 8016096:	68db      	ldr	r3, [r3, #12]
 8016098:	617b      	str	r3, [r7, #20]
 801609a:	697b      	ldr	r3, [r7, #20]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d1ef      	bne.n	8016080 <tcp_process+0x5c4>
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	2200      	movs	r2, #0
 80160a4:	60da      	str	r2, [r3, #12]
 80160a6:	4b77      	ldr	r3, [pc, #476]	; (8016284 <tcp_process+0x7c8>)
 80160a8:	2201      	movs	r2, #1
 80160aa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	220a      	movs	r2, #10
 80160b0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80160b2:	4b75      	ldr	r3, [pc, #468]	; (8016288 <tcp_process+0x7cc>)
 80160b4:	681a      	ldr	r2, [r3, #0]
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	60da      	str	r2, [r3, #12]
 80160ba:	4a73      	ldr	r2, [pc, #460]	; (8016288 <tcp_process+0x7cc>)
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	6013      	str	r3, [r2, #0]
 80160c0:	f003 f952 	bl	8019368 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80160c4:	e0d2      	b.n	801626c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	8b5b      	ldrh	r3, [r3, #26]
 80160ca:	f043 0302 	orr.w	r3, r3, #2
 80160ce:	b29a      	uxth	r2, r3
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	2208      	movs	r2, #8
 80160d8:	751a      	strb	r2, [r3, #20]
      break;
 80160da:	e0c7      	b.n	801626c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80160dc:	4b6b      	ldr	r3, [pc, #428]	; (801628c <tcp_process+0x7d0>)
 80160de:	781b      	ldrb	r3, [r3, #0]
 80160e0:	f003 0310 	and.w	r3, r3, #16
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	f000 80c1 	beq.w	801626c <tcp_process+0x7b0>
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80160ee:	4b68      	ldr	r3, [pc, #416]	; (8016290 <tcp_process+0x7d4>)
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	429a      	cmp	r2, r3
 80160f4:	f040 80ba 	bne.w	801626c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	f040 80b5 	bne.w	801626c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	2206      	movs	r2, #6
 8016106:	751a      	strb	r2, [r3, #20]
      break;
 8016108:	e0b0      	b.n	801626c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801610a:	6878      	ldr	r0, [r7, #4]
 801610c:	f000 f9ca 	bl	80164a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016110:	4b60      	ldr	r3, [pc, #384]	; (8016294 <tcp_process+0x7d8>)
 8016112:	781b      	ldrb	r3, [r3, #0]
 8016114:	f003 0320 	and.w	r3, r3, #32
 8016118:	2b00      	cmp	r3, #0
 801611a:	f000 80a9 	beq.w	8016270 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	8b5b      	ldrh	r3, [r3, #26]
 8016122:	f043 0302 	orr.w	r3, r3, #2
 8016126:	b29a      	uxth	r2, r3
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801612c:	6878      	ldr	r0, [r7, #4]
 801612e:	f7fe fd39 	bl	8014ba4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016132:	4b59      	ldr	r3, [pc, #356]	; (8016298 <tcp_process+0x7dc>)
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	687a      	ldr	r2, [r7, #4]
 8016138:	429a      	cmp	r2, r3
 801613a:	d105      	bne.n	8016148 <tcp_process+0x68c>
 801613c:	4b56      	ldr	r3, [pc, #344]	; (8016298 <tcp_process+0x7dc>)
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	68db      	ldr	r3, [r3, #12]
 8016142:	4a55      	ldr	r2, [pc, #340]	; (8016298 <tcp_process+0x7dc>)
 8016144:	6013      	str	r3, [r2, #0]
 8016146:	e013      	b.n	8016170 <tcp_process+0x6b4>
 8016148:	4b53      	ldr	r3, [pc, #332]	; (8016298 <tcp_process+0x7dc>)
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	613b      	str	r3, [r7, #16]
 801614e:	e00c      	b.n	801616a <tcp_process+0x6ae>
 8016150:	693b      	ldr	r3, [r7, #16]
 8016152:	68db      	ldr	r3, [r3, #12]
 8016154:	687a      	ldr	r2, [r7, #4]
 8016156:	429a      	cmp	r2, r3
 8016158:	d104      	bne.n	8016164 <tcp_process+0x6a8>
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	68da      	ldr	r2, [r3, #12]
 801615e:	693b      	ldr	r3, [r7, #16]
 8016160:	60da      	str	r2, [r3, #12]
 8016162:	e005      	b.n	8016170 <tcp_process+0x6b4>
 8016164:	693b      	ldr	r3, [r7, #16]
 8016166:	68db      	ldr	r3, [r3, #12]
 8016168:	613b      	str	r3, [r7, #16]
 801616a:	693b      	ldr	r3, [r7, #16]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d1ef      	bne.n	8016150 <tcp_process+0x694>
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	2200      	movs	r2, #0
 8016174:	60da      	str	r2, [r3, #12]
 8016176:	4b43      	ldr	r3, [pc, #268]	; (8016284 <tcp_process+0x7c8>)
 8016178:	2201      	movs	r2, #1
 801617a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	220a      	movs	r2, #10
 8016180:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016182:	4b41      	ldr	r3, [pc, #260]	; (8016288 <tcp_process+0x7cc>)
 8016184:	681a      	ldr	r2, [r3, #0]
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	60da      	str	r2, [r3, #12]
 801618a:	4a3f      	ldr	r2, [pc, #252]	; (8016288 <tcp_process+0x7cc>)
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	6013      	str	r3, [r2, #0]
 8016190:	f003 f8ea 	bl	8019368 <tcp_timer_needed>
      }
      break;
 8016194:	e06c      	b.n	8016270 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8016196:	6878      	ldr	r0, [r7, #4]
 8016198:	f000 f984 	bl	80164a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801619c:	4b3b      	ldr	r3, [pc, #236]	; (801628c <tcp_process+0x7d0>)
 801619e:	781b      	ldrb	r3, [r3, #0]
 80161a0:	f003 0310 	and.w	r3, r3, #16
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d065      	beq.n	8016274 <tcp_process+0x7b8>
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80161ac:	4b38      	ldr	r3, [pc, #224]	; (8016290 <tcp_process+0x7d4>)
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	429a      	cmp	r2, r3
 80161b2:	d15f      	bne.n	8016274 <tcp_process+0x7b8>
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d15b      	bne.n	8016274 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80161bc:	6878      	ldr	r0, [r7, #4]
 80161be:	f7fe fcf1 	bl	8014ba4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80161c2:	4b35      	ldr	r3, [pc, #212]	; (8016298 <tcp_process+0x7dc>)
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	687a      	ldr	r2, [r7, #4]
 80161c8:	429a      	cmp	r2, r3
 80161ca:	d105      	bne.n	80161d8 <tcp_process+0x71c>
 80161cc:	4b32      	ldr	r3, [pc, #200]	; (8016298 <tcp_process+0x7dc>)
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	68db      	ldr	r3, [r3, #12]
 80161d2:	4a31      	ldr	r2, [pc, #196]	; (8016298 <tcp_process+0x7dc>)
 80161d4:	6013      	str	r3, [r2, #0]
 80161d6:	e013      	b.n	8016200 <tcp_process+0x744>
 80161d8:	4b2f      	ldr	r3, [pc, #188]	; (8016298 <tcp_process+0x7dc>)
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	60fb      	str	r3, [r7, #12]
 80161de:	e00c      	b.n	80161fa <tcp_process+0x73e>
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	68db      	ldr	r3, [r3, #12]
 80161e4:	687a      	ldr	r2, [r7, #4]
 80161e6:	429a      	cmp	r2, r3
 80161e8:	d104      	bne.n	80161f4 <tcp_process+0x738>
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	68da      	ldr	r2, [r3, #12]
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	60da      	str	r2, [r3, #12]
 80161f2:	e005      	b.n	8016200 <tcp_process+0x744>
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	68db      	ldr	r3, [r3, #12]
 80161f8:	60fb      	str	r3, [r7, #12]
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d1ef      	bne.n	80161e0 <tcp_process+0x724>
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	2200      	movs	r2, #0
 8016204:	60da      	str	r2, [r3, #12]
 8016206:	4b1f      	ldr	r3, [pc, #124]	; (8016284 <tcp_process+0x7c8>)
 8016208:	2201      	movs	r2, #1
 801620a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	220a      	movs	r2, #10
 8016210:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016212:	4b1d      	ldr	r3, [pc, #116]	; (8016288 <tcp_process+0x7cc>)
 8016214:	681a      	ldr	r2, [r3, #0]
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	60da      	str	r2, [r3, #12]
 801621a:	4a1b      	ldr	r2, [pc, #108]	; (8016288 <tcp_process+0x7cc>)
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	6013      	str	r3, [r2, #0]
 8016220:	f003 f8a2 	bl	8019368 <tcp_timer_needed>
      }
      break;
 8016224:	e026      	b.n	8016274 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8016226:	6878      	ldr	r0, [r7, #4]
 8016228:	f000 f93c 	bl	80164a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801622c:	4b17      	ldr	r3, [pc, #92]	; (801628c <tcp_process+0x7d0>)
 801622e:	781b      	ldrb	r3, [r3, #0]
 8016230:	f003 0310 	and.w	r3, r3, #16
 8016234:	2b00      	cmp	r3, #0
 8016236:	d01f      	beq.n	8016278 <tcp_process+0x7bc>
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801623c:	4b14      	ldr	r3, [pc, #80]	; (8016290 <tcp_process+0x7d4>)
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	429a      	cmp	r2, r3
 8016242:	d119      	bne.n	8016278 <tcp_process+0x7bc>
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016248:	2b00      	cmp	r3, #0
 801624a:	d115      	bne.n	8016278 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801624c:	4b11      	ldr	r3, [pc, #68]	; (8016294 <tcp_process+0x7d8>)
 801624e:	781b      	ldrb	r3, [r3, #0]
 8016250:	f043 0310 	orr.w	r3, r3, #16
 8016254:	b2da      	uxtb	r2, r3
 8016256:	4b0f      	ldr	r3, [pc, #60]	; (8016294 <tcp_process+0x7d8>)
 8016258:	701a      	strb	r2, [r3, #0]
      }
      break;
 801625a:	e00d      	b.n	8016278 <tcp_process+0x7bc>
    default:
      break;
 801625c:	bf00      	nop
 801625e:	e00c      	b.n	801627a <tcp_process+0x7be>
      break;
 8016260:	bf00      	nop
 8016262:	e00a      	b.n	801627a <tcp_process+0x7be>
      break;
 8016264:	bf00      	nop
 8016266:	e008      	b.n	801627a <tcp_process+0x7be>
      break;
 8016268:	bf00      	nop
 801626a:	e006      	b.n	801627a <tcp_process+0x7be>
      break;
 801626c:	bf00      	nop
 801626e:	e004      	b.n	801627a <tcp_process+0x7be>
      break;
 8016270:	bf00      	nop
 8016272:	e002      	b.n	801627a <tcp_process+0x7be>
      break;
 8016274:	bf00      	nop
 8016276:	e000      	b.n	801627a <tcp_process+0x7be>
      break;
 8016278:	bf00      	nop
  }
  return ERR_OK;
 801627a:	2300      	movs	r3, #0
}
 801627c:	4618      	mov	r0, r3
 801627e:	3724      	adds	r7, #36	; 0x24
 8016280:	46bd      	mov	sp, r7
 8016282:	bd90      	pop	{r4, r7, pc}
 8016284:	200113bc 	.word	0x200113bc
 8016288:	200113b8 	.word	0x200113b8
 801628c:	200113ec 	.word	0x200113ec
 8016290:	200113e4 	.word	0x200113e4
 8016294:	200113ed 	.word	0x200113ed
 8016298:	200113b4 	.word	0x200113b4

0801629c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801629c:	b590      	push	{r4, r7, lr}
 801629e:	b085      	sub	sp, #20
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
 80162a4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d106      	bne.n	80162ba <tcp_oos_insert_segment+0x1e>
 80162ac:	4b3b      	ldr	r3, [pc, #236]	; (801639c <tcp_oos_insert_segment+0x100>)
 80162ae:	f240 421f 	movw	r2, #1055	; 0x41f
 80162b2:	493b      	ldr	r1, [pc, #236]	; (80163a0 <tcp_oos_insert_segment+0x104>)
 80162b4:	483b      	ldr	r0, [pc, #236]	; (80163a4 <tcp_oos_insert_segment+0x108>)
 80162b6:	f006 fae1 	bl	801c87c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	68db      	ldr	r3, [r3, #12]
 80162be:	899b      	ldrh	r3, [r3, #12]
 80162c0:	b29b      	uxth	r3, r3
 80162c2:	4618      	mov	r0, r3
 80162c4:	f7fb f8cc 	bl	8011460 <lwip_htons>
 80162c8:	4603      	mov	r3, r0
 80162ca:	b2db      	uxtb	r3, r3
 80162cc:	f003 0301 	and.w	r3, r3, #1
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d028      	beq.n	8016326 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80162d4:	6838      	ldr	r0, [r7, #0]
 80162d6:	f7fe f995 	bl	8014604 <tcp_segs_free>
    next = NULL;
 80162da:	2300      	movs	r3, #0
 80162dc:	603b      	str	r3, [r7, #0]
 80162de:	e056      	b.n	801638e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80162e0:	683b      	ldr	r3, [r7, #0]
 80162e2:	68db      	ldr	r3, [r3, #12]
 80162e4:	899b      	ldrh	r3, [r3, #12]
 80162e6:	b29b      	uxth	r3, r3
 80162e8:	4618      	mov	r0, r3
 80162ea:	f7fb f8b9 	bl	8011460 <lwip_htons>
 80162ee:	4603      	mov	r3, r0
 80162f0:	b2db      	uxtb	r3, r3
 80162f2:	f003 0301 	and.w	r3, r3, #1
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d00d      	beq.n	8016316 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	68db      	ldr	r3, [r3, #12]
 80162fe:	899b      	ldrh	r3, [r3, #12]
 8016300:	b29c      	uxth	r4, r3
 8016302:	2001      	movs	r0, #1
 8016304:	f7fb f8ac 	bl	8011460 <lwip_htons>
 8016308:	4603      	mov	r3, r0
 801630a:	461a      	mov	r2, r3
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	68db      	ldr	r3, [r3, #12]
 8016310:	4322      	orrs	r2, r4
 8016312:	b292      	uxth	r2, r2
 8016314:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8016316:	683b      	ldr	r3, [r7, #0]
 8016318:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801631a:	683b      	ldr	r3, [r7, #0]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8016320:	68f8      	ldr	r0, [r7, #12]
 8016322:	f7fe f984 	bl	801462e <tcp_seg_free>
    while (next &&
 8016326:	683b      	ldr	r3, [r7, #0]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d00e      	beq.n	801634a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	891b      	ldrh	r3, [r3, #8]
 8016330:	461a      	mov	r2, r3
 8016332:	4b1d      	ldr	r3, [pc, #116]	; (80163a8 <tcp_oos_insert_segment+0x10c>)
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	441a      	add	r2, r3
 8016338:	683b      	ldr	r3, [r7, #0]
 801633a:	68db      	ldr	r3, [r3, #12]
 801633c:	685b      	ldr	r3, [r3, #4]
 801633e:	6839      	ldr	r1, [r7, #0]
 8016340:	8909      	ldrh	r1, [r1, #8]
 8016342:	440b      	add	r3, r1
 8016344:	1ad3      	subs	r3, r2, r3
    while (next &&
 8016346:	2b00      	cmp	r3, #0
 8016348:	daca      	bge.n	80162e0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801634a:	683b      	ldr	r3, [r7, #0]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d01e      	beq.n	801638e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	891b      	ldrh	r3, [r3, #8]
 8016354:	461a      	mov	r2, r3
 8016356:	4b14      	ldr	r3, [pc, #80]	; (80163a8 <tcp_oos_insert_segment+0x10c>)
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	441a      	add	r2, r3
 801635c:	683b      	ldr	r3, [r7, #0]
 801635e:	68db      	ldr	r3, [r3, #12]
 8016360:	685b      	ldr	r3, [r3, #4]
 8016362:	1ad3      	subs	r3, r2, r3
    if (next &&
 8016364:	2b00      	cmp	r3, #0
 8016366:	dd12      	ble.n	801638e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8016368:	683b      	ldr	r3, [r7, #0]
 801636a:	68db      	ldr	r3, [r3, #12]
 801636c:	685b      	ldr	r3, [r3, #4]
 801636e:	b29a      	uxth	r2, r3
 8016370:	4b0d      	ldr	r3, [pc, #52]	; (80163a8 <tcp_oos_insert_segment+0x10c>)
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	b29b      	uxth	r3, r3
 8016376:	1ad3      	subs	r3, r2, r3
 8016378:	b29a      	uxth	r2, r3
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	685a      	ldr	r2, [r3, #4]
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	891b      	ldrh	r3, [r3, #8]
 8016386:	4619      	mov	r1, r3
 8016388:	4610      	mov	r0, r2
 801638a:	f7fc fb91 	bl	8012ab0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	683a      	ldr	r2, [r7, #0]
 8016392:	601a      	str	r2, [r3, #0]
}
 8016394:	bf00      	nop
 8016396:	3714      	adds	r7, #20
 8016398:	46bd      	mov	sp, r7
 801639a:	bd90      	pop	{r4, r7, pc}
 801639c:	0801f4c0 	.word	0x0801f4c0
 80163a0:	0801f780 	.word	0x0801f780
 80163a4:	0801f50c 	.word	0x0801f50c
 80163a8:	200113e0 	.word	0x200113e0

080163ac <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80163ac:	b5b0      	push	{r4, r5, r7, lr}
 80163ae:	b086      	sub	sp, #24
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	60f8      	str	r0, [r7, #12]
 80163b4:	60b9      	str	r1, [r7, #8]
 80163b6:	607a      	str	r2, [r7, #4]
 80163b8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80163ba:	e03e      	b.n	801643a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80163bc:	68bb      	ldr	r3, [r7, #8]
 80163be:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80163c0:	68bb      	ldr	r3, [r7, #8]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80163c6:	697b      	ldr	r3, [r7, #20]
 80163c8:	685b      	ldr	r3, [r3, #4]
 80163ca:	4618      	mov	r0, r3
 80163cc:	f7fc fd84 	bl	8012ed8 <pbuf_clen>
 80163d0:	4603      	mov	r3, r0
 80163d2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80163da:	8a7a      	ldrh	r2, [r7, #18]
 80163dc:	429a      	cmp	r2, r3
 80163de:	d906      	bls.n	80163ee <tcp_free_acked_segments+0x42>
 80163e0:	4b2a      	ldr	r3, [pc, #168]	; (801648c <tcp_free_acked_segments+0xe0>)
 80163e2:	f240 4257 	movw	r2, #1111	; 0x457
 80163e6:	492a      	ldr	r1, [pc, #168]	; (8016490 <tcp_free_acked_segments+0xe4>)
 80163e8:	482a      	ldr	r0, [pc, #168]	; (8016494 <tcp_free_acked_segments+0xe8>)
 80163ea:	f006 fa47 	bl	801c87c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80163f4:	8a7b      	ldrh	r3, [r7, #18]
 80163f6:	1ad3      	subs	r3, r2, r3
 80163f8:	b29a      	uxth	r2, r3
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8016400:	697b      	ldr	r3, [r7, #20]
 8016402:	891a      	ldrh	r2, [r3, #8]
 8016404:	4b24      	ldr	r3, [pc, #144]	; (8016498 <tcp_free_acked_segments+0xec>)
 8016406:	881b      	ldrh	r3, [r3, #0]
 8016408:	4413      	add	r3, r2
 801640a:	b29a      	uxth	r2, r3
 801640c:	4b22      	ldr	r3, [pc, #136]	; (8016498 <tcp_free_acked_segments+0xec>)
 801640e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8016410:	6978      	ldr	r0, [r7, #20]
 8016412:	f7fe f90c 	bl	801462e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801641c:	2b00      	cmp	r3, #0
 801641e:	d00c      	beq.n	801643a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8016420:	68bb      	ldr	r3, [r7, #8]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d109      	bne.n	801643a <tcp_free_acked_segments+0x8e>
 8016426:	683b      	ldr	r3, [r7, #0]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d106      	bne.n	801643a <tcp_free_acked_segments+0x8e>
 801642c:	4b17      	ldr	r3, [pc, #92]	; (801648c <tcp_free_acked_segments+0xe0>)
 801642e:	f240 4261 	movw	r2, #1121	; 0x461
 8016432:	491a      	ldr	r1, [pc, #104]	; (801649c <tcp_free_acked_segments+0xf0>)
 8016434:	4817      	ldr	r0, [pc, #92]	; (8016494 <tcp_free_acked_segments+0xe8>)
 8016436:	f006 fa21 	bl	801c87c <iprintf>
  while (seg_list != NULL &&
 801643a:	68bb      	ldr	r3, [r7, #8]
 801643c:	2b00      	cmp	r3, #0
 801643e:	d020      	beq.n	8016482 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8016440:	68bb      	ldr	r3, [r7, #8]
 8016442:	68db      	ldr	r3, [r3, #12]
 8016444:	685b      	ldr	r3, [r3, #4]
 8016446:	4618      	mov	r0, r3
 8016448:	f7fb f81f 	bl	801148a <lwip_htonl>
 801644c:	4604      	mov	r4, r0
 801644e:	68bb      	ldr	r3, [r7, #8]
 8016450:	891b      	ldrh	r3, [r3, #8]
 8016452:	461d      	mov	r5, r3
 8016454:	68bb      	ldr	r3, [r7, #8]
 8016456:	68db      	ldr	r3, [r3, #12]
 8016458:	899b      	ldrh	r3, [r3, #12]
 801645a:	b29b      	uxth	r3, r3
 801645c:	4618      	mov	r0, r3
 801645e:	f7fa ffff 	bl	8011460 <lwip_htons>
 8016462:	4603      	mov	r3, r0
 8016464:	b2db      	uxtb	r3, r3
 8016466:	f003 0303 	and.w	r3, r3, #3
 801646a:	2b00      	cmp	r3, #0
 801646c:	d001      	beq.n	8016472 <tcp_free_acked_segments+0xc6>
 801646e:	2301      	movs	r3, #1
 8016470:	e000      	b.n	8016474 <tcp_free_acked_segments+0xc8>
 8016472:	2300      	movs	r3, #0
 8016474:	442b      	add	r3, r5
 8016476:	18e2      	adds	r2, r4, r3
 8016478:	4b09      	ldr	r3, [pc, #36]	; (80164a0 <tcp_free_acked_segments+0xf4>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801647e:	2b00      	cmp	r3, #0
 8016480:	dd9c      	ble.n	80163bc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8016482:	68bb      	ldr	r3, [r7, #8]
}
 8016484:	4618      	mov	r0, r3
 8016486:	3718      	adds	r7, #24
 8016488:	46bd      	mov	sp, r7
 801648a:	bdb0      	pop	{r4, r5, r7, pc}
 801648c:	0801f4c0 	.word	0x0801f4c0
 8016490:	0801f7a8 	.word	0x0801f7a8
 8016494:	0801f50c 	.word	0x0801f50c
 8016498:	200113e8 	.word	0x200113e8
 801649c:	0801f7d0 	.word	0x0801f7d0
 80164a0:	200113e4 	.word	0x200113e4

080164a4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80164a4:	b5b0      	push	{r4, r5, r7, lr}
 80164a6:	b094      	sub	sp, #80	; 0x50
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80164ac:	2300      	movs	r3, #0
 80164ae:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d106      	bne.n	80164c4 <tcp_receive+0x20>
 80164b6:	4b91      	ldr	r3, [pc, #580]	; (80166fc <tcp_receive+0x258>)
 80164b8:	f240 427b 	movw	r2, #1147	; 0x47b
 80164bc:	4990      	ldr	r1, [pc, #576]	; (8016700 <tcp_receive+0x25c>)
 80164be:	4891      	ldr	r0, [pc, #580]	; (8016704 <tcp_receive+0x260>)
 80164c0:	f006 f9dc 	bl	801c87c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	7d1b      	ldrb	r3, [r3, #20]
 80164c8:	2b03      	cmp	r3, #3
 80164ca:	d806      	bhi.n	80164da <tcp_receive+0x36>
 80164cc:	4b8b      	ldr	r3, [pc, #556]	; (80166fc <tcp_receive+0x258>)
 80164ce:	f240 427c 	movw	r2, #1148	; 0x47c
 80164d2:	498d      	ldr	r1, [pc, #564]	; (8016708 <tcp_receive+0x264>)
 80164d4:	488b      	ldr	r0, [pc, #556]	; (8016704 <tcp_receive+0x260>)
 80164d6:	f006 f9d1 	bl	801c87c <iprintf>

  if (flags & TCP_ACK) {
 80164da:	4b8c      	ldr	r3, [pc, #560]	; (801670c <tcp_receive+0x268>)
 80164dc:	781b      	ldrb	r3, [r3, #0]
 80164de:	f003 0310 	and.w	r3, r3, #16
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	f000 8264 	beq.w	80169b0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80164ee:	461a      	mov	r2, r3
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80164f4:	4413      	add	r3, r2
 80164f6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80164fc:	4b84      	ldr	r3, [pc, #528]	; (8016710 <tcp_receive+0x26c>)
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	1ad3      	subs	r3, r2, r3
 8016502:	2b00      	cmp	r3, #0
 8016504:	db1b      	blt.n	801653e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801650a:	4b81      	ldr	r3, [pc, #516]	; (8016710 <tcp_receive+0x26c>)
 801650c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801650e:	429a      	cmp	r2, r3
 8016510:	d106      	bne.n	8016520 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016516:	4b7f      	ldr	r3, [pc, #508]	; (8016714 <tcp_receive+0x270>)
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	1ad3      	subs	r3, r2, r3
 801651c:	2b00      	cmp	r3, #0
 801651e:	db0e      	blt.n	801653e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016524:	4b7b      	ldr	r3, [pc, #492]	; (8016714 <tcp_receive+0x270>)
 8016526:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016528:	429a      	cmp	r2, r3
 801652a:	d125      	bne.n	8016578 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801652c:	4b7a      	ldr	r3, [pc, #488]	; (8016718 <tcp_receive+0x274>)
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	89db      	ldrh	r3, [r3, #14]
 8016532:	b29a      	uxth	r2, r3
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801653a:	429a      	cmp	r2, r3
 801653c:	d91c      	bls.n	8016578 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801653e:	4b76      	ldr	r3, [pc, #472]	; (8016718 <tcp_receive+0x274>)
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	89db      	ldrh	r3, [r3, #14]
 8016544:	b29a      	uxth	r2, r3
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016558:	429a      	cmp	r2, r3
 801655a:	d205      	bcs.n	8016568 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8016568:	4b69      	ldr	r3, [pc, #420]	; (8016710 <tcp_receive+0x26c>)
 801656a:	681a      	ldr	r2, [r3, #0]
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8016570:	4b68      	ldr	r3, [pc, #416]	; (8016714 <tcp_receive+0x270>)
 8016572:	681a      	ldr	r2, [r3, #0]
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8016578:	4b66      	ldr	r3, [pc, #408]	; (8016714 <tcp_receive+0x270>)
 801657a:	681a      	ldr	r2, [r3, #0]
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016580:	1ad3      	subs	r3, r2, r3
 8016582:	2b00      	cmp	r3, #0
 8016584:	dc58      	bgt.n	8016638 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8016586:	4b65      	ldr	r3, [pc, #404]	; (801671c <tcp_receive+0x278>)
 8016588:	881b      	ldrh	r3, [r3, #0]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d14b      	bne.n	8016626 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016592:	687a      	ldr	r2, [r7, #4]
 8016594:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8016598:	4413      	add	r3, r2
 801659a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801659c:	429a      	cmp	r2, r3
 801659e:	d142      	bne.n	8016626 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	db3d      	blt.n	8016626 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80165ae:	4b59      	ldr	r3, [pc, #356]	; (8016714 <tcp_receive+0x270>)
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	429a      	cmp	r2, r3
 80165b4:	d137      	bne.n	8016626 <tcp_receive+0x182>
              found_dupack = 1;
 80165b6:	2301      	movs	r3, #1
 80165b8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80165c0:	2bff      	cmp	r3, #255	; 0xff
 80165c2:	d007      	beq.n	80165d4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80165ca:	3301      	adds	r3, #1
 80165cc:	b2da      	uxtb	r2, r3
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80165da:	2b03      	cmp	r3, #3
 80165dc:	d91b      	bls.n	8016616 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80165e8:	4413      	add	r3, r2
 80165ea:	b29a      	uxth	r2, r3
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80165f2:	429a      	cmp	r2, r3
 80165f4:	d30a      	bcc.n	801660c <tcp_receive+0x168>
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016600:	4413      	add	r3, r2
 8016602:	b29a      	uxth	r2, r3
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801660a:	e004      	b.n	8016616 <tcp_receive+0x172>
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016612:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801661c:	2b02      	cmp	r3, #2
 801661e:	d902      	bls.n	8016626 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8016620:	6878      	ldr	r0, [r7, #4]
 8016622:	f002 fb45 	bl	8018cb0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8016626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016628:	2b00      	cmp	r3, #0
 801662a:	f040 8161 	bne.w	80168f0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	2200      	movs	r2, #0
 8016632:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016636:	e15b      	b.n	80168f0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016638:	4b36      	ldr	r3, [pc, #216]	; (8016714 <tcp_receive+0x270>)
 801663a:	681a      	ldr	r2, [r3, #0]
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016640:	1ad3      	subs	r3, r2, r3
 8016642:	3b01      	subs	r3, #1
 8016644:	2b00      	cmp	r3, #0
 8016646:	f2c0 814e 	blt.w	80168e6 <tcp_receive+0x442>
 801664a:	4b32      	ldr	r3, [pc, #200]	; (8016714 <tcp_receive+0x270>)
 801664c:	681a      	ldr	r2, [r3, #0]
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016652:	1ad3      	subs	r3, r2, r3
 8016654:	2b00      	cmp	r3, #0
 8016656:	f300 8146 	bgt.w	80168e6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	8b5b      	ldrh	r3, [r3, #26]
 801665e:	f003 0304 	and.w	r3, r3, #4
 8016662:	2b00      	cmp	r3, #0
 8016664:	d010      	beq.n	8016688 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	8b5b      	ldrh	r3, [r3, #26]
 801666a:	f023 0304 	bic.w	r3, r3, #4
 801666e:	b29a      	uxth	r2, r3
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	2200      	movs	r2, #0
 8016684:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	2200      	movs	r2, #0
 801668c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016696:	10db      	asrs	r3, r3, #3
 8016698:	b21b      	sxth	r3, r3
 801669a:	b29a      	uxth	r2, r3
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80166a2:	b29b      	uxth	r3, r3
 80166a4:	4413      	add	r3, r2
 80166a6:	b29b      	uxth	r3, r3
 80166a8:	b21a      	sxth	r2, r3
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80166b0:	4b18      	ldr	r3, [pc, #96]	; (8016714 <tcp_receive+0x270>)
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	b29a      	uxth	r2, r3
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80166ba:	b29b      	uxth	r3, r3
 80166bc:	1ad3      	subs	r3, r2, r3
 80166be:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	2200      	movs	r2, #0
 80166c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80166c8:	4b12      	ldr	r3, [pc, #72]	; (8016714 <tcp_receive+0x270>)
 80166ca:	681a      	ldr	r2, [r3, #0]
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	7d1b      	ldrb	r3, [r3, #20]
 80166d4:	2b03      	cmp	r3, #3
 80166d6:	f240 8097 	bls.w	8016808 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80166e6:	429a      	cmp	r2, r3
 80166e8:	d245      	bcs.n	8016776 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	8b5b      	ldrh	r3, [r3, #26]
 80166ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d014      	beq.n	8016720 <tcp_receive+0x27c>
 80166f6:	2301      	movs	r3, #1
 80166f8:	e013      	b.n	8016722 <tcp_receive+0x27e>
 80166fa:	bf00      	nop
 80166fc:	0801f4c0 	.word	0x0801f4c0
 8016700:	0801f7f0 	.word	0x0801f7f0
 8016704:	0801f50c 	.word	0x0801f50c
 8016708:	0801f80c 	.word	0x0801f80c
 801670c:	200113ec 	.word	0x200113ec
 8016710:	200113e0 	.word	0x200113e0
 8016714:	200113e4 	.word	0x200113e4
 8016718:	200113d0 	.word	0x200113d0
 801671c:	200113ea 	.word	0x200113ea
 8016720:	2302      	movs	r3, #2
 8016722:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8016726:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801672a:	b29a      	uxth	r2, r3
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016730:	fb12 f303 	smulbb	r3, r2, r3
 8016734:	b29b      	uxth	r3, r3
 8016736:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016738:	4293      	cmp	r3, r2
 801673a:	bf28      	it	cs
 801673c:	4613      	movcs	r3, r2
 801673e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016746:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016748:	4413      	add	r3, r2
 801674a:	b29a      	uxth	r2, r3
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016752:	429a      	cmp	r2, r3
 8016754:	d309      	bcc.n	801676a <tcp_receive+0x2c6>
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801675c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801675e:	4413      	add	r3, r2
 8016760:	b29a      	uxth	r2, r3
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016768:	e04e      	b.n	8016808 <tcp_receive+0x364>
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016770:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016774:	e048      	b.n	8016808 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801677c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801677e:	4413      	add	r3, r2
 8016780:	b29a      	uxth	r2, r3
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8016788:	429a      	cmp	r2, r3
 801678a:	d309      	bcc.n	80167a0 <tcp_receive+0x2fc>
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016792:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016794:	4413      	add	r3, r2
 8016796:	b29a      	uxth	r2, r3
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801679e:	e004      	b.n	80167aa <tcp_receive+0x306>
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80167a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80167b6:	429a      	cmp	r2, r3
 80167b8:	d326      	bcc.n	8016808 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80167c6:	1ad3      	subs	r3, r2, r3
 80167c8:	b29a      	uxth	r2, r3
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80167da:	4413      	add	r3, r2
 80167dc:	b29a      	uxth	r2, r3
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80167e4:	429a      	cmp	r2, r3
 80167e6:	d30a      	bcc.n	80167fe <tcp_receive+0x35a>
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80167f2:	4413      	add	r3, r2
 80167f4:	b29a      	uxth	r2, r3
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80167fc:	e004      	b.n	8016808 <tcp_receive+0x364>
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016804:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016810:	4a98      	ldr	r2, [pc, #608]	; (8016a74 <tcp_receive+0x5d0>)
 8016812:	6878      	ldr	r0, [r7, #4]
 8016814:	f7ff fdca 	bl	80163ac <tcp_free_acked_segments>
 8016818:	4602      	mov	r2, r0
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016826:	4a94      	ldr	r2, [pc, #592]	; (8016a78 <tcp_receive+0x5d4>)
 8016828:	6878      	ldr	r0, [r7, #4]
 801682a:	f7ff fdbf 	bl	80163ac <tcp_free_acked_segments>
 801682e:	4602      	mov	r2, r0
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016838:	2b00      	cmp	r3, #0
 801683a:	d104      	bne.n	8016846 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016842:	861a      	strh	r2, [r3, #48]	; 0x30
 8016844:	e002      	b.n	801684c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	2200      	movs	r2, #0
 801684a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	2200      	movs	r2, #0
 8016850:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016856:	2b00      	cmp	r3, #0
 8016858:	d103      	bne.n	8016862 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	2200      	movs	r2, #0
 801685e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016868:	4b84      	ldr	r3, [pc, #528]	; (8016a7c <tcp_receive+0x5d8>)
 801686a:	881b      	ldrh	r3, [r3, #0]
 801686c:	4413      	add	r3, r2
 801686e:	b29a      	uxth	r2, r3
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	8b5b      	ldrh	r3, [r3, #26]
 801687a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801687e:	2b00      	cmp	r3, #0
 8016880:	d035      	beq.n	80168ee <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016886:	2b00      	cmp	r3, #0
 8016888:	d118      	bne.n	80168bc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801688e:	2b00      	cmp	r3, #0
 8016890:	d00c      	beq.n	80168ac <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801689a:	68db      	ldr	r3, [r3, #12]
 801689c:	685b      	ldr	r3, [r3, #4]
 801689e:	4618      	mov	r0, r3
 80168a0:	f7fa fdf3 	bl	801148a <lwip_htonl>
 80168a4:	4603      	mov	r3, r0
 80168a6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	dc20      	bgt.n	80168ee <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	8b5b      	ldrh	r3, [r3, #26]
 80168b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80168b4:	b29a      	uxth	r2, r3
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80168ba:	e018      	b.n	80168ee <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80168c4:	68db      	ldr	r3, [r3, #12]
 80168c6:	685b      	ldr	r3, [r3, #4]
 80168c8:	4618      	mov	r0, r3
 80168ca:	f7fa fdde 	bl	801148a <lwip_htonl>
 80168ce:	4603      	mov	r3, r0
 80168d0:	1ae3      	subs	r3, r4, r3
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	dc0b      	bgt.n	80168ee <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	8b5b      	ldrh	r3, [r3, #26]
 80168da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80168de:	b29a      	uxth	r2, r3
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80168e4:	e003      	b.n	80168ee <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80168e6:	6878      	ldr	r0, [r7, #4]
 80168e8:	f002 fbce 	bl	8019088 <tcp_send_empty_ack>
 80168ec:	e000      	b.n	80168f0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80168ee:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d05b      	beq.n	80169b0 <tcp_receive+0x50c>
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80168fc:	4b60      	ldr	r3, [pc, #384]	; (8016a80 <tcp_receive+0x5dc>)
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	1ad3      	subs	r3, r2, r3
 8016902:	2b00      	cmp	r3, #0
 8016904:	da54      	bge.n	80169b0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8016906:	4b5f      	ldr	r3, [pc, #380]	; (8016a84 <tcp_receive+0x5e0>)
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	b29a      	uxth	r2, r3
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016910:	b29b      	uxth	r3, r3
 8016912:	1ad3      	subs	r3, r2, r3
 8016914:	b29b      	uxth	r3, r3
 8016916:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801691a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016924:	10db      	asrs	r3, r3, #3
 8016926:	b21b      	sxth	r3, r3
 8016928:	b29b      	uxth	r3, r3
 801692a:	1ad3      	subs	r3, r2, r3
 801692c:	b29b      	uxth	r3, r3
 801692e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016938:	b29a      	uxth	r2, r3
 801693a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801693e:	4413      	add	r3, r2
 8016940:	b29b      	uxth	r3, r3
 8016942:	b21a      	sxth	r2, r3
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8016948:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801694c:	2b00      	cmp	r3, #0
 801694e:	da05      	bge.n	801695c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8016950:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016954:	425b      	negs	r3, r3
 8016956:	b29b      	uxth	r3, r3
 8016958:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801695c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016966:	109b      	asrs	r3, r3, #2
 8016968:	b21b      	sxth	r3, r3
 801696a:	b29b      	uxth	r3, r3
 801696c:	1ad3      	subs	r3, r2, r3
 801696e:	b29b      	uxth	r3, r3
 8016970:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801697a:	b29a      	uxth	r2, r3
 801697c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016980:	4413      	add	r3, r2
 8016982:	b29b      	uxth	r3, r3
 8016984:	b21a      	sxth	r2, r3
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016990:	10db      	asrs	r3, r3, #3
 8016992:	b21b      	sxth	r3, r3
 8016994:	b29a      	uxth	r2, r3
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801699c:	b29b      	uxth	r3, r3
 801699e:	4413      	add	r3, r2
 80169a0:	b29b      	uxth	r3, r3
 80169a2:	b21a      	sxth	r2, r3
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	2200      	movs	r2, #0
 80169ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80169b0:	4b35      	ldr	r3, [pc, #212]	; (8016a88 <tcp_receive+0x5e4>)
 80169b2:	881b      	ldrh	r3, [r3, #0]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	f000 84e2 	beq.w	801737e <tcp_receive+0xeda>
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	7d1b      	ldrb	r3, [r3, #20]
 80169be:	2b06      	cmp	r3, #6
 80169c0:	f200 84dd 	bhi.w	801737e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80169c8:	4b30      	ldr	r3, [pc, #192]	; (8016a8c <tcp_receive+0x5e8>)
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	1ad3      	subs	r3, r2, r3
 80169ce:	3b01      	subs	r3, #1
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	f2c0 808f 	blt.w	8016af4 <tcp_receive+0x650>
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80169da:	4b2b      	ldr	r3, [pc, #172]	; (8016a88 <tcp_receive+0x5e4>)
 80169dc:	881b      	ldrh	r3, [r3, #0]
 80169de:	4619      	mov	r1, r3
 80169e0:	4b2a      	ldr	r3, [pc, #168]	; (8016a8c <tcp_receive+0x5e8>)
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	440b      	add	r3, r1
 80169e6:	1ad3      	subs	r3, r2, r3
 80169e8:	3301      	adds	r3, #1
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	f300 8082 	bgt.w	8016af4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80169f0:	4b27      	ldr	r3, [pc, #156]	; (8016a90 <tcp_receive+0x5ec>)
 80169f2:	685b      	ldr	r3, [r3, #4]
 80169f4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80169fa:	4b24      	ldr	r3, [pc, #144]	; (8016a8c <tcp_receive+0x5e8>)
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	1ad3      	subs	r3, r2, r3
 8016a00:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016a02:	4b23      	ldr	r3, [pc, #140]	; (8016a90 <tcp_receive+0x5ec>)
 8016a04:	685b      	ldr	r3, [r3, #4]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d106      	bne.n	8016a18 <tcp_receive+0x574>
 8016a0a:	4b22      	ldr	r3, [pc, #136]	; (8016a94 <tcp_receive+0x5f0>)
 8016a0c:	f240 5294 	movw	r2, #1428	; 0x594
 8016a10:	4921      	ldr	r1, [pc, #132]	; (8016a98 <tcp_receive+0x5f4>)
 8016a12:	4822      	ldr	r0, [pc, #136]	; (8016a9c <tcp_receive+0x5f8>)
 8016a14:	f005 ff32 	bl	801c87c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a1a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016a1e:	4293      	cmp	r3, r2
 8016a20:	d906      	bls.n	8016a30 <tcp_receive+0x58c>
 8016a22:	4b1c      	ldr	r3, [pc, #112]	; (8016a94 <tcp_receive+0x5f0>)
 8016a24:	f240 5295 	movw	r2, #1429	; 0x595
 8016a28:	491d      	ldr	r1, [pc, #116]	; (8016aa0 <tcp_receive+0x5fc>)
 8016a2a:	481c      	ldr	r0, [pc, #112]	; (8016a9c <tcp_receive+0x5f8>)
 8016a2c:	f005 ff26 	bl	801c87c <iprintf>
      off = (u16_t)off32;
 8016a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8016a36:	4b16      	ldr	r3, [pc, #88]	; (8016a90 <tcp_receive+0x5ec>)
 8016a38:	685b      	ldr	r3, [r3, #4]
 8016a3a:	891b      	ldrh	r3, [r3, #8]
 8016a3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016a40:	429a      	cmp	r2, r3
 8016a42:	d906      	bls.n	8016a52 <tcp_receive+0x5ae>
 8016a44:	4b13      	ldr	r3, [pc, #76]	; (8016a94 <tcp_receive+0x5f0>)
 8016a46:	f240 5297 	movw	r2, #1431	; 0x597
 8016a4a:	4916      	ldr	r1, [pc, #88]	; (8016aa4 <tcp_receive+0x600>)
 8016a4c:	4813      	ldr	r0, [pc, #76]	; (8016a9c <tcp_receive+0x5f8>)
 8016a4e:	f005 ff15 	bl	801c87c <iprintf>
      inseg.len -= off;
 8016a52:	4b0f      	ldr	r3, [pc, #60]	; (8016a90 <tcp_receive+0x5ec>)
 8016a54:	891a      	ldrh	r2, [r3, #8]
 8016a56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016a5a:	1ad3      	subs	r3, r2, r3
 8016a5c:	b29a      	uxth	r2, r3
 8016a5e:	4b0c      	ldr	r3, [pc, #48]	; (8016a90 <tcp_receive+0x5ec>)
 8016a60:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8016a62:	4b0b      	ldr	r3, [pc, #44]	; (8016a90 <tcp_receive+0x5ec>)
 8016a64:	685b      	ldr	r3, [r3, #4]
 8016a66:	891a      	ldrh	r2, [r3, #8]
 8016a68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016a6c:	1ad3      	subs	r3, r2, r3
 8016a6e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8016a70:	e02a      	b.n	8016ac8 <tcp_receive+0x624>
 8016a72:	bf00      	nop
 8016a74:	0801f828 	.word	0x0801f828
 8016a78:	0801f830 	.word	0x0801f830
 8016a7c:	200113e8 	.word	0x200113e8
 8016a80:	200113e4 	.word	0x200113e4
 8016a84:	200113a8 	.word	0x200113a8
 8016a88:	200113ea 	.word	0x200113ea
 8016a8c:	200113e0 	.word	0x200113e0
 8016a90:	200113c0 	.word	0x200113c0
 8016a94:	0801f4c0 	.word	0x0801f4c0
 8016a98:	0801f838 	.word	0x0801f838
 8016a9c:	0801f50c 	.word	0x0801f50c
 8016aa0:	0801f848 	.word	0x0801f848
 8016aa4:	0801f858 	.word	0x0801f858
        off -= p->len;
 8016aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016aaa:	895b      	ldrh	r3, [r3, #10]
 8016aac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016ab0:	1ad3      	subs	r3, r2, r3
 8016ab2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8016ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ab8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016aba:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016abe:	2200      	movs	r2, #0
 8016ac0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8016ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8016ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016aca:	895b      	ldrh	r3, [r3, #10]
 8016acc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016ad0:	429a      	cmp	r2, r3
 8016ad2:	d8e9      	bhi.n	8016aa8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016ad4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016ad8:	4619      	mov	r1, r3
 8016ada:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016adc:	f7fc f8e8 	bl	8012cb0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ae4:	4a91      	ldr	r2, [pc, #580]	; (8016d2c <tcp_receive+0x888>)
 8016ae6:	6013      	str	r3, [r2, #0]
 8016ae8:	4b91      	ldr	r3, [pc, #580]	; (8016d30 <tcp_receive+0x88c>)
 8016aea:	68db      	ldr	r3, [r3, #12]
 8016aec:	4a8f      	ldr	r2, [pc, #572]	; (8016d2c <tcp_receive+0x888>)
 8016aee:	6812      	ldr	r2, [r2, #0]
 8016af0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016af2:	e00d      	b.n	8016b10 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016af4:	4b8d      	ldr	r3, [pc, #564]	; (8016d2c <tcp_receive+0x888>)
 8016af6:	681a      	ldr	r2, [r3, #0]
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016afc:	1ad3      	subs	r3, r2, r3
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	da06      	bge.n	8016b10 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	8b5b      	ldrh	r3, [r3, #26]
 8016b06:	f043 0302 	orr.w	r3, r3, #2
 8016b0a:	b29a      	uxth	r2, r3
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016b10:	4b86      	ldr	r3, [pc, #536]	; (8016d2c <tcp_receive+0x888>)
 8016b12:	681a      	ldr	r2, [r3, #0]
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b18:	1ad3      	subs	r3, r2, r3
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	f2c0 842a 	blt.w	8017374 <tcp_receive+0xed0>
 8016b20:	4b82      	ldr	r3, [pc, #520]	; (8016d2c <tcp_receive+0x888>)
 8016b22:	681a      	ldr	r2, [r3, #0]
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b28:	6879      	ldr	r1, [r7, #4]
 8016b2a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016b2c:	440b      	add	r3, r1
 8016b2e:	1ad3      	subs	r3, r2, r3
 8016b30:	3301      	adds	r3, #1
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	f300 841e 	bgt.w	8017374 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016b3c:	4b7b      	ldr	r3, [pc, #492]	; (8016d2c <tcp_receive+0x888>)
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	429a      	cmp	r2, r3
 8016b42:	f040 829a 	bne.w	801707a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016b46:	4b7a      	ldr	r3, [pc, #488]	; (8016d30 <tcp_receive+0x88c>)
 8016b48:	891c      	ldrh	r4, [r3, #8]
 8016b4a:	4b79      	ldr	r3, [pc, #484]	; (8016d30 <tcp_receive+0x88c>)
 8016b4c:	68db      	ldr	r3, [r3, #12]
 8016b4e:	899b      	ldrh	r3, [r3, #12]
 8016b50:	b29b      	uxth	r3, r3
 8016b52:	4618      	mov	r0, r3
 8016b54:	f7fa fc84 	bl	8011460 <lwip_htons>
 8016b58:	4603      	mov	r3, r0
 8016b5a:	b2db      	uxtb	r3, r3
 8016b5c:	f003 0303 	and.w	r3, r3, #3
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d001      	beq.n	8016b68 <tcp_receive+0x6c4>
 8016b64:	2301      	movs	r3, #1
 8016b66:	e000      	b.n	8016b6a <tcp_receive+0x6c6>
 8016b68:	2300      	movs	r3, #0
 8016b6a:	4423      	add	r3, r4
 8016b6c:	b29a      	uxth	r2, r3
 8016b6e:	4b71      	ldr	r3, [pc, #452]	; (8016d34 <tcp_receive+0x890>)
 8016b70:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016b76:	4b6f      	ldr	r3, [pc, #444]	; (8016d34 <tcp_receive+0x890>)
 8016b78:	881b      	ldrh	r3, [r3, #0]
 8016b7a:	429a      	cmp	r2, r3
 8016b7c:	d275      	bcs.n	8016c6a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016b7e:	4b6c      	ldr	r3, [pc, #432]	; (8016d30 <tcp_receive+0x88c>)
 8016b80:	68db      	ldr	r3, [r3, #12]
 8016b82:	899b      	ldrh	r3, [r3, #12]
 8016b84:	b29b      	uxth	r3, r3
 8016b86:	4618      	mov	r0, r3
 8016b88:	f7fa fc6a 	bl	8011460 <lwip_htons>
 8016b8c:	4603      	mov	r3, r0
 8016b8e:	b2db      	uxtb	r3, r3
 8016b90:	f003 0301 	and.w	r3, r3, #1
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d01f      	beq.n	8016bd8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016b98:	4b65      	ldr	r3, [pc, #404]	; (8016d30 <tcp_receive+0x88c>)
 8016b9a:	68db      	ldr	r3, [r3, #12]
 8016b9c:	899b      	ldrh	r3, [r3, #12]
 8016b9e:	b29b      	uxth	r3, r3
 8016ba0:	b21b      	sxth	r3, r3
 8016ba2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016ba6:	b21c      	sxth	r4, r3
 8016ba8:	4b61      	ldr	r3, [pc, #388]	; (8016d30 <tcp_receive+0x88c>)
 8016baa:	68db      	ldr	r3, [r3, #12]
 8016bac:	899b      	ldrh	r3, [r3, #12]
 8016bae:	b29b      	uxth	r3, r3
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	f7fa fc55 	bl	8011460 <lwip_htons>
 8016bb6:	4603      	mov	r3, r0
 8016bb8:	b2db      	uxtb	r3, r3
 8016bba:	b29b      	uxth	r3, r3
 8016bbc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016bc0:	b29b      	uxth	r3, r3
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	f7fa fc4c 	bl	8011460 <lwip_htons>
 8016bc8:	4603      	mov	r3, r0
 8016bca:	b21b      	sxth	r3, r3
 8016bcc:	4323      	orrs	r3, r4
 8016bce:	b21a      	sxth	r2, r3
 8016bd0:	4b57      	ldr	r3, [pc, #348]	; (8016d30 <tcp_receive+0x88c>)
 8016bd2:	68db      	ldr	r3, [r3, #12]
 8016bd4:	b292      	uxth	r2, r2
 8016bd6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016bdc:	4b54      	ldr	r3, [pc, #336]	; (8016d30 <tcp_receive+0x88c>)
 8016bde:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016be0:	4b53      	ldr	r3, [pc, #332]	; (8016d30 <tcp_receive+0x88c>)
 8016be2:	68db      	ldr	r3, [r3, #12]
 8016be4:	899b      	ldrh	r3, [r3, #12]
 8016be6:	b29b      	uxth	r3, r3
 8016be8:	4618      	mov	r0, r3
 8016bea:	f7fa fc39 	bl	8011460 <lwip_htons>
 8016bee:	4603      	mov	r3, r0
 8016bf0:	b2db      	uxtb	r3, r3
 8016bf2:	f003 0302 	and.w	r3, r3, #2
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d005      	beq.n	8016c06 <tcp_receive+0x762>
            inseg.len -= 1;
 8016bfa:	4b4d      	ldr	r3, [pc, #308]	; (8016d30 <tcp_receive+0x88c>)
 8016bfc:	891b      	ldrh	r3, [r3, #8]
 8016bfe:	3b01      	subs	r3, #1
 8016c00:	b29a      	uxth	r2, r3
 8016c02:	4b4b      	ldr	r3, [pc, #300]	; (8016d30 <tcp_receive+0x88c>)
 8016c04:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016c06:	4b4a      	ldr	r3, [pc, #296]	; (8016d30 <tcp_receive+0x88c>)
 8016c08:	685b      	ldr	r3, [r3, #4]
 8016c0a:	4a49      	ldr	r2, [pc, #292]	; (8016d30 <tcp_receive+0x88c>)
 8016c0c:	8912      	ldrh	r2, [r2, #8]
 8016c0e:	4611      	mov	r1, r2
 8016c10:	4618      	mov	r0, r3
 8016c12:	f7fb ff4d 	bl	8012ab0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016c16:	4b46      	ldr	r3, [pc, #280]	; (8016d30 <tcp_receive+0x88c>)
 8016c18:	891c      	ldrh	r4, [r3, #8]
 8016c1a:	4b45      	ldr	r3, [pc, #276]	; (8016d30 <tcp_receive+0x88c>)
 8016c1c:	68db      	ldr	r3, [r3, #12]
 8016c1e:	899b      	ldrh	r3, [r3, #12]
 8016c20:	b29b      	uxth	r3, r3
 8016c22:	4618      	mov	r0, r3
 8016c24:	f7fa fc1c 	bl	8011460 <lwip_htons>
 8016c28:	4603      	mov	r3, r0
 8016c2a:	b2db      	uxtb	r3, r3
 8016c2c:	f003 0303 	and.w	r3, r3, #3
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d001      	beq.n	8016c38 <tcp_receive+0x794>
 8016c34:	2301      	movs	r3, #1
 8016c36:	e000      	b.n	8016c3a <tcp_receive+0x796>
 8016c38:	2300      	movs	r3, #0
 8016c3a:	4423      	add	r3, r4
 8016c3c:	b29a      	uxth	r2, r3
 8016c3e:	4b3d      	ldr	r3, [pc, #244]	; (8016d34 <tcp_receive+0x890>)
 8016c40:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016c42:	4b3c      	ldr	r3, [pc, #240]	; (8016d34 <tcp_receive+0x890>)
 8016c44:	881b      	ldrh	r3, [r3, #0]
 8016c46:	461a      	mov	r2, r3
 8016c48:	4b38      	ldr	r3, [pc, #224]	; (8016d2c <tcp_receive+0x888>)
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	441a      	add	r2, r3
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c52:	6879      	ldr	r1, [r7, #4]
 8016c54:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016c56:	440b      	add	r3, r1
 8016c58:	429a      	cmp	r2, r3
 8016c5a:	d006      	beq.n	8016c6a <tcp_receive+0x7c6>
 8016c5c:	4b36      	ldr	r3, [pc, #216]	; (8016d38 <tcp_receive+0x894>)
 8016c5e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8016c62:	4936      	ldr	r1, [pc, #216]	; (8016d3c <tcp_receive+0x898>)
 8016c64:	4836      	ldr	r0, [pc, #216]	; (8016d40 <tcp_receive+0x89c>)
 8016c66:	f005 fe09 	bl	801c87c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	f000 80e7 	beq.w	8016e42 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016c74:	4b2e      	ldr	r3, [pc, #184]	; (8016d30 <tcp_receive+0x88c>)
 8016c76:	68db      	ldr	r3, [r3, #12]
 8016c78:	899b      	ldrh	r3, [r3, #12]
 8016c7a:	b29b      	uxth	r3, r3
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	f7fa fbef 	bl	8011460 <lwip_htons>
 8016c82:	4603      	mov	r3, r0
 8016c84:	b2db      	uxtb	r3, r3
 8016c86:	f003 0301 	and.w	r3, r3, #1
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d010      	beq.n	8016cb0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8016c8e:	e00a      	b.n	8016ca6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016c94:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016c9a:	681a      	ldr	r2, [r3, #0]
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8016ca0:	68f8      	ldr	r0, [r7, #12]
 8016ca2:	f7fd fcc4 	bl	801462e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d1f0      	bne.n	8016c90 <tcp_receive+0x7ec>
 8016cae:	e0c8      	b.n	8016e42 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016cb6:	e052      	b.n	8016d5e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016cba:	68db      	ldr	r3, [r3, #12]
 8016cbc:	899b      	ldrh	r3, [r3, #12]
 8016cbe:	b29b      	uxth	r3, r3
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	f7fa fbcd 	bl	8011460 <lwip_htons>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	b2db      	uxtb	r3, r3
 8016cca:	f003 0301 	and.w	r3, r3, #1
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d03d      	beq.n	8016d4e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016cd2:	4b17      	ldr	r3, [pc, #92]	; (8016d30 <tcp_receive+0x88c>)
 8016cd4:	68db      	ldr	r3, [r3, #12]
 8016cd6:	899b      	ldrh	r3, [r3, #12]
 8016cd8:	b29b      	uxth	r3, r3
 8016cda:	4618      	mov	r0, r3
 8016cdc:	f7fa fbc0 	bl	8011460 <lwip_htons>
 8016ce0:	4603      	mov	r3, r0
 8016ce2:	b2db      	uxtb	r3, r3
 8016ce4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d130      	bne.n	8016d4e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016cec:	4b10      	ldr	r3, [pc, #64]	; (8016d30 <tcp_receive+0x88c>)
 8016cee:	68db      	ldr	r3, [r3, #12]
 8016cf0:	899b      	ldrh	r3, [r3, #12]
 8016cf2:	b29c      	uxth	r4, r3
 8016cf4:	2001      	movs	r0, #1
 8016cf6:	f7fa fbb3 	bl	8011460 <lwip_htons>
 8016cfa:	4603      	mov	r3, r0
 8016cfc:	461a      	mov	r2, r3
 8016cfe:	4b0c      	ldr	r3, [pc, #48]	; (8016d30 <tcp_receive+0x88c>)
 8016d00:	68db      	ldr	r3, [r3, #12]
 8016d02:	4322      	orrs	r2, r4
 8016d04:	b292      	uxth	r2, r2
 8016d06:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016d08:	4b09      	ldr	r3, [pc, #36]	; (8016d30 <tcp_receive+0x88c>)
 8016d0a:	891c      	ldrh	r4, [r3, #8]
 8016d0c:	4b08      	ldr	r3, [pc, #32]	; (8016d30 <tcp_receive+0x88c>)
 8016d0e:	68db      	ldr	r3, [r3, #12]
 8016d10:	899b      	ldrh	r3, [r3, #12]
 8016d12:	b29b      	uxth	r3, r3
 8016d14:	4618      	mov	r0, r3
 8016d16:	f7fa fba3 	bl	8011460 <lwip_htons>
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	b2db      	uxtb	r3, r3
 8016d1e:	f003 0303 	and.w	r3, r3, #3
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d00e      	beq.n	8016d44 <tcp_receive+0x8a0>
 8016d26:	2301      	movs	r3, #1
 8016d28:	e00d      	b.n	8016d46 <tcp_receive+0x8a2>
 8016d2a:	bf00      	nop
 8016d2c:	200113e0 	.word	0x200113e0
 8016d30:	200113c0 	.word	0x200113c0
 8016d34:	200113ea 	.word	0x200113ea
 8016d38:	0801f4c0 	.word	0x0801f4c0
 8016d3c:	0801f868 	.word	0x0801f868
 8016d40:	0801f50c 	.word	0x0801f50c
 8016d44:	2300      	movs	r3, #0
 8016d46:	4423      	add	r3, r4
 8016d48:	b29a      	uxth	r2, r3
 8016d4a:	4b98      	ldr	r3, [pc, #608]	; (8016fac <tcp_receive+0xb08>)
 8016d4c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8016d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d50:	613b      	str	r3, [r7, #16]
              next = next->next;
 8016d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8016d58:	6938      	ldr	r0, [r7, #16]
 8016d5a:	f7fd fc68 	bl	801462e <tcp_seg_free>
            while (next &&
 8016d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d00e      	beq.n	8016d82 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016d64:	4b91      	ldr	r3, [pc, #580]	; (8016fac <tcp_receive+0xb08>)
 8016d66:	881b      	ldrh	r3, [r3, #0]
 8016d68:	461a      	mov	r2, r3
 8016d6a:	4b91      	ldr	r3, [pc, #580]	; (8016fb0 <tcp_receive+0xb0c>)
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	441a      	add	r2, r3
 8016d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d72:	68db      	ldr	r3, [r3, #12]
 8016d74:	685b      	ldr	r3, [r3, #4]
 8016d76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016d78:	8909      	ldrh	r1, [r1, #8]
 8016d7a:	440b      	add	r3, r1
 8016d7c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	da9a      	bge.n	8016cb8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d059      	beq.n	8016e3c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8016d88:	4b88      	ldr	r3, [pc, #544]	; (8016fac <tcp_receive+0xb08>)
 8016d8a:	881b      	ldrh	r3, [r3, #0]
 8016d8c:	461a      	mov	r2, r3
 8016d8e:	4b88      	ldr	r3, [pc, #544]	; (8016fb0 <tcp_receive+0xb0c>)
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	441a      	add	r2, r3
 8016d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d96:	68db      	ldr	r3, [r3, #12]
 8016d98:	685b      	ldr	r3, [r3, #4]
 8016d9a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	dd4d      	ble.n	8016e3c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016da2:	68db      	ldr	r3, [r3, #12]
 8016da4:	685b      	ldr	r3, [r3, #4]
 8016da6:	b29a      	uxth	r2, r3
 8016da8:	4b81      	ldr	r3, [pc, #516]	; (8016fb0 <tcp_receive+0xb0c>)
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	b29b      	uxth	r3, r3
 8016dae:	1ad3      	subs	r3, r2, r3
 8016db0:	b29a      	uxth	r2, r3
 8016db2:	4b80      	ldr	r3, [pc, #512]	; (8016fb4 <tcp_receive+0xb10>)
 8016db4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016db6:	4b7f      	ldr	r3, [pc, #508]	; (8016fb4 <tcp_receive+0xb10>)
 8016db8:	68db      	ldr	r3, [r3, #12]
 8016dba:	899b      	ldrh	r3, [r3, #12]
 8016dbc:	b29b      	uxth	r3, r3
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	f7fa fb4e 	bl	8011460 <lwip_htons>
 8016dc4:	4603      	mov	r3, r0
 8016dc6:	b2db      	uxtb	r3, r3
 8016dc8:	f003 0302 	and.w	r3, r3, #2
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d005      	beq.n	8016ddc <tcp_receive+0x938>
                inseg.len -= 1;
 8016dd0:	4b78      	ldr	r3, [pc, #480]	; (8016fb4 <tcp_receive+0xb10>)
 8016dd2:	891b      	ldrh	r3, [r3, #8]
 8016dd4:	3b01      	subs	r3, #1
 8016dd6:	b29a      	uxth	r2, r3
 8016dd8:	4b76      	ldr	r3, [pc, #472]	; (8016fb4 <tcp_receive+0xb10>)
 8016dda:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016ddc:	4b75      	ldr	r3, [pc, #468]	; (8016fb4 <tcp_receive+0xb10>)
 8016dde:	685b      	ldr	r3, [r3, #4]
 8016de0:	4a74      	ldr	r2, [pc, #464]	; (8016fb4 <tcp_receive+0xb10>)
 8016de2:	8912      	ldrh	r2, [r2, #8]
 8016de4:	4611      	mov	r1, r2
 8016de6:	4618      	mov	r0, r3
 8016de8:	f7fb fe62 	bl	8012ab0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016dec:	4b71      	ldr	r3, [pc, #452]	; (8016fb4 <tcp_receive+0xb10>)
 8016dee:	891c      	ldrh	r4, [r3, #8]
 8016df0:	4b70      	ldr	r3, [pc, #448]	; (8016fb4 <tcp_receive+0xb10>)
 8016df2:	68db      	ldr	r3, [r3, #12]
 8016df4:	899b      	ldrh	r3, [r3, #12]
 8016df6:	b29b      	uxth	r3, r3
 8016df8:	4618      	mov	r0, r3
 8016dfa:	f7fa fb31 	bl	8011460 <lwip_htons>
 8016dfe:	4603      	mov	r3, r0
 8016e00:	b2db      	uxtb	r3, r3
 8016e02:	f003 0303 	and.w	r3, r3, #3
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d001      	beq.n	8016e0e <tcp_receive+0x96a>
 8016e0a:	2301      	movs	r3, #1
 8016e0c:	e000      	b.n	8016e10 <tcp_receive+0x96c>
 8016e0e:	2300      	movs	r3, #0
 8016e10:	4423      	add	r3, r4
 8016e12:	b29a      	uxth	r2, r3
 8016e14:	4b65      	ldr	r3, [pc, #404]	; (8016fac <tcp_receive+0xb08>)
 8016e16:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016e18:	4b64      	ldr	r3, [pc, #400]	; (8016fac <tcp_receive+0xb08>)
 8016e1a:	881b      	ldrh	r3, [r3, #0]
 8016e1c:	461a      	mov	r2, r3
 8016e1e:	4b64      	ldr	r3, [pc, #400]	; (8016fb0 <tcp_receive+0xb0c>)
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	441a      	add	r2, r3
 8016e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e26:	68db      	ldr	r3, [r3, #12]
 8016e28:	685b      	ldr	r3, [r3, #4]
 8016e2a:	429a      	cmp	r2, r3
 8016e2c:	d006      	beq.n	8016e3c <tcp_receive+0x998>
 8016e2e:	4b62      	ldr	r3, [pc, #392]	; (8016fb8 <tcp_receive+0xb14>)
 8016e30:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8016e34:	4961      	ldr	r1, [pc, #388]	; (8016fbc <tcp_receive+0xb18>)
 8016e36:	4862      	ldr	r0, [pc, #392]	; (8016fc0 <tcp_receive+0xb1c>)
 8016e38:	f005 fd20 	bl	801c87c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016e40:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8016e42:	4b5a      	ldr	r3, [pc, #360]	; (8016fac <tcp_receive+0xb08>)
 8016e44:	881b      	ldrh	r3, [r3, #0]
 8016e46:	461a      	mov	r2, r3
 8016e48:	4b59      	ldr	r3, [pc, #356]	; (8016fb0 <tcp_receive+0xb0c>)
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	441a      	add	r2, r3
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016e56:	4b55      	ldr	r3, [pc, #340]	; (8016fac <tcp_receive+0xb08>)
 8016e58:	881b      	ldrh	r3, [r3, #0]
 8016e5a:	429a      	cmp	r2, r3
 8016e5c:	d206      	bcs.n	8016e6c <tcp_receive+0x9c8>
 8016e5e:	4b56      	ldr	r3, [pc, #344]	; (8016fb8 <tcp_receive+0xb14>)
 8016e60:	f240 6207 	movw	r2, #1543	; 0x607
 8016e64:	4957      	ldr	r1, [pc, #348]	; (8016fc4 <tcp_receive+0xb20>)
 8016e66:	4856      	ldr	r0, [pc, #344]	; (8016fc0 <tcp_receive+0xb1c>)
 8016e68:	f005 fd08 	bl	801c87c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016e70:	4b4e      	ldr	r3, [pc, #312]	; (8016fac <tcp_receive+0xb08>)
 8016e72:	881b      	ldrh	r3, [r3, #0]
 8016e74:	1ad3      	subs	r3, r2, r3
 8016e76:	b29a      	uxth	r2, r3
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016e7c:	6878      	ldr	r0, [r7, #4]
 8016e7e:	f7fc fd99 	bl	80139b4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8016e82:	4b4c      	ldr	r3, [pc, #304]	; (8016fb4 <tcp_receive+0xb10>)
 8016e84:	685b      	ldr	r3, [r3, #4]
 8016e86:	891b      	ldrh	r3, [r3, #8]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d006      	beq.n	8016e9a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8016e8c:	4b49      	ldr	r3, [pc, #292]	; (8016fb4 <tcp_receive+0xb10>)
 8016e8e:	685b      	ldr	r3, [r3, #4]
 8016e90:	4a4d      	ldr	r2, [pc, #308]	; (8016fc8 <tcp_receive+0xb24>)
 8016e92:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016e94:	4b47      	ldr	r3, [pc, #284]	; (8016fb4 <tcp_receive+0xb10>)
 8016e96:	2200      	movs	r2, #0
 8016e98:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016e9a:	4b46      	ldr	r3, [pc, #280]	; (8016fb4 <tcp_receive+0xb10>)
 8016e9c:	68db      	ldr	r3, [r3, #12]
 8016e9e:	899b      	ldrh	r3, [r3, #12]
 8016ea0:	b29b      	uxth	r3, r3
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	f7fa fadc 	bl	8011460 <lwip_htons>
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	b2db      	uxtb	r3, r3
 8016eac:	f003 0301 	and.w	r3, r3, #1
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	f000 80b8 	beq.w	8017026 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016eb6:	4b45      	ldr	r3, [pc, #276]	; (8016fcc <tcp_receive+0xb28>)
 8016eb8:	781b      	ldrb	r3, [r3, #0]
 8016eba:	f043 0320 	orr.w	r3, r3, #32
 8016ebe:	b2da      	uxtb	r2, r3
 8016ec0:	4b42      	ldr	r3, [pc, #264]	; (8016fcc <tcp_receive+0xb28>)
 8016ec2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016ec4:	e0af      	b.n	8017026 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016eca:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ed0:	68db      	ldr	r3, [r3, #12]
 8016ed2:	685b      	ldr	r3, [r3, #4]
 8016ed4:	4a36      	ldr	r2, [pc, #216]	; (8016fb0 <tcp_receive+0xb0c>)
 8016ed6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016ed8:	68bb      	ldr	r3, [r7, #8]
 8016eda:	891b      	ldrh	r3, [r3, #8]
 8016edc:	461c      	mov	r4, r3
 8016ede:	68bb      	ldr	r3, [r7, #8]
 8016ee0:	68db      	ldr	r3, [r3, #12]
 8016ee2:	899b      	ldrh	r3, [r3, #12]
 8016ee4:	b29b      	uxth	r3, r3
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	f7fa faba 	bl	8011460 <lwip_htons>
 8016eec:	4603      	mov	r3, r0
 8016eee:	b2db      	uxtb	r3, r3
 8016ef0:	f003 0303 	and.w	r3, r3, #3
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d001      	beq.n	8016efc <tcp_receive+0xa58>
 8016ef8:	2301      	movs	r3, #1
 8016efa:	e000      	b.n	8016efe <tcp_receive+0xa5a>
 8016efc:	2300      	movs	r3, #0
 8016efe:	191a      	adds	r2, r3, r4
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f04:	441a      	add	r2, r3
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f0e:	461c      	mov	r4, r3
 8016f10:	68bb      	ldr	r3, [r7, #8]
 8016f12:	891b      	ldrh	r3, [r3, #8]
 8016f14:	461d      	mov	r5, r3
 8016f16:	68bb      	ldr	r3, [r7, #8]
 8016f18:	68db      	ldr	r3, [r3, #12]
 8016f1a:	899b      	ldrh	r3, [r3, #12]
 8016f1c:	b29b      	uxth	r3, r3
 8016f1e:	4618      	mov	r0, r3
 8016f20:	f7fa fa9e 	bl	8011460 <lwip_htons>
 8016f24:	4603      	mov	r3, r0
 8016f26:	b2db      	uxtb	r3, r3
 8016f28:	f003 0303 	and.w	r3, r3, #3
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d001      	beq.n	8016f34 <tcp_receive+0xa90>
 8016f30:	2301      	movs	r3, #1
 8016f32:	e000      	b.n	8016f36 <tcp_receive+0xa92>
 8016f34:	2300      	movs	r3, #0
 8016f36:	442b      	add	r3, r5
 8016f38:	429c      	cmp	r4, r3
 8016f3a:	d206      	bcs.n	8016f4a <tcp_receive+0xaa6>
 8016f3c:	4b1e      	ldr	r3, [pc, #120]	; (8016fb8 <tcp_receive+0xb14>)
 8016f3e:	f240 622b 	movw	r2, #1579	; 0x62b
 8016f42:	4923      	ldr	r1, [pc, #140]	; (8016fd0 <tcp_receive+0xb2c>)
 8016f44:	481e      	ldr	r0, [pc, #120]	; (8016fc0 <tcp_receive+0xb1c>)
 8016f46:	f005 fc99 	bl	801c87c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016f4a:	68bb      	ldr	r3, [r7, #8]
 8016f4c:	891b      	ldrh	r3, [r3, #8]
 8016f4e:	461c      	mov	r4, r3
 8016f50:	68bb      	ldr	r3, [r7, #8]
 8016f52:	68db      	ldr	r3, [r3, #12]
 8016f54:	899b      	ldrh	r3, [r3, #12]
 8016f56:	b29b      	uxth	r3, r3
 8016f58:	4618      	mov	r0, r3
 8016f5a:	f7fa fa81 	bl	8011460 <lwip_htons>
 8016f5e:	4603      	mov	r3, r0
 8016f60:	b2db      	uxtb	r3, r3
 8016f62:	f003 0303 	and.w	r3, r3, #3
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d001      	beq.n	8016f6e <tcp_receive+0xaca>
 8016f6a:	2301      	movs	r3, #1
 8016f6c:	e000      	b.n	8016f70 <tcp_receive+0xacc>
 8016f6e:	2300      	movs	r3, #0
 8016f70:	1919      	adds	r1, r3, r4
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016f76:	b28b      	uxth	r3, r1
 8016f78:	1ad3      	subs	r3, r2, r3
 8016f7a:	b29a      	uxth	r2, r3
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8016f80:	6878      	ldr	r0, [r7, #4]
 8016f82:	f7fc fd17 	bl	80139b4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8016f86:	68bb      	ldr	r3, [r7, #8]
 8016f88:	685b      	ldr	r3, [r3, #4]
 8016f8a:	891b      	ldrh	r3, [r3, #8]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d028      	beq.n	8016fe2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8016f90:	4b0d      	ldr	r3, [pc, #52]	; (8016fc8 <tcp_receive+0xb24>)
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d01d      	beq.n	8016fd4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8016f98:	4b0b      	ldr	r3, [pc, #44]	; (8016fc8 <tcp_receive+0xb24>)
 8016f9a:	681a      	ldr	r2, [r3, #0]
 8016f9c:	68bb      	ldr	r3, [r7, #8]
 8016f9e:	685b      	ldr	r3, [r3, #4]
 8016fa0:	4619      	mov	r1, r3
 8016fa2:	4610      	mov	r0, r2
 8016fa4:	f7fb ffd8 	bl	8012f58 <pbuf_cat>
 8016fa8:	e018      	b.n	8016fdc <tcp_receive+0xb38>
 8016faa:	bf00      	nop
 8016fac:	200113ea 	.word	0x200113ea
 8016fb0:	200113e0 	.word	0x200113e0
 8016fb4:	200113c0 	.word	0x200113c0
 8016fb8:	0801f4c0 	.word	0x0801f4c0
 8016fbc:	0801f8a0 	.word	0x0801f8a0
 8016fc0:	0801f50c 	.word	0x0801f50c
 8016fc4:	0801f8dc 	.word	0x0801f8dc
 8016fc8:	200113f0 	.word	0x200113f0
 8016fcc:	200113ed 	.word	0x200113ed
 8016fd0:	0801f8fc 	.word	0x0801f8fc
            } else {
              recv_data = cseg->p;
 8016fd4:	68bb      	ldr	r3, [r7, #8]
 8016fd6:	685b      	ldr	r3, [r3, #4]
 8016fd8:	4a70      	ldr	r2, [pc, #448]	; (801719c <tcp_receive+0xcf8>)
 8016fda:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016fdc:	68bb      	ldr	r3, [r7, #8]
 8016fde:	2200      	movs	r2, #0
 8016fe0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016fe2:	68bb      	ldr	r3, [r7, #8]
 8016fe4:	68db      	ldr	r3, [r3, #12]
 8016fe6:	899b      	ldrh	r3, [r3, #12]
 8016fe8:	b29b      	uxth	r3, r3
 8016fea:	4618      	mov	r0, r3
 8016fec:	f7fa fa38 	bl	8011460 <lwip_htons>
 8016ff0:	4603      	mov	r3, r0
 8016ff2:	b2db      	uxtb	r3, r3
 8016ff4:	f003 0301 	and.w	r3, r3, #1
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d00d      	beq.n	8017018 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8016ffc:	4b68      	ldr	r3, [pc, #416]	; (80171a0 <tcp_receive+0xcfc>)
 8016ffe:	781b      	ldrb	r3, [r3, #0]
 8017000:	f043 0320 	orr.w	r3, r3, #32
 8017004:	b2da      	uxtb	r2, r3
 8017006:	4b66      	ldr	r3, [pc, #408]	; (80171a0 <tcp_receive+0xcfc>)
 8017008:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	7d1b      	ldrb	r3, [r3, #20]
 801700e:	2b04      	cmp	r3, #4
 8017010:	d102      	bne.n	8017018 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	2207      	movs	r2, #7
 8017016:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8017018:	68bb      	ldr	r3, [r7, #8]
 801701a:	681a      	ldr	r2, [r3, #0]
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8017020:	68b8      	ldr	r0, [r7, #8]
 8017022:	f7fd fb04 	bl	801462e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801702a:	2b00      	cmp	r3, #0
 801702c:	d008      	beq.n	8017040 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017032:	68db      	ldr	r3, [r3, #12]
 8017034:	685a      	ldr	r2, [r3, #4]
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801703a:	429a      	cmp	r2, r3
 801703c:	f43f af43 	beq.w	8016ec6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	8b5b      	ldrh	r3, [r3, #26]
 8017044:	f003 0301 	and.w	r3, r3, #1
 8017048:	2b00      	cmp	r3, #0
 801704a:	d00e      	beq.n	801706a <tcp_receive+0xbc6>
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	8b5b      	ldrh	r3, [r3, #26]
 8017050:	f023 0301 	bic.w	r3, r3, #1
 8017054:	b29a      	uxth	r2, r3
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	835a      	strh	r2, [r3, #26]
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	8b5b      	ldrh	r3, [r3, #26]
 801705e:	f043 0302 	orr.w	r3, r3, #2
 8017062:	b29a      	uxth	r2, r3
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017068:	e188      	b.n	801737c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	8b5b      	ldrh	r3, [r3, #26]
 801706e:	f043 0301 	orr.w	r3, r3, #1
 8017072:	b29a      	uxth	r2, r3
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017078:	e180      	b.n	801737c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801707e:	2b00      	cmp	r3, #0
 8017080:	d106      	bne.n	8017090 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8017082:	4848      	ldr	r0, [pc, #288]	; (80171a4 <tcp_receive+0xd00>)
 8017084:	f7fd faec 	bl	8014660 <tcp_seg_copy>
 8017088:	4602      	mov	r2, r0
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	675a      	str	r2, [r3, #116]	; 0x74
 801708e:	e16d      	b.n	801736c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8017090:	2300      	movs	r3, #0
 8017092:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017098:	63bb      	str	r3, [r7, #56]	; 0x38
 801709a:	e157      	b.n	801734c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801709c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801709e:	68db      	ldr	r3, [r3, #12]
 80170a0:	685a      	ldr	r2, [r3, #4]
 80170a2:	4b41      	ldr	r3, [pc, #260]	; (80171a8 <tcp_receive+0xd04>)
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	429a      	cmp	r2, r3
 80170a8:	d11d      	bne.n	80170e6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80170aa:	4b3e      	ldr	r3, [pc, #248]	; (80171a4 <tcp_receive+0xd00>)
 80170ac:	891a      	ldrh	r2, [r3, #8]
 80170ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170b0:	891b      	ldrh	r3, [r3, #8]
 80170b2:	429a      	cmp	r2, r3
 80170b4:	f240 814f 	bls.w	8017356 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80170b8:	483a      	ldr	r0, [pc, #232]	; (80171a4 <tcp_receive+0xd00>)
 80170ba:	f7fd fad1 	bl	8014660 <tcp_seg_copy>
 80170be:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80170c0:	697b      	ldr	r3, [r7, #20]
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	f000 8149 	beq.w	801735a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80170c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d003      	beq.n	80170d6 <tcp_receive+0xc32>
                    prev->next = cseg;
 80170ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170d0:	697a      	ldr	r2, [r7, #20]
 80170d2:	601a      	str	r2, [r3, #0]
 80170d4:	e002      	b.n	80170dc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	697a      	ldr	r2, [r7, #20]
 80170da:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80170dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80170de:	6978      	ldr	r0, [r7, #20]
 80170e0:	f7ff f8dc 	bl	801629c <tcp_oos_insert_segment>
                }
                break;
 80170e4:	e139      	b.n	801735a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80170e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d117      	bne.n	801711c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80170ec:	4b2e      	ldr	r3, [pc, #184]	; (80171a8 <tcp_receive+0xd04>)
 80170ee:	681a      	ldr	r2, [r3, #0]
 80170f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170f2:	68db      	ldr	r3, [r3, #12]
 80170f4:	685b      	ldr	r3, [r3, #4]
 80170f6:	1ad3      	subs	r3, r2, r3
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	da57      	bge.n	80171ac <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80170fc:	4829      	ldr	r0, [pc, #164]	; (80171a4 <tcp_receive+0xd00>)
 80170fe:	f7fd faaf 	bl	8014660 <tcp_seg_copy>
 8017102:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8017104:	69bb      	ldr	r3, [r7, #24]
 8017106:	2b00      	cmp	r3, #0
 8017108:	f000 8129 	beq.w	801735e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	69ba      	ldr	r2, [r7, #24]
 8017110:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8017112:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017114:	69b8      	ldr	r0, [r7, #24]
 8017116:	f7ff f8c1 	bl	801629c <tcp_oos_insert_segment>
                  }
                  break;
 801711a:	e120      	b.n	801735e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801711c:	4b22      	ldr	r3, [pc, #136]	; (80171a8 <tcp_receive+0xd04>)
 801711e:	681a      	ldr	r2, [r3, #0]
 8017120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017122:	68db      	ldr	r3, [r3, #12]
 8017124:	685b      	ldr	r3, [r3, #4]
 8017126:	1ad3      	subs	r3, r2, r3
 8017128:	3b01      	subs	r3, #1
 801712a:	2b00      	cmp	r3, #0
 801712c:	db3e      	blt.n	80171ac <tcp_receive+0xd08>
 801712e:	4b1e      	ldr	r3, [pc, #120]	; (80171a8 <tcp_receive+0xd04>)
 8017130:	681a      	ldr	r2, [r3, #0]
 8017132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017134:	68db      	ldr	r3, [r3, #12]
 8017136:	685b      	ldr	r3, [r3, #4]
 8017138:	1ad3      	subs	r3, r2, r3
 801713a:	3301      	adds	r3, #1
 801713c:	2b00      	cmp	r3, #0
 801713e:	dc35      	bgt.n	80171ac <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017140:	4818      	ldr	r0, [pc, #96]	; (80171a4 <tcp_receive+0xd00>)
 8017142:	f7fd fa8d 	bl	8014660 <tcp_seg_copy>
 8017146:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8017148:	69fb      	ldr	r3, [r7, #28]
 801714a:	2b00      	cmp	r3, #0
 801714c:	f000 8109 	beq.w	8017362 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8017150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017152:	68db      	ldr	r3, [r3, #12]
 8017154:	685b      	ldr	r3, [r3, #4]
 8017156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017158:	8912      	ldrh	r2, [r2, #8]
 801715a:	441a      	add	r2, r3
 801715c:	4b12      	ldr	r3, [pc, #72]	; (80171a8 <tcp_receive+0xd04>)
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	1ad3      	subs	r3, r2, r3
 8017162:	2b00      	cmp	r3, #0
 8017164:	dd12      	ble.n	801718c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8017166:	4b10      	ldr	r3, [pc, #64]	; (80171a8 <tcp_receive+0xd04>)
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	b29a      	uxth	r2, r3
 801716c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801716e:	68db      	ldr	r3, [r3, #12]
 8017170:	685b      	ldr	r3, [r3, #4]
 8017172:	b29b      	uxth	r3, r3
 8017174:	1ad3      	subs	r3, r2, r3
 8017176:	b29a      	uxth	r2, r3
 8017178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801717a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801717c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801717e:	685a      	ldr	r2, [r3, #4]
 8017180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017182:	891b      	ldrh	r3, [r3, #8]
 8017184:	4619      	mov	r1, r3
 8017186:	4610      	mov	r0, r2
 8017188:	f7fb fc92 	bl	8012ab0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801718c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801718e:	69fa      	ldr	r2, [r7, #28]
 8017190:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8017192:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017194:	69f8      	ldr	r0, [r7, #28]
 8017196:	f7ff f881 	bl	801629c <tcp_oos_insert_segment>
                  }
                  break;
 801719a:	e0e2      	b.n	8017362 <tcp_receive+0xebe>
 801719c:	200113f0 	.word	0x200113f0
 80171a0:	200113ed 	.word	0x200113ed
 80171a4:	200113c0 	.word	0x200113c0
 80171a8:	200113e0 	.word	0x200113e0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80171ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171ae:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80171b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	f040 80c6 	bne.w	8017346 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80171ba:	4b80      	ldr	r3, [pc, #512]	; (80173bc <tcp_receive+0xf18>)
 80171bc:	681a      	ldr	r2, [r3, #0]
 80171be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171c0:	68db      	ldr	r3, [r3, #12]
 80171c2:	685b      	ldr	r3, [r3, #4]
 80171c4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	f340 80bd 	ble.w	8017346 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80171cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171ce:	68db      	ldr	r3, [r3, #12]
 80171d0:	899b      	ldrh	r3, [r3, #12]
 80171d2:	b29b      	uxth	r3, r3
 80171d4:	4618      	mov	r0, r3
 80171d6:	f7fa f943 	bl	8011460 <lwip_htons>
 80171da:	4603      	mov	r3, r0
 80171dc:	b2db      	uxtb	r3, r3
 80171de:	f003 0301 	and.w	r3, r3, #1
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	f040 80bf 	bne.w	8017366 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80171e8:	4875      	ldr	r0, [pc, #468]	; (80173c0 <tcp_receive+0xf1c>)
 80171ea:	f7fd fa39 	bl	8014660 <tcp_seg_copy>
 80171ee:	4602      	mov	r2, r0
 80171f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171f2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80171f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	f000 80b6 	beq.w	801736a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80171fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017200:	68db      	ldr	r3, [r3, #12]
 8017202:	685b      	ldr	r3, [r3, #4]
 8017204:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017206:	8912      	ldrh	r2, [r2, #8]
 8017208:	441a      	add	r2, r3
 801720a:	4b6c      	ldr	r3, [pc, #432]	; (80173bc <tcp_receive+0xf18>)
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	1ad3      	subs	r3, r2, r3
 8017210:	2b00      	cmp	r3, #0
 8017212:	dd12      	ble.n	801723a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8017214:	4b69      	ldr	r3, [pc, #420]	; (80173bc <tcp_receive+0xf18>)
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	b29a      	uxth	r2, r3
 801721a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801721c:	68db      	ldr	r3, [r3, #12]
 801721e:	685b      	ldr	r3, [r3, #4]
 8017220:	b29b      	uxth	r3, r3
 8017222:	1ad3      	subs	r3, r2, r3
 8017224:	b29a      	uxth	r2, r3
 8017226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017228:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801722a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801722c:	685a      	ldr	r2, [r3, #4]
 801722e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017230:	891b      	ldrh	r3, [r3, #8]
 8017232:	4619      	mov	r1, r3
 8017234:	4610      	mov	r0, r2
 8017236:	f7fb fc3b 	bl	8012ab0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801723a:	4b62      	ldr	r3, [pc, #392]	; (80173c4 <tcp_receive+0xf20>)
 801723c:	881b      	ldrh	r3, [r3, #0]
 801723e:	461a      	mov	r2, r3
 8017240:	4b5e      	ldr	r3, [pc, #376]	; (80173bc <tcp_receive+0xf18>)
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	441a      	add	r2, r3
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801724a:	6879      	ldr	r1, [r7, #4]
 801724c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801724e:	440b      	add	r3, r1
 8017250:	1ad3      	subs	r3, r2, r3
 8017252:	2b00      	cmp	r3, #0
 8017254:	f340 8089 	ble.w	801736a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8017258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	68db      	ldr	r3, [r3, #12]
 801725e:	899b      	ldrh	r3, [r3, #12]
 8017260:	b29b      	uxth	r3, r3
 8017262:	4618      	mov	r0, r3
 8017264:	f7fa f8fc 	bl	8011460 <lwip_htons>
 8017268:	4603      	mov	r3, r0
 801726a:	b2db      	uxtb	r3, r3
 801726c:	f003 0301 	and.w	r3, r3, #1
 8017270:	2b00      	cmp	r3, #0
 8017272:	d022      	beq.n	80172ba <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8017274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	68db      	ldr	r3, [r3, #12]
 801727a:	899b      	ldrh	r3, [r3, #12]
 801727c:	b29b      	uxth	r3, r3
 801727e:	b21b      	sxth	r3, r3
 8017280:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017284:	b21c      	sxth	r4, r3
 8017286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	68db      	ldr	r3, [r3, #12]
 801728c:	899b      	ldrh	r3, [r3, #12]
 801728e:	b29b      	uxth	r3, r3
 8017290:	4618      	mov	r0, r3
 8017292:	f7fa f8e5 	bl	8011460 <lwip_htons>
 8017296:	4603      	mov	r3, r0
 8017298:	b2db      	uxtb	r3, r3
 801729a:	b29b      	uxth	r3, r3
 801729c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80172a0:	b29b      	uxth	r3, r3
 80172a2:	4618      	mov	r0, r3
 80172a4:	f7fa f8dc 	bl	8011460 <lwip_htons>
 80172a8:	4603      	mov	r3, r0
 80172aa:	b21b      	sxth	r3, r3
 80172ac:	4323      	orrs	r3, r4
 80172ae:	b21a      	sxth	r2, r3
 80172b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	68db      	ldr	r3, [r3, #12]
 80172b6:	b292      	uxth	r2, r2
 80172b8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172be:	b29a      	uxth	r2, r3
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80172c4:	4413      	add	r3, r2
 80172c6:	b299      	uxth	r1, r3
 80172c8:	4b3c      	ldr	r3, [pc, #240]	; (80173bc <tcp_receive+0xf18>)
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	b29a      	uxth	r2, r3
 80172ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	1a8a      	subs	r2, r1, r2
 80172d4:	b292      	uxth	r2, r2
 80172d6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80172d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	685a      	ldr	r2, [r3, #4]
 80172de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	891b      	ldrh	r3, [r3, #8]
 80172e4:	4619      	mov	r1, r3
 80172e6:	4610      	mov	r0, r2
 80172e8:	f7fb fbe2 	bl	8012ab0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80172ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	891c      	ldrh	r4, [r3, #8]
 80172f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	68db      	ldr	r3, [r3, #12]
 80172f8:	899b      	ldrh	r3, [r3, #12]
 80172fa:	b29b      	uxth	r3, r3
 80172fc:	4618      	mov	r0, r3
 80172fe:	f7fa f8af 	bl	8011460 <lwip_htons>
 8017302:	4603      	mov	r3, r0
 8017304:	b2db      	uxtb	r3, r3
 8017306:	f003 0303 	and.w	r3, r3, #3
 801730a:	2b00      	cmp	r3, #0
 801730c:	d001      	beq.n	8017312 <tcp_receive+0xe6e>
 801730e:	2301      	movs	r3, #1
 8017310:	e000      	b.n	8017314 <tcp_receive+0xe70>
 8017312:	2300      	movs	r3, #0
 8017314:	4423      	add	r3, r4
 8017316:	b29a      	uxth	r2, r3
 8017318:	4b2a      	ldr	r3, [pc, #168]	; (80173c4 <tcp_receive+0xf20>)
 801731a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801731c:	4b29      	ldr	r3, [pc, #164]	; (80173c4 <tcp_receive+0xf20>)
 801731e:	881b      	ldrh	r3, [r3, #0]
 8017320:	461a      	mov	r2, r3
 8017322:	4b26      	ldr	r3, [pc, #152]	; (80173bc <tcp_receive+0xf18>)
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	441a      	add	r2, r3
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801732c:	6879      	ldr	r1, [r7, #4]
 801732e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017330:	440b      	add	r3, r1
 8017332:	429a      	cmp	r2, r3
 8017334:	d019      	beq.n	801736a <tcp_receive+0xec6>
 8017336:	4b24      	ldr	r3, [pc, #144]	; (80173c8 <tcp_receive+0xf24>)
 8017338:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801733c:	4923      	ldr	r1, [pc, #140]	; (80173cc <tcp_receive+0xf28>)
 801733e:	4824      	ldr	r0, [pc, #144]	; (80173d0 <tcp_receive+0xf2c>)
 8017340:	f005 fa9c 	bl	801c87c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8017344:	e011      	b.n	801736a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	63bb      	str	r3, [r7, #56]	; 0x38
 801734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801734e:	2b00      	cmp	r3, #0
 8017350:	f47f aea4 	bne.w	801709c <tcp_receive+0xbf8>
 8017354:	e00a      	b.n	801736c <tcp_receive+0xec8>
                break;
 8017356:	bf00      	nop
 8017358:	e008      	b.n	801736c <tcp_receive+0xec8>
                break;
 801735a:	bf00      	nop
 801735c:	e006      	b.n	801736c <tcp_receive+0xec8>
                  break;
 801735e:	bf00      	nop
 8017360:	e004      	b.n	801736c <tcp_receive+0xec8>
                  break;
 8017362:	bf00      	nop
 8017364:	e002      	b.n	801736c <tcp_receive+0xec8>
                  break;
 8017366:	bf00      	nop
 8017368:	e000      	b.n	801736c <tcp_receive+0xec8>
                break;
 801736a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801736c:	6878      	ldr	r0, [r7, #4]
 801736e:	f001 fe8b 	bl	8019088 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8017372:	e003      	b.n	801737c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8017374:	6878      	ldr	r0, [r7, #4]
 8017376:	f001 fe87 	bl	8019088 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801737a:	e01a      	b.n	80173b2 <tcp_receive+0xf0e>
 801737c:	e019      	b.n	80173b2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801737e:	4b0f      	ldr	r3, [pc, #60]	; (80173bc <tcp_receive+0xf18>)
 8017380:	681a      	ldr	r2, [r3, #0]
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017386:	1ad3      	subs	r3, r2, r3
 8017388:	2b00      	cmp	r3, #0
 801738a:	db0a      	blt.n	80173a2 <tcp_receive+0xefe>
 801738c:	4b0b      	ldr	r3, [pc, #44]	; (80173bc <tcp_receive+0xf18>)
 801738e:	681a      	ldr	r2, [r3, #0]
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017394:	6879      	ldr	r1, [r7, #4]
 8017396:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017398:	440b      	add	r3, r1
 801739a:	1ad3      	subs	r3, r2, r3
 801739c:	3301      	adds	r3, #1
 801739e:	2b00      	cmp	r3, #0
 80173a0:	dd07      	ble.n	80173b2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	8b5b      	ldrh	r3, [r3, #26]
 80173a6:	f043 0302 	orr.w	r3, r3, #2
 80173aa:	b29a      	uxth	r2, r3
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80173b0:	e7ff      	b.n	80173b2 <tcp_receive+0xf0e>
 80173b2:	bf00      	nop
 80173b4:	3750      	adds	r7, #80	; 0x50
 80173b6:	46bd      	mov	sp, r7
 80173b8:	bdb0      	pop	{r4, r5, r7, pc}
 80173ba:	bf00      	nop
 80173bc:	200113e0 	.word	0x200113e0
 80173c0:	200113c0 	.word	0x200113c0
 80173c4:	200113ea 	.word	0x200113ea
 80173c8:	0801f4c0 	.word	0x0801f4c0
 80173cc:	0801f868 	.word	0x0801f868
 80173d0:	0801f50c 	.word	0x0801f50c

080173d4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80173d4:	b480      	push	{r7}
 80173d6:	b083      	sub	sp, #12
 80173d8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80173da:	4b15      	ldr	r3, [pc, #84]	; (8017430 <tcp_get_next_optbyte+0x5c>)
 80173dc:	881b      	ldrh	r3, [r3, #0]
 80173de:	1c5a      	adds	r2, r3, #1
 80173e0:	b291      	uxth	r1, r2
 80173e2:	4a13      	ldr	r2, [pc, #76]	; (8017430 <tcp_get_next_optbyte+0x5c>)
 80173e4:	8011      	strh	r1, [r2, #0]
 80173e6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80173e8:	4b12      	ldr	r3, [pc, #72]	; (8017434 <tcp_get_next_optbyte+0x60>)
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d004      	beq.n	80173fa <tcp_get_next_optbyte+0x26>
 80173f0:	4b11      	ldr	r3, [pc, #68]	; (8017438 <tcp_get_next_optbyte+0x64>)
 80173f2:	881b      	ldrh	r3, [r3, #0]
 80173f4:	88fa      	ldrh	r2, [r7, #6]
 80173f6:	429a      	cmp	r2, r3
 80173f8:	d208      	bcs.n	801740c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80173fa:	4b10      	ldr	r3, [pc, #64]	; (801743c <tcp_get_next_optbyte+0x68>)
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	3314      	adds	r3, #20
 8017400:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8017402:	88fb      	ldrh	r3, [r7, #6]
 8017404:	683a      	ldr	r2, [r7, #0]
 8017406:	4413      	add	r3, r2
 8017408:	781b      	ldrb	r3, [r3, #0]
 801740a:	e00b      	b.n	8017424 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801740c:	88fb      	ldrh	r3, [r7, #6]
 801740e:	b2da      	uxtb	r2, r3
 8017410:	4b09      	ldr	r3, [pc, #36]	; (8017438 <tcp_get_next_optbyte+0x64>)
 8017412:	881b      	ldrh	r3, [r3, #0]
 8017414:	b2db      	uxtb	r3, r3
 8017416:	1ad3      	subs	r3, r2, r3
 8017418:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801741a:	4b06      	ldr	r3, [pc, #24]	; (8017434 <tcp_get_next_optbyte+0x60>)
 801741c:	681a      	ldr	r2, [r3, #0]
 801741e:	797b      	ldrb	r3, [r7, #5]
 8017420:	4413      	add	r3, r2
 8017422:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017424:	4618      	mov	r0, r3
 8017426:	370c      	adds	r7, #12
 8017428:	46bd      	mov	sp, r7
 801742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801742e:	4770      	bx	lr
 8017430:	200113dc 	.word	0x200113dc
 8017434:	200113d8 	.word	0x200113d8
 8017438:	200113d6 	.word	0x200113d6
 801743c:	200113d0 	.word	0x200113d0

08017440 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8017440:	b580      	push	{r7, lr}
 8017442:	b084      	sub	sp, #16
 8017444:	af00      	add	r7, sp, #0
 8017446:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d106      	bne.n	801745c <tcp_parseopt+0x1c>
 801744e:	4b32      	ldr	r3, [pc, #200]	; (8017518 <tcp_parseopt+0xd8>)
 8017450:	f240 727d 	movw	r2, #1917	; 0x77d
 8017454:	4931      	ldr	r1, [pc, #196]	; (801751c <tcp_parseopt+0xdc>)
 8017456:	4832      	ldr	r0, [pc, #200]	; (8017520 <tcp_parseopt+0xe0>)
 8017458:	f005 fa10 	bl	801c87c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801745c:	4b31      	ldr	r3, [pc, #196]	; (8017524 <tcp_parseopt+0xe4>)
 801745e:	881b      	ldrh	r3, [r3, #0]
 8017460:	2b00      	cmp	r3, #0
 8017462:	d055      	beq.n	8017510 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017464:	4b30      	ldr	r3, [pc, #192]	; (8017528 <tcp_parseopt+0xe8>)
 8017466:	2200      	movs	r2, #0
 8017468:	801a      	strh	r2, [r3, #0]
 801746a:	e045      	b.n	80174f8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801746c:	f7ff ffb2 	bl	80173d4 <tcp_get_next_optbyte>
 8017470:	4603      	mov	r3, r0
 8017472:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8017474:	7bfb      	ldrb	r3, [r7, #15]
 8017476:	2b02      	cmp	r3, #2
 8017478:	d006      	beq.n	8017488 <tcp_parseopt+0x48>
 801747a:	2b02      	cmp	r3, #2
 801747c:	dc2b      	bgt.n	80174d6 <tcp_parseopt+0x96>
 801747e:	2b00      	cmp	r3, #0
 8017480:	d041      	beq.n	8017506 <tcp_parseopt+0xc6>
 8017482:	2b01      	cmp	r3, #1
 8017484:	d127      	bne.n	80174d6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8017486:	e037      	b.n	80174f8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8017488:	f7ff ffa4 	bl	80173d4 <tcp_get_next_optbyte>
 801748c:	4603      	mov	r3, r0
 801748e:	2b04      	cmp	r3, #4
 8017490:	d13b      	bne.n	801750a <tcp_parseopt+0xca>
 8017492:	4b25      	ldr	r3, [pc, #148]	; (8017528 <tcp_parseopt+0xe8>)
 8017494:	881b      	ldrh	r3, [r3, #0]
 8017496:	3301      	adds	r3, #1
 8017498:	4a22      	ldr	r2, [pc, #136]	; (8017524 <tcp_parseopt+0xe4>)
 801749a:	8812      	ldrh	r2, [r2, #0]
 801749c:	4293      	cmp	r3, r2
 801749e:	da34      	bge.n	801750a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80174a0:	f7ff ff98 	bl	80173d4 <tcp_get_next_optbyte>
 80174a4:	4603      	mov	r3, r0
 80174a6:	b29b      	uxth	r3, r3
 80174a8:	021b      	lsls	r3, r3, #8
 80174aa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80174ac:	f7ff ff92 	bl	80173d4 <tcp_get_next_optbyte>
 80174b0:	4603      	mov	r3, r0
 80174b2:	b29a      	uxth	r2, r3
 80174b4:	89bb      	ldrh	r3, [r7, #12]
 80174b6:	4313      	orrs	r3, r2
 80174b8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80174ba:	89bb      	ldrh	r3, [r7, #12]
 80174bc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80174c0:	d804      	bhi.n	80174cc <tcp_parseopt+0x8c>
 80174c2:	89bb      	ldrh	r3, [r7, #12]
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d001      	beq.n	80174cc <tcp_parseopt+0x8c>
 80174c8:	89ba      	ldrh	r2, [r7, #12]
 80174ca:	e001      	b.n	80174d0 <tcp_parseopt+0x90>
 80174cc:	f44f 7206 	mov.w	r2, #536	; 0x218
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80174d4:	e010      	b.n	80174f8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80174d6:	f7ff ff7d 	bl	80173d4 <tcp_get_next_optbyte>
 80174da:	4603      	mov	r3, r0
 80174dc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80174de:	7afb      	ldrb	r3, [r7, #11]
 80174e0:	2b01      	cmp	r3, #1
 80174e2:	d914      	bls.n	801750e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80174e4:	7afb      	ldrb	r3, [r7, #11]
 80174e6:	b29a      	uxth	r2, r3
 80174e8:	4b0f      	ldr	r3, [pc, #60]	; (8017528 <tcp_parseopt+0xe8>)
 80174ea:	881b      	ldrh	r3, [r3, #0]
 80174ec:	4413      	add	r3, r2
 80174ee:	b29b      	uxth	r3, r3
 80174f0:	3b02      	subs	r3, #2
 80174f2:	b29a      	uxth	r2, r3
 80174f4:	4b0c      	ldr	r3, [pc, #48]	; (8017528 <tcp_parseopt+0xe8>)
 80174f6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80174f8:	4b0b      	ldr	r3, [pc, #44]	; (8017528 <tcp_parseopt+0xe8>)
 80174fa:	881a      	ldrh	r2, [r3, #0]
 80174fc:	4b09      	ldr	r3, [pc, #36]	; (8017524 <tcp_parseopt+0xe4>)
 80174fe:	881b      	ldrh	r3, [r3, #0]
 8017500:	429a      	cmp	r2, r3
 8017502:	d3b3      	bcc.n	801746c <tcp_parseopt+0x2c>
 8017504:	e004      	b.n	8017510 <tcp_parseopt+0xd0>
          return;
 8017506:	bf00      	nop
 8017508:	e002      	b.n	8017510 <tcp_parseopt+0xd0>
            return;
 801750a:	bf00      	nop
 801750c:	e000      	b.n	8017510 <tcp_parseopt+0xd0>
            return;
 801750e:	bf00      	nop
      }
    }
  }
}
 8017510:	3710      	adds	r7, #16
 8017512:	46bd      	mov	sp, r7
 8017514:	bd80      	pop	{r7, pc}
 8017516:	bf00      	nop
 8017518:	0801f4c0 	.word	0x0801f4c0
 801751c:	0801f924 	.word	0x0801f924
 8017520:	0801f50c 	.word	0x0801f50c
 8017524:	200113d4 	.word	0x200113d4
 8017528:	200113dc 	.word	0x200113dc

0801752c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801752c:	b480      	push	{r7}
 801752e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8017530:	4b05      	ldr	r3, [pc, #20]	; (8017548 <tcp_trigger_input_pcb_close+0x1c>)
 8017532:	781b      	ldrb	r3, [r3, #0]
 8017534:	f043 0310 	orr.w	r3, r3, #16
 8017538:	b2da      	uxtb	r2, r3
 801753a:	4b03      	ldr	r3, [pc, #12]	; (8017548 <tcp_trigger_input_pcb_close+0x1c>)
 801753c:	701a      	strb	r2, [r3, #0]
}
 801753e:	bf00      	nop
 8017540:	46bd      	mov	sp, r7
 8017542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017546:	4770      	bx	lr
 8017548:	200113ed 	.word	0x200113ed

0801754c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801754c:	b580      	push	{r7, lr}
 801754e:	b084      	sub	sp, #16
 8017550:	af00      	add	r7, sp, #0
 8017552:	60f8      	str	r0, [r7, #12]
 8017554:	60b9      	str	r1, [r7, #8]
 8017556:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d00a      	beq.n	8017574 <tcp_route+0x28>
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	7a1b      	ldrb	r3, [r3, #8]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d006      	beq.n	8017574 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	7a1b      	ldrb	r3, [r3, #8]
 801756a:	4618      	mov	r0, r3
 801756c:	f7fb f898 	bl	80126a0 <netif_get_by_index>
 8017570:	4603      	mov	r3, r0
 8017572:	e003      	b.n	801757c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8017574:	6878      	ldr	r0, [r7, #4]
 8017576:	f003 fcdf 	bl	801af38 <ip4_route>
 801757a:	4603      	mov	r3, r0
  }
}
 801757c:	4618      	mov	r0, r3
 801757e:	3710      	adds	r7, #16
 8017580:	46bd      	mov	sp, r7
 8017582:	bd80      	pop	{r7, pc}

08017584 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8017584:	b590      	push	{r4, r7, lr}
 8017586:	b087      	sub	sp, #28
 8017588:	af00      	add	r7, sp, #0
 801758a:	60f8      	str	r0, [r7, #12]
 801758c:	60b9      	str	r1, [r7, #8]
 801758e:	603b      	str	r3, [r7, #0]
 8017590:	4613      	mov	r3, r2
 8017592:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d105      	bne.n	80175a6 <tcp_create_segment+0x22>
 801759a:	4b44      	ldr	r3, [pc, #272]	; (80176ac <tcp_create_segment+0x128>)
 801759c:	22a3      	movs	r2, #163	; 0xa3
 801759e:	4944      	ldr	r1, [pc, #272]	; (80176b0 <tcp_create_segment+0x12c>)
 80175a0:	4844      	ldr	r0, [pc, #272]	; (80176b4 <tcp_create_segment+0x130>)
 80175a2:	f005 f96b 	bl	801c87c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80175a6:	68bb      	ldr	r3, [r7, #8]
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d105      	bne.n	80175b8 <tcp_create_segment+0x34>
 80175ac:	4b3f      	ldr	r3, [pc, #252]	; (80176ac <tcp_create_segment+0x128>)
 80175ae:	22a4      	movs	r2, #164	; 0xa4
 80175b0:	4941      	ldr	r1, [pc, #260]	; (80176b8 <tcp_create_segment+0x134>)
 80175b2:	4840      	ldr	r0, [pc, #256]	; (80176b4 <tcp_create_segment+0x130>)
 80175b4:	f005 f962 	bl	801c87c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80175b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80175bc:	009b      	lsls	r3, r3, #2
 80175be:	b2db      	uxtb	r3, r3
 80175c0:	f003 0304 	and.w	r3, r3, #4
 80175c4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80175c6:	2003      	movs	r0, #3
 80175c8:	f7fa fcde 	bl	8011f88 <memp_malloc>
 80175cc:	6138      	str	r0, [r7, #16]
 80175ce:	693b      	ldr	r3, [r7, #16]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d104      	bne.n	80175de <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80175d4:	68b8      	ldr	r0, [r7, #8]
 80175d6:	f7fb fbf1 	bl	8012dbc <pbuf_free>
    return NULL;
 80175da:	2300      	movs	r3, #0
 80175dc:	e061      	b.n	80176a2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80175de:	693b      	ldr	r3, [r7, #16]
 80175e0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80175e4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80175e6:	693b      	ldr	r3, [r7, #16]
 80175e8:	2200      	movs	r2, #0
 80175ea:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80175ec:	693b      	ldr	r3, [r7, #16]
 80175ee:	68ba      	ldr	r2, [r7, #8]
 80175f0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80175f2:	68bb      	ldr	r3, [r7, #8]
 80175f4:	891a      	ldrh	r2, [r3, #8]
 80175f6:	7dfb      	ldrb	r3, [r7, #23]
 80175f8:	b29b      	uxth	r3, r3
 80175fa:	429a      	cmp	r2, r3
 80175fc:	d205      	bcs.n	801760a <tcp_create_segment+0x86>
 80175fe:	4b2b      	ldr	r3, [pc, #172]	; (80176ac <tcp_create_segment+0x128>)
 8017600:	22b0      	movs	r2, #176	; 0xb0
 8017602:	492e      	ldr	r1, [pc, #184]	; (80176bc <tcp_create_segment+0x138>)
 8017604:	482b      	ldr	r0, [pc, #172]	; (80176b4 <tcp_create_segment+0x130>)
 8017606:	f005 f939 	bl	801c87c <iprintf>
  seg->len = p->tot_len - optlen;
 801760a:	68bb      	ldr	r3, [r7, #8]
 801760c:	891a      	ldrh	r2, [r3, #8]
 801760e:	7dfb      	ldrb	r3, [r7, #23]
 8017610:	b29b      	uxth	r3, r3
 8017612:	1ad3      	subs	r3, r2, r3
 8017614:	b29a      	uxth	r2, r3
 8017616:	693b      	ldr	r3, [r7, #16]
 8017618:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801761a:	2114      	movs	r1, #20
 801761c:	68b8      	ldr	r0, [r7, #8]
 801761e:	f7fb fb37 	bl	8012c90 <pbuf_add_header>
 8017622:	4603      	mov	r3, r0
 8017624:	2b00      	cmp	r3, #0
 8017626:	d004      	beq.n	8017632 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8017628:	6938      	ldr	r0, [r7, #16]
 801762a:	f7fd f800 	bl	801462e <tcp_seg_free>
    return NULL;
 801762e:	2300      	movs	r3, #0
 8017630:	e037      	b.n	80176a2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8017632:	693b      	ldr	r3, [r7, #16]
 8017634:	685b      	ldr	r3, [r3, #4]
 8017636:	685a      	ldr	r2, [r3, #4]
 8017638:	693b      	ldr	r3, [r7, #16]
 801763a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	8ada      	ldrh	r2, [r3, #22]
 8017640:	693b      	ldr	r3, [r7, #16]
 8017642:	68dc      	ldr	r4, [r3, #12]
 8017644:	4610      	mov	r0, r2
 8017646:	f7f9 ff0b 	bl	8011460 <lwip_htons>
 801764a:	4603      	mov	r3, r0
 801764c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	8b1a      	ldrh	r2, [r3, #24]
 8017652:	693b      	ldr	r3, [r7, #16]
 8017654:	68dc      	ldr	r4, [r3, #12]
 8017656:	4610      	mov	r0, r2
 8017658:	f7f9 ff02 	bl	8011460 <lwip_htons>
 801765c:	4603      	mov	r3, r0
 801765e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8017660:	693b      	ldr	r3, [r7, #16]
 8017662:	68dc      	ldr	r4, [r3, #12]
 8017664:	6838      	ldr	r0, [r7, #0]
 8017666:	f7f9 ff10 	bl	801148a <lwip_htonl>
 801766a:	4603      	mov	r3, r0
 801766c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801766e:	7dfb      	ldrb	r3, [r7, #23]
 8017670:	089b      	lsrs	r3, r3, #2
 8017672:	b2db      	uxtb	r3, r3
 8017674:	b29b      	uxth	r3, r3
 8017676:	3305      	adds	r3, #5
 8017678:	b29b      	uxth	r3, r3
 801767a:	031b      	lsls	r3, r3, #12
 801767c:	b29a      	uxth	r2, r3
 801767e:	79fb      	ldrb	r3, [r7, #7]
 8017680:	b29b      	uxth	r3, r3
 8017682:	4313      	orrs	r3, r2
 8017684:	b29a      	uxth	r2, r3
 8017686:	693b      	ldr	r3, [r7, #16]
 8017688:	68dc      	ldr	r4, [r3, #12]
 801768a:	4610      	mov	r0, r2
 801768c:	f7f9 fee8 	bl	8011460 <lwip_htons>
 8017690:	4603      	mov	r3, r0
 8017692:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8017694:	693b      	ldr	r3, [r7, #16]
 8017696:	68db      	ldr	r3, [r3, #12]
 8017698:	2200      	movs	r2, #0
 801769a:	749a      	strb	r2, [r3, #18]
 801769c:	2200      	movs	r2, #0
 801769e:	74da      	strb	r2, [r3, #19]
  return seg;
 80176a0:	693b      	ldr	r3, [r7, #16]
}
 80176a2:	4618      	mov	r0, r3
 80176a4:	371c      	adds	r7, #28
 80176a6:	46bd      	mov	sp, r7
 80176a8:	bd90      	pop	{r4, r7, pc}
 80176aa:	bf00      	nop
 80176ac:	0801f940 	.word	0x0801f940
 80176b0:	0801f974 	.word	0x0801f974
 80176b4:	0801f994 	.word	0x0801f994
 80176b8:	0801f9bc 	.word	0x0801f9bc
 80176bc:	0801f9e0 	.word	0x0801f9e0

080176c0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80176c0:	b580      	push	{r7, lr}
 80176c2:	b086      	sub	sp, #24
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	607b      	str	r3, [r7, #4]
 80176c8:	4603      	mov	r3, r0
 80176ca:	73fb      	strb	r3, [r7, #15]
 80176cc:	460b      	mov	r3, r1
 80176ce:	81bb      	strh	r3, [r7, #12]
 80176d0:	4613      	mov	r3, r2
 80176d2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80176d4:	89bb      	ldrh	r3, [r7, #12]
 80176d6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d105      	bne.n	80176ea <tcp_pbuf_prealloc+0x2a>
 80176de:	4b30      	ldr	r3, [pc, #192]	; (80177a0 <tcp_pbuf_prealloc+0xe0>)
 80176e0:	22e8      	movs	r2, #232	; 0xe8
 80176e2:	4930      	ldr	r1, [pc, #192]	; (80177a4 <tcp_pbuf_prealloc+0xe4>)
 80176e4:	4830      	ldr	r0, [pc, #192]	; (80177a8 <tcp_pbuf_prealloc+0xe8>)
 80176e6:	f005 f8c9 	bl	801c87c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80176ea:	6a3b      	ldr	r3, [r7, #32]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d105      	bne.n	80176fc <tcp_pbuf_prealloc+0x3c>
 80176f0:	4b2b      	ldr	r3, [pc, #172]	; (80177a0 <tcp_pbuf_prealloc+0xe0>)
 80176f2:	22e9      	movs	r2, #233	; 0xe9
 80176f4:	492d      	ldr	r1, [pc, #180]	; (80177ac <tcp_pbuf_prealloc+0xec>)
 80176f6:	482c      	ldr	r0, [pc, #176]	; (80177a8 <tcp_pbuf_prealloc+0xe8>)
 80176f8:	f005 f8c0 	bl	801c87c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80176fc:	89ba      	ldrh	r2, [r7, #12]
 80176fe:	897b      	ldrh	r3, [r7, #10]
 8017700:	429a      	cmp	r2, r3
 8017702:	d221      	bcs.n	8017748 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017704:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017708:	f003 0302 	and.w	r3, r3, #2
 801770c:	2b00      	cmp	r3, #0
 801770e:	d111      	bne.n	8017734 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8017710:	6a3b      	ldr	r3, [r7, #32]
 8017712:	8b5b      	ldrh	r3, [r3, #26]
 8017714:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017718:	2b00      	cmp	r3, #0
 801771a:	d115      	bne.n	8017748 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801771c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017720:	2b00      	cmp	r3, #0
 8017722:	d007      	beq.n	8017734 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8017724:	6a3b      	ldr	r3, [r7, #32]
 8017726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8017728:	2b00      	cmp	r3, #0
 801772a:	d103      	bne.n	8017734 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801772c:	6a3b      	ldr	r3, [r7, #32]
 801772e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8017730:	2b00      	cmp	r3, #0
 8017732:	d009      	beq.n	8017748 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8017734:	89bb      	ldrh	r3, [r7, #12]
 8017736:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801773a:	f023 0203 	bic.w	r2, r3, #3
 801773e:	897b      	ldrh	r3, [r7, #10]
 8017740:	4293      	cmp	r3, r2
 8017742:	bf28      	it	cs
 8017744:	4613      	movcs	r3, r2
 8017746:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8017748:	8af9      	ldrh	r1, [r7, #22]
 801774a:	7bfb      	ldrb	r3, [r7, #15]
 801774c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017750:	4618      	mov	r0, r3
 8017752:	f7fb f84f 	bl	80127f4 <pbuf_alloc>
 8017756:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017758:	693b      	ldr	r3, [r7, #16]
 801775a:	2b00      	cmp	r3, #0
 801775c:	d101      	bne.n	8017762 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801775e:	2300      	movs	r3, #0
 8017760:	e019      	b.n	8017796 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8017762:	693b      	ldr	r3, [r7, #16]
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d006      	beq.n	8017778 <tcp_pbuf_prealloc+0xb8>
 801776a:	4b0d      	ldr	r3, [pc, #52]	; (80177a0 <tcp_pbuf_prealloc+0xe0>)
 801776c:	f240 120b 	movw	r2, #267	; 0x10b
 8017770:	490f      	ldr	r1, [pc, #60]	; (80177b0 <tcp_pbuf_prealloc+0xf0>)
 8017772:	480d      	ldr	r0, [pc, #52]	; (80177a8 <tcp_pbuf_prealloc+0xe8>)
 8017774:	f005 f882 	bl	801c87c <iprintf>
  *oversize = p->len - length;
 8017778:	693b      	ldr	r3, [r7, #16]
 801777a:	895a      	ldrh	r2, [r3, #10]
 801777c:	89bb      	ldrh	r3, [r7, #12]
 801777e:	1ad3      	subs	r3, r2, r3
 8017780:	b29a      	uxth	r2, r3
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8017786:	693b      	ldr	r3, [r7, #16]
 8017788:	89ba      	ldrh	r2, [r7, #12]
 801778a:	811a      	strh	r2, [r3, #8]
 801778c:	693b      	ldr	r3, [r7, #16]
 801778e:	891a      	ldrh	r2, [r3, #8]
 8017790:	693b      	ldr	r3, [r7, #16]
 8017792:	815a      	strh	r2, [r3, #10]
  return p;
 8017794:	693b      	ldr	r3, [r7, #16]
}
 8017796:	4618      	mov	r0, r3
 8017798:	3718      	adds	r7, #24
 801779a:	46bd      	mov	sp, r7
 801779c:	bd80      	pop	{r7, pc}
 801779e:	bf00      	nop
 80177a0:	0801f940 	.word	0x0801f940
 80177a4:	0801f9f8 	.word	0x0801f9f8
 80177a8:	0801f994 	.word	0x0801f994
 80177ac:	0801fa1c 	.word	0x0801fa1c
 80177b0:	0801fa3c 	.word	0x0801fa3c

080177b4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b082      	sub	sp, #8
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	6078      	str	r0, [r7, #4]
 80177bc:	460b      	mov	r3, r1
 80177be:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d106      	bne.n	80177d4 <tcp_write_checks+0x20>
 80177c6:	4b33      	ldr	r3, [pc, #204]	; (8017894 <tcp_write_checks+0xe0>)
 80177c8:	f240 1233 	movw	r2, #307	; 0x133
 80177cc:	4932      	ldr	r1, [pc, #200]	; (8017898 <tcp_write_checks+0xe4>)
 80177ce:	4833      	ldr	r0, [pc, #204]	; (801789c <tcp_write_checks+0xe8>)
 80177d0:	f005 f854 	bl	801c87c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	7d1b      	ldrb	r3, [r3, #20]
 80177d8:	2b04      	cmp	r3, #4
 80177da:	d00e      	beq.n	80177fa <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80177e0:	2b07      	cmp	r3, #7
 80177e2:	d00a      	beq.n	80177fa <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80177e8:	2b02      	cmp	r3, #2
 80177ea:	d006      	beq.n	80177fa <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80177f0:	2b03      	cmp	r3, #3
 80177f2:	d002      	beq.n	80177fa <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80177f4:	f06f 030a 	mvn.w	r3, #10
 80177f8:	e048      	b.n	801788c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80177fa:	887b      	ldrh	r3, [r7, #2]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d101      	bne.n	8017804 <tcp_write_checks+0x50>
    return ERR_OK;
 8017800:	2300      	movs	r3, #0
 8017802:	e043      	b.n	801788c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801780a:	887a      	ldrh	r2, [r7, #2]
 801780c:	429a      	cmp	r2, r3
 801780e:	d909      	bls.n	8017824 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	8b5b      	ldrh	r3, [r3, #26]
 8017814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017818:	b29a      	uxth	r2, r3
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801781e:	f04f 33ff 	mov.w	r3, #4294967295
 8017822:	e033      	b.n	801788c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801782a:	2b08      	cmp	r3, #8
 801782c:	d909      	bls.n	8017842 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	8b5b      	ldrh	r3, [r3, #26]
 8017832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017836:	b29a      	uxth	r2, r3
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801783c:	f04f 33ff 	mov.w	r3, #4294967295
 8017840:	e024      	b.n	801788c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017848:	2b00      	cmp	r3, #0
 801784a:	d00f      	beq.n	801786c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017850:	2b00      	cmp	r3, #0
 8017852:	d11a      	bne.n	801788a <tcp_write_checks+0xd6>
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017858:	2b00      	cmp	r3, #0
 801785a:	d116      	bne.n	801788a <tcp_write_checks+0xd6>
 801785c:	4b0d      	ldr	r3, [pc, #52]	; (8017894 <tcp_write_checks+0xe0>)
 801785e:	f240 1255 	movw	r2, #341	; 0x155
 8017862:	490f      	ldr	r1, [pc, #60]	; (80178a0 <tcp_write_checks+0xec>)
 8017864:	480d      	ldr	r0, [pc, #52]	; (801789c <tcp_write_checks+0xe8>)
 8017866:	f005 f809 	bl	801c87c <iprintf>
 801786a:	e00e      	b.n	801788a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017870:	2b00      	cmp	r3, #0
 8017872:	d103      	bne.n	801787c <tcp_write_checks+0xc8>
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017878:	2b00      	cmp	r3, #0
 801787a:	d006      	beq.n	801788a <tcp_write_checks+0xd6>
 801787c:	4b05      	ldr	r3, [pc, #20]	; (8017894 <tcp_write_checks+0xe0>)
 801787e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8017882:	4908      	ldr	r1, [pc, #32]	; (80178a4 <tcp_write_checks+0xf0>)
 8017884:	4805      	ldr	r0, [pc, #20]	; (801789c <tcp_write_checks+0xe8>)
 8017886:	f004 fff9 	bl	801c87c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801788a:	2300      	movs	r3, #0
}
 801788c:	4618      	mov	r0, r3
 801788e:	3708      	adds	r7, #8
 8017890:	46bd      	mov	sp, r7
 8017892:	bd80      	pop	{r7, pc}
 8017894:	0801f940 	.word	0x0801f940
 8017898:	0801fa50 	.word	0x0801fa50
 801789c:	0801f994 	.word	0x0801f994
 80178a0:	0801fa70 	.word	0x0801fa70
 80178a4:	0801faac 	.word	0x0801faac

080178a8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80178a8:	b590      	push	{r4, r7, lr}
 80178aa:	b09b      	sub	sp, #108	; 0x6c
 80178ac:	af04      	add	r7, sp, #16
 80178ae:	60f8      	str	r0, [r7, #12]
 80178b0:	60b9      	str	r1, [r7, #8]
 80178b2:	4611      	mov	r1, r2
 80178b4:	461a      	mov	r2, r3
 80178b6:	460b      	mov	r3, r1
 80178b8:	80fb      	strh	r3, [r7, #6]
 80178ba:	4613      	mov	r3, r2
 80178bc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80178be:	2300      	movs	r3, #0
 80178c0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80178c2:	2300      	movs	r3, #0
 80178c4:	653b      	str	r3, [r7, #80]	; 0x50
 80178c6:	2300      	movs	r3, #0
 80178c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80178ca:	2300      	movs	r3, #0
 80178cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80178ce:	2300      	movs	r3, #0
 80178d0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80178d2:	2300      	movs	r3, #0
 80178d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80178d8:	2300      	movs	r3, #0
 80178da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80178de:	2300      	movs	r3, #0
 80178e0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80178e2:	2300      	movs	r3, #0
 80178e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80178e6:	2300      	movs	r3, #0
 80178e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d109      	bne.n	8017904 <tcp_write+0x5c>
 80178f0:	4ba4      	ldr	r3, [pc, #656]	; (8017b84 <tcp_write+0x2dc>)
 80178f2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80178f6:	49a4      	ldr	r1, [pc, #656]	; (8017b88 <tcp_write+0x2e0>)
 80178f8:	48a4      	ldr	r0, [pc, #656]	; (8017b8c <tcp_write+0x2e4>)
 80178fa:	f004 ffbf 	bl	801c87c <iprintf>
 80178fe:	f06f 030f 	mvn.w	r3, #15
 8017902:	e32a      	b.n	8017f5a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801790a:	085b      	lsrs	r3, r3, #1
 801790c:	b29a      	uxth	r2, r3
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017912:	4293      	cmp	r3, r2
 8017914:	bf28      	it	cs
 8017916:	4613      	movcs	r3, r2
 8017918:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801791a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801791c:	2b00      	cmp	r3, #0
 801791e:	d102      	bne.n	8017926 <tcp_write+0x7e>
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017924:	e000      	b.n	8017928 <tcp_write+0x80>
 8017926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017928:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801792a:	68bb      	ldr	r3, [r7, #8]
 801792c:	2b00      	cmp	r3, #0
 801792e:	d109      	bne.n	8017944 <tcp_write+0x9c>
 8017930:	4b94      	ldr	r3, [pc, #592]	; (8017b84 <tcp_write+0x2dc>)
 8017932:	f240 12ad 	movw	r2, #429	; 0x1ad
 8017936:	4996      	ldr	r1, [pc, #600]	; (8017b90 <tcp_write+0x2e8>)
 8017938:	4894      	ldr	r0, [pc, #592]	; (8017b8c <tcp_write+0x2e4>)
 801793a:	f004 ff9f 	bl	801c87c <iprintf>
 801793e:	f06f 030f 	mvn.w	r3, #15
 8017942:	e30a      	b.n	8017f5a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8017944:	88fb      	ldrh	r3, [r7, #6]
 8017946:	4619      	mov	r1, r3
 8017948:	68f8      	ldr	r0, [r7, #12]
 801794a:	f7ff ff33 	bl	80177b4 <tcp_write_checks>
 801794e:	4603      	mov	r3, r0
 8017950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8017954:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017958:	2b00      	cmp	r3, #0
 801795a:	d002      	beq.n	8017962 <tcp_write+0xba>
    return err;
 801795c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017960:	e2fb      	b.n	8017f5a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017968:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801796c:	2300      	movs	r3, #0
 801796e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017976:	2b00      	cmp	r3, #0
 8017978:	f000 80f6 	beq.w	8017b68 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017980:	653b      	str	r3, [r7, #80]	; 0x50
 8017982:	e002      	b.n	801798a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8017984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801798a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	2b00      	cmp	r3, #0
 8017990:	d1f8      	bne.n	8017984 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8017992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017994:	7a9b      	ldrb	r3, [r3, #10]
 8017996:	009b      	lsls	r3, r3, #2
 8017998:	b29b      	uxth	r3, r3
 801799a:	f003 0304 	and.w	r3, r3, #4
 801799e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80179a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80179a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80179a4:	891b      	ldrh	r3, [r3, #8]
 80179a6:	4619      	mov	r1, r3
 80179a8:	8c3b      	ldrh	r3, [r7, #32]
 80179aa:	440b      	add	r3, r1
 80179ac:	429a      	cmp	r2, r3
 80179ae:	da06      	bge.n	80179be <tcp_write+0x116>
 80179b0:	4b74      	ldr	r3, [pc, #464]	; (8017b84 <tcp_write+0x2dc>)
 80179b2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80179b6:	4977      	ldr	r1, [pc, #476]	; (8017b94 <tcp_write+0x2ec>)
 80179b8:	4874      	ldr	r0, [pc, #464]	; (8017b8c <tcp_write+0x2e4>)
 80179ba:	f004 ff5f 	bl	801c87c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80179be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80179c0:	891a      	ldrh	r2, [r3, #8]
 80179c2:	8c3b      	ldrh	r3, [r7, #32]
 80179c4:	4413      	add	r3, r2
 80179c6:	b29b      	uxth	r3, r3
 80179c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80179ca:	1ad3      	subs	r3, r2, r3
 80179cc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80179d4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80179d6:	8a7b      	ldrh	r3, [r7, #18]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d026      	beq.n	8017a2a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80179dc:	8a7b      	ldrh	r3, [r7, #18]
 80179de:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80179e0:	429a      	cmp	r2, r3
 80179e2:	d206      	bcs.n	80179f2 <tcp_write+0x14a>
 80179e4:	4b67      	ldr	r3, [pc, #412]	; (8017b84 <tcp_write+0x2dc>)
 80179e6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80179ea:	496b      	ldr	r1, [pc, #428]	; (8017b98 <tcp_write+0x2f0>)
 80179ec:	4867      	ldr	r0, [pc, #412]	; (8017b8c <tcp_write+0x2e4>)
 80179ee:	f004 ff45 	bl	801c87c <iprintf>
      seg = last_unsent;
 80179f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80179f4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80179f6:	8a7b      	ldrh	r3, [r7, #18]
 80179f8:	88fa      	ldrh	r2, [r7, #6]
 80179fa:	4293      	cmp	r3, r2
 80179fc:	bf28      	it	cs
 80179fe:	4613      	movcs	r3, r2
 8017a00:	b29b      	uxth	r3, r3
 8017a02:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017a04:	4293      	cmp	r3, r2
 8017a06:	bf28      	it	cs
 8017a08:	4613      	movcs	r3, r2
 8017a0a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8017a0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017a10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017a12:	4413      	add	r3, r2
 8017a14:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8017a18:	8a7a      	ldrh	r2, [r7, #18]
 8017a1a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017a1c:	1ad3      	subs	r3, r2, r3
 8017a1e:	b29b      	uxth	r3, r3
 8017a20:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8017a22:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017a24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017a26:	1ad3      	subs	r3, r2, r3
 8017a28:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8017a2a:	8a7b      	ldrh	r3, [r7, #18]
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d00b      	beq.n	8017a48 <tcp_write+0x1a0>
 8017a30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017a34:	88fb      	ldrh	r3, [r7, #6]
 8017a36:	429a      	cmp	r2, r3
 8017a38:	d006      	beq.n	8017a48 <tcp_write+0x1a0>
 8017a3a:	4b52      	ldr	r3, [pc, #328]	; (8017b84 <tcp_write+0x2dc>)
 8017a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017a40:	4956      	ldr	r1, [pc, #344]	; (8017b9c <tcp_write+0x2f4>)
 8017a42:	4852      	ldr	r0, [pc, #328]	; (8017b8c <tcp_write+0x2e4>)
 8017a44:	f004 ff1a 	bl	801c87c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8017a48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017a4c:	88fb      	ldrh	r3, [r7, #6]
 8017a4e:	429a      	cmp	r2, r3
 8017a50:	f080 8167 	bcs.w	8017d22 <tcp_write+0x47a>
 8017a54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	f000 8163 	beq.w	8017d22 <tcp_write+0x47a>
 8017a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a5e:	891b      	ldrh	r3, [r3, #8]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	f000 815e 	beq.w	8017d22 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8017a66:	88fa      	ldrh	r2, [r7, #6]
 8017a68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017a6c:	1ad2      	subs	r2, r2, r3
 8017a6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017a70:	4293      	cmp	r3, r2
 8017a72:	bfa8      	it	ge
 8017a74:	4613      	movge	r3, r2
 8017a76:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8017a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a7a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017a7c:	797b      	ldrb	r3, [r7, #5]
 8017a7e:	f003 0301 	and.w	r3, r3, #1
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d027      	beq.n	8017ad6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8017a86:	f107 0012 	add.w	r0, r7, #18
 8017a8a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017a8c:	8bf9      	ldrh	r1, [r7, #30]
 8017a8e:	2301      	movs	r3, #1
 8017a90:	9302      	str	r3, [sp, #8]
 8017a92:	797b      	ldrb	r3, [r7, #5]
 8017a94:	9301      	str	r3, [sp, #4]
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	9300      	str	r3, [sp, #0]
 8017a9a:	4603      	mov	r3, r0
 8017a9c:	2000      	movs	r0, #0
 8017a9e:	f7ff fe0f 	bl	80176c0 <tcp_pbuf_prealloc>
 8017aa2:	6578      	str	r0, [r7, #84]	; 0x54
 8017aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	f000 8225 	beq.w	8017ef6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8017aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017aae:	6858      	ldr	r0, [r3, #4]
 8017ab0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017ab4:	68ba      	ldr	r2, [r7, #8]
 8017ab6:	4413      	add	r3, r2
 8017ab8:	8bfa      	ldrh	r2, [r7, #30]
 8017aba:	4619      	mov	r1, r3
 8017abc:	f004 ffbf 	bl	801ca3e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8017ac0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017ac2:	f7fb fa09 	bl	8012ed8 <pbuf_clen>
 8017ac6:	4603      	mov	r3, r0
 8017ac8:	461a      	mov	r2, r3
 8017aca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017ace:	4413      	add	r3, r2
 8017ad0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8017ad4:	e041      	b.n	8017b5a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8017ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ad8:	685b      	ldr	r3, [r3, #4]
 8017ada:	637b      	str	r3, [r7, #52]	; 0x34
 8017adc:	e002      	b.n	8017ae4 <tcp_write+0x23c>
 8017ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8017ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ae6:	681b      	ldr	r3, [r3, #0]
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d1f8      	bne.n	8017ade <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017aee:	7b1b      	ldrb	r3, [r3, #12]
 8017af0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d115      	bne.n	8017b24 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8017af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017afa:	685b      	ldr	r3, [r3, #4]
 8017afc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017afe:	8952      	ldrh	r2, [r2, #10]
 8017b00:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017b02:	68ba      	ldr	r2, [r7, #8]
 8017b04:	429a      	cmp	r2, r3
 8017b06:	d10d      	bne.n	8017b24 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017b08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d006      	beq.n	8017b1e <tcp_write+0x276>
 8017b10:	4b1c      	ldr	r3, [pc, #112]	; (8017b84 <tcp_write+0x2dc>)
 8017b12:	f240 2231 	movw	r2, #561	; 0x231
 8017b16:	4922      	ldr	r1, [pc, #136]	; (8017ba0 <tcp_write+0x2f8>)
 8017b18:	481c      	ldr	r0, [pc, #112]	; (8017b8c <tcp_write+0x2e4>)
 8017b1a:	f004 feaf 	bl	801c87c <iprintf>
          extendlen = seglen;
 8017b1e:	8bfb      	ldrh	r3, [r7, #30]
 8017b20:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8017b22:	e01a      	b.n	8017b5a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8017b24:	8bfb      	ldrh	r3, [r7, #30]
 8017b26:	2201      	movs	r2, #1
 8017b28:	4619      	mov	r1, r3
 8017b2a:	2000      	movs	r0, #0
 8017b2c:	f7fa fe62 	bl	80127f4 <pbuf_alloc>
 8017b30:	6578      	str	r0, [r7, #84]	; 0x54
 8017b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	f000 81e0 	beq.w	8017efa <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8017b3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017b3e:	68ba      	ldr	r2, [r7, #8]
 8017b40:	441a      	add	r2, r3
 8017b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b44:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8017b46:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017b48:	f7fb f9c6 	bl	8012ed8 <pbuf_clen>
 8017b4c:	4603      	mov	r3, r0
 8017b4e:	461a      	mov	r2, r3
 8017b50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017b54:	4413      	add	r3, r2
 8017b56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8017b5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017b5e:	8bfb      	ldrh	r3, [r7, #30]
 8017b60:	4413      	add	r3, r2
 8017b62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017b66:	e0dc      	b.n	8017d22 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	f000 80d7 	beq.w	8017d22 <tcp_write+0x47a>
 8017b74:	4b03      	ldr	r3, [pc, #12]	; (8017b84 <tcp_write+0x2dc>)
 8017b76:	f240 224a 	movw	r2, #586	; 0x24a
 8017b7a:	490a      	ldr	r1, [pc, #40]	; (8017ba4 <tcp_write+0x2fc>)
 8017b7c:	4803      	ldr	r0, [pc, #12]	; (8017b8c <tcp_write+0x2e4>)
 8017b7e:	f004 fe7d 	bl	801c87c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8017b82:	e0ce      	b.n	8017d22 <tcp_write+0x47a>
 8017b84:	0801f940 	.word	0x0801f940
 8017b88:	0801fae0 	.word	0x0801fae0
 8017b8c:	0801f994 	.word	0x0801f994
 8017b90:	0801faf8 	.word	0x0801faf8
 8017b94:	0801fb2c 	.word	0x0801fb2c
 8017b98:	0801fb44 	.word	0x0801fb44
 8017b9c:	0801fb64 	.word	0x0801fb64
 8017ba0:	0801fb84 	.word	0x0801fb84
 8017ba4:	0801fbb0 	.word	0x0801fbb0
    struct pbuf *p;
    u16_t left = len - pos;
 8017ba8:	88fa      	ldrh	r2, [r7, #6]
 8017baa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017bae:	1ad3      	subs	r3, r2, r3
 8017bb0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8017bb2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017bb6:	b29b      	uxth	r3, r3
 8017bb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017bba:	1ad3      	subs	r3, r2, r3
 8017bbc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8017bbe:	8b7a      	ldrh	r2, [r7, #26]
 8017bc0:	8bbb      	ldrh	r3, [r7, #28]
 8017bc2:	4293      	cmp	r3, r2
 8017bc4:	bf28      	it	cs
 8017bc6:	4613      	movcs	r3, r2
 8017bc8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017bca:	797b      	ldrb	r3, [r7, #5]
 8017bcc:	f003 0301 	and.w	r3, r3, #1
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d036      	beq.n	8017c42 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017bd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017bd8:	b29a      	uxth	r2, r3
 8017bda:	8b3b      	ldrh	r3, [r7, #24]
 8017bdc:	4413      	add	r3, r2
 8017bde:	b299      	uxth	r1, r3
 8017be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	bf0c      	ite	eq
 8017be6:	2301      	moveq	r3, #1
 8017be8:	2300      	movne	r3, #0
 8017bea:	b2db      	uxtb	r3, r3
 8017bec:	f107 0012 	add.w	r0, r7, #18
 8017bf0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017bf2:	9302      	str	r3, [sp, #8]
 8017bf4:	797b      	ldrb	r3, [r7, #5]
 8017bf6:	9301      	str	r3, [sp, #4]
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	9300      	str	r3, [sp, #0]
 8017bfc:	4603      	mov	r3, r0
 8017bfe:	2036      	movs	r0, #54	; 0x36
 8017c00:	f7ff fd5e 	bl	80176c0 <tcp_pbuf_prealloc>
 8017c04:	6338      	str	r0, [r7, #48]	; 0x30
 8017c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	f000 8178 	beq.w	8017efe <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8017c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c10:	895b      	ldrh	r3, [r3, #10]
 8017c12:	8b3a      	ldrh	r2, [r7, #24]
 8017c14:	429a      	cmp	r2, r3
 8017c16:	d906      	bls.n	8017c26 <tcp_write+0x37e>
 8017c18:	4b8c      	ldr	r3, [pc, #560]	; (8017e4c <tcp_write+0x5a4>)
 8017c1a:	f240 2266 	movw	r2, #614	; 0x266
 8017c1e:	498c      	ldr	r1, [pc, #560]	; (8017e50 <tcp_write+0x5a8>)
 8017c20:	488c      	ldr	r0, [pc, #560]	; (8017e54 <tcp_write+0x5ac>)
 8017c22:	f004 fe2b 	bl	801c87c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8017c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c28:	685a      	ldr	r2, [r3, #4]
 8017c2a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017c2e:	18d0      	adds	r0, r2, r3
 8017c30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017c34:	68ba      	ldr	r2, [r7, #8]
 8017c36:	4413      	add	r3, r2
 8017c38:	8b3a      	ldrh	r2, [r7, #24]
 8017c3a:	4619      	mov	r1, r3
 8017c3c:	f004 feff 	bl	801ca3e <memcpy>
 8017c40:	e02f      	b.n	8017ca2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8017c42:	8a7b      	ldrh	r3, [r7, #18]
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d006      	beq.n	8017c56 <tcp_write+0x3ae>
 8017c48:	4b80      	ldr	r3, [pc, #512]	; (8017e4c <tcp_write+0x5a4>)
 8017c4a:	f240 2271 	movw	r2, #625	; 0x271
 8017c4e:	4982      	ldr	r1, [pc, #520]	; (8017e58 <tcp_write+0x5b0>)
 8017c50:	4880      	ldr	r0, [pc, #512]	; (8017e54 <tcp_write+0x5ac>)
 8017c52:	f004 fe13 	bl	801c87c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8017c56:	8b3b      	ldrh	r3, [r7, #24]
 8017c58:	2201      	movs	r2, #1
 8017c5a:	4619      	mov	r1, r3
 8017c5c:	2036      	movs	r0, #54	; 0x36
 8017c5e:	f7fa fdc9 	bl	80127f4 <pbuf_alloc>
 8017c62:	6178      	str	r0, [r7, #20]
 8017c64:	697b      	ldr	r3, [r7, #20]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	f000 814b 	beq.w	8017f02 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8017c6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017c70:	68ba      	ldr	r2, [r7, #8]
 8017c72:	441a      	add	r2, r3
 8017c74:	697b      	ldr	r3, [r7, #20]
 8017c76:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017c78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017c7c:	b29b      	uxth	r3, r3
 8017c7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017c82:	4619      	mov	r1, r3
 8017c84:	2036      	movs	r0, #54	; 0x36
 8017c86:	f7fa fdb5 	bl	80127f4 <pbuf_alloc>
 8017c8a:	6338      	str	r0, [r7, #48]	; 0x30
 8017c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d103      	bne.n	8017c9a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8017c92:	6978      	ldr	r0, [r7, #20]
 8017c94:	f7fb f892 	bl	8012dbc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8017c98:	e136      	b.n	8017f08 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8017c9a:	6979      	ldr	r1, [r7, #20]
 8017c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017c9e:	f7fb f95b 	bl	8012f58 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8017ca2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ca4:	f7fb f918 	bl	8012ed8 <pbuf_clen>
 8017ca8:	4603      	mov	r3, r0
 8017caa:	461a      	mov	r2, r3
 8017cac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017cb0:	4413      	add	r3, r2
 8017cb2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8017cb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017cba:	2b09      	cmp	r3, #9
 8017cbc:	d903      	bls.n	8017cc6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8017cbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017cc0:	f7fb f87c 	bl	8012dbc <pbuf_free>
      goto memerr;
 8017cc4:	e120      	b.n	8017f08 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017cca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017cce:	441a      	add	r2, r3
 8017cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017cd4:	9300      	str	r3, [sp, #0]
 8017cd6:	4613      	mov	r3, r2
 8017cd8:	2200      	movs	r2, #0
 8017cda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017cdc:	68f8      	ldr	r0, [r7, #12]
 8017cde:	f7ff fc51 	bl	8017584 <tcp_create_segment>
 8017ce2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	f000 810d 	beq.w	8017f06 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8017cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d102      	bne.n	8017cf8 <tcp_write+0x450>
      queue = seg;
 8017cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8017cf6:	e00c      	b.n	8017d12 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8017cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d106      	bne.n	8017d0c <tcp_write+0x464>
 8017cfe:	4b53      	ldr	r3, [pc, #332]	; (8017e4c <tcp_write+0x5a4>)
 8017d00:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017d04:	4955      	ldr	r1, [pc, #340]	; (8017e5c <tcp_write+0x5b4>)
 8017d06:	4853      	ldr	r0, [pc, #332]	; (8017e54 <tcp_write+0x5ac>)
 8017d08:	f004 fdb8 	bl	801c87c <iprintf>
      prev_seg->next = seg;
 8017d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017d0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017d10:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8017d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017d14:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8017d16:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017d1a:	8b3b      	ldrh	r3, [r7, #24]
 8017d1c:	4413      	add	r3, r2
 8017d1e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8017d22:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017d26:	88fb      	ldrh	r3, [r7, #6]
 8017d28:	429a      	cmp	r2, r3
 8017d2a:	f4ff af3d 	bcc.w	8017ba8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8017d2e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d02c      	beq.n	8017d8e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8017d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d36:	685b      	ldr	r3, [r3, #4]
 8017d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017d3a:	e01e      	b.n	8017d7a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8017d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d3e:	891a      	ldrh	r2, [r3, #8]
 8017d40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017d42:	4413      	add	r3, r2
 8017d44:	b29a      	uxth	r2, r3
 8017d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d48:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8017d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d110      	bne.n	8017d74 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8017d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d54:	685b      	ldr	r3, [r3, #4]
 8017d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d58:	8952      	ldrh	r2, [r2, #10]
 8017d5a:	4413      	add	r3, r2
 8017d5c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017d5e:	68b9      	ldr	r1, [r7, #8]
 8017d60:	4618      	mov	r0, r3
 8017d62:	f004 fe6c 	bl	801ca3e <memcpy>
        p->len += oversize_used;
 8017d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d68:	895a      	ldrh	r2, [r3, #10]
 8017d6a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017d6c:	4413      	add	r3, r2
 8017d6e:	b29a      	uxth	r2, r3
 8017d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d72:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8017d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d1dd      	bne.n	8017d3c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8017d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d82:	891a      	ldrh	r2, [r3, #8]
 8017d84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017d86:	4413      	add	r3, r2
 8017d88:	b29a      	uxth	r2, r3
 8017d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d8c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8017d8e:	8a7a      	ldrh	r2, [r7, #18]
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8017d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d018      	beq.n	8017dce <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8017d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d106      	bne.n	8017db0 <tcp_write+0x508>
 8017da2:	4b2a      	ldr	r3, [pc, #168]	; (8017e4c <tcp_write+0x5a4>)
 8017da4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8017da8:	492d      	ldr	r1, [pc, #180]	; (8017e60 <tcp_write+0x5b8>)
 8017daa:	482a      	ldr	r0, [pc, #168]	; (8017e54 <tcp_write+0x5ac>)
 8017dac:	f004 fd66 	bl	801c87c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8017db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017db2:	685b      	ldr	r3, [r3, #4]
 8017db4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017db6:	4618      	mov	r0, r3
 8017db8:	f7fb f8ce 	bl	8012f58 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8017dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017dbe:	891a      	ldrh	r2, [r3, #8]
 8017dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017dc2:	891b      	ldrh	r3, [r3, #8]
 8017dc4:	4413      	add	r3, r2
 8017dc6:	b29a      	uxth	r2, r3
 8017dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017dca:	811a      	strh	r2, [r3, #8]
 8017dcc:	e037      	b.n	8017e3e <tcp_write+0x596>
  } else if (extendlen > 0) {
 8017dce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d034      	beq.n	8017e3e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8017dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d003      	beq.n	8017de2 <tcp_write+0x53a>
 8017dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ddc:	685b      	ldr	r3, [r3, #4]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d106      	bne.n	8017df0 <tcp_write+0x548>
 8017de2:	4b1a      	ldr	r3, [pc, #104]	; (8017e4c <tcp_write+0x5a4>)
 8017de4:	f240 22e6 	movw	r2, #742	; 0x2e6
 8017de8:	491e      	ldr	r1, [pc, #120]	; (8017e64 <tcp_write+0x5bc>)
 8017dea:	481a      	ldr	r0, [pc, #104]	; (8017e54 <tcp_write+0x5ac>)
 8017dec:	f004 fd46 	bl	801c87c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017df2:	685b      	ldr	r3, [r3, #4]
 8017df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8017df6:	e009      	b.n	8017e0c <tcp_write+0x564>
      p->tot_len += extendlen;
 8017df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dfa:	891a      	ldrh	r2, [r3, #8]
 8017dfc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017dfe:	4413      	add	r3, r2
 8017e00:	b29a      	uxth	r2, r3
 8017e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e04:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8017e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d1f1      	bne.n	8017df8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8017e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e16:	891a      	ldrh	r2, [r3, #8]
 8017e18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017e1a:	4413      	add	r3, r2
 8017e1c:	b29a      	uxth	r2, r3
 8017e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e20:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8017e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e24:	895a      	ldrh	r2, [r3, #10]
 8017e26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017e28:	4413      	add	r3, r2
 8017e2a:	b29a      	uxth	r2, r3
 8017e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e2e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8017e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e32:	891a      	ldrh	r2, [r3, #8]
 8017e34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017e36:	4413      	add	r3, r2
 8017e38:	b29a      	uxth	r2, r3
 8017e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e3c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8017e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d111      	bne.n	8017e68 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e48:	66da      	str	r2, [r3, #108]	; 0x6c
 8017e4a:	e010      	b.n	8017e6e <tcp_write+0x5c6>
 8017e4c:	0801f940 	.word	0x0801f940
 8017e50:	0801fbe0 	.word	0x0801fbe0
 8017e54:	0801f994 	.word	0x0801f994
 8017e58:	0801fc20 	.word	0x0801fc20
 8017e5c:	0801fc30 	.word	0x0801fc30
 8017e60:	0801fc44 	.word	0x0801fc44
 8017e64:	0801fc7c 	.word	0x0801fc7c
  } else {
    last_unsent->next = queue;
 8017e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e6c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017e72:	88fb      	ldrh	r3, [r7, #6]
 8017e74:	441a      	add	r2, r3
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8017e80:	88fb      	ldrh	r3, [r7, #6]
 8017e82:	1ad3      	subs	r3, r2, r3
 8017e84:	b29a      	uxth	r2, r3
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017e92:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d00e      	beq.n	8017ebe <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d10a      	bne.n	8017ebe <tcp_write+0x616>
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d106      	bne.n	8017ebe <tcp_write+0x616>
 8017eb0:	4b2c      	ldr	r3, [pc, #176]	; (8017f64 <tcp_write+0x6bc>)
 8017eb2:	f240 3212 	movw	r2, #786	; 0x312
 8017eb6:	492c      	ldr	r1, [pc, #176]	; (8017f68 <tcp_write+0x6c0>)
 8017eb8:	482c      	ldr	r0, [pc, #176]	; (8017f6c <tcp_write+0x6c4>)
 8017eba:	f004 fcdf 	bl	801c87c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8017ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d016      	beq.n	8017ef2 <tcp_write+0x64a>
 8017ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017ec6:	68db      	ldr	r3, [r3, #12]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d012      	beq.n	8017ef2 <tcp_write+0x64a>
 8017ecc:	797b      	ldrb	r3, [r7, #5]
 8017ece:	f003 0302 	and.w	r3, r3, #2
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d10d      	bne.n	8017ef2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8017ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017ed8:	68db      	ldr	r3, [r3, #12]
 8017eda:	899b      	ldrh	r3, [r3, #12]
 8017edc:	b29c      	uxth	r4, r3
 8017ede:	2008      	movs	r0, #8
 8017ee0:	f7f9 fabe 	bl	8011460 <lwip_htons>
 8017ee4:	4603      	mov	r3, r0
 8017ee6:	461a      	mov	r2, r3
 8017ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017eea:	68db      	ldr	r3, [r3, #12]
 8017eec:	4322      	orrs	r2, r4
 8017eee:	b292      	uxth	r2, r2
 8017ef0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	e031      	b.n	8017f5a <tcp_write+0x6b2>
          goto memerr;
 8017ef6:	bf00      	nop
 8017ef8:	e006      	b.n	8017f08 <tcp_write+0x660>
            goto memerr;
 8017efa:	bf00      	nop
 8017efc:	e004      	b.n	8017f08 <tcp_write+0x660>
        goto memerr;
 8017efe:	bf00      	nop
 8017f00:	e002      	b.n	8017f08 <tcp_write+0x660>
        goto memerr;
 8017f02:	bf00      	nop
 8017f04:	e000      	b.n	8017f08 <tcp_write+0x660>
      goto memerr;
 8017f06:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	8b5b      	ldrh	r3, [r3, #26]
 8017f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017f10:	b29a      	uxth	r2, r3
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8017f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d002      	beq.n	8017f22 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8017f1c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017f1e:	f7fa ff4d 	bl	8012dbc <pbuf_free>
  }
  if (queue != NULL) {
 8017f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d002      	beq.n	8017f2e <tcp_write+0x686>
    tcp_segs_free(queue);
 8017f28:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017f2a:	f7fc fb6b 	bl	8014604 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d00e      	beq.n	8017f56 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d10a      	bne.n	8017f56 <tcp_write+0x6ae>
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d106      	bne.n	8017f56 <tcp_write+0x6ae>
 8017f48:	4b06      	ldr	r3, [pc, #24]	; (8017f64 <tcp_write+0x6bc>)
 8017f4a:	f240 3227 	movw	r2, #807	; 0x327
 8017f4e:	4906      	ldr	r1, [pc, #24]	; (8017f68 <tcp_write+0x6c0>)
 8017f50:	4806      	ldr	r0, [pc, #24]	; (8017f6c <tcp_write+0x6c4>)
 8017f52:	f004 fc93 	bl	801c87c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8017f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	375c      	adds	r7, #92	; 0x5c
 8017f5e:	46bd      	mov	sp, r7
 8017f60:	bd90      	pop	{r4, r7, pc}
 8017f62:	bf00      	nop
 8017f64:	0801f940 	.word	0x0801f940
 8017f68:	0801fcb4 	.word	0x0801fcb4
 8017f6c:	0801f994 	.word	0x0801f994

08017f70 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8017f70:	b590      	push	{r4, r7, lr}
 8017f72:	b08b      	sub	sp, #44	; 0x2c
 8017f74:	af02      	add	r7, sp, #8
 8017f76:	6078      	str	r0, [r7, #4]
 8017f78:	460b      	mov	r3, r1
 8017f7a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	61fb      	str	r3, [r7, #28]
 8017f80:	2300      	movs	r3, #0
 8017f82:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8017f84:	2300      	movs	r3, #0
 8017f86:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d106      	bne.n	8017f9c <tcp_split_unsent_seg+0x2c>
 8017f8e:	4b95      	ldr	r3, [pc, #596]	; (80181e4 <tcp_split_unsent_seg+0x274>)
 8017f90:	f240 324b 	movw	r2, #843	; 0x34b
 8017f94:	4994      	ldr	r1, [pc, #592]	; (80181e8 <tcp_split_unsent_seg+0x278>)
 8017f96:	4895      	ldr	r0, [pc, #596]	; (80181ec <tcp_split_unsent_seg+0x27c>)
 8017f98:	f004 fc70 	bl	801c87c <iprintf>

  useg = pcb->unsent;
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017fa0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8017fa2:	697b      	ldr	r3, [r7, #20]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d102      	bne.n	8017fae <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8017fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8017fac:	e116      	b.n	80181dc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8017fae:	887b      	ldrh	r3, [r7, #2]
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d109      	bne.n	8017fc8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8017fb4:	4b8b      	ldr	r3, [pc, #556]	; (80181e4 <tcp_split_unsent_seg+0x274>)
 8017fb6:	f240 3253 	movw	r2, #851	; 0x353
 8017fba:	498d      	ldr	r1, [pc, #564]	; (80181f0 <tcp_split_unsent_seg+0x280>)
 8017fbc:	488b      	ldr	r0, [pc, #556]	; (80181ec <tcp_split_unsent_seg+0x27c>)
 8017fbe:	f004 fc5d 	bl	801c87c <iprintf>
    return ERR_VAL;
 8017fc2:	f06f 0305 	mvn.w	r3, #5
 8017fc6:	e109      	b.n	80181dc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8017fc8:	697b      	ldr	r3, [r7, #20]
 8017fca:	891b      	ldrh	r3, [r3, #8]
 8017fcc:	887a      	ldrh	r2, [r7, #2]
 8017fce:	429a      	cmp	r2, r3
 8017fd0:	d301      	bcc.n	8017fd6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	e102      	b.n	80181dc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017fda:	887a      	ldrh	r2, [r7, #2]
 8017fdc:	429a      	cmp	r2, r3
 8017fde:	d906      	bls.n	8017fee <tcp_split_unsent_seg+0x7e>
 8017fe0:	4b80      	ldr	r3, [pc, #512]	; (80181e4 <tcp_split_unsent_seg+0x274>)
 8017fe2:	f240 325b 	movw	r2, #859	; 0x35b
 8017fe6:	4983      	ldr	r1, [pc, #524]	; (80181f4 <tcp_split_unsent_seg+0x284>)
 8017fe8:	4880      	ldr	r0, [pc, #512]	; (80181ec <tcp_split_unsent_seg+0x27c>)
 8017fea:	f004 fc47 	bl	801c87c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8017fee:	697b      	ldr	r3, [r7, #20]
 8017ff0:	891b      	ldrh	r3, [r3, #8]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d106      	bne.n	8018004 <tcp_split_unsent_seg+0x94>
 8017ff6:	4b7b      	ldr	r3, [pc, #492]	; (80181e4 <tcp_split_unsent_seg+0x274>)
 8017ff8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8017ffc:	497e      	ldr	r1, [pc, #504]	; (80181f8 <tcp_split_unsent_seg+0x288>)
 8017ffe:	487b      	ldr	r0, [pc, #492]	; (80181ec <tcp_split_unsent_seg+0x27c>)
 8018000:	f004 fc3c 	bl	801c87c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8018004:	697b      	ldr	r3, [r7, #20]
 8018006:	7a9b      	ldrb	r3, [r3, #10]
 8018008:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801800a:	7bfb      	ldrb	r3, [r7, #15]
 801800c:	009b      	lsls	r3, r3, #2
 801800e:	b2db      	uxtb	r3, r3
 8018010:	f003 0304 	and.w	r3, r3, #4
 8018014:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8018016:	697b      	ldr	r3, [r7, #20]
 8018018:	891a      	ldrh	r2, [r3, #8]
 801801a:	887b      	ldrh	r3, [r7, #2]
 801801c:	1ad3      	subs	r3, r2, r3
 801801e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8018020:	7bbb      	ldrb	r3, [r7, #14]
 8018022:	b29a      	uxth	r2, r3
 8018024:	89bb      	ldrh	r3, [r7, #12]
 8018026:	4413      	add	r3, r2
 8018028:	b29b      	uxth	r3, r3
 801802a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801802e:	4619      	mov	r1, r3
 8018030:	2036      	movs	r0, #54	; 0x36
 8018032:	f7fa fbdf 	bl	80127f4 <pbuf_alloc>
 8018036:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018038:	693b      	ldr	r3, [r7, #16]
 801803a:	2b00      	cmp	r3, #0
 801803c:	f000 80b7 	beq.w	80181ae <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8018040:	697b      	ldr	r3, [r7, #20]
 8018042:	685b      	ldr	r3, [r3, #4]
 8018044:	891a      	ldrh	r2, [r3, #8]
 8018046:	697b      	ldr	r3, [r7, #20]
 8018048:	891b      	ldrh	r3, [r3, #8]
 801804a:	1ad3      	subs	r3, r2, r3
 801804c:	b29a      	uxth	r2, r3
 801804e:	887b      	ldrh	r3, [r7, #2]
 8018050:	4413      	add	r3, r2
 8018052:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8018054:	697b      	ldr	r3, [r7, #20]
 8018056:	6858      	ldr	r0, [r3, #4]
 8018058:	693b      	ldr	r3, [r7, #16]
 801805a:	685a      	ldr	r2, [r3, #4]
 801805c:	7bbb      	ldrb	r3, [r7, #14]
 801805e:	18d1      	adds	r1, r2, r3
 8018060:	897b      	ldrh	r3, [r7, #10]
 8018062:	89ba      	ldrh	r2, [r7, #12]
 8018064:	f7fb f8a0 	bl	80131a8 <pbuf_copy_partial>
 8018068:	4603      	mov	r3, r0
 801806a:	461a      	mov	r2, r3
 801806c:	89bb      	ldrh	r3, [r7, #12]
 801806e:	4293      	cmp	r3, r2
 8018070:	f040 809f 	bne.w	80181b2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8018074:	697b      	ldr	r3, [r7, #20]
 8018076:	68db      	ldr	r3, [r3, #12]
 8018078:	899b      	ldrh	r3, [r3, #12]
 801807a:	b29b      	uxth	r3, r3
 801807c:	4618      	mov	r0, r3
 801807e:	f7f9 f9ef 	bl	8011460 <lwip_htons>
 8018082:	4603      	mov	r3, r0
 8018084:	b2db      	uxtb	r3, r3
 8018086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801808a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801808c:	2300      	movs	r3, #0
 801808e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8018090:	7efb      	ldrb	r3, [r7, #27]
 8018092:	f003 0308 	and.w	r3, r3, #8
 8018096:	2b00      	cmp	r3, #0
 8018098:	d007      	beq.n	80180aa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801809a:	7efb      	ldrb	r3, [r7, #27]
 801809c:	f023 0308 	bic.w	r3, r3, #8
 80180a0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80180a2:	7ebb      	ldrb	r3, [r7, #26]
 80180a4:	f043 0308 	orr.w	r3, r3, #8
 80180a8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80180aa:	7efb      	ldrb	r3, [r7, #27]
 80180ac:	f003 0301 	and.w	r3, r3, #1
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d007      	beq.n	80180c4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80180b4:	7efb      	ldrb	r3, [r7, #27]
 80180b6:	f023 0301 	bic.w	r3, r3, #1
 80180ba:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80180bc:	7ebb      	ldrb	r3, [r7, #26]
 80180be:	f043 0301 	orr.w	r3, r3, #1
 80180c2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80180c4:	697b      	ldr	r3, [r7, #20]
 80180c6:	68db      	ldr	r3, [r3, #12]
 80180c8:	685b      	ldr	r3, [r3, #4]
 80180ca:	4618      	mov	r0, r3
 80180cc:	f7f9 f9dd 	bl	801148a <lwip_htonl>
 80180d0:	4602      	mov	r2, r0
 80180d2:	887b      	ldrh	r3, [r7, #2]
 80180d4:	18d1      	adds	r1, r2, r3
 80180d6:	7eba      	ldrb	r2, [r7, #26]
 80180d8:	7bfb      	ldrb	r3, [r7, #15]
 80180da:	9300      	str	r3, [sp, #0]
 80180dc:	460b      	mov	r3, r1
 80180de:	6939      	ldr	r1, [r7, #16]
 80180e0:	6878      	ldr	r0, [r7, #4]
 80180e2:	f7ff fa4f 	bl	8017584 <tcp_create_segment>
 80180e6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80180e8:	69fb      	ldr	r3, [r7, #28]
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d063      	beq.n	80181b6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80180ee:	697b      	ldr	r3, [r7, #20]
 80180f0:	685b      	ldr	r3, [r3, #4]
 80180f2:	4618      	mov	r0, r3
 80180f4:	f7fa fef0 	bl	8012ed8 <pbuf_clen>
 80180f8:	4603      	mov	r3, r0
 80180fa:	461a      	mov	r2, r3
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018102:	1a9b      	subs	r3, r3, r2
 8018104:	b29a      	uxth	r2, r3
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801810c:	697b      	ldr	r3, [r7, #20]
 801810e:	6858      	ldr	r0, [r3, #4]
 8018110:	697b      	ldr	r3, [r7, #20]
 8018112:	685b      	ldr	r3, [r3, #4]
 8018114:	891a      	ldrh	r2, [r3, #8]
 8018116:	89bb      	ldrh	r3, [r7, #12]
 8018118:	1ad3      	subs	r3, r2, r3
 801811a:	b29b      	uxth	r3, r3
 801811c:	4619      	mov	r1, r3
 801811e:	f7fa fcc7 	bl	8012ab0 <pbuf_realloc>
  useg->len -= remainder;
 8018122:	697b      	ldr	r3, [r7, #20]
 8018124:	891a      	ldrh	r2, [r3, #8]
 8018126:	89bb      	ldrh	r3, [r7, #12]
 8018128:	1ad3      	subs	r3, r2, r3
 801812a:	b29a      	uxth	r2, r3
 801812c:	697b      	ldr	r3, [r7, #20]
 801812e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8018130:	697b      	ldr	r3, [r7, #20]
 8018132:	68db      	ldr	r3, [r3, #12]
 8018134:	899b      	ldrh	r3, [r3, #12]
 8018136:	b29c      	uxth	r4, r3
 8018138:	7efb      	ldrb	r3, [r7, #27]
 801813a:	b29b      	uxth	r3, r3
 801813c:	4618      	mov	r0, r3
 801813e:	f7f9 f98f 	bl	8011460 <lwip_htons>
 8018142:	4603      	mov	r3, r0
 8018144:	461a      	mov	r2, r3
 8018146:	697b      	ldr	r3, [r7, #20]
 8018148:	68db      	ldr	r3, [r3, #12]
 801814a:	4322      	orrs	r2, r4
 801814c:	b292      	uxth	r2, r2
 801814e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8018150:	697b      	ldr	r3, [r7, #20]
 8018152:	685b      	ldr	r3, [r3, #4]
 8018154:	4618      	mov	r0, r3
 8018156:	f7fa febf 	bl	8012ed8 <pbuf_clen>
 801815a:	4603      	mov	r3, r0
 801815c:	461a      	mov	r2, r3
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018164:	4413      	add	r3, r2
 8018166:	b29a      	uxth	r2, r3
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801816e:	69fb      	ldr	r3, [r7, #28]
 8018170:	685b      	ldr	r3, [r3, #4]
 8018172:	4618      	mov	r0, r3
 8018174:	f7fa feb0 	bl	8012ed8 <pbuf_clen>
 8018178:	4603      	mov	r3, r0
 801817a:	461a      	mov	r2, r3
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018182:	4413      	add	r3, r2
 8018184:	b29a      	uxth	r2, r3
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801818c:	697b      	ldr	r3, [r7, #20]
 801818e:	681a      	ldr	r2, [r3, #0]
 8018190:	69fb      	ldr	r3, [r7, #28]
 8018192:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8018194:	697b      	ldr	r3, [r7, #20]
 8018196:	69fa      	ldr	r2, [r7, #28]
 8018198:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801819a:	69fb      	ldr	r3, [r7, #28]
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d103      	bne.n	80181aa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	2200      	movs	r2, #0
 80181a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80181aa:	2300      	movs	r3, #0
 80181ac:	e016      	b.n	80181dc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80181ae:	bf00      	nop
 80181b0:	e002      	b.n	80181b8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80181b2:	bf00      	nop
 80181b4:	e000      	b.n	80181b8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80181b6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80181b8:	69fb      	ldr	r3, [r7, #28]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d006      	beq.n	80181cc <tcp_split_unsent_seg+0x25c>
 80181be:	4b09      	ldr	r3, [pc, #36]	; (80181e4 <tcp_split_unsent_seg+0x274>)
 80181c0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80181c4:	490d      	ldr	r1, [pc, #52]	; (80181fc <tcp_split_unsent_seg+0x28c>)
 80181c6:	4809      	ldr	r0, [pc, #36]	; (80181ec <tcp_split_unsent_seg+0x27c>)
 80181c8:	f004 fb58 	bl	801c87c <iprintf>
  if (p != NULL) {
 80181cc:	693b      	ldr	r3, [r7, #16]
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d002      	beq.n	80181d8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80181d2:	6938      	ldr	r0, [r7, #16]
 80181d4:	f7fa fdf2 	bl	8012dbc <pbuf_free>
  }

  return ERR_MEM;
 80181d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80181dc:	4618      	mov	r0, r3
 80181de:	3724      	adds	r7, #36	; 0x24
 80181e0:	46bd      	mov	sp, r7
 80181e2:	bd90      	pop	{r4, r7, pc}
 80181e4:	0801f940 	.word	0x0801f940
 80181e8:	0801fcd4 	.word	0x0801fcd4
 80181ec:	0801f994 	.word	0x0801f994
 80181f0:	0801fcf8 	.word	0x0801fcf8
 80181f4:	0801fd1c 	.word	0x0801fd1c
 80181f8:	0801fd2c 	.word	0x0801fd2c
 80181fc:	0801fd3c 	.word	0x0801fd3c

08018200 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8018200:	b590      	push	{r4, r7, lr}
 8018202:	b085      	sub	sp, #20
 8018204:	af00      	add	r7, sp, #0
 8018206:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d106      	bne.n	801821c <tcp_send_fin+0x1c>
 801820e:	4b21      	ldr	r3, [pc, #132]	; (8018294 <tcp_send_fin+0x94>)
 8018210:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8018214:	4920      	ldr	r1, [pc, #128]	; (8018298 <tcp_send_fin+0x98>)
 8018216:	4821      	ldr	r0, [pc, #132]	; (801829c <tcp_send_fin+0x9c>)
 8018218:	f004 fb30 	bl	801c87c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018220:	2b00      	cmp	r3, #0
 8018222:	d02e      	beq.n	8018282 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018228:	60fb      	str	r3, [r7, #12]
 801822a:	e002      	b.n	8018232 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018232:	68fb      	ldr	r3, [r7, #12]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	2b00      	cmp	r3, #0
 8018238:	d1f8      	bne.n	801822c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801823a:	68fb      	ldr	r3, [r7, #12]
 801823c:	68db      	ldr	r3, [r3, #12]
 801823e:	899b      	ldrh	r3, [r3, #12]
 8018240:	b29b      	uxth	r3, r3
 8018242:	4618      	mov	r0, r3
 8018244:	f7f9 f90c 	bl	8011460 <lwip_htons>
 8018248:	4603      	mov	r3, r0
 801824a:	b2db      	uxtb	r3, r3
 801824c:	f003 0307 	and.w	r3, r3, #7
 8018250:	2b00      	cmp	r3, #0
 8018252:	d116      	bne.n	8018282 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8018254:	68fb      	ldr	r3, [r7, #12]
 8018256:	68db      	ldr	r3, [r3, #12]
 8018258:	899b      	ldrh	r3, [r3, #12]
 801825a:	b29c      	uxth	r4, r3
 801825c:	2001      	movs	r0, #1
 801825e:	f7f9 f8ff 	bl	8011460 <lwip_htons>
 8018262:	4603      	mov	r3, r0
 8018264:	461a      	mov	r2, r3
 8018266:	68fb      	ldr	r3, [r7, #12]
 8018268:	68db      	ldr	r3, [r3, #12]
 801826a:	4322      	orrs	r2, r4
 801826c:	b292      	uxth	r2, r2
 801826e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	8b5b      	ldrh	r3, [r3, #26]
 8018274:	f043 0320 	orr.w	r3, r3, #32
 8018278:	b29a      	uxth	r2, r3
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801827e:	2300      	movs	r3, #0
 8018280:	e004      	b.n	801828c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8018282:	2101      	movs	r1, #1
 8018284:	6878      	ldr	r0, [r7, #4]
 8018286:	f000 f80b 	bl	80182a0 <tcp_enqueue_flags>
 801828a:	4603      	mov	r3, r0
}
 801828c:	4618      	mov	r0, r3
 801828e:	3714      	adds	r7, #20
 8018290:	46bd      	mov	sp, r7
 8018292:	bd90      	pop	{r4, r7, pc}
 8018294:	0801f940 	.word	0x0801f940
 8018298:	0801fd48 	.word	0x0801fd48
 801829c:	0801f994 	.word	0x0801f994

080182a0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80182a0:	b580      	push	{r7, lr}
 80182a2:	b08a      	sub	sp, #40	; 0x28
 80182a4:	af02      	add	r7, sp, #8
 80182a6:	6078      	str	r0, [r7, #4]
 80182a8:	460b      	mov	r3, r1
 80182aa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80182ac:	2300      	movs	r3, #0
 80182ae:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80182b0:	2300      	movs	r3, #0
 80182b2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80182b4:	78fb      	ldrb	r3, [r7, #3]
 80182b6:	f003 0303 	and.w	r3, r3, #3
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d106      	bne.n	80182cc <tcp_enqueue_flags+0x2c>
 80182be:	4b67      	ldr	r3, [pc, #412]	; (801845c <tcp_enqueue_flags+0x1bc>)
 80182c0:	f240 4211 	movw	r2, #1041	; 0x411
 80182c4:	4966      	ldr	r1, [pc, #408]	; (8018460 <tcp_enqueue_flags+0x1c0>)
 80182c6:	4867      	ldr	r0, [pc, #412]	; (8018464 <tcp_enqueue_flags+0x1c4>)
 80182c8:	f004 fad8 	bl	801c87c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d106      	bne.n	80182e0 <tcp_enqueue_flags+0x40>
 80182d2:	4b62      	ldr	r3, [pc, #392]	; (801845c <tcp_enqueue_flags+0x1bc>)
 80182d4:	f240 4213 	movw	r2, #1043	; 0x413
 80182d8:	4963      	ldr	r1, [pc, #396]	; (8018468 <tcp_enqueue_flags+0x1c8>)
 80182da:	4862      	ldr	r0, [pc, #392]	; (8018464 <tcp_enqueue_flags+0x1c4>)
 80182dc:	f004 face 	bl	801c87c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80182e0:	78fb      	ldrb	r3, [r7, #3]
 80182e2:	f003 0302 	and.w	r3, r3, #2
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d001      	beq.n	80182ee <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80182ea:	2301      	movs	r3, #1
 80182ec:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80182ee:	7ffb      	ldrb	r3, [r7, #31]
 80182f0:	009b      	lsls	r3, r3, #2
 80182f2:	b2db      	uxtb	r3, r3
 80182f4:	f003 0304 	and.w	r3, r3, #4
 80182f8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80182fa:	7dfb      	ldrb	r3, [r7, #23]
 80182fc:	b29b      	uxth	r3, r3
 80182fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018302:	4619      	mov	r1, r3
 8018304:	2036      	movs	r0, #54	; 0x36
 8018306:	f7fa fa75 	bl	80127f4 <pbuf_alloc>
 801830a:	6138      	str	r0, [r7, #16]
 801830c:	693b      	ldr	r3, [r7, #16]
 801830e:	2b00      	cmp	r3, #0
 8018310:	d109      	bne.n	8018326 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	8b5b      	ldrh	r3, [r3, #26]
 8018316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801831a:	b29a      	uxth	r2, r3
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018320:	f04f 33ff 	mov.w	r3, #4294967295
 8018324:	e095      	b.n	8018452 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8018326:	693b      	ldr	r3, [r7, #16]
 8018328:	895a      	ldrh	r2, [r3, #10]
 801832a:	7dfb      	ldrb	r3, [r7, #23]
 801832c:	b29b      	uxth	r3, r3
 801832e:	429a      	cmp	r2, r3
 8018330:	d206      	bcs.n	8018340 <tcp_enqueue_flags+0xa0>
 8018332:	4b4a      	ldr	r3, [pc, #296]	; (801845c <tcp_enqueue_flags+0x1bc>)
 8018334:	f240 4239 	movw	r2, #1081	; 0x439
 8018338:	494c      	ldr	r1, [pc, #304]	; (801846c <tcp_enqueue_flags+0x1cc>)
 801833a:	484a      	ldr	r0, [pc, #296]	; (8018464 <tcp_enqueue_flags+0x1c4>)
 801833c:	f004 fa9e 	bl	801c87c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8018344:	78fa      	ldrb	r2, [r7, #3]
 8018346:	7ffb      	ldrb	r3, [r7, #31]
 8018348:	9300      	str	r3, [sp, #0]
 801834a:	460b      	mov	r3, r1
 801834c:	6939      	ldr	r1, [r7, #16]
 801834e:	6878      	ldr	r0, [r7, #4]
 8018350:	f7ff f918 	bl	8017584 <tcp_create_segment>
 8018354:	60f8      	str	r0, [r7, #12]
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	2b00      	cmp	r3, #0
 801835a:	d109      	bne.n	8018370 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	8b5b      	ldrh	r3, [r3, #26]
 8018360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018364:	b29a      	uxth	r2, r3
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801836a:	f04f 33ff 	mov.w	r3, #4294967295
 801836e:	e070      	b.n	8018452 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	68db      	ldr	r3, [r3, #12]
 8018374:	f003 0303 	and.w	r3, r3, #3
 8018378:	2b00      	cmp	r3, #0
 801837a:	d006      	beq.n	801838a <tcp_enqueue_flags+0xea>
 801837c:	4b37      	ldr	r3, [pc, #220]	; (801845c <tcp_enqueue_flags+0x1bc>)
 801837e:	f240 4242 	movw	r2, #1090	; 0x442
 8018382:	493b      	ldr	r1, [pc, #236]	; (8018470 <tcp_enqueue_flags+0x1d0>)
 8018384:	4837      	ldr	r0, [pc, #220]	; (8018464 <tcp_enqueue_flags+0x1c4>)
 8018386:	f004 fa79 	bl	801c87c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801838a:	68fb      	ldr	r3, [r7, #12]
 801838c:	891b      	ldrh	r3, [r3, #8]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d006      	beq.n	80183a0 <tcp_enqueue_flags+0x100>
 8018392:	4b32      	ldr	r3, [pc, #200]	; (801845c <tcp_enqueue_flags+0x1bc>)
 8018394:	f240 4243 	movw	r2, #1091	; 0x443
 8018398:	4936      	ldr	r1, [pc, #216]	; (8018474 <tcp_enqueue_flags+0x1d4>)
 801839a:	4832      	ldr	r0, [pc, #200]	; (8018464 <tcp_enqueue_flags+0x1c4>)
 801839c:	f004 fa6e 	bl	801c87c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d103      	bne.n	80183b0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	68fa      	ldr	r2, [r7, #12]
 80183ac:	66da      	str	r2, [r3, #108]	; 0x6c
 80183ae:	e00d      	b.n	80183cc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80183b4:	61bb      	str	r3, [r7, #24]
 80183b6:	e002      	b.n	80183be <tcp_enqueue_flags+0x11e>
 80183b8:	69bb      	ldr	r3, [r7, #24]
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	61bb      	str	r3, [r7, #24]
 80183be:	69bb      	ldr	r3, [r7, #24]
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d1f8      	bne.n	80183b8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80183c6:	69bb      	ldr	r3, [r7, #24]
 80183c8:	68fa      	ldr	r2, [r7, #12]
 80183ca:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	2200      	movs	r2, #0
 80183d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80183d4:	78fb      	ldrb	r3, [r7, #3]
 80183d6:	f003 0302 	and.w	r3, r3, #2
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d104      	bne.n	80183e8 <tcp_enqueue_flags+0x148>
 80183de:	78fb      	ldrb	r3, [r7, #3]
 80183e0:	f003 0301 	and.w	r3, r3, #1
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d004      	beq.n	80183f2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80183ec:	1c5a      	adds	r2, r3, #1
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80183f2:	78fb      	ldrb	r3, [r7, #3]
 80183f4:	f003 0301 	and.w	r3, r3, #1
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d006      	beq.n	801840a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	8b5b      	ldrh	r3, [r3, #26]
 8018400:	f043 0320 	orr.w	r3, r3, #32
 8018404:	b29a      	uxth	r2, r3
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801840a:	68fb      	ldr	r3, [r7, #12]
 801840c:	685b      	ldr	r3, [r3, #4]
 801840e:	4618      	mov	r0, r3
 8018410:	f7fa fd62 	bl	8012ed8 <pbuf_clen>
 8018414:	4603      	mov	r3, r0
 8018416:	461a      	mov	r2, r3
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801841e:	4413      	add	r3, r2
 8018420:	b29a      	uxth	r2, r3
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801842e:	2b00      	cmp	r3, #0
 8018430:	d00e      	beq.n	8018450 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018436:	2b00      	cmp	r3, #0
 8018438:	d10a      	bne.n	8018450 <tcp_enqueue_flags+0x1b0>
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801843e:	2b00      	cmp	r3, #0
 8018440:	d106      	bne.n	8018450 <tcp_enqueue_flags+0x1b0>
 8018442:	4b06      	ldr	r3, [pc, #24]	; (801845c <tcp_enqueue_flags+0x1bc>)
 8018444:	f240 4265 	movw	r2, #1125	; 0x465
 8018448:	490b      	ldr	r1, [pc, #44]	; (8018478 <tcp_enqueue_flags+0x1d8>)
 801844a:	4806      	ldr	r0, [pc, #24]	; (8018464 <tcp_enqueue_flags+0x1c4>)
 801844c:	f004 fa16 	bl	801c87c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8018450:	2300      	movs	r3, #0
}
 8018452:	4618      	mov	r0, r3
 8018454:	3720      	adds	r7, #32
 8018456:	46bd      	mov	sp, r7
 8018458:	bd80      	pop	{r7, pc}
 801845a:	bf00      	nop
 801845c:	0801f940 	.word	0x0801f940
 8018460:	0801fd64 	.word	0x0801fd64
 8018464:	0801f994 	.word	0x0801f994
 8018468:	0801fdbc 	.word	0x0801fdbc
 801846c:	0801fddc 	.word	0x0801fddc
 8018470:	0801fe18 	.word	0x0801fe18
 8018474:	0801fe30 	.word	0x0801fe30
 8018478:	0801fe5c 	.word	0x0801fe5c

0801847c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801847c:	b5b0      	push	{r4, r5, r7, lr}
 801847e:	b08a      	sub	sp, #40	; 0x28
 8018480:	af00      	add	r7, sp, #0
 8018482:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	2b00      	cmp	r3, #0
 8018488:	d106      	bne.n	8018498 <tcp_output+0x1c>
 801848a:	4b8a      	ldr	r3, [pc, #552]	; (80186b4 <tcp_output+0x238>)
 801848c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8018490:	4989      	ldr	r1, [pc, #548]	; (80186b8 <tcp_output+0x23c>)
 8018492:	488a      	ldr	r0, [pc, #552]	; (80186bc <tcp_output+0x240>)
 8018494:	f004 f9f2 	bl	801c87c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	7d1b      	ldrb	r3, [r3, #20]
 801849c:	2b01      	cmp	r3, #1
 801849e:	d106      	bne.n	80184ae <tcp_output+0x32>
 80184a0:	4b84      	ldr	r3, [pc, #528]	; (80186b4 <tcp_output+0x238>)
 80184a2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80184a6:	4986      	ldr	r1, [pc, #536]	; (80186c0 <tcp_output+0x244>)
 80184a8:	4884      	ldr	r0, [pc, #528]	; (80186bc <tcp_output+0x240>)
 80184aa:	f004 f9e7 	bl	801c87c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80184ae:	4b85      	ldr	r3, [pc, #532]	; (80186c4 <tcp_output+0x248>)
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	687a      	ldr	r2, [r7, #4]
 80184b4:	429a      	cmp	r2, r3
 80184b6:	d101      	bne.n	80184bc <tcp_output+0x40>
    return ERR_OK;
 80184b8:	2300      	movs	r3, #0
 80184ba:	e1ce      	b.n	801885a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80184c8:	4293      	cmp	r3, r2
 80184ca:	bf28      	it	cs
 80184cc:	4613      	movcs	r3, r2
 80184ce:	b29b      	uxth	r3, r3
 80184d0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80184d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80184d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d10b      	bne.n	80184f6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	8b5b      	ldrh	r3, [r3, #26]
 80184e2:	f003 0302 	and.w	r3, r3, #2
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	f000 81aa 	beq.w	8018840 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80184ec:	6878      	ldr	r0, [r7, #4]
 80184ee:	f000 fdcb 	bl	8019088 <tcp_send_empty_ack>
 80184f2:	4603      	mov	r3, r0
 80184f4:	e1b1      	b.n	801885a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80184f6:	6879      	ldr	r1, [r7, #4]
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	3304      	adds	r3, #4
 80184fc:	461a      	mov	r2, r3
 80184fe:	6878      	ldr	r0, [r7, #4]
 8018500:	f7ff f824 	bl	801754c <tcp_route>
 8018504:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8018506:	697b      	ldr	r3, [r7, #20]
 8018508:	2b00      	cmp	r3, #0
 801850a:	d102      	bne.n	8018512 <tcp_output+0x96>
    return ERR_RTE;
 801850c:	f06f 0303 	mvn.w	r3, #3
 8018510:	e1a3      	b.n	801885a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	2b00      	cmp	r3, #0
 8018516:	d003      	beq.n	8018520 <tcp_output+0xa4>
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	2b00      	cmp	r3, #0
 801851e:	d111      	bne.n	8018544 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8018520:	697b      	ldr	r3, [r7, #20]
 8018522:	2b00      	cmp	r3, #0
 8018524:	d002      	beq.n	801852c <tcp_output+0xb0>
 8018526:	697b      	ldr	r3, [r7, #20]
 8018528:	3304      	adds	r3, #4
 801852a:	e000      	b.n	801852e <tcp_output+0xb2>
 801852c:	2300      	movs	r3, #0
 801852e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8018530:	693b      	ldr	r3, [r7, #16]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d102      	bne.n	801853c <tcp_output+0xc0>
      return ERR_RTE;
 8018536:	f06f 0303 	mvn.w	r3, #3
 801853a:	e18e      	b.n	801885a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801853c:	693b      	ldr	r3, [r7, #16]
 801853e:	681a      	ldr	r2, [r3, #0]
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8018544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018546:	68db      	ldr	r3, [r3, #12]
 8018548:	685b      	ldr	r3, [r3, #4]
 801854a:	4618      	mov	r0, r3
 801854c:	f7f8 ff9d 	bl	801148a <lwip_htonl>
 8018550:	4602      	mov	r2, r0
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018556:	1ad3      	subs	r3, r2, r3
 8018558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801855a:	8912      	ldrh	r2, [r2, #8]
 801855c:	4413      	add	r3, r2
 801855e:	69ba      	ldr	r2, [r7, #24]
 8018560:	429a      	cmp	r2, r3
 8018562:	d227      	bcs.n	80185b4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801856a:	461a      	mov	r2, r3
 801856c:	69bb      	ldr	r3, [r7, #24]
 801856e:	4293      	cmp	r3, r2
 8018570:	d114      	bne.n	801859c <tcp_output+0x120>
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018576:	2b00      	cmp	r3, #0
 8018578:	d110      	bne.n	801859c <tcp_output+0x120>
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018580:	2b00      	cmp	r3, #0
 8018582:	d10b      	bne.n	801859c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	2200      	movs	r2, #0
 8018588:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	2201      	movs	r2, #1
 8018590:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	2200      	movs	r2, #0
 8018598:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	8b5b      	ldrh	r3, [r3, #26]
 80185a0:	f003 0302 	and.w	r3, r3, #2
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	f000 814d 	beq.w	8018844 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80185aa:	6878      	ldr	r0, [r7, #4]
 80185ac:	f000 fd6c 	bl	8019088 <tcp_send_empty_ack>
 80185b0:	4603      	mov	r3, r0
 80185b2:	e152      	b.n	801885a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	2200      	movs	r2, #0
 80185b8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80185c0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80185c2:	6a3b      	ldr	r3, [r7, #32]
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	f000 811c 	beq.w	8018802 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80185ca:	e002      	b.n	80185d2 <tcp_output+0x156>
 80185cc:	6a3b      	ldr	r3, [r7, #32]
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	623b      	str	r3, [r7, #32]
 80185d2:	6a3b      	ldr	r3, [r7, #32]
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d1f8      	bne.n	80185cc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80185da:	e112      	b.n	8018802 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80185dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185de:	68db      	ldr	r3, [r3, #12]
 80185e0:	899b      	ldrh	r3, [r3, #12]
 80185e2:	b29b      	uxth	r3, r3
 80185e4:	4618      	mov	r0, r3
 80185e6:	f7f8 ff3b 	bl	8011460 <lwip_htons>
 80185ea:	4603      	mov	r3, r0
 80185ec:	b2db      	uxtb	r3, r3
 80185ee:	f003 0304 	and.w	r3, r3, #4
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d006      	beq.n	8018604 <tcp_output+0x188>
 80185f6:	4b2f      	ldr	r3, [pc, #188]	; (80186b4 <tcp_output+0x238>)
 80185f8:	f240 5236 	movw	r2, #1334	; 0x536
 80185fc:	4932      	ldr	r1, [pc, #200]	; (80186c8 <tcp_output+0x24c>)
 80185fe:	482f      	ldr	r0, [pc, #188]	; (80186bc <tcp_output+0x240>)
 8018600:	f004 f93c 	bl	801c87c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018608:	2b00      	cmp	r3, #0
 801860a:	d01f      	beq.n	801864c <tcp_output+0x1d0>
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	8b5b      	ldrh	r3, [r3, #26]
 8018610:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8018614:	2b00      	cmp	r3, #0
 8018616:	d119      	bne.n	801864c <tcp_output+0x1d0>
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801861c:	2b00      	cmp	r3, #0
 801861e:	d00b      	beq.n	8018638 <tcp_output+0x1bc>
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d110      	bne.n	801864c <tcp_output+0x1d0>
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801862e:	891a      	ldrh	r2, [r3, #8]
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018634:	429a      	cmp	r2, r3
 8018636:	d209      	bcs.n	801864c <tcp_output+0x1d0>
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801863e:	2b00      	cmp	r3, #0
 8018640:	d004      	beq.n	801864c <tcp_output+0x1d0>
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018648:	2b08      	cmp	r3, #8
 801864a:	d901      	bls.n	8018650 <tcp_output+0x1d4>
 801864c:	2301      	movs	r3, #1
 801864e:	e000      	b.n	8018652 <tcp_output+0x1d6>
 8018650:	2300      	movs	r3, #0
 8018652:	2b00      	cmp	r3, #0
 8018654:	d106      	bne.n	8018664 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	8b5b      	ldrh	r3, [r3, #26]
 801865a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801865e:	2b00      	cmp	r3, #0
 8018660:	f000 80e4 	beq.w	801882c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	7d1b      	ldrb	r3, [r3, #20]
 8018668:	2b02      	cmp	r3, #2
 801866a:	d00d      	beq.n	8018688 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801866e:	68db      	ldr	r3, [r3, #12]
 8018670:	899b      	ldrh	r3, [r3, #12]
 8018672:	b29c      	uxth	r4, r3
 8018674:	2010      	movs	r0, #16
 8018676:	f7f8 fef3 	bl	8011460 <lwip_htons>
 801867a:	4603      	mov	r3, r0
 801867c:	461a      	mov	r2, r3
 801867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018680:	68db      	ldr	r3, [r3, #12]
 8018682:	4322      	orrs	r2, r4
 8018684:	b292      	uxth	r2, r2
 8018686:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8018688:	697a      	ldr	r2, [r7, #20]
 801868a:	6879      	ldr	r1, [r7, #4]
 801868c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801868e:	f000 f909 	bl	80188a4 <tcp_output_segment>
 8018692:	4603      	mov	r3, r0
 8018694:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8018696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801869a:	2b00      	cmp	r3, #0
 801869c:	d016      	beq.n	80186cc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	8b5b      	ldrh	r3, [r3, #26]
 80186a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80186a6:	b29a      	uxth	r2, r3
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	835a      	strh	r2, [r3, #26]
      return err;
 80186ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80186b0:	e0d3      	b.n	801885a <tcp_output+0x3de>
 80186b2:	bf00      	nop
 80186b4:	0801f940 	.word	0x0801f940
 80186b8:	0801fe84 	.word	0x0801fe84
 80186bc:	0801f994 	.word	0x0801f994
 80186c0:	0801fe9c 	.word	0x0801fe9c
 80186c4:	200113f4 	.word	0x200113f4
 80186c8:	0801fec4 	.word	0x0801fec4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80186cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186ce:	681a      	ldr	r2, [r3, #0]
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	7d1b      	ldrb	r3, [r3, #20]
 80186d8:	2b02      	cmp	r3, #2
 80186da:	d006      	beq.n	80186ea <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	8b5b      	ldrh	r3, [r3, #26]
 80186e0:	f023 0303 	bic.w	r3, r3, #3
 80186e4:	b29a      	uxth	r2, r3
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80186ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186ec:	68db      	ldr	r3, [r3, #12]
 80186ee:	685b      	ldr	r3, [r3, #4]
 80186f0:	4618      	mov	r0, r3
 80186f2:	f7f8 feca 	bl	801148a <lwip_htonl>
 80186f6:	4604      	mov	r4, r0
 80186f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186fa:	891b      	ldrh	r3, [r3, #8]
 80186fc:	461d      	mov	r5, r3
 80186fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018700:	68db      	ldr	r3, [r3, #12]
 8018702:	899b      	ldrh	r3, [r3, #12]
 8018704:	b29b      	uxth	r3, r3
 8018706:	4618      	mov	r0, r3
 8018708:	f7f8 feaa 	bl	8011460 <lwip_htons>
 801870c:	4603      	mov	r3, r0
 801870e:	b2db      	uxtb	r3, r3
 8018710:	f003 0303 	and.w	r3, r3, #3
 8018714:	2b00      	cmp	r3, #0
 8018716:	d001      	beq.n	801871c <tcp_output+0x2a0>
 8018718:	2301      	movs	r3, #1
 801871a:	e000      	b.n	801871e <tcp_output+0x2a2>
 801871c:	2300      	movs	r3, #0
 801871e:	442b      	add	r3, r5
 8018720:	4423      	add	r3, r4
 8018722:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018728:	68bb      	ldr	r3, [r7, #8]
 801872a:	1ad3      	subs	r3, r2, r3
 801872c:	2b00      	cmp	r3, #0
 801872e:	da02      	bge.n	8018736 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	68ba      	ldr	r2, [r7, #8]
 8018734:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8018736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018738:	891b      	ldrh	r3, [r3, #8]
 801873a:	461c      	mov	r4, r3
 801873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801873e:	68db      	ldr	r3, [r3, #12]
 8018740:	899b      	ldrh	r3, [r3, #12]
 8018742:	b29b      	uxth	r3, r3
 8018744:	4618      	mov	r0, r3
 8018746:	f7f8 fe8b 	bl	8011460 <lwip_htons>
 801874a:	4603      	mov	r3, r0
 801874c:	b2db      	uxtb	r3, r3
 801874e:	f003 0303 	and.w	r3, r3, #3
 8018752:	2b00      	cmp	r3, #0
 8018754:	d001      	beq.n	801875a <tcp_output+0x2de>
 8018756:	2301      	movs	r3, #1
 8018758:	e000      	b.n	801875c <tcp_output+0x2e0>
 801875a:	2300      	movs	r3, #0
 801875c:	4423      	add	r3, r4
 801875e:	2b00      	cmp	r3, #0
 8018760:	d049      	beq.n	80187f6 <tcp_output+0x37a>
      seg->next = NULL;
 8018762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018764:	2200      	movs	r2, #0
 8018766:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801876c:	2b00      	cmp	r3, #0
 801876e:	d105      	bne.n	801877c <tcp_output+0x300>
        pcb->unacked = seg;
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018774:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8018776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018778:	623b      	str	r3, [r7, #32]
 801877a:	e03f      	b.n	80187fc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801877e:	68db      	ldr	r3, [r3, #12]
 8018780:	685b      	ldr	r3, [r3, #4]
 8018782:	4618      	mov	r0, r3
 8018784:	f7f8 fe81 	bl	801148a <lwip_htonl>
 8018788:	4604      	mov	r4, r0
 801878a:	6a3b      	ldr	r3, [r7, #32]
 801878c:	68db      	ldr	r3, [r3, #12]
 801878e:	685b      	ldr	r3, [r3, #4]
 8018790:	4618      	mov	r0, r3
 8018792:	f7f8 fe7a 	bl	801148a <lwip_htonl>
 8018796:	4603      	mov	r3, r0
 8018798:	1ae3      	subs	r3, r4, r3
 801879a:	2b00      	cmp	r3, #0
 801879c:	da24      	bge.n	80187e8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	3370      	adds	r3, #112	; 0x70
 80187a2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80187a4:	e002      	b.n	80187ac <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80187a6:	69fb      	ldr	r3, [r7, #28]
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80187ac:	69fb      	ldr	r3, [r7, #28]
 80187ae:	681b      	ldr	r3, [r3, #0]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d011      	beq.n	80187d8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80187b4:	69fb      	ldr	r3, [r7, #28]
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	68db      	ldr	r3, [r3, #12]
 80187ba:	685b      	ldr	r3, [r3, #4]
 80187bc:	4618      	mov	r0, r3
 80187be:	f7f8 fe64 	bl	801148a <lwip_htonl>
 80187c2:	4604      	mov	r4, r0
 80187c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187c6:	68db      	ldr	r3, [r3, #12]
 80187c8:	685b      	ldr	r3, [r3, #4]
 80187ca:	4618      	mov	r0, r3
 80187cc:	f7f8 fe5d 	bl	801148a <lwip_htonl>
 80187d0:	4603      	mov	r3, r0
 80187d2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	dbe6      	blt.n	80187a6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80187d8:	69fb      	ldr	r3, [r7, #28]
 80187da:	681a      	ldr	r2, [r3, #0]
 80187dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187de:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80187e0:	69fb      	ldr	r3, [r7, #28]
 80187e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187e4:	601a      	str	r2, [r3, #0]
 80187e6:	e009      	b.n	80187fc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80187e8:	6a3b      	ldr	r3, [r7, #32]
 80187ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187ec:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80187ee:	6a3b      	ldr	r3, [r7, #32]
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	623b      	str	r3, [r7, #32]
 80187f4:	e002      	b.n	80187fc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80187f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80187f8:	f7fb ff19 	bl	801462e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018800:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8018802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018804:	2b00      	cmp	r3, #0
 8018806:	d012      	beq.n	801882e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801880a:	68db      	ldr	r3, [r3, #12]
 801880c:	685b      	ldr	r3, [r3, #4]
 801880e:	4618      	mov	r0, r3
 8018810:	f7f8 fe3b 	bl	801148a <lwip_htonl>
 8018814:	4602      	mov	r2, r0
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801881a:	1ad3      	subs	r3, r2, r3
 801881c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801881e:	8912      	ldrh	r2, [r2, #8]
 8018820:	4413      	add	r3, r2
  while (seg != NULL &&
 8018822:	69ba      	ldr	r2, [r7, #24]
 8018824:	429a      	cmp	r2, r3
 8018826:	f4bf aed9 	bcs.w	80185dc <tcp_output+0x160>
 801882a:	e000      	b.n	801882e <tcp_output+0x3b2>
      break;
 801882c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018832:	2b00      	cmp	r3, #0
 8018834:	d108      	bne.n	8018848 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	2200      	movs	r2, #0
 801883a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801883e:	e004      	b.n	801884a <tcp_output+0x3ce>
    goto output_done;
 8018840:	bf00      	nop
 8018842:	e002      	b.n	801884a <tcp_output+0x3ce>
    goto output_done;
 8018844:	bf00      	nop
 8018846:	e000      	b.n	801884a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8018848:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	8b5b      	ldrh	r3, [r3, #26]
 801884e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018852:	b29a      	uxth	r2, r3
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8018858:	2300      	movs	r3, #0
}
 801885a:	4618      	mov	r0, r3
 801885c:	3728      	adds	r7, #40	; 0x28
 801885e:	46bd      	mov	sp, r7
 8018860:	bdb0      	pop	{r4, r5, r7, pc}
 8018862:	bf00      	nop

08018864 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8018864:	b580      	push	{r7, lr}
 8018866:	b082      	sub	sp, #8
 8018868:	af00      	add	r7, sp, #0
 801886a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	2b00      	cmp	r3, #0
 8018870:	d106      	bne.n	8018880 <tcp_output_segment_busy+0x1c>
 8018872:	4b09      	ldr	r3, [pc, #36]	; (8018898 <tcp_output_segment_busy+0x34>)
 8018874:	f240 529a 	movw	r2, #1434	; 0x59a
 8018878:	4908      	ldr	r1, [pc, #32]	; (801889c <tcp_output_segment_busy+0x38>)
 801887a:	4809      	ldr	r0, [pc, #36]	; (80188a0 <tcp_output_segment_busy+0x3c>)
 801887c:	f003 fffe 	bl	801c87c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	685b      	ldr	r3, [r3, #4]
 8018884:	7b9b      	ldrb	r3, [r3, #14]
 8018886:	2b01      	cmp	r3, #1
 8018888:	d001      	beq.n	801888e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801888a:	2301      	movs	r3, #1
 801888c:	e000      	b.n	8018890 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801888e:	2300      	movs	r3, #0
}
 8018890:	4618      	mov	r0, r3
 8018892:	3708      	adds	r7, #8
 8018894:	46bd      	mov	sp, r7
 8018896:	bd80      	pop	{r7, pc}
 8018898:	0801f940 	.word	0x0801f940
 801889c:	0801fedc 	.word	0x0801fedc
 80188a0:	0801f994 	.word	0x0801f994

080188a4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80188a4:	b5b0      	push	{r4, r5, r7, lr}
 80188a6:	b08c      	sub	sp, #48	; 0x30
 80188a8:	af04      	add	r7, sp, #16
 80188aa:	60f8      	str	r0, [r7, #12]
 80188ac:	60b9      	str	r1, [r7, #8]
 80188ae:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80188b0:	68fb      	ldr	r3, [r7, #12]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d106      	bne.n	80188c4 <tcp_output_segment+0x20>
 80188b6:	4b64      	ldr	r3, [pc, #400]	; (8018a48 <tcp_output_segment+0x1a4>)
 80188b8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80188bc:	4963      	ldr	r1, [pc, #396]	; (8018a4c <tcp_output_segment+0x1a8>)
 80188be:	4864      	ldr	r0, [pc, #400]	; (8018a50 <tcp_output_segment+0x1ac>)
 80188c0:	f003 ffdc 	bl	801c87c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80188c4:	68bb      	ldr	r3, [r7, #8]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d106      	bne.n	80188d8 <tcp_output_segment+0x34>
 80188ca:	4b5f      	ldr	r3, [pc, #380]	; (8018a48 <tcp_output_segment+0x1a4>)
 80188cc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80188d0:	4960      	ldr	r1, [pc, #384]	; (8018a54 <tcp_output_segment+0x1b0>)
 80188d2:	485f      	ldr	r0, [pc, #380]	; (8018a50 <tcp_output_segment+0x1ac>)
 80188d4:	f003 ffd2 	bl	801c87c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d106      	bne.n	80188ec <tcp_output_segment+0x48>
 80188de:	4b5a      	ldr	r3, [pc, #360]	; (8018a48 <tcp_output_segment+0x1a4>)
 80188e0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80188e4:	495c      	ldr	r1, [pc, #368]	; (8018a58 <tcp_output_segment+0x1b4>)
 80188e6:	485a      	ldr	r0, [pc, #360]	; (8018a50 <tcp_output_segment+0x1ac>)
 80188e8:	f003 ffc8 	bl	801c87c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80188ec:	68f8      	ldr	r0, [r7, #12]
 80188ee:	f7ff ffb9 	bl	8018864 <tcp_output_segment_busy>
 80188f2:	4603      	mov	r3, r0
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d001      	beq.n	80188fc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80188f8:	2300      	movs	r3, #0
 80188fa:	e0a1      	b.n	8018a40 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80188fc:	68bb      	ldr	r3, [r7, #8]
 80188fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	68dc      	ldr	r4, [r3, #12]
 8018904:	4610      	mov	r0, r2
 8018906:	f7f8 fdc0 	bl	801148a <lwip_htonl>
 801890a:	4603      	mov	r3, r0
 801890c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801890e:	68bb      	ldr	r3, [r7, #8]
 8018910:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	68dc      	ldr	r4, [r3, #12]
 8018916:	4610      	mov	r0, r2
 8018918:	f7f8 fda2 	bl	8011460 <lwip_htons>
 801891c:	4603      	mov	r3, r0
 801891e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018920:	68bb      	ldr	r3, [r7, #8]
 8018922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018924:	68ba      	ldr	r2, [r7, #8]
 8018926:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018928:	441a      	add	r2, r3
 801892a:	68bb      	ldr	r3, [r7, #8]
 801892c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801892e:	68fb      	ldr	r3, [r7, #12]
 8018930:	68db      	ldr	r3, [r3, #12]
 8018932:	3314      	adds	r3, #20
 8018934:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	7a9b      	ldrb	r3, [r3, #10]
 801893a:	f003 0301 	and.w	r3, r3, #1
 801893e:	2b00      	cmp	r3, #0
 8018940:	d015      	beq.n	801896e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8018942:	68bb      	ldr	r3, [r7, #8]
 8018944:	3304      	adds	r3, #4
 8018946:	461a      	mov	r2, r3
 8018948:	6879      	ldr	r1, [r7, #4]
 801894a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801894e:	f7fc fa33 	bl	8014db8 <tcp_eff_send_mss_netif>
 8018952:	4603      	mov	r3, r0
 8018954:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8018956:	8b7b      	ldrh	r3, [r7, #26]
 8018958:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801895c:	4618      	mov	r0, r3
 801895e:	f7f8 fd94 	bl	801148a <lwip_htonl>
 8018962:	4602      	mov	r2, r0
 8018964:	69fb      	ldr	r3, [r7, #28]
 8018966:	601a      	str	r2, [r3, #0]
    opts += 1;
 8018968:	69fb      	ldr	r3, [r7, #28]
 801896a:	3304      	adds	r3, #4
 801896c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801896e:	68bb      	ldr	r3, [r7, #8]
 8018970:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018974:	2b00      	cmp	r3, #0
 8018976:	da02      	bge.n	801897e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8018978:	68bb      	ldr	r3, [r7, #8]
 801897a:	2200      	movs	r2, #0
 801897c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801897e:	68bb      	ldr	r3, [r7, #8]
 8018980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018982:	2b00      	cmp	r3, #0
 8018984:	d10c      	bne.n	80189a0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8018986:	4b35      	ldr	r3, [pc, #212]	; (8018a5c <tcp_output_segment+0x1b8>)
 8018988:	681a      	ldr	r2, [r3, #0]
 801898a:	68bb      	ldr	r3, [r7, #8]
 801898c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	68db      	ldr	r3, [r3, #12]
 8018992:	685b      	ldr	r3, [r3, #4]
 8018994:	4618      	mov	r0, r3
 8018996:	f7f8 fd78 	bl	801148a <lwip_htonl>
 801899a:	4602      	mov	r2, r0
 801899c:	68bb      	ldr	r3, [r7, #8]
 801899e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	68da      	ldr	r2, [r3, #12]
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	685b      	ldr	r3, [r3, #4]
 80189a8:	685b      	ldr	r3, [r3, #4]
 80189aa:	1ad3      	subs	r3, r2, r3
 80189ac:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80189ae:	68fb      	ldr	r3, [r7, #12]
 80189b0:	685b      	ldr	r3, [r3, #4]
 80189b2:	8959      	ldrh	r1, [r3, #10]
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	685b      	ldr	r3, [r3, #4]
 80189b8:	8b3a      	ldrh	r2, [r7, #24]
 80189ba:	1a8a      	subs	r2, r1, r2
 80189bc:	b292      	uxth	r2, r2
 80189be:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80189c0:	68fb      	ldr	r3, [r7, #12]
 80189c2:	685b      	ldr	r3, [r3, #4]
 80189c4:	8919      	ldrh	r1, [r3, #8]
 80189c6:	68fb      	ldr	r3, [r7, #12]
 80189c8:	685b      	ldr	r3, [r3, #4]
 80189ca:	8b3a      	ldrh	r2, [r7, #24]
 80189cc:	1a8a      	subs	r2, r1, r2
 80189ce:	b292      	uxth	r2, r2
 80189d0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	685b      	ldr	r3, [r3, #4]
 80189d6:	68fa      	ldr	r2, [r7, #12]
 80189d8:	68d2      	ldr	r2, [r2, #12]
 80189da:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80189dc:	68fb      	ldr	r3, [r7, #12]
 80189de:	68db      	ldr	r3, [r3, #12]
 80189e0:	2200      	movs	r2, #0
 80189e2:	741a      	strb	r2, [r3, #16]
 80189e4:	2200      	movs	r2, #0
 80189e6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80189e8:	68fb      	ldr	r3, [r7, #12]
 80189ea:	68da      	ldr	r2, [r3, #12]
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	7a9b      	ldrb	r3, [r3, #10]
 80189f0:	f003 0301 	and.w	r3, r3, #1
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d001      	beq.n	80189fc <tcp_output_segment+0x158>
 80189f8:	2318      	movs	r3, #24
 80189fa:	e000      	b.n	80189fe <tcp_output_segment+0x15a>
 80189fc:	2314      	movs	r3, #20
 80189fe:	4413      	add	r3, r2
 8018a00:	69fa      	ldr	r2, [r7, #28]
 8018a02:	429a      	cmp	r2, r3
 8018a04:	d006      	beq.n	8018a14 <tcp_output_segment+0x170>
 8018a06:	4b10      	ldr	r3, [pc, #64]	; (8018a48 <tcp_output_segment+0x1a4>)
 8018a08:	f240 621c 	movw	r2, #1564	; 0x61c
 8018a0c:	4914      	ldr	r1, [pc, #80]	; (8018a60 <tcp_output_segment+0x1bc>)
 8018a0e:	4810      	ldr	r0, [pc, #64]	; (8018a50 <tcp_output_segment+0x1ac>)
 8018a10:	f003 ff34 	bl	801c87c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	6858      	ldr	r0, [r3, #4]
 8018a18:	68b9      	ldr	r1, [r7, #8]
 8018a1a:	68bb      	ldr	r3, [r7, #8]
 8018a1c:	1d1c      	adds	r4, r3, #4
 8018a1e:	68bb      	ldr	r3, [r7, #8]
 8018a20:	7add      	ldrb	r5, [r3, #11]
 8018a22:	68bb      	ldr	r3, [r7, #8]
 8018a24:	7a9b      	ldrb	r3, [r3, #10]
 8018a26:	687a      	ldr	r2, [r7, #4]
 8018a28:	9202      	str	r2, [sp, #8]
 8018a2a:	2206      	movs	r2, #6
 8018a2c:	9201      	str	r2, [sp, #4]
 8018a2e:	9300      	str	r3, [sp, #0]
 8018a30:	462b      	mov	r3, r5
 8018a32:	4622      	mov	r2, r4
 8018a34:	f002 fc3e 	bl	801b2b4 <ip4_output_if>
 8018a38:	4603      	mov	r3, r0
 8018a3a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8018a3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018a40:	4618      	mov	r0, r3
 8018a42:	3720      	adds	r7, #32
 8018a44:	46bd      	mov	sp, r7
 8018a46:	bdb0      	pop	{r4, r5, r7, pc}
 8018a48:	0801f940 	.word	0x0801f940
 8018a4c:	0801ff04 	.word	0x0801ff04
 8018a50:	0801f994 	.word	0x0801f994
 8018a54:	0801ff24 	.word	0x0801ff24
 8018a58:	0801ff44 	.word	0x0801ff44
 8018a5c:	200113a8 	.word	0x200113a8
 8018a60:	0801ff68 	.word	0x0801ff68

08018a64 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8018a64:	b5b0      	push	{r4, r5, r7, lr}
 8018a66:	b084      	sub	sp, #16
 8018a68:	af00      	add	r7, sp, #0
 8018a6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d106      	bne.n	8018a80 <tcp_rexmit_rto_prepare+0x1c>
 8018a72:	4b31      	ldr	r3, [pc, #196]	; (8018b38 <tcp_rexmit_rto_prepare+0xd4>)
 8018a74:	f240 6263 	movw	r2, #1635	; 0x663
 8018a78:	4930      	ldr	r1, [pc, #192]	; (8018b3c <tcp_rexmit_rto_prepare+0xd8>)
 8018a7a:	4831      	ldr	r0, [pc, #196]	; (8018b40 <tcp_rexmit_rto_prepare+0xdc>)
 8018a7c:	f003 fefe 	bl	801c87c <iprintf>

  if (pcb->unacked == NULL) {
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d102      	bne.n	8018a8e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8018a88:	f06f 0305 	mvn.w	r3, #5
 8018a8c:	e050      	b.n	8018b30 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a92:	60fb      	str	r3, [r7, #12]
 8018a94:	e00b      	b.n	8018aae <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8018a96:	68f8      	ldr	r0, [r7, #12]
 8018a98:	f7ff fee4 	bl	8018864 <tcp_output_segment_busy>
 8018a9c:	4603      	mov	r3, r0
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d002      	beq.n	8018aa8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8018aa2:	f06f 0305 	mvn.w	r3, #5
 8018aa6:	e043      	b.n	8018b30 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	681b      	ldr	r3, [r3, #0]
 8018aac:	60fb      	str	r3, [r7, #12]
 8018aae:	68fb      	ldr	r3, [r7, #12]
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d1ef      	bne.n	8018a96 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018ab6:	68f8      	ldr	r0, [r7, #12]
 8018ab8:	f7ff fed4 	bl	8018864 <tcp_output_segment_busy>
 8018abc:	4603      	mov	r3, r0
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d002      	beq.n	8018ac8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8018ac2:	f06f 0305 	mvn.w	r3, #5
 8018ac6:	e033      	b.n	8018b30 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018acc:	68fb      	ldr	r3, [r7, #12]
 8018ace:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	2200      	movs	r2, #0
 8018adc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	8b5b      	ldrh	r3, [r3, #26]
 8018ae2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018ae6:	b29a      	uxth	r2, r3
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	68db      	ldr	r3, [r3, #12]
 8018af0:	685b      	ldr	r3, [r3, #4]
 8018af2:	4618      	mov	r0, r3
 8018af4:	f7f8 fcc9 	bl	801148a <lwip_htonl>
 8018af8:	4604      	mov	r4, r0
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	891b      	ldrh	r3, [r3, #8]
 8018afe:	461d      	mov	r5, r3
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	68db      	ldr	r3, [r3, #12]
 8018b04:	899b      	ldrh	r3, [r3, #12]
 8018b06:	b29b      	uxth	r3, r3
 8018b08:	4618      	mov	r0, r3
 8018b0a:	f7f8 fca9 	bl	8011460 <lwip_htons>
 8018b0e:	4603      	mov	r3, r0
 8018b10:	b2db      	uxtb	r3, r3
 8018b12:	f003 0303 	and.w	r3, r3, #3
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d001      	beq.n	8018b1e <tcp_rexmit_rto_prepare+0xba>
 8018b1a:	2301      	movs	r3, #1
 8018b1c:	e000      	b.n	8018b20 <tcp_rexmit_rto_prepare+0xbc>
 8018b1e:	2300      	movs	r3, #0
 8018b20:	442b      	add	r3, r5
 8018b22:	18e2      	adds	r2, r4, r3
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	2200      	movs	r2, #0
 8018b2c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8018b2e:	2300      	movs	r3, #0
}
 8018b30:	4618      	mov	r0, r3
 8018b32:	3710      	adds	r7, #16
 8018b34:	46bd      	mov	sp, r7
 8018b36:	bdb0      	pop	{r4, r5, r7, pc}
 8018b38:	0801f940 	.word	0x0801f940
 8018b3c:	0801ff7c 	.word	0x0801ff7c
 8018b40:	0801f994 	.word	0x0801f994

08018b44 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018b44:	b580      	push	{r7, lr}
 8018b46:	b082      	sub	sp, #8
 8018b48:	af00      	add	r7, sp, #0
 8018b4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d106      	bne.n	8018b60 <tcp_rexmit_rto_commit+0x1c>
 8018b52:	4b0d      	ldr	r3, [pc, #52]	; (8018b88 <tcp_rexmit_rto_commit+0x44>)
 8018b54:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018b58:	490c      	ldr	r1, [pc, #48]	; (8018b8c <tcp_rexmit_rto_commit+0x48>)
 8018b5a:	480d      	ldr	r0, [pc, #52]	; (8018b90 <tcp_rexmit_rto_commit+0x4c>)
 8018b5c:	f003 fe8e 	bl	801c87c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018b66:	2bff      	cmp	r3, #255	; 0xff
 8018b68:	d007      	beq.n	8018b7a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018b70:	3301      	adds	r3, #1
 8018b72:	b2da      	uxtb	r2, r3
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8018b7a:	6878      	ldr	r0, [r7, #4]
 8018b7c:	f7ff fc7e 	bl	801847c <tcp_output>
}
 8018b80:	bf00      	nop
 8018b82:	3708      	adds	r7, #8
 8018b84:	46bd      	mov	sp, r7
 8018b86:	bd80      	pop	{r7, pc}
 8018b88:	0801f940 	.word	0x0801f940
 8018b8c:	0801ffa0 	.word	0x0801ffa0
 8018b90:	0801f994 	.word	0x0801f994

08018b94 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018b94:	b580      	push	{r7, lr}
 8018b96:	b082      	sub	sp, #8
 8018b98:	af00      	add	r7, sp, #0
 8018b9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d106      	bne.n	8018bb0 <tcp_rexmit_rto+0x1c>
 8018ba2:	4b0a      	ldr	r3, [pc, #40]	; (8018bcc <tcp_rexmit_rto+0x38>)
 8018ba4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8018ba8:	4909      	ldr	r1, [pc, #36]	; (8018bd0 <tcp_rexmit_rto+0x3c>)
 8018baa:	480a      	ldr	r0, [pc, #40]	; (8018bd4 <tcp_rexmit_rto+0x40>)
 8018bac:	f003 fe66 	bl	801c87c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8018bb0:	6878      	ldr	r0, [r7, #4]
 8018bb2:	f7ff ff57 	bl	8018a64 <tcp_rexmit_rto_prepare>
 8018bb6:	4603      	mov	r3, r0
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d102      	bne.n	8018bc2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018bbc:	6878      	ldr	r0, [r7, #4]
 8018bbe:	f7ff ffc1 	bl	8018b44 <tcp_rexmit_rto_commit>
  }
}
 8018bc2:	bf00      	nop
 8018bc4:	3708      	adds	r7, #8
 8018bc6:	46bd      	mov	sp, r7
 8018bc8:	bd80      	pop	{r7, pc}
 8018bca:	bf00      	nop
 8018bcc:	0801f940 	.word	0x0801f940
 8018bd0:	0801ffc4 	.word	0x0801ffc4
 8018bd4:	0801f994 	.word	0x0801f994

08018bd8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018bd8:	b590      	push	{r4, r7, lr}
 8018bda:	b085      	sub	sp, #20
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d106      	bne.n	8018bf4 <tcp_rexmit+0x1c>
 8018be6:	4b2f      	ldr	r3, [pc, #188]	; (8018ca4 <tcp_rexmit+0xcc>)
 8018be8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8018bec:	492e      	ldr	r1, [pc, #184]	; (8018ca8 <tcp_rexmit+0xd0>)
 8018bee:	482f      	ldr	r0, [pc, #188]	; (8018cac <tcp_rexmit+0xd4>)
 8018bf0:	f003 fe44 	bl	801c87c <iprintf>

  if (pcb->unacked == NULL) {
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	d102      	bne.n	8018c02 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018bfc:	f06f 0305 	mvn.w	r3, #5
 8018c00:	e04c      	b.n	8018c9c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c06:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018c08:	68b8      	ldr	r0, [r7, #8]
 8018c0a:	f7ff fe2b 	bl	8018864 <tcp_output_segment_busy>
 8018c0e:	4603      	mov	r3, r0
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d002      	beq.n	8018c1a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018c14:	f06f 0305 	mvn.w	r3, #5
 8018c18:	e040      	b.n	8018c9c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018c1a:	68bb      	ldr	r3, [r7, #8]
 8018c1c:	681a      	ldr	r2, [r3, #0]
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	336c      	adds	r3, #108	; 0x6c
 8018c26:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018c28:	e002      	b.n	8018c30 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018c2a:	68fb      	ldr	r3, [r7, #12]
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018c30:	68fb      	ldr	r3, [r7, #12]
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d011      	beq.n	8018c5c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018c38:	68fb      	ldr	r3, [r7, #12]
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	68db      	ldr	r3, [r3, #12]
 8018c3e:	685b      	ldr	r3, [r3, #4]
 8018c40:	4618      	mov	r0, r3
 8018c42:	f7f8 fc22 	bl	801148a <lwip_htonl>
 8018c46:	4604      	mov	r4, r0
 8018c48:	68bb      	ldr	r3, [r7, #8]
 8018c4a:	68db      	ldr	r3, [r3, #12]
 8018c4c:	685b      	ldr	r3, [r3, #4]
 8018c4e:	4618      	mov	r0, r3
 8018c50:	f7f8 fc1b 	bl	801148a <lwip_htonl>
 8018c54:	4603      	mov	r3, r0
 8018c56:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	dbe6      	blt.n	8018c2a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	681a      	ldr	r2, [r3, #0]
 8018c60:	68bb      	ldr	r3, [r7, #8]
 8018c62:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018c64:	68fb      	ldr	r3, [r7, #12]
 8018c66:	68ba      	ldr	r2, [r7, #8]
 8018c68:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018c6a:	68bb      	ldr	r3, [r7, #8]
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d103      	bne.n	8018c7a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	2200      	movs	r2, #0
 8018c76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018c80:	2bff      	cmp	r3, #255	; 0xff
 8018c82:	d007      	beq.n	8018c94 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018c8a:	3301      	adds	r3, #1
 8018c8c:	b2da      	uxtb	r2, r3
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	2200      	movs	r2, #0
 8018c98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018c9a:	2300      	movs	r3, #0
}
 8018c9c:	4618      	mov	r0, r3
 8018c9e:	3714      	adds	r7, #20
 8018ca0:	46bd      	mov	sp, r7
 8018ca2:	bd90      	pop	{r4, r7, pc}
 8018ca4:	0801f940 	.word	0x0801f940
 8018ca8:	0801ffe0 	.word	0x0801ffe0
 8018cac:	0801f994 	.word	0x0801f994

08018cb0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8018cb0:	b580      	push	{r7, lr}
 8018cb2:	b082      	sub	sp, #8
 8018cb4:	af00      	add	r7, sp, #0
 8018cb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d106      	bne.n	8018ccc <tcp_rexmit_fast+0x1c>
 8018cbe:	4b2a      	ldr	r3, [pc, #168]	; (8018d68 <tcp_rexmit_fast+0xb8>)
 8018cc0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8018cc4:	4929      	ldr	r1, [pc, #164]	; (8018d6c <tcp_rexmit_fast+0xbc>)
 8018cc6:	482a      	ldr	r0, [pc, #168]	; (8018d70 <tcp_rexmit_fast+0xc0>)
 8018cc8:	f003 fdd8 	bl	801c87c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d044      	beq.n	8018d5e <tcp_rexmit_fast+0xae>
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	8b5b      	ldrh	r3, [r3, #26]
 8018cd8:	f003 0304 	and.w	r3, r3, #4
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	d13e      	bne.n	8018d5e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8018ce0:	6878      	ldr	r0, [r7, #4]
 8018ce2:	f7ff ff79 	bl	8018bd8 <tcp_rexmit>
 8018ce6:	4603      	mov	r3, r0
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d138      	bne.n	8018d5e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018cf8:	4293      	cmp	r3, r2
 8018cfa:	bf28      	it	cs
 8018cfc:	4613      	movcs	r3, r2
 8018cfe:	b29b      	uxth	r3, r3
 8018d00:	0fda      	lsrs	r2, r3, #31
 8018d02:	4413      	add	r3, r2
 8018d04:	105b      	asrs	r3, r3, #1
 8018d06:	b29a      	uxth	r2, r3
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018d14:	461a      	mov	r2, r3
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018d1a:	005b      	lsls	r3, r3, #1
 8018d1c:	429a      	cmp	r2, r3
 8018d1e:	d206      	bcs.n	8018d2e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018d24:	005b      	lsls	r3, r3, #1
 8018d26:	b29a      	uxth	r2, r3
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018d38:	4619      	mov	r1, r3
 8018d3a:	0049      	lsls	r1, r1, #1
 8018d3c:	440b      	add	r3, r1
 8018d3e:	b29b      	uxth	r3, r3
 8018d40:	4413      	add	r3, r2
 8018d42:	b29a      	uxth	r2, r3
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	8b5b      	ldrh	r3, [r3, #26]
 8018d4e:	f043 0304 	orr.w	r3, r3, #4
 8018d52:	b29a      	uxth	r2, r3
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	2200      	movs	r2, #0
 8018d5c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8018d5e:	bf00      	nop
 8018d60:	3708      	adds	r7, #8
 8018d62:	46bd      	mov	sp, r7
 8018d64:	bd80      	pop	{r7, pc}
 8018d66:	bf00      	nop
 8018d68:	0801f940 	.word	0x0801f940
 8018d6c:	0801fff8 	.word	0x0801fff8
 8018d70:	0801f994 	.word	0x0801f994

08018d74 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8018d74:	b580      	push	{r7, lr}
 8018d76:	b086      	sub	sp, #24
 8018d78:	af00      	add	r7, sp, #0
 8018d7a:	60f8      	str	r0, [r7, #12]
 8018d7c:	607b      	str	r3, [r7, #4]
 8018d7e:	460b      	mov	r3, r1
 8018d80:	817b      	strh	r3, [r7, #10]
 8018d82:	4613      	mov	r3, r2
 8018d84:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018d86:	897a      	ldrh	r2, [r7, #10]
 8018d88:	893b      	ldrh	r3, [r7, #8]
 8018d8a:	4413      	add	r3, r2
 8018d8c:	b29b      	uxth	r3, r3
 8018d8e:	3314      	adds	r3, #20
 8018d90:	b29b      	uxth	r3, r3
 8018d92:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018d96:	4619      	mov	r1, r3
 8018d98:	2022      	movs	r0, #34	; 0x22
 8018d9a:	f7f9 fd2b 	bl	80127f4 <pbuf_alloc>
 8018d9e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018da0:	697b      	ldr	r3, [r7, #20]
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d04d      	beq.n	8018e42 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018da6:	897b      	ldrh	r3, [r7, #10]
 8018da8:	3313      	adds	r3, #19
 8018daa:	697a      	ldr	r2, [r7, #20]
 8018dac:	8952      	ldrh	r2, [r2, #10]
 8018dae:	4293      	cmp	r3, r2
 8018db0:	db06      	blt.n	8018dc0 <tcp_output_alloc_header_common+0x4c>
 8018db2:	4b26      	ldr	r3, [pc, #152]	; (8018e4c <tcp_output_alloc_header_common+0xd8>)
 8018db4:	f240 7223 	movw	r2, #1827	; 0x723
 8018db8:	4925      	ldr	r1, [pc, #148]	; (8018e50 <tcp_output_alloc_header_common+0xdc>)
 8018dba:	4826      	ldr	r0, [pc, #152]	; (8018e54 <tcp_output_alloc_header_common+0xe0>)
 8018dbc:	f003 fd5e 	bl	801c87c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018dc0:	697b      	ldr	r3, [r7, #20]
 8018dc2:	685b      	ldr	r3, [r3, #4]
 8018dc4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8018dc6:	8c3b      	ldrh	r3, [r7, #32]
 8018dc8:	4618      	mov	r0, r3
 8018dca:	f7f8 fb49 	bl	8011460 <lwip_htons>
 8018dce:	4603      	mov	r3, r0
 8018dd0:	461a      	mov	r2, r3
 8018dd2:	693b      	ldr	r3, [r7, #16]
 8018dd4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8018dd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dd8:	4618      	mov	r0, r3
 8018dda:	f7f8 fb41 	bl	8011460 <lwip_htons>
 8018dde:	4603      	mov	r3, r0
 8018de0:	461a      	mov	r2, r3
 8018de2:	693b      	ldr	r3, [r7, #16]
 8018de4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8018de6:	693b      	ldr	r3, [r7, #16]
 8018de8:	687a      	ldr	r2, [r7, #4]
 8018dea:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018dec:	68f8      	ldr	r0, [r7, #12]
 8018dee:	f7f8 fb4c 	bl	801148a <lwip_htonl>
 8018df2:	4602      	mov	r2, r0
 8018df4:	693b      	ldr	r3, [r7, #16]
 8018df6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018df8:	897b      	ldrh	r3, [r7, #10]
 8018dfa:	089b      	lsrs	r3, r3, #2
 8018dfc:	b29b      	uxth	r3, r3
 8018dfe:	3305      	adds	r3, #5
 8018e00:	b29b      	uxth	r3, r3
 8018e02:	031b      	lsls	r3, r3, #12
 8018e04:	b29a      	uxth	r2, r3
 8018e06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018e0a:	b29b      	uxth	r3, r3
 8018e0c:	4313      	orrs	r3, r2
 8018e0e:	b29b      	uxth	r3, r3
 8018e10:	4618      	mov	r0, r3
 8018e12:	f7f8 fb25 	bl	8011460 <lwip_htons>
 8018e16:	4603      	mov	r3, r0
 8018e18:	461a      	mov	r2, r3
 8018e1a:	693b      	ldr	r3, [r7, #16]
 8018e1c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8018e1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018e20:	4618      	mov	r0, r3
 8018e22:	f7f8 fb1d 	bl	8011460 <lwip_htons>
 8018e26:	4603      	mov	r3, r0
 8018e28:	461a      	mov	r2, r3
 8018e2a:	693b      	ldr	r3, [r7, #16]
 8018e2c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018e2e:	693b      	ldr	r3, [r7, #16]
 8018e30:	2200      	movs	r2, #0
 8018e32:	741a      	strb	r2, [r3, #16]
 8018e34:	2200      	movs	r2, #0
 8018e36:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018e38:	693b      	ldr	r3, [r7, #16]
 8018e3a:	2200      	movs	r2, #0
 8018e3c:	749a      	strb	r2, [r3, #18]
 8018e3e:	2200      	movs	r2, #0
 8018e40:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8018e42:	697b      	ldr	r3, [r7, #20]
}
 8018e44:	4618      	mov	r0, r3
 8018e46:	3718      	adds	r7, #24
 8018e48:	46bd      	mov	sp, r7
 8018e4a:	bd80      	pop	{r7, pc}
 8018e4c:	0801f940 	.word	0x0801f940
 8018e50:	08020018 	.word	0x08020018
 8018e54:	0801f994 	.word	0x0801f994

08018e58 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018e58:	b5b0      	push	{r4, r5, r7, lr}
 8018e5a:	b08a      	sub	sp, #40	; 0x28
 8018e5c:	af04      	add	r7, sp, #16
 8018e5e:	60f8      	str	r0, [r7, #12]
 8018e60:	607b      	str	r3, [r7, #4]
 8018e62:	460b      	mov	r3, r1
 8018e64:	817b      	strh	r3, [r7, #10]
 8018e66:	4613      	mov	r3, r2
 8018e68:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d106      	bne.n	8018e7e <tcp_output_alloc_header+0x26>
 8018e70:	4b15      	ldr	r3, [pc, #84]	; (8018ec8 <tcp_output_alloc_header+0x70>)
 8018e72:	f240 7242 	movw	r2, #1858	; 0x742
 8018e76:	4915      	ldr	r1, [pc, #84]	; (8018ecc <tcp_output_alloc_header+0x74>)
 8018e78:	4815      	ldr	r0, [pc, #84]	; (8018ed0 <tcp_output_alloc_header+0x78>)
 8018e7a:	f003 fcff 	bl	801c87c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018e7e:	68fb      	ldr	r3, [r7, #12]
 8018e80:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018e82:	68fb      	ldr	r3, [r7, #12]
 8018e84:	8adb      	ldrh	r3, [r3, #22]
 8018e86:	68fa      	ldr	r2, [r7, #12]
 8018e88:	8b12      	ldrh	r2, [r2, #24]
 8018e8a:	68f9      	ldr	r1, [r7, #12]
 8018e8c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8018e8e:	893d      	ldrh	r5, [r7, #8]
 8018e90:	897c      	ldrh	r4, [r7, #10]
 8018e92:	9103      	str	r1, [sp, #12]
 8018e94:	2110      	movs	r1, #16
 8018e96:	9102      	str	r1, [sp, #8]
 8018e98:	9201      	str	r2, [sp, #4]
 8018e9a:	9300      	str	r3, [sp, #0]
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	462a      	mov	r2, r5
 8018ea0:	4621      	mov	r1, r4
 8018ea2:	f7ff ff67 	bl	8018d74 <tcp_output_alloc_header_common>
 8018ea6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018ea8:	697b      	ldr	r3, [r7, #20]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d006      	beq.n	8018ebc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018eb2:	68fa      	ldr	r2, [r7, #12]
 8018eb4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018eb6:	441a      	add	r2, r3
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8018ebc:	697b      	ldr	r3, [r7, #20]
}
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	3718      	adds	r7, #24
 8018ec2:	46bd      	mov	sp, r7
 8018ec4:	bdb0      	pop	{r4, r5, r7, pc}
 8018ec6:	bf00      	nop
 8018ec8:	0801f940 	.word	0x0801f940
 8018ecc:	08020048 	.word	0x08020048
 8018ed0:	0801f994 	.word	0x0801f994

08018ed4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8018ed4:	b580      	push	{r7, lr}
 8018ed6:	b088      	sub	sp, #32
 8018ed8:	af00      	add	r7, sp, #0
 8018eda:	60f8      	str	r0, [r7, #12]
 8018edc:	60b9      	str	r1, [r7, #8]
 8018ede:	4611      	mov	r1, r2
 8018ee0:	461a      	mov	r2, r3
 8018ee2:	460b      	mov	r3, r1
 8018ee4:	71fb      	strb	r3, [r7, #7]
 8018ee6:	4613      	mov	r3, r2
 8018ee8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018eea:	2300      	movs	r3, #0
 8018eec:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8018eee:	68bb      	ldr	r3, [r7, #8]
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d106      	bne.n	8018f02 <tcp_output_fill_options+0x2e>
 8018ef4:	4b12      	ldr	r3, [pc, #72]	; (8018f40 <tcp_output_fill_options+0x6c>)
 8018ef6:	f240 7256 	movw	r2, #1878	; 0x756
 8018efa:	4912      	ldr	r1, [pc, #72]	; (8018f44 <tcp_output_fill_options+0x70>)
 8018efc:	4812      	ldr	r0, [pc, #72]	; (8018f48 <tcp_output_fill_options+0x74>)
 8018efe:	f003 fcbd 	bl	801c87c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8018f02:	68bb      	ldr	r3, [r7, #8]
 8018f04:	685b      	ldr	r3, [r3, #4]
 8018f06:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018f08:	69bb      	ldr	r3, [r7, #24]
 8018f0a:	3314      	adds	r3, #20
 8018f0c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8018f0e:	8bfb      	ldrh	r3, [r7, #30]
 8018f10:	009b      	lsls	r3, r3, #2
 8018f12:	461a      	mov	r2, r3
 8018f14:	79fb      	ldrb	r3, [r7, #7]
 8018f16:	009b      	lsls	r3, r3, #2
 8018f18:	f003 0304 	and.w	r3, r3, #4
 8018f1c:	4413      	add	r3, r2
 8018f1e:	3314      	adds	r3, #20
 8018f20:	69ba      	ldr	r2, [r7, #24]
 8018f22:	4413      	add	r3, r2
 8018f24:	697a      	ldr	r2, [r7, #20]
 8018f26:	429a      	cmp	r2, r3
 8018f28:	d006      	beq.n	8018f38 <tcp_output_fill_options+0x64>
 8018f2a:	4b05      	ldr	r3, [pc, #20]	; (8018f40 <tcp_output_fill_options+0x6c>)
 8018f2c:	f240 7275 	movw	r2, #1909	; 0x775
 8018f30:	4906      	ldr	r1, [pc, #24]	; (8018f4c <tcp_output_fill_options+0x78>)
 8018f32:	4805      	ldr	r0, [pc, #20]	; (8018f48 <tcp_output_fill_options+0x74>)
 8018f34:	f003 fca2 	bl	801c87c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018f38:	bf00      	nop
 8018f3a:	3720      	adds	r7, #32
 8018f3c:	46bd      	mov	sp, r7
 8018f3e:	bd80      	pop	{r7, pc}
 8018f40:	0801f940 	.word	0x0801f940
 8018f44:	08020070 	.word	0x08020070
 8018f48:	0801f994 	.word	0x0801f994
 8018f4c:	0801ff68 	.word	0x0801ff68

08018f50 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8018f50:	b580      	push	{r7, lr}
 8018f52:	b08a      	sub	sp, #40	; 0x28
 8018f54:	af04      	add	r7, sp, #16
 8018f56:	60f8      	str	r0, [r7, #12]
 8018f58:	60b9      	str	r1, [r7, #8]
 8018f5a:	607a      	str	r2, [r7, #4]
 8018f5c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8018f5e:	68bb      	ldr	r3, [r7, #8]
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d106      	bne.n	8018f72 <tcp_output_control_segment+0x22>
 8018f64:	4b1c      	ldr	r3, [pc, #112]	; (8018fd8 <tcp_output_control_segment+0x88>)
 8018f66:	f240 7287 	movw	r2, #1927	; 0x787
 8018f6a:	491c      	ldr	r1, [pc, #112]	; (8018fdc <tcp_output_control_segment+0x8c>)
 8018f6c:	481c      	ldr	r0, [pc, #112]	; (8018fe0 <tcp_output_control_segment+0x90>)
 8018f6e:	f003 fc85 	bl	801c87c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8018f72:	683a      	ldr	r2, [r7, #0]
 8018f74:	6879      	ldr	r1, [r7, #4]
 8018f76:	68f8      	ldr	r0, [r7, #12]
 8018f78:	f7fe fae8 	bl	801754c <tcp_route>
 8018f7c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8018f7e:	693b      	ldr	r3, [r7, #16]
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d102      	bne.n	8018f8a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8018f84:	23fc      	movs	r3, #252	; 0xfc
 8018f86:	75fb      	strb	r3, [r7, #23]
 8018f88:	e01c      	b.n	8018fc4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d006      	beq.n	8018f9e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	7adb      	ldrb	r3, [r3, #11]
 8018f94:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	7a9b      	ldrb	r3, [r3, #10]
 8018f9a:	757b      	strb	r3, [r7, #21]
 8018f9c:	e003      	b.n	8018fa6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8018f9e:	23ff      	movs	r3, #255	; 0xff
 8018fa0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8018fa2:	2300      	movs	r3, #0
 8018fa4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8018fa6:	7dba      	ldrb	r2, [r7, #22]
 8018fa8:	693b      	ldr	r3, [r7, #16]
 8018faa:	9302      	str	r3, [sp, #8]
 8018fac:	2306      	movs	r3, #6
 8018fae:	9301      	str	r3, [sp, #4]
 8018fb0:	7d7b      	ldrb	r3, [r7, #21]
 8018fb2:	9300      	str	r3, [sp, #0]
 8018fb4:	4613      	mov	r3, r2
 8018fb6:	683a      	ldr	r2, [r7, #0]
 8018fb8:	6879      	ldr	r1, [r7, #4]
 8018fba:	68b8      	ldr	r0, [r7, #8]
 8018fbc:	f002 f97a 	bl	801b2b4 <ip4_output_if>
 8018fc0:	4603      	mov	r3, r0
 8018fc2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8018fc4:	68b8      	ldr	r0, [r7, #8]
 8018fc6:	f7f9 fef9 	bl	8012dbc <pbuf_free>
  return err;
 8018fca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018fce:	4618      	mov	r0, r3
 8018fd0:	3718      	adds	r7, #24
 8018fd2:	46bd      	mov	sp, r7
 8018fd4:	bd80      	pop	{r7, pc}
 8018fd6:	bf00      	nop
 8018fd8:	0801f940 	.word	0x0801f940
 8018fdc:	08020098 	.word	0x08020098
 8018fe0:	0801f994 	.word	0x0801f994

08018fe4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8018fe4:	b590      	push	{r4, r7, lr}
 8018fe6:	b08b      	sub	sp, #44	; 0x2c
 8018fe8:	af04      	add	r7, sp, #16
 8018fea:	60f8      	str	r0, [r7, #12]
 8018fec:	60b9      	str	r1, [r7, #8]
 8018fee:	607a      	str	r2, [r7, #4]
 8018ff0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8018ff2:	683b      	ldr	r3, [r7, #0]
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d106      	bne.n	8019006 <tcp_rst+0x22>
 8018ff8:	4b1f      	ldr	r3, [pc, #124]	; (8019078 <tcp_rst+0x94>)
 8018ffa:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8018ffe:	491f      	ldr	r1, [pc, #124]	; (801907c <tcp_rst+0x98>)
 8019000:	481f      	ldr	r0, [pc, #124]	; (8019080 <tcp_rst+0x9c>)
 8019002:	f003 fc3b 	bl	801c87c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8019006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019008:	2b00      	cmp	r3, #0
 801900a:	d106      	bne.n	801901a <tcp_rst+0x36>
 801900c:	4b1a      	ldr	r3, [pc, #104]	; (8019078 <tcp_rst+0x94>)
 801900e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8019012:	491c      	ldr	r1, [pc, #112]	; (8019084 <tcp_rst+0xa0>)
 8019014:	481a      	ldr	r0, [pc, #104]	; (8019080 <tcp_rst+0x9c>)
 8019016:	f003 fc31 	bl	801c87c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801901a:	2300      	movs	r3, #0
 801901c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801901e:	f246 0308 	movw	r3, #24584	; 0x6008
 8019022:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8019024:	7dfb      	ldrb	r3, [r7, #23]
 8019026:	b29c      	uxth	r4, r3
 8019028:	68b8      	ldr	r0, [r7, #8]
 801902a:	f7f8 fa2e 	bl	801148a <lwip_htonl>
 801902e:	4602      	mov	r2, r0
 8019030:	8abb      	ldrh	r3, [r7, #20]
 8019032:	9303      	str	r3, [sp, #12]
 8019034:	2314      	movs	r3, #20
 8019036:	9302      	str	r3, [sp, #8]
 8019038:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801903a:	9301      	str	r3, [sp, #4]
 801903c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801903e:	9300      	str	r3, [sp, #0]
 8019040:	4613      	mov	r3, r2
 8019042:	2200      	movs	r2, #0
 8019044:	4621      	mov	r1, r4
 8019046:	6878      	ldr	r0, [r7, #4]
 8019048:	f7ff fe94 	bl	8018d74 <tcp_output_alloc_header_common>
 801904c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801904e:	693b      	ldr	r3, [r7, #16]
 8019050:	2b00      	cmp	r3, #0
 8019052:	d00c      	beq.n	801906e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019054:	7dfb      	ldrb	r3, [r7, #23]
 8019056:	2200      	movs	r2, #0
 8019058:	6939      	ldr	r1, [r7, #16]
 801905a:	68f8      	ldr	r0, [r7, #12]
 801905c:	f7ff ff3a 	bl	8018ed4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8019060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019062:	683a      	ldr	r2, [r7, #0]
 8019064:	6939      	ldr	r1, [r7, #16]
 8019066:	68f8      	ldr	r0, [r7, #12]
 8019068:	f7ff ff72 	bl	8018f50 <tcp_output_control_segment>
 801906c:	e000      	b.n	8019070 <tcp_rst+0x8c>
    return;
 801906e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8019070:	371c      	adds	r7, #28
 8019072:	46bd      	mov	sp, r7
 8019074:	bd90      	pop	{r4, r7, pc}
 8019076:	bf00      	nop
 8019078:	0801f940 	.word	0x0801f940
 801907c:	080200c4 	.word	0x080200c4
 8019080:	0801f994 	.word	0x0801f994
 8019084:	080200e0 	.word	0x080200e0

08019088 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8019088:	b590      	push	{r4, r7, lr}
 801908a:	b087      	sub	sp, #28
 801908c:	af00      	add	r7, sp, #0
 801908e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8019090:	2300      	movs	r3, #0
 8019092:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8019094:	2300      	movs	r3, #0
 8019096:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	2b00      	cmp	r3, #0
 801909c:	d106      	bne.n	80190ac <tcp_send_empty_ack+0x24>
 801909e:	4b28      	ldr	r3, [pc, #160]	; (8019140 <tcp_send_empty_ack+0xb8>)
 80190a0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80190a4:	4927      	ldr	r1, [pc, #156]	; (8019144 <tcp_send_empty_ack+0xbc>)
 80190a6:	4828      	ldr	r0, [pc, #160]	; (8019148 <tcp_send_empty_ack+0xc0>)
 80190a8:	f003 fbe8 	bl	801c87c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80190ac:	7dfb      	ldrb	r3, [r7, #23]
 80190ae:	009b      	lsls	r3, r3, #2
 80190b0:	b2db      	uxtb	r3, r3
 80190b2:	f003 0304 	and.w	r3, r3, #4
 80190b6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80190b8:	7d7b      	ldrb	r3, [r7, #21]
 80190ba:	b29c      	uxth	r4, r3
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80190c0:	4618      	mov	r0, r3
 80190c2:	f7f8 f9e2 	bl	801148a <lwip_htonl>
 80190c6:	4603      	mov	r3, r0
 80190c8:	2200      	movs	r2, #0
 80190ca:	4621      	mov	r1, r4
 80190cc:	6878      	ldr	r0, [r7, #4]
 80190ce:	f7ff fec3 	bl	8018e58 <tcp_output_alloc_header>
 80190d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80190d4:	693b      	ldr	r3, [r7, #16]
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d109      	bne.n	80190ee <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	8b5b      	ldrh	r3, [r3, #26]
 80190de:	f043 0303 	orr.w	r3, r3, #3
 80190e2:	b29a      	uxth	r2, r3
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80190e8:	f06f 0301 	mvn.w	r3, #1
 80190ec:	e023      	b.n	8019136 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80190ee:	7dbb      	ldrb	r3, [r7, #22]
 80190f0:	7dfa      	ldrb	r2, [r7, #23]
 80190f2:	6939      	ldr	r1, [r7, #16]
 80190f4:	6878      	ldr	r0, [r7, #4]
 80190f6:	f7ff feed 	bl	8018ed4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80190fa:	687a      	ldr	r2, [r7, #4]
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	3304      	adds	r3, #4
 8019100:	6939      	ldr	r1, [r7, #16]
 8019102:	6878      	ldr	r0, [r7, #4]
 8019104:	f7ff ff24 	bl	8018f50 <tcp_output_control_segment>
 8019108:	4603      	mov	r3, r0
 801910a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801910c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019110:	2b00      	cmp	r3, #0
 8019112:	d007      	beq.n	8019124 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	8b5b      	ldrh	r3, [r3, #26]
 8019118:	f043 0303 	orr.w	r3, r3, #3
 801911c:	b29a      	uxth	r2, r3
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	835a      	strh	r2, [r3, #26]
 8019122:	e006      	b.n	8019132 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	8b5b      	ldrh	r3, [r3, #26]
 8019128:	f023 0303 	bic.w	r3, r3, #3
 801912c:	b29a      	uxth	r2, r3
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8019132:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019136:	4618      	mov	r0, r3
 8019138:	371c      	adds	r7, #28
 801913a:	46bd      	mov	sp, r7
 801913c:	bd90      	pop	{r4, r7, pc}
 801913e:	bf00      	nop
 8019140:	0801f940 	.word	0x0801f940
 8019144:	080200fc 	.word	0x080200fc
 8019148:	0801f994 	.word	0x0801f994

0801914c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801914c:	b590      	push	{r4, r7, lr}
 801914e:	b087      	sub	sp, #28
 8019150:	af00      	add	r7, sp, #0
 8019152:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019154:	2300      	movs	r3, #0
 8019156:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	2b00      	cmp	r3, #0
 801915c:	d106      	bne.n	801916c <tcp_keepalive+0x20>
 801915e:	4b18      	ldr	r3, [pc, #96]	; (80191c0 <tcp_keepalive+0x74>)
 8019160:	f640 0224 	movw	r2, #2084	; 0x824
 8019164:	4917      	ldr	r1, [pc, #92]	; (80191c4 <tcp_keepalive+0x78>)
 8019166:	4818      	ldr	r0, [pc, #96]	; (80191c8 <tcp_keepalive+0x7c>)
 8019168:	f003 fb88 	bl	801c87c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801916c:	7dfb      	ldrb	r3, [r7, #23]
 801916e:	b29c      	uxth	r4, r3
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019174:	3b01      	subs	r3, #1
 8019176:	4618      	mov	r0, r3
 8019178:	f7f8 f987 	bl	801148a <lwip_htonl>
 801917c:	4603      	mov	r3, r0
 801917e:	2200      	movs	r2, #0
 8019180:	4621      	mov	r1, r4
 8019182:	6878      	ldr	r0, [r7, #4]
 8019184:	f7ff fe68 	bl	8018e58 <tcp_output_alloc_header>
 8019188:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801918a:	693b      	ldr	r3, [r7, #16]
 801918c:	2b00      	cmp	r3, #0
 801918e:	d102      	bne.n	8019196 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8019190:	f04f 33ff 	mov.w	r3, #4294967295
 8019194:	e010      	b.n	80191b8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019196:	7dfb      	ldrb	r3, [r7, #23]
 8019198:	2200      	movs	r2, #0
 801919a:	6939      	ldr	r1, [r7, #16]
 801919c:	6878      	ldr	r0, [r7, #4]
 801919e:	f7ff fe99 	bl	8018ed4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80191a2:	687a      	ldr	r2, [r7, #4]
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	3304      	adds	r3, #4
 80191a8:	6939      	ldr	r1, [r7, #16]
 80191aa:	6878      	ldr	r0, [r7, #4]
 80191ac:	f7ff fed0 	bl	8018f50 <tcp_output_control_segment>
 80191b0:	4603      	mov	r3, r0
 80191b2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80191b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80191b8:	4618      	mov	r0, r3
 80191ba:	371c      	adds	r7, #28
 80191bc:	46bd      	mov	sp, r7
 80191be:	bd90      	pop	{r4, r7, pc}
 80191c0:	0801f940 	.word	0x0801f940
 80191c4:	0802011c 	.word	0x0802011c
 80191c8:	0801f994 	.word	0x0801f994

080191cc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80191cc:	b590      	push	{r4, r7, lr}
 80191ce:	b08b      	sub	sp, #44	; 0x2c
 80191d0:	af00      	add	r7, sp, #0
 80191d2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80191d4:	2300      	movs	r3, #0
 80191d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d106      	bne.n	80191ee <tcp_zero_window_probe+0x22>
 80191e0:	4b4c      	ldr	r3, [pc, #304]	; (8019314 <tcp_zero_window_probe+0x148>)
 80191e2:	f640 024f 	movw	r2, #2127	; 0x84f
 80191e6:	494c      	ldr	r1, [pc, #304]	; (8019318 <tcp_zero_window_probe+0x14c>)
 80191e8:	484c      	ldr	r0, [pc, #304]	; (801931c <tcp_zero_window_probe+0x150>)
 80191ea:	f003 fb47 	bl	801c87c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80191f2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80191f4:	6a3b      	ldr	r3, [r7, #32]
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d101      	bne.n	80191fe <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80191fa:	2300      	movs	r3, #0
 80191fc:	e086      	b.n	801930c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8019204:	2bff      	cmp	r3, #255	; 0xff
 8019206:	d007      	beq.n	8019218 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801920e:	3301      	adds	r3, #1
 8019210:	b2da      	uxtb	r2, r3
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8019218:	6a3b      	ldr	r3, [r7, #32]
 801921a:	68db      	ldr	r3, [r3, #12]
 801921c:	899b      	ldrh	r3, [r3, #12]
 801921e:	b29b      	uxth	r3, r3
 8019220:	4618      	mov	r0, r3
 8019222:	f7f8 f91d 	bl	8011460 <lwip_htons>
 8019226:	4603      	mov	r3, r0
 8019228:	b2db      	uxtb	r3, r3
 801922a:	f003 0301 	and.w	r3, r3, #1
 801922e:	2b00      	cmp	r3, #0
 8019230:	d005      	beq.n	801923e <tcp_zero_window_probe+0x72>
 8019232:	6a3b      	ldr	r3, [r7, #32]
 8019234:	891b      	ldrh	r3, [r3, #8]
 8019236:	2b00      	cmp	r3, #0
 8019238:	d101      	bne.n	801923e <tcp_zero_window_probe+0x72>
 801923a:	2301      	movs	r3, #1
 801923c:	e000      	b.n	8019240 <tcp_zero_window_probe+0x74>
 801923e:	2300      	movs	r3, #0
 8019240:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8019242:	7ffb      	ldrb	r3, [r7, #31]
 8019244:	2b00      	cmp	r3, #0
 8019246:	bf0c      	ite	eq
 8019248:	2301      	moveq	r3, #1
 801924a:	2300      	movne	r3, #0
 801924c:	b2db      	uxtb	r3, r3
 801924e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8019250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019254:	b299      	uxth	r1, r3
 8019256:	6a3b      	ldr	r3, [r7, #32]
 8019258:	68db      	ldr	r3, [r3, #12]
 801925a:	685b      	ldr	r3, [r3, #4]
 801925c:	8bba      	ldrh	r2, [r7, #28]
 801925e:	6878      	ldr	r0, [r7, #4]
 8019260:	f7ff fdfa 	bl	8018e58 <tcp_output_alloc_header>
 8019264:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8019266:	69bb      	ldr	r3, [r7, #24]
 8019268:	2b00      	cmp	r3, #0
 801926a:	d102      	bne.n	8019272 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801926c:	f04f 33ff 	mov.w	r3, #4294967295
 8019270:	e04c      	b.n	801930c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8019272:	69bb      	ldr	r3, [r7, #24]
 8019274:	685b      	ldr	r3, [r3, #4]
 8019276:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8019278:	7ffb      	ldrb	r3, [r7, #31]
 801927a:	2b00      	cmp	r3, #0
 801927c:	d011      	beq.n	80192a2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801927e:	697b      	ldr	r3, [r7, #20]
 8019280:	899b      	ldrh	r3, [r3, #12]
 8019282:	b29b      	uxth	r3, r3
 8019284:	b21b      	sxth	r3, r3
 8019286:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801928a:	b21c      	sxth	r4, r3
 801928c:	2011      	movs	r0, #17
 801928e:	f7f8 f8e7 	bl	8011460 <lwip_htons>
 8019292:	4603      	mov	r3, r0
 8019294:	b21b      	sxth	r3, r3
 8019296:	4323      	orrs	r3, r4
 8019298:	b21b      	sxth	r3, r3
 801929a:	b29a      	uxth	r2, r3
 801929c:	697b      	ldr	r3, [r7, #20]
 801929e:	819a      	strh	r2, [r3, #12]
 80192a0:	e010      	b.n	80192c4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80192a2:	69bb      	ldr	r3, [r7, #24]
 80192a4:	685b      	ldr	r3, [r3, #4]
 80192a6:	3314      	adds	r3, #20
 80192a8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80192aa:	6a3b      	ldr	r3, [r7, #32]
 80192ac:	6858      	ldr	r0, [r3, #4]
 80192ae:	6a3b      	ldr	r3, [r7, #32]
 80192b0:	685b      	ldr	r3, [r3, #4]
 80192b2:	891a      	ldrh	r2, [r3, #8]
 80192b4:	6a3b      	ldr	r3, [r7, #32]
 80192b6:	891b      	ldrh	r3, [r3, #8]
 80192b8:	1ad3      	subs	r3, r2, r3
 80192ba:	b29b      	uxth	r3, r3
 80192bc:	2201      	movs	r2, #1
 80192be:	6939      	ldr	r1, [r7, #16]
 80192c0:	f7f9 ff72 	bl	80131a8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80192c4:	6a3b      	ldr	r3, [r7, #32]
 80192c6:	68db      	ldr	r3, [r3, #12]
 80192c8:	685b      	ldr	r3, [r3, #4]
 80192ca:	4618      	mov	r0, r3
 80192cc:	f7f8 f8dd 	bl	801148a <lwip_htonl>
 80192d0:	4603      	mov	r3, r0
 80192d2:	3301      	adds	r3, #1
 80192d4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80192da:	68fb      	ldr	r3, [r7, #12]
 80192dc:	1ad3      	subs	r3, r2, r3
 80192de:	2b00      	cmp	r3, #0
 80192e0:	da02      	bge.n	80192e8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	68fa      	ldr	r2, [r7, #12]
 80192e6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80192e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80192ec:	2200      	movs	r2, #0
 80192ee:	69b9      	ldr	r1, [r7, #24]
 80192f0:	6878      	ldr	r0, [r7, #4]
 80192f2:	f7ff fdef 	bl	8018ed4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80192f6:	687a      	ldr	r2, [r7, #4]
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	3304      	adds	r3, #4
 80192fc:	69b9      	ldr	r1, [r7, #24]
 80192fe:	6878      	ldr	r0, [r7, #4]
 8019300:	f7ff fe26 	bl	8018f50 <tcp_output_control_segment>
 8019304:	4603      	mov	r3, r0
 8019306:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019308:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801930c:	4618      	mov	r0, r3
 801930e:	372c      	adds	r7, #44	; 0x2c
 8019310:	46bd      	mov	sp, r7
 8019312:	bd90      	pop	{r4, r7, pc}
 8019314:	0801f940 	.word	0x0801f940
 8019318:	08020138 	.word	0x08020138
 801931c:	0801f994 	.word	0x0801f994

08019320 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019320:	b580      	push	{r7, lr}
 8019322:	b082      	sub	sp, #8
 8019324:	af00      	add	r7, sp, #0
 8019326:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8019328:	f7fa f82c 	bl	8013384 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801932c:	4b0a      	ldr	r3, [pc, #40]	; (8019358 <tcpip_tcp_timer+0x38>)
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	2b00      	cmp	r3, #0
 8019332:	d103      	bne.n	801933c <tcpip_tcp_timer+0x1c>
 8019334:	4b09      	ldr	r3, [pc, #36]	; (801935c <tcpip_tcp_timer+0x3c>)
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	2b00      	cmp	r3, #0
 801933a:	d005      	beq.n	8019348 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801933c:	2200      	movs	r2, #0
 801933e:	4908      	ldr	r1, [pc, #32]	; (8019360 <tcpip_tcp_timer+0x40>)
 8019340:	20fa      	movs	r0, #250	; 0xfa
 8019342:	f000 f8f3 	bl	801952c <sys_timeout>
 8019346:	e003      	b.n	8019350 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8019348:	4b06      	ldr	r3, [pc, #24]	; (8019364 <tcpip_tcp_timer+0x44>)
 801934a:	2200      	movs	r2, #0
 801934c:	601a      	str	r2, [r3, #0]
  }
}
 801934e:	bf00      	nop
 8019350:	bf00      	nop
 8019352:	3708      	adds	r7, #8
 8019354:	46bd      	mov	sp, r7
 8019356:	bd80      	pop	{r7, pc}
 8019358:	200113b4 	.word	0x200113b4
 801935c:	200113b8 	.word	0x200113b8
 8019360:	08019321 	.word	0x08019321
 8019364:	20011400 	.word	0x20011400

08019368 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8019368:	b580      	push	{r7, lr}
 801936a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801936c:	4b0a      	ldr	r3, [pc, #40]	; (8019398 <tcp_timer_needed+0x30>)
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	2b00      	cmp	r3, #0
 8019372:	d10f      	bne.n	8019394 <tcp_timer_needed+0x2c>
 8019374:	4b09      	ldr	r3, [pc, #36]	; (801939c <tcp_timer_needed+0x34>)
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	2b00      	cmp	r3, #0
 801937a:	d103      	bne.n	8019384 <tcp_timer_needed+0x1c>
 801937c:	4b08      	ldr	r3, [pc, #32]	; (80193a0 <tcp_timer_needed+0x38>)
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	2b00      	cmp	r3, #0
 8019382:	d007      	beq.n	8019394 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8019384:	4b04      	ldr	r3, [pc, #16]	; (8019398 <tcp_timer_needed+0x30>)
 8019386:	2201      	movs	r2, #1
 8019388:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801938a:	2200      	movs	r2, #0
 801938c:	4905      	ldr	r1, [pc, #20]	; (80193a4 <tcp_timer_needed+0x3c>)
 801938e:	20fa      	movs	r0, #250	; 0xfa
 8019390:	f000 f8cc 	bl	801952c <sys_timeout>
  }
}
 8019394:	bf00      	nop
 8019396:	bd80      	pop	{r7, pc}
 8019398:	20011400 	.word	0x20011400
 801939c:	200113b4 	.word	0x200113b4
 80193a0:	200113b8 	.word	0x200113b8
 80193a4:	08019321 	.word	0x08019321

080193a8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b086      	sub	sp, #24
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	60f8      	str	r0, [r7, #12]
 80193b0:	60b9      	str	r1, [r7, #8]
 80193b2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80193b4:	200a      	movs	r0, #10
 80193b6:	f7f8 fde7 	bl	8011f88 <memp_malloc>
 80193ba:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80193bc:	693b      	ldr	r3, [r7, #16]
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d109      	bne.n	80193d6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80193c2:	693b      	ldr	r3, [r7, #16]
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d151      	bne.n	801946c <sys_timeout_abs+0xc4>
 80193c8:	4b2a      	ldr	r3, [pc, #168]	; (8019474 <sys_timeout_abs+0xcc>)
 80193ca:	22be      	movs	r2, #190	; 0xbe
 80193cc:	492a      	ldr	r1, [pc, #168]	; (8019478 <sys_timeout_abs+0xd0>)
 80193ce:	482b      	ldr	r0, [pc, #172]	; (801947c <sys_timeout_abs+0xd4>)
 80193d0:	f003 fa54 	bl	801c87c <iprintf>
    return;
 80193d4:	e04a      	b.n	801946c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80193d6:	693b      	ldr	r3, [r7, #16]
 80193d8:	2200      	movs	r2, #0
 80193da:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80193dc:	693b      	ldr	r3, [r7, #16]
 80193de:	68ba      	ldr	r2, [r7, #8]
 80193e0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80193e2:	693b      	ldr	r3, [r7, #16]
 80193e4:	687a      	ldr	r2, [r7, #4]
 80193e6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80193e8:	693b      	ldr	r3, [r7, #16]
 80193ea:	68fa      	ldr	r2, [r7, #12]
 80193ec:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80193ee:	4b24      	ldr	r3, [pc, #144]	; (8019480 <sys_timeout_abs+0xd8>)
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d103      	bne.n	80193fe <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80193f6:	4a22      	ldr	r2, [pc, #136]	; (8019480 <sys_timeout_abs+0xd8>)
 80193f8:	693b      	ldr	r3, [r7, #16]
 80193fa:	6013      	str	r3, [r2, #0]
    return;
 80193fc:	e037      	b.n	801946e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80193fe:	693b      	ldr	r3, [r7, #16]
 8019400:	685a      	ldr	r2, [r3, #4]
 8019402:	4b1f      	ldr	r3, [pc, #124]	; (8019480 <sys_timeout_abs+0xd8>)
 8019404:	681b      	ldr	r3, [r3, #0]
 8019406:	685b      	ldr	r3, [r3, #4]
 8019408:	1ad3      	subs	r3, r2, r3
 801940a:	0fdb      	lsrs	r3, r3, #31
 801940c:	f003 0301 	and.w	r3, r3, #1
 8019410:	b2db      	uxtb	r3, r3
 8019412:	2b00      	cmp	r3, #0
 8019414:	d007      	beq.n	8019426 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8019416:	4b1a      	ldr	r3, [pc, #104]	; (8019480 <sys_timeout_abs+0xd8>)
 8019418:	681a      	ldr	r2, [r3, #0]
 801941a:	693b      	ldr	r3, [r7, #16]
 801941c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801941e:	4a18      	ldr	r2, [pc, #96]	; (8019480 <sys_timeout_abs+0xd8>)
 8019420:	693b      	ldr	r3, [r7, #16]
 8019422:	6013      	str	r3, [r2, #0]
 8019424:	e023      	b.n	801946e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8019426:	4b16      	ldr	r3, [pc, #88]	; (8019480 <sys_timeout_abs+0xd8>)
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	617b      	str	r3, [r7, #20]
 801942c:	e01a      	b.n	8019464 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801942e:	697b      	ldr	r3, [r7, #20]
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	2b00      	cmp	r3, #0
 8019434:	d00b      	beq.n	801944e <sys_timeout_abs+0xa6>
 8019436:	693b      	ldr	r3, [r7, #16]
 8019438:	685a      	ldr	r2, [r3, #4]
 801943a:	697b      	ldr	r3, [r7, #20]
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	685b      	ldr	r3, [r3, #4]
 8019440:	1ad3      	subs	r3, r2, r3
 8019442:	0fdb      	lsrs	r3, r3, #31
 8019444:	f003 0301 	and.w	r3, r3, #1
 8019448:	b2db      	uxtb	r3, r3
 801944a:	2b00      	cmp	r3, #0
 801944c:	d007      	beq.n	801945e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801944e:	697b      	ldr	r3, [r7, #20]
 8019450:	681a      	ldr	r2, [r3, #0]
 8019452:	693b      	ldr	r3, [r7, #16]
 8019454:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8019456:	697b      	ldr	r3, [r7, #20]
 8019458:	693a      	ldr	r2, [r7, #16]
 801945a:	601a      	str	r2, [r3, #0]
        break;
 801945c:	e007      	b.n	801946e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801945e:	697b      	ldr	r3, [r7, #20]
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	617b      	str	r3, [r7, #20]
 8019464:	697b      	ldr	r3, [r7, #20]
 8019466:	2b00      	cmp	r3, #0
 8019468:	d1e1      	bne.n	801942e <sys_timeout_abs+0x86>
 801946a:	e000      	b.n	801946e <sys_timeout_abs+0xc6>
    return;
 801946c:	bf00      	nop
      }
    }
  }
}
 801946e:	3718      	adds	r7, #24
 8019470:	46bd      	mov	sp, r7
 8019472:	bd80      	pop	{r7, pc}
 8019474:	0802015c 	.word	0x0802015c
 8019478:	08020190 	.word	0x08020190
 801947c:	080201d0 	.word	0x080201d0
 8019480:	200113f8 	.word	0x200113f8

08019484 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8019484:	b580      	push	{r7, lr}
 8019486:	b086      	sub	sp, #24
 8019488:	af00      	add	r7, sp, #0
 801948a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8019490:	697b      	ldr	r3, [r7, #20]
 8019492:	685b      	ldr	r3, [r3, #4]
 8019494:	4798      	blx	r3

  now = sys_now();
 8019496:	f7e7 fc41 	bl	8000d1c <sys_now>
 801949a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801949c:	697b      	ldr	r3, [r7, #20]
 801949e:	681a      	ldr	r2, [r3, #0]
 80194a0:	4b0f      	ldr	r3, [pc, #60]	; (80194e0 <lwip_cyclic_timer+0x5c>)
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	4413      	add	r3, r2
 80194a6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80194a8:	68fa      	ldr	r2, [r7, #12]
 80194aa:	693b      	ldr	r3, [r7, #16]
 80194ac:	1ad3      	subs	r3, r2, r3
 80194ae:	0fdb      	lsrs	r3, r3, #31
 80194b0:	f003 0301 	and.w	r3, r3, #1
 80194b4:	b2db      	uxtb	r3, r3
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d009      	beq.n	80194ce <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80194ba:	697b      	ldr	r3, [r7, #20]
 80194bc:	681a      	ldr	r2, [r3, #0]
 80194be:	693b      	ldr	r3, [r7, #16]
 80194c0:	4413      	add	r3, r2
 80194c2:	687a      	ldr	r2, [r7, #4]
 80194c4:	4907      	ldr	r1, [pc, #28]	; (80194e4 <lwip_cyclic_timer+0x60>)
 80194c6:	4618      	mov	r0, r3
 80194c8:	f7ff ff6e 	bl	80193a8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80194cc:	e004      	b.n	80194d8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80194ce:	687a      	ldr	r2, [r7, #4]
 80194d0:	4904      	ldr	r1, [pc, #16]	; (80194e4 <lwip_cyclic_timer+0x60>)
 80194d2:	68f8      	ldr	r0, [r7, #12]
 80194d4:	f7ff ff68 	bl	80193a8 <sys_timeout_abs>
}
 80194d8:	bf00      	nop
 80194da:	3718      	adds	r7, #24
 80194dc:	46bd      	mov	sp, r7
 80194de:	bd80      	pop	{r7, pc}
 80194e0:	200113fc 	.word	0x200113fc
 80194e4:	08019485 	.word	0x08019485

080194e8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80194e8:	b580      	push	{r7, lr}
 80194ea:	b082      	sub	sp, #8
 80194ec:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80194ee:	2301      	movs	r3, #1
 80194f0:	607b      	str	r3, [r7, #4]
 80194f2:	e00e      	b.n	8019512 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80194f4:	4a0b      	ldr	r2, [pc, #44]	; (8019524 <sys_timeouts_init+0x3c>)
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	00db      	lsls	r3, r3, #3
 8019500:	4a08      	ldr	r2, [pc, #32]	; (8019524 <sys_timeouts_init+0x3c>)
 8019502:	4413      	add	r3, r2
 8019504:	461a      	mov	r2, r3
 8019506:	4908      	ldr	r1, [pc, #32]	; (8019528 <sys_timeouts_init+0x40>)
 8019508:	f000 f810 	bl	801952c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	3301      	adds	r3, #1
 8019510:	607b      	str	r3, [r7, #4]
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	2b02      	cmp	r3, #2
 8019516:	d9ed      	bls.n	80194f4 <sys_timeouts_init+0xc>
  }
}
 8019518:	bf00      	nop
 801951a:	bf00      	nop
 801951c:	3708      	adds	r7, #8
 801951e:	46bd      	mov	sp, r7
 8019520:	bd80      	pop	{r7, pc}
 8019522:	bf00      	nop
 8019524:	08020dfc 	.word	0x08020dfc
 8019528:	08019485 	.word	0x08019485

0801952c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801952c:	b580      	push	{r7, lr}
 801952e:	b086      	sub	sp, #24
 8019530:	af00      	add	r7, sp, #0
 8019532:	60f8      	str	r0, [r7, #12]
 8019534:	60b9      	str	r1, [r7, #8]
 8019536:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8019538:	68fb      	ldr	r3, [r7, #12]
 801953a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801953e:	d306      	bcc.n	801954e <sys_timeout+0x22>
 8019540:	4b0a      	ldr	r3, [pc, #40]	; (801956c <sys_timeout+0x40>)
 8019542:	f240 1229 	movw	r2, #297	; 0x129
 8019546:	490a      	ldr	r1, [pc, #40]	; (8019570 <sys_timeout+0x44>)
 8019548:	480a      	ldr	r0, [pc, #40]	; (8019574 <sys_timeout+0x48>)
 801954a:	f003 f997 	bl	801c87c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801954e:	f7e7 fbe5 	bl	8000d1c <sys_now>
 8019552:	4602      	mov	r2, r0
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	4413      	add	r3, r2
 8019558:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801955a:	687a      	ldr	r2, [r7, #4]
 801955c:	68b9      	ldr	r1, [r7, #8]
 801955e:	6978      	ldr	r0, [r7, #20]
 8019560:	f7ff ff22 	bl	80193a8 <sys_timeout_abs>
#endif
}
 8019564:	bf00      	nop
 8019566:	3718      	adds	r7, #24
 8019568:	46bd      	mov	sp, r7
 801956a:	bd80      	pop	{r7, pc}
 801956c:	0802015c 	.word	0x0802015c
 8019570:	080201f8 	.word	0x080201f8
 8019574:	080201d0 	.word	0x080201d0

08019578 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8019578:	b580      	push	{r7, lr}
 801957a:	b084      	sub	sp, #16
 801957c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801957e:	f7e7 fbcd 	bl	8000d1c <sys_now>
 8019582:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8019584:	4b17      	ldr	r3, [pc, #92]	; (80195e4 <sys_check_timeouts+0x6c>)
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801958a:	68bb      	ldr	r3, [r7, #8]
 801958c:	2b00      	cmp	r3, #0
 801958e:	d022      	beq.n	80195d6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8019590:	68bb      	ldr	r3, [r7, #8]
 8019592:	685b      	ldr	r3, [r3, #4]
 8019594:	68fa      	ldr	r2, [r7, #12]
 8019596:	1ad3      	subs	r3, r2, r3
 8019598:	0fdb      	lsrs	r3, r3, #31
 801959a:	f003 0301 	and.w	r3, r3, #1
 801959e:	b2db      	uxtb	r3, r3
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d11a      	bne.n	80195da <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80195a4:	68bb      	ldr	r3, [r7, #8]
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	4a0e      	ldr	r2, [pc, #56]	; (80195e4 <sys_check_timeouts+0x6c>)
 80195aa:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80195ac:	68bb      	ldr	r3, [r7, #8]
 80195ae:	689b      	ldr	r3, [r3, #8]
 80195b0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80195b2:	68bb      	ldr	r3, [r7, #8]
 80195b4:	68db      	ldr	r3, [r3, #12]
 80195b6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80195b8:	68bb      	ldr	r3, [r7, #8]
 80195ba:	685b      	ldr	r3, [r3, #4]
 80195bc:	4a0a      	ldr	r2, [pc, #40]	; (80195e8 <sys_check_timeouts+0x70>)
 80195be:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80195c0:	68b9      	ldr	r1, [r7, #8]
 80195c2:	200a      	movs	r0, #10
 80195c4:	f7f8 fd56 	bl	8012074 <memp_free>
    if (handler != NULL) {
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d0da      	beq.n	8019584 <sys_check_timeouts+0xc>
      handler(arg);
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	6838      	ldr	r0, [r7, #0]
 80195d2:	4798      	blx	r3
  do {
 80195d4:	e7d6      	b.n	8019584 <sys_check_timeouts+0xc>
      return;
 80195d6:	bf00      	nop
 80195d8:	e000      	b.n	80195dc <sys_check_timeouts+0x64>
      return;
 80195da:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80195dc:	3710      	adds	r7, #16
 80195de:	46bd      	mov	sp, r7
 80195e0:	bd80      	pop	{r7, pc}
 80195e2:	bf00      	nop
 80195e4:	200113f8 	.word	0x200113f8
 80195e8:	200113fc 	.word	0x200113fc

080195ec <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80195ec:	b580      	push	{r7, lr}
 80195ee:	b082      	sub	sp, #8
 80195f0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80195f2:	4b16      	ldr	r3, [pc, #88]	; (801964c <sys_timeouts_sleeptime+0x60>)
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d102      	bne.n	8019600 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80195fa:	f04f 33ff 	mov.w	r3, #4294967295
 80195fe:	e020      	b.n	8019642 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019600:	f7e7 fb8c 	bl	8000d1c <sys_now>
 8019604:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8019606:	4b11      	ldr	r3, [pc, #68]	; (801964c <sys_timeouts_sleeptime+0x60>)
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	685a      	ldr	r2, [r3, #4]
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	1ad3      	subs	r3, r2, r3
 8019610:	0fdb      	lsrs	r3, r3, #31
 8019612:	f003 0301 	and.w	r3, r3, #1
 8019616:	b2db      	uxtb	r3, r3
 8019618:	2b00      	cmp	r3, #0
 801961a:	d001      	beq.n	8019620 <sys_timeouts_sleeptime+0x34>
    return 0;
 801961c:	2300      	movs	r3, #0
 801961e:	e010      	b.n	8019642 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019620:	4b0a      	ldr	r3, [pc, #40]	; (801964c <sys_timeouts_sleeptime+0x60>)
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	685a      	ldr	r2, [r3, #4]
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	1ad3      	subs	r3, r2, r3
 801962a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801962c:	683b      	ldr	r3, [r7, #0]
 801962e:	2b00      	cmp	r3, #0
 8019630:	da06      	bge.n	8019640 <sys_timeouts_sleeptime+0x54>
 8019632:	4b07      	ldr	r3, [pc, #28]	; (8019650 <sys_timeouts_sleeptime+0x64>)
 8019634:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8019638:	4906      	ldr	r1, [pc, #24]	; (8019654 <sys_timeouts_sleeptime+0x68>)
 801963a:	4807      	ldr	r0, [pc, #28]	; (8019658 <sys_timeouts_sleeptime+0x6c>)
 801963c:	f003 f91e 	bl	801c87c <iprintf>
    return ret;
 8019640:	683b      	ldr	r3, [r7, #0]
  }
}
 8019642:	4618      	mov	r0, r3
 8019644:	3708      	adds	r7, #8
 8019646:	46bd      	mov	sp, r7
 8019648:	bd80      	pop	{r7, pc}
 801964a:	bf00      	nop
 801964c:	200113f8 	.word	0x200113f8
 8019650:	0802015c 	.word	0x0802015c
 8019654:	08020230 	.word	0x08020230
 8019658:	080201d0 	.word	0x080201d0

0801965c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801965c:	b580      	push	{r7, lr}
 801965e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019660:	f003 f80c 	bl	801c67c <rand>
 8019664:	4603      	mov	r3, r0
 8019666:	b29b      	uxth	r3, r3
 8019668:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801966c:	b29b      	uxth	r3, r3
 801966e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8019672:	b29a      	uxth	r2, r3
 8019674:	4b01      	ldr	r3, [pc, #4]	; (801967c <udp_init+0x20>)
 8019676:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019678:	bf00      	nop
 801967a:	bd80      	pop	{r7, pc}
 801967c:	20000030 	.word	0x20000030

08019680 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8019680:	b480      	push	{r7}
 8019682:	b083      	sub	sp, #12
 8019684:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8019686:	2300      	movs	r3, #0
 8019688:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801968a:	4b17      	ldr	r3, [pc, #92]	; (80196e8 <udp_new_port+0x68>)
 801968c:	881b      	ldrh	r3, [r3, #0]
 801968e:	1c5a      	adds	r2, r3, #1
 8019690:	b291      	uxth	r1, r2
 8019692:	4a15      	ldr	r2, [pc, #84]	; (80196e8 <udp_new_port+0x68>)
 8019694:	8011      	strh	r1, [r2, #0]
 8019696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801969a:	4293      	cmp	r3, r2
 801969c:	d103      	bne.n	80196a6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801969e:	4b12      	ldr	r3, [pc, #72]	; (80196e8 <udp_new_port+0x68>)
 80196a0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80196a4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80196a6:	4b11      	ldr	r3, [pc, #68]	; (80196ec <udp_new_port+0x6c>)
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	603b      	str	r3, [r7, #0]
 80196ac:	e011      	b.n	80196d2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80196ae:	683b      	ldr	r3, [r7, #0]
 80196b0:	8a5a      	ldrh	r2, [r3, #18]
 80196b2:	4b0d      	ldr	r3, [pc, #52]	; (80196e8 <udp_new_port+0x68>)
 80196b4:	881b      	ldrh	r3, [r3, #0]
 80196b6:	429a      	cmp	r2, r3
 80196b8:	d108      	bne.n	80196cc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80196ba:	88fb      	ldrh	r3, [r7, #6]
 80196bc:	3301      	adds	r3, #1
 80196be:	80fb      	strh	r3, [r7, #6]
 80196c0:	88fb      	ldrh	r3, [r7, #6]
 80196c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80196c6:	d3e0      	bcc.n	801968a <udp_new_port+0xa>
        return 0;
 80196c8:	2300      	movs	r3, #0
 80196ca:	e007      	b.n	80196dc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80196cc:	683b      	ldr	r3, [r7, #0]
 80196ce:	68db      	ldr	r3, [r3, #12]
 80196d0:	603b      	str	r3, [r7, #0]
 80196d2:	683b      	ldr	r3, [r7, #0]
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d1ea      	bne.n	80196ae <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80196d8:	4b03      	ldr	r3, [pc, #12]	; (80196e8 <udp_new_port+0x68>)
 80196da:	881b      	ldrh	r3, [r3, #0]
}
 80196dc:	4618      	mov	r0, r3
 80196de:	370c      	adds	r7, #12
 80196e0:	46bd      	mov	sp, r7
 80196e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196e6:	4770      	bx	lr
 80196e8:	20000030 	.word	0x20000030
 80196ec:	20011404 	.word	0x20011404

080196f0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80196f0:	b580      	push	{r7, lr}
 80196f2:	b084      	sub	sp, #16
 80196f4:	af00      	add	r7, sp, #0
 80196f6:	60f8      	str	r0, [r7, #12]
 80196f8:	60b9      	str	r1, [r7, #8]
 80196fa:	4613      	mov	r3, r2
 80196fc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	2b00      	cmp	r3, #0
 8019702:	d105      	bne.n	8019710 <udp_input_local_match+0x20>
 8019704:	4b27      	ldr	r3, [pc, #156]	; (80197a4 <udp_input_local_match+0xb4>)
 8019706:	2287      	movs	r2, #135	; 0x87
 8019708:	4927      	ldr	r1, [pc, #156]	; (80197a8 <udp_input_local_match+0xb8>)
 801970a:	4828      	ldr	r0, [pc, #160]	; (80197ac <udp_input_local_match+0xbc>)
 801970c:	f003 f8b6 	bl	801c87c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8019710:	68bb      	ldr	r3, [r7, #8]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d105      	bne.n	8019722 <udp_input_local_match+0x32>
 8019716:	4b23      	ldr	r3, [pc, #140]	; (80197a4 <udp_input_local_match+0xb4>)
 8019718:	2288      	movs	r2, #136	; 0x88
 801971a:	4925      	ldr	r1, [pc, #148]	; (80197b0 <udp_input_local_match+0xc0>)
 801971c:	4823      	ldr	r0, [pc, #140]	; (80197ac <udp_input_local_match+0xbc>)
 801971e:	f003 f8ad 	bl	801c87c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019722:	68fb      	ldr	r3, [r7, #12]
 8019724:	7a1b      	ldrb	r3, [r3, #8]
 8019726:	2b00      	cmp	r3, #0
 8019728:	d00b      	beq.n	8019742 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	7a1a      	ldrb	r2, [r3, #8]
 801972e:	4b21      	ldr	r3, [pc, #132]	; (80197b4 <udp_input_local_match+0xc4>)
 8019730:	685b      	ldr	r3, [r3, #4]
 8019732:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019736:	3301      	adds	r3, #1
 8019738:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801973a:	429a      	cmp	r2, r3
 801973c:	d001      	beq.n	8019742 <udp_input_local_match+0x52>
    return 0;
 801973e:	2300      	movs	r3, #0
 8019740:	e02b      	b.n	801979a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8019742:	79fb      	ldrb	r3, [r7, #7]
 8019744:	2b00      	cmp	r3, #0
 8019746:	d018      	beq.n	801977a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019748:	68fb      	ldr	r3, [r7, #12]
 801974a:	2b00      	cmp	r3, #0
 801974c:	d013      	beq.n	8019776 <udp_input_local_match+0x86>
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	681b      	ldr	r3, [r3, #0]
 8019752:	2b00      	cmp	r3, #0
 8019754:	d00f      	beq.n	8019776 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019756:	4b17      	ldr	r3, [pc, #92]	; (80197b4 <udp_input_local_match+0xc4>)
 8019758:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801975a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801975e:	d00a      	beq.n	8019776 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8019760:	68fb      	ldr	r3, [r7, #12]
 8019762:	681a      	ldr	r2, [r3, #0]
 8019764:	4b13      	ldr	r3, [pc, #76]	; (80197b4 <udp_input_local_match+0xc4>)
 8019766:	695b      	ldr	r3, [r3, #20]
 8019768:	405a      	eors	r2, r3
 801976a:	68bb      	ldr	r3, [r7, #8]
 801976c:	3308      	adds	r3, #8
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019772:	2b00      	cmp	r3, #0
 8019774:	d110      	bne.n	8019798 <udp_input_local_match+0xa8>
          return 1;
 8019776:	2301      	movs	r3, #1
 8019778:	e00f      	b.n	801979a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801977a:	68fb      	ldr	r3, [r7, #12]
 801977c:	2b00      	cmp	r3, #0
 801977e:	d009      	beq.n	8019794 <udp_input_local_match+0xa4>
 8019780:	68fb      	ldr	r3, [r7, #12]
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	2b00      	cmp	r3, #0
 8019786:	d005      	beq.n	8019794 <udp_input_local_match+0xa4>
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	681a      	ldr	r2, [r3, #0]
 801978c:	4b09      	ldr	r3, [pc, #36]	; (80197b4 <udp_input_local_match+0xc4>)
 801978e:	695b      	ldr	r3, [r3, #20]
 8019790:	429a      	cmp	r2, r3
 8019792:	d101      	bne.n	8019798 <udp_input_local_match+0xa8>
        return 1;
 8019794:	2301      	movs	r3, #1
 8019796:	e000      	b.n	801979a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8019798:	2300      	movs	r3, #0
}
 801979a:	4618      	mov	r0, r3
 801979c:	3710      	adds	r7, #16
 801979e:	46bd      	mov	sp, r7
 80197a0:	bd80      	pop	{r7, pc}
 80197a2:	bf00      	nop
 80197a4:	08020244 	.word	0x08020244
 80197a8:	08020274 	.word	0x08020274
 80197ac:	08020298 	.word	0x08020298
 80197b0:	080202c0 	.word	0x080202c0
 80197b4:	2000dc54 	.word	0x2000dc54

080197b8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80197b8:	b590      	push	{r4, r7, lr}
 80197ba:	b08d      	sub	sp, #52	; 0x34
 80197bc:	af02      	add	r7, sp, #8
 80197be:	6078      	str	r0, [r7, #4]
 80197c0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80197c2:	2300      	movs	r3, #0
 80197c4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d105      	bne.n	80197d8 <udp_input+0x20>
 80197cc:	4b7c      	ldr	r3, [pc, #496]	; (80199c0 <udp_input+0x208>)
 80197ce:	22cf      	movs	r2, #207	; 0xcf
 80197d0:	497c      	ldr	r1, [pc, #496]	; (80199c4 <udp_input+0x20c>)
 80197d2:	487d      	ldr	r0, [pc, #500]	; (80199c8 <udp_input+0x210>)
 80197d4:	f003 f852 	bl	801c87c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80197d8:	683b      	ldr	r3, [r7, #0]
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d105      	bne.n	80197ea <udp_input+0x32>
 80197de:	4b78      	ldr	r3, [pc, #480]	; (80199c0 <udp_input+0x208>)
 80197e0:	22d0      	movs	r2, #208	; 0xd0
 80197e2:	497a      	ldr	r1, [pc, #488]	; (80199cc <udp_input+0x214>)
 80197e4:	4878      	ldr	r0, [pc, #480]	; (80199c8 <udp_input+0x210>)
 80197e6:	f003 f849 	bl	801c87c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	895b      	ldrh	r3, [r3, #10]
 80197ee:	2b07      	cmp	r3, #7
 80197f0:	d803      	bhi.n	80197fa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80197f2:	6878      	ldr	r0, [r7, #4]
 80197f4:	f7f9 fae2 	bl	8012dbc <pbuf_free>
    goto end;
 80197f8:	e0de      	b.n	80199b8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	685b      	ldr	r3, [r3, #4]
 80197fe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019800:	4b73      	ldr	r3, [pc, #460]	; (80199d0 <udp_input+0x218>)
 8019802:	695b      	ldr	r3, [r3, #20]
 8019804:	4a72      	ldr	r2, [pc, #456]	; (80199d0 <udp_input+0x218>)
 8019806:	6812      	ldr	r2, [r2, #0]
 8019808:	4611      	mov	r1, r2
 801980a:	4618      	mov	r0, r3
 801980c:	f001 fe2a 	bl	801b464 <ip4_addr_isbroadcast_u32>
 8019810:	4603      	mov	r3, r0
 8019812:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8019814:	697b      	ldr	r3, [r7, #20]
 8019816:	881b      	ldrh	r3, [r3, #0]
 8019818:	b29b      	uxth	r3, r3
 801981a:	4618      	mov	r0, r3
 801981c:	f7f7 fe20 	bl	8011460 <lwip_htons>
 8019820:	4603      	mov	r3, r0
 8019822:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8019824:	697b      	ldr	r3, [r7, #20]
 8019826:	885b      	ldrh	r3, [r3, #2]
 8019828:	b29b      	uxth	r3, r3
 801982a:	4618      	mov	r0, r3
 801982c:	f7f7 fe18 	bl	8011460 <lwip_htons>
 8019830:	4603      	mov	r3, r0
 8019832:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8019834:	2300      	movs	r3, #0
 8019836:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8019838:	2300      	movs	r3, #0
 801983a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801983c:	2300      	movs	r3, #0
 801983e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019840:	4b64      	ldr	r3, [pc, #400]	; (80199d4 <udp_input+0x21c>)
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	627b      	str	r3, [r7, #36]	; 0x24
 8019846:	e054      	b.n	80198f2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8019848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801984a:	8a5b      	ldrh	r3, [r3, #18]
 801984c:	89fa      	ldrh	r2, [r7, #14]
 801984e:	429a      	cmp	r2, r3
 8019850:	d14a      	bne.n	80198e8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8019852:	7cfb      	ldrb	r3, [r7, #19]
 8019854:	461a      	mov	r2, r3
 8019856:	6839      	ldr	r1, [r7, #0]
 8019858:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801985a:	f7ff ff49 	bl	80196f0 <udp_input_local_match>
 801985e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8019860:	2b00      	cmp	r3, #0
 8019862:	d041      	beq.n	80198e8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8019864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019866:	7c1b      	ldrb	r3, [r3, #16]
 8019868:	f003 0304 	and.w	r3, r3, #4
 801986c:	2b00      	cmp	r3, #0
 801986e:	d11d      	bne.n	80198ac <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8019870:	69fb      	ldr	r3, [r7, #28]
 8019872:	2b00      	cmp	r3, #0
 8019874:	d102      	bne.n	801987c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8019876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019878:	61fb      	str	r3, [r7, #28]
 801987a:	e017      	b.n	80198ac <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801987c:	7cfb      	ldrb	r3, [r7, #19]
 801987e:	2b00      	cmp	r3, #0
 8019880:	d014      	beq.n	80198ac <udp_input+0xf4>
 8019882:	4b53      	ldr	r3, [pc, #332]	; (80199d0 <udp_input+0x218>)
 8019884:	695b      	ldr	r3, [r3, #20]
 8019886:	f1b3 3fff 	cmp.w	r3, #4294967295
 801988a:	d10f      	bne.n	80198ac <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801988c:	69fb      	ldr	r3, [r7, #28]
 801988e:	681a      	ldr	r2, [r3, #0]
 8019890:	683b      	ldr	r3, [r7, #0]
 8019892:	3304      	adds	r3, #4
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	429a      	cmp	r2, r3
 8019898:	d008      	beq.n	80198ac <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801989c:	681a      	ldr	r2, [r3, #0]
 801989e:	683b      	ldr	r3, [r7, #0]
 80198a0:	3304      	adds	r3, #4
 80198a2:	681b      	ldr	r3, [r3, #0]
 80198a4:	429a      	cmp	r2, r3
 80198a6:	d101      	bne.n	80198ac <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80198a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198aa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80198ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198ae:	8a9b      	ldrh	r3, [r3, #20]
 80198b0:	8a3a      	ldrh	r2, [r7, #16]
 80198b2:	429a      	cmp	r2, r3
 80198b4:	d118      	bne.n	80198e8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80198b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198b8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d005      	beq.n	80198ca <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80198be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198c0:	685a      	ldr	r2, [r3, #4]
 80198c2:	4b43      	ldr	r3, [pc, #268]	; (80199d0 <udp_input+0x218>)
 80198c4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80198c6:	429a      	cmp	r2, r3
 80198c8:	d10e      	bne.n	80198e8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80198ca:	6a3b      	ldr	r3, [r7, #32]
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d014      	beq.n	80198fa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80198d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198d2:	68da      	ldr	r2, [r3, #12]
 80198d4:	6a3b      	ldr	r3, [r7, #32]
 80198d6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80198d8:	4b3e      	ldr	r3, [pc, #248]	; (80199d4 <udp_input+0x21c>)
 80198da:	681a      	ldr	r2, [r3, #0]
 80198dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198de:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80198e0:	4a3c      	ldr	r2, [pc, #240]	; (80199d4 <udp_input+0x21c>)
 80198e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198e4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80198e6:	e008      	b.n	80198fa <udp_input+0x142>
      }
    }

    prev = pcb;
 80198e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198ea:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80198ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198ee:	68db      	ldr	r3, [r3, #12]
 80198f0:	627b      	str	r3, [r7, #36]	; 0x24
 80198f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d1a7      	bne.n	8019848 <udp_input+0x90>
 80198f8:	e000      	b.n	80198fc <udp_input+0x144>
        break;
 80198fa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80198fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d101      	bne.n	8019906 <udp_input+0x14e>
    pcb = uncon_pcb;
 8019902:	69fb      	ldr	r3, [r7, #28]
 8019904:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8019906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019908:	2b00      	cmp	r3, #0
 801990a:	d002      	beq.n	8019912 <udp_input+0x15a>
    for_us = 1;
 801990c:	2301      	movs	r3, #1
 801990e:	76fb      	strb	r3, [r7, #27]
 8019910:	e00a      	b.n	8019928 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8019912:	683b      	ldr	r3, [r7, #0]
 8019914:	3304      	adds	r3, #4
 8019916:	681a      	ldr	r2, [r3, #0]
 8019918:	4b2d      	ldr	r3, [pc, #180]	; (80199d0 <udp_input+0x218>)
 801991a:	695b      	ldr	r3, [r3, #20]
 801991c:	429a      	cmp	r2, r3
 801991e:	bf0c      	ite	eq
 8019920:	2301      	moveq	r3, #1
 8019922:	2300      	movne	r3, #0
 8019924:	b2db      	uxtb	r3, r3
 8019926:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019928:	7efb      	ldrb	r3, [r7, #27]
 801992a:	2b00      	cmp	r3, #0
 801992c:	d041      	beq.n	80199b2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801992e:	2108      	movs	r1, #8
 8019930:	6878      	ldr	r0, [r7, #4]
 8019932:	f7f9 f9bd 	bl	8012cb0 <pbuf_remove_header>
 8019936:	4603      	mov	r3, r0
 8019938:	2b00      	cmp	r3, #0
 801993a:	d00a      	beq.n	8019952 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801993c:	4b20      	ldr	r3, [pc, #128]	; (80199c0 <udp_input+0x208>)
 801993e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8019942:	4925      	ldr	r1, [pc, #148]	; (80199d8 <udp_input+0x220>)
 8019944:	4820      	ldr	r0, [pc, #128]	; (80199c8 <udp_input+0x210>)
 8019946:	f002 ff99 	bl	801c87c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801994a:	6878      	ldr	r0, [r7, #4]
 801994c:	f7f9 fa36 	bl	8012dbc <pbuf_free>
      goto end;
 8019950:	e032      	b.n	80199b8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8019952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019954:	2b00      	cmp	r3, #0
 8019956:	d012      	beq.n	801997e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8019958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801995a:	699b      	ldr	r3, [r3, #24]
 801995c:	2b00      	cmp	r3, #0
 801995e:	d00a      	beq.n	8019976 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8019960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019962:	699c      	ldr	r4, [r3, #24]
 8019964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019966:	69d8      	ldr	r0, [r3, #28]
 8019968:	8a3b      	ldrh	r3, [r7, #16]
 801996a:	9300      	str	r3, [sp, #0]
 801996c:	4b1b      	ldr	r3, [pc, #108]	; (80199dc <udp_input+0x224>)
 801996e:	687a      	ldr	r2, [r7, #4]
 8019970:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019972:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8019974:	e021      	b.n	80199ba <udp_input+0x202>
        pbuf_free(p);
 8019976:	6878      	ldr	r0, [r7, #4]
 8019978:	f7f9 fa20 	bl	8012dbc <pbuf_free>
        goto end;
 801997c:	e01c      	b.n	80199b8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801997e:	7cfb      	ldrb	r3, [r7, #19]
 8019980:	2b00      	cmp	r3, #0
 8019982:	d112      	bne.n	80199aa <udp_input+0x1f2>
 8019984:	4b12      	ldr	r3, [pc, #72]	; (80199d0 <udp_input+0x218>)
 8019986:	695b      	ldr	r3, [r3, #20]
 8019988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801998c:	2be0      	cmp	r3, #224	; 0xe0
 801998e:	d00c      	beq.n	80199aa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8019990:	4b0f      	ldr	r3, [pc, #60]	; (80199d0 <udp_input+0x218>)
 8019992:	899b      	ldrh	r3, [r3, #12]
 8019994:	3308      	adds	r3, #8
 8019996:	b29b      	uxth	r3, r3
 8019998:	b21b      	sxth	r3, r3
 801999a:	4619      	mov	r1, r3
 801999c:	6878      	ldr	r0, [r7, #4]
 801999e:	f7f9 f9fa 	bl	8012d96 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80199a2:	2103      	movs	r1, #3
 80199a4:	6878      	ldr	r0, [r7, #4]
 80199a6:	f001 fa33 	bl	801ae10 <icmp_dest_unreach>
      pbuf_free(p);
 80199aa:	6878      	ldr	r0, [r7, #4]
 80199ac:	f7f9 fa06 	bl	8012dbc <pbuf_free>
  return;
 80199b0:	e003      	b.n	80199ba <udp_input+0x202>
    pbuf_free(p);
 80199b2:	6878      	ldr	r0, [r7, #4]
 80199b4:	f7f9 fa02 	bl	8012dbc <pbuf_free>
  return;
 80199b8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80199ba:	372c      	adds	r7, #44	; 0x2c
 80199bc:	46bd      	mov	sp, r7
 80199be:	bd90      	pop	{r4, r7, pc}
 80199c0:	08020244 	.word	0x08020244
 80199c4:	080202e8 	.word	0x080202e8
 80199c8:	08020298 	.word	0x08020298
 80199cc:	08020300 	.word	0x08020300
 80199d0:	2000dc54 	.word	0x2000dc54
 80199d4:	20011404 	.word	0x20011404
 80199d8:	0802031c 	.word	0x0802031c
 80199dc:	2000dc64 	.word	0x2000dc64

080199e0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80199e0:	b580      	push	{r7, lr}
 80199e2:	b086      	sub	sp, #24
 80199e4:	af00      	add	r7, sp, #0
 80199e6:	60f8      	str	r0, [r7, #12]
 80199e8:	60b9      	str	r1, [r7, #8]
 80199ea:	4613      	mov	r3, r2
 80199ec:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80199ee:	68bb      	ldr	r3, [r7, #8]
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d101      	bne.n	80199f8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80199f4:	4b39      	ldr	r3, [pc, #228]	; (8019adc <udp_bind+0xfc>)
 80199f6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80199f8:	68fb      	ldr	r3, [r7, #12]
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	d109      	bne.n	8019a12 <udp_bind+0x32>
 80199fe:	4b38      	ldr	r3, [pc, #224]	; (8019ae0 <udp_bind+0x100>)
 8019a00:	f240 32b7 	movw	r2, #951	; 0x3b7
 8019a04:	4937      	ldr	r1, [pc, #220]	; (8019ae4 <udp_bind+0x104>)
 8019a06:	4838      	ldr	r0, [pc, #224]	; (8019ae8 <udp_bind+0x108>)
 8019a08:	f002 ff38 	bl	801c87c <iprintf>
 8019a0c:	f06f 030f 	mvn.w	r3, #15
 8019a10:	e060      	b.n	8019ad4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8019a12:	2300      	movs	r3, #0
 8019a14:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019a16:	4b35      	ldr	r3, [pc, #212]	; (8019aec <udp_bind+0x10c>)
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	617b      	str	r3, [r7, #20]
 8019a1c:	e009      	b.n	8019a32 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8019a1e:	68fa      	ldr	r2, [r7, #12]
 8019a20:	697b      	ldr	r3, [r7, #20]
 8019a22:	429a      	cmp	r2, r3
 8019a24:	d102      	bne.n	8019a2c <udp_bind+0x4c>
      rebind = 1;
 8019a26:	2301      	movs	r3, #1
 8019a28:	74fb      	strb	r3, [r7, #19]
      break;
 8019a2a:	e005      	b.n	8019a38 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019a2c:	697b      	ldr	r3, [r7, #20]
 8019a2e:	68db      	ldr	r3, [r3, #12]
 8019a30:	617b      	str	r3, [r7, #20]
 8019a32:	697b      	ldr	r3, [r7, #20]
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d1f2      	bne.n	8019a1e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8019a38:	88fb      	ldrh	r3, [r7, #6]
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	d109      	bne.n	8019a52 <udp_bind+0x72>
    port = udp_new_port();
 8019a3e:	f7ff fe1f 	bl	8019680 <udp_new_port>
 8019a42:	4603      	mov	r3, r0
 8019a44:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019a46:	88fb      	ldrh	r3, [r7, #6]
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d12c      	bne.n	8019aa6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8019a4c:	f06f 0307 	mvn.w	r3, #7
 8019a50:	e040      	b.n	8019ad4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019a52:	4b26      	ldr	r3, [pc, #152]	; (8019aec <udp_bind+0x10c>)
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	617b      	str	r3, [r7, #20]
 8019a58:	e022      	b.n	8019aa0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8019a5a:	68fa      	ldr	r2, [r7, #12]
 8019a5c:	697b      	ldr	r3, [r7, #20]
 8019a5e:	429a      	cmp	r2, r3
 8019a60:	d01b      	beq.n	8019a9a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8019a62:	697b      	ldr	r3, [r7, #20]
 8019a64:	8a5b      	ldrh	r3, [r3, #18]
 8019a66:	88fa      	ldrh	r2, [r7, #6]
 8019a68:	429a      	cmp	r2, r3
 8019a6a:	d116      	bne.n	8019a9a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019a6c:	697b      	ldr	r3, [r7, #20]
 8019a6e:	681a      	ldr	r2, [r3, #0]
 8019a70:	68bb      	ldr	r3, [r7, #8]
 8019a72:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8019a74:	429a      	cmp	r2, r3
 8019a76:	d00d      	beq.n	8019a94 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019a78:	68bb      	ldr	r3, [r7, #8]
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d00a      	beq.n	8019a94 <udp_bind+0xb4>
 8019a7e:	68bb      	ldr	r3, [r7, #8]
 8019a80:	681b      	ldr	r3, [r3, #0]
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	d006      	beq.n	8019a94 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019a86:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d003      	beq.n	8019a94 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019a8c:	697b      	ldr	r3, [r7, #20]
 8019a8e:	681b      	ldr	r3, [r3, #0]
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d102      	bne.n	8019a9a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8019a94:	f06f 0307 	mvn.w	r3, #7
 8019a98:	e01c      	b.n	8019ad4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019a9a:	697b      	ldr	r3, [r7, #20]
 8019a9c:	68db      	ldr	r3, [r3, #12]
 8019a9e:	617b      	str	r3, [r7, #20]
 8019aa0:	697b      	ldr	r3, [r7, #20]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d1d9      	bne.n	8019a5a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8019aa6:	68bb      	ldr	r3, [r7, #8]
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d002      	beq.n	8019ab2 <udp_bind+0xd2>
 8019aac:	68bb      	ldr	r3, [r7, #8]
 8019aae:	681b      	ldr	r3, [r3, #0]
 8019ab0:	e000      	b.n	8019ab4 <udp_bind+0xd4>
 8019ab2:	2300      	movs	r3, #0
 8019ab4:	68fa      	ldr	r2, [r7, #12]
 8019ab6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	88fa      	ldrh	r2, [r7, #6]
 8019abc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8019abe:	7cfb      	ldrb	r3, [r7, #19]
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d106      	bne.n	8019ad2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8019ac4:	4b09      	ldr	r3, [pc, #36]	; (8019aec <udp_bind+0x10c>)
 8019ac6:	681a      	ldr	r2, [r3, #0]
 8019ac8:	68fb      	ldr	r3, [r7, #12]
 8019aca:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8019acc:	4a07      	ldr	r2, [pc, #28]	; (8019aec <udp_bind+0x10c>)
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8019ad2:	2300      	movs	r3, #0
}
 8019ad4:	4618      	mov	r0, r3
 8019ad6:	3718      	adds	r7, #24
 8019ad8:	46bd      	mov	sp, r7
 8019ada:	bd80      	pop	{r7, pc}
 8019adc:	08020e14 	.word	0x08020e14
 8019ae0:	08020244 	.word	0x08020244
 8019ae4:	0802050c 	.word	0x0802050c
 8019ae8:	08020298 	.word	0x08020298
 8019aec:	20011404 	.word	0x20011404

08019af0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019af0:	b580      	push	{r7, lr}
 8019af2:	b086      	sub	sp, #24
 8019af4:	af00      	add	r7, sp, #0
 8019af6:	60f8      	str	r0, [r7, #12]
 8019af8:	60b9      	str	r1, [r7, #8]
 8019afa:	4613      	mov	r3, r2
 8019afc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8019afe:	68fb      	ldr	r3, [r7, #12]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d109      	bne.n	8019b18 <udp_connect+0x28>
 8019b04:	4b2c      	ldr	r3, [pc, #176]	; (8019bb8 <udp_connect+0xc8>)
 8019b06:	f240 4235 	movw	r2, #1077	; 0x435
 8019b0a:	492c      	ldr	r1, [pc, #176]	; (8019bbc <udp_connect+0xcc>)
 8019b0c:	482c      	ldr	r0, [pc, #176]	; (8019bc0 <udp_connect+0xd0>)
 8019b0e:	f002 feb5 	bl	801c87c <iprintf>
 8019b12:	f06f 030f 	mvn.w	r3, #15
 8019b16:	e04b      	b.n	8019bb0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8019b18:	68bb      	ldr	r3, [r7, #8]
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d109      	bne.n	8019b32 <udp_connect+0x42>
 8019b1e:	4b26      	ldr	r3, [pc, #152]	; (8019bb8 <udp_connect+0xc8>)
 8019b20:	f240 4236 	movw	r2, #1078	; 0x436
 8019b24:	4927      	ldr	r1, [pc, #156]	; (8019bc4 <udp_connect+0xd4>)
 8019b26:	4826      	ldr	r0, [pc, #152]	; (8019bc0 <udp_connect+0xd0>)
 8019b28:	f002 fea8 	bl	801c87c <iprintf>
 8019b2c:	f06f 030f 	mvn.w	r3, #15
 8019b30:	e03e      	b.n	8019bb0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	8a5b      	ldrh	r3, [r3, #18]
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d10f      	bne.n	8019b5a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019b3a:	68f9      	ldr	r1, [r7, #12]
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	8a5b      	ldrh	r3, [r3, #18]
 8019b40:	461a      	mov	r2, r3
 8019b42:	68f8      	ldr	r0, [r7, #12]
 8019b44:	f7ff ff4c 	bl	80199e0 <udp_bind>
 8019b48:	4603      	mov	r3, r0
 8019b4a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8019b4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d002      	beq.n	8019b5a <udp_connect+0x6a>
      return err;
 8019b54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019b58:	e02a      	b.n	8019bb0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8019b5a:	68bb      	ldr	r3, [r7, #8]
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d002      	beq.n	8019b66 <udp_connect+0x76>
 8019b60:	68bb      	ldr	r3, [r7, #8]
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	e000      	b.n	8019b68 <udp_connect+0x78>
 8019b66:	2300      	movs	r3, #0
 8019b68:	68fa      	ldr	r2, [r7, #12]
 8019b6a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	88fa      	ldrh	r2, [r7, #6]
 8019b70:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	7c1b      	ldrb	r3, [r3, #16]
 8019b76:	f043 0304 	orr.w	r3, r3, #4
 8019b7a:	b2da      	uxtb	r2, r3
 8019b7c:	68fb      	ldr	r3, [r7, #12]
 8019b7e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019b80:	4b11      	ldr	r3, [pc, #68]	; (8019bc8 <udp_connect+0xd8>)
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	617b      	str	r3, [r7, #20]
 8019b86:	e008      	b.n	8019b9a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8019b88:	68fa      	ldr	r2, [r7, #12]
 8019b8a:	697b      	ldr	r3, [r7, #20]
 8019b8c:	429a      	cmp	r2, r3
 8019b8e:	d101      	bne.n	8019b94 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8019b90:	2300      	movs	r3, #0
 8019b92:	e00d      	b.n	8019bb0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019b94:	697b      	ldr	r3, [r7, #20]
 8019b96:	68db      	ldr	r3, [r3, #12]
 8019b98:	617b      	str	r3, [r7, #20]
 8019b9a:	697b      	ldr	r3, [r7, #20]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d1f3      	bne.n	8019b88 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8019ba0:	4b09      	ldr	r3, [pc, #36]	; (8019bc8 <udp_connect+0xd8>)
 8019ba2:	681a      	ldr	r2, [r3, #0]
 8019ba4:	68fb      	ldr	r3, [r7, #12]
 8019ba6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8019ba8:	4a07      	ldr	r2, [pc, #28]	; (8019bc8 <udp_connect+0xd8>)
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8019bae:	2300      	movs	r3, #0
}
 8019bb0:	4618      	mov	r0, r3
 8019bb2:	3718      	adds	r7, #24
 8019bb4:	46bd      	mov	sp, r7
 8019bb6:	bd80      	pop	{r7, pc}
 8019bb8:	08020244 	.word	0x08020244
 8019bbc:	08020524 	.word	0x08020524
 8019bc0:	08020298 	.word	0x08020298
 8019bc4:	08020540 	.word	0x08020540
 8019bc8:	20011404 	.word	0x20011404

08019bcc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8019bcc:	b580      	push	{r7, lr}
 8019bce:	b084      	sub	sp, #16
 8019bd0:	af00      	add	r7, sp, #0
 8019bd2:	60f8      	str	r0, [r7, #12]
 8019bd4:	60b9      	str	r1, [r7, #8]
 8019bd6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d107      	bne.n	8019bee <udp_recv+0x22>
 8019bde:	4b08      	ldr	r3, [pc, #32]	; (8019c00 <udp_recv+0x34>)
 8019be0:	f240 428a 	movw	r2, #1162	; 0x48a
 8019be4:	4907      	ldr	r1, [pc, #28]	; (8019c04 <udp_recv+0x38>)
 8019be6:	4808      	ldr	r0, [pc, #32]	; (8019c08 <udp_recv+0x3c>)
 8019be8:	f002 fe48 	bl	801c87c <iprintf>
 8019bec:	e005      	b.n	8019bfa <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8019bee:	68fb      	ldr	r3, [r7, #12]
 8019bf0:	68ba      	ldr	r2, [r7, #8]
 8019bf2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8019bf4:	68fb      	ldr	r3, [r7, #12]
 8019bf6:	687a      	ldr	r2, [r7, #4]
 8019bf8:	61da      	str	r2, [r3, #28]
}
 8019bfa:	3710      	adds	r7, #16
 8019bfc:	46bd      	mov	sp, r7
 8019bfe:	bd80      	pop	{r7, pc}
 8019c00:	08020244 	.word	0x08020244
 8019c04:	08020578 	.word	0x08020578
 8019c08:	08020298 	.word	0x08020298

08019c0c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8019c0c:	b580      	push	{r7, lr}
 8019c0e:	b084      	sub	sp, #16
 8019c10:	af00      	add	r7, sp, #0
 8019c12:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d107      	bne.n	8019c2a <udp_remove+0x1e>
 8019c1a:	4b19      	ldr	r3, [pc, #100]	; (8019c80 <udp_remove+0x74>)
 8019c1c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8019c20:	4918      	ldr	r1, [pc, #96]	; (8019c84 <udp_remove+0x78>)
 8019c22:	4819      	ldr	r0, [pc, #100]	; (8019c88 <udp_remove+0x7c>)
 8019c24:	f002 fe2a 	bl	801c87c <iprintf>
 8019c28:	e026      	b.n	8019c78 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8019c2a:	4b18      	ldr	r3, [pc, #96]	; (8019c8c <udp_remove+0x80>)
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	687a      	ldr	r2, [r7, #4]
 8019c30:	429a      	cmp	r2, r3
 8019c32:	d105      	bne.n	8019c40 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8019c34:	4b15      	ldr	r3, [pc, #84]	; (8019c8c <udp_remove+0x80>)
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	68db      	ldr	r3, [r3, #12]
 8019c3a:	4a14      	ldr	r2, [pc, #80]	; (8019c8c <udp_remove+0x80>)
 8019c3c:	6013      	str	r3, [r2, #0]
 8019c3e:	e017      	b.n	8019c70 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019c40:	4b12      	ldr	r3, [pc, #72]	; (8019c8c <udp_remove+0x80>)
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	60fb      	str	r3, [r7, #12]
 8019c46:	e010      	b.n	8019c6a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8019c48:	68fb      	ldr	r3, [r7, #12]
 8019c4a:	68db      	ldr	r3, [r3, #12]
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d009      	beq.n	8019c64 <udp_remove+0x58>
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	68db      	ldr	r3, [r3, #12]
 8019c54:	687a      	ldr	r2, [r7, #4]
 8019c56:	429a      	cmp	r2, r3
 8019c58:	d104      	bne.n	8019c64 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	68da      	ldr	r2, [r3, #12]
 8019c5e:	68fb      	ldr	r3, [r7, #12]
 8019c60:	60da      	str	r2, [r3, #12]
        break;
 8019c62:	e005      	b.n	8019c70 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	68db      	ldr	r3, [r3, #12]
 8019c68:	60fb      	str	r3, [r7, #12]
 8019c6a:	68fb      	ldr	r3, [r7, #12]
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d1eb      	bne.n	8019c48 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8019c70:	6879      	ldr	r1, [r7, #4]
 8019c72:	2000      	movs	r0, #0
 8019c74:	f7f8 f9fe 	bl	8012074 <memp_free>
}
 8019c78:	3710      	adds	r7, #16
 8019c7a:	46bd      	mov	sp, r7
 8019c7c:	bd80      	pop	{r7, pc}
 8019c7e:	bf00      	nop
 8019c80:	08020244 	.word	0x08020244
 8019c84:	08020590 	.word	0x08020590
 8019c88:	08020298 	.word	0x08020298
 8019c8c:	20011404 	.word	0x20011404

08019c90 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8019c90:	b580      	push	{r7, lr}
 8019c92:	b082      	sub	sp, #8
 8019c94:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8019c96:	2000      	movs	r0, #0
 8019c98:	f7f8 f976 	bl	8011f88 <memp_malloc>
 8019c9c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d007      	beq.n	8019cb4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8019ca4:	2220      	movs	r2, #32
 8019ca6:	2100      	movs	r1, #0
 8019ca8:	6878      	ldr	r0, [r7, #4]
 8019caa:	f002 fe4c 	bl	801c946 <memset>
    pcb->ttl = UDP_TTL;
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	22ff      	movs	r2, #255	; 0xff
 8019cb2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8019cb4:	687b      	ldr	r3, [r7, #4]
}
 8019cb6:	4618      	mov	r0, r3
 8019cb8:	3708      	adds	r7, #8
 8019cba:	46bd      	mov	sp, r7
 8019cbc:	bd80      	pop	{r7, pc}

08019cbe <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8019cbe:	b580      	push	{r7, lr}
 8019cc0:	b084      	sub	sp, #16
 8019cc2:	af00      	add	r7, sp, #0
 8019cc4:	4603      	mov	r3, r0
 8019cc6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8019cc8:	f7ff ffe2 	bl	8019c90 <udp_new>
 8019ccc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8019cce:	68fb      	ldr	r3, [r7, #12]
}
 8019cd0:	4618      	mov	r0, r3
 8019cd2:	3710      	adds	r7, #16
 8019cd4:	46bd      	mov	sp, r7
 8019cd6:	bd80      	pop	{r7, pc}

08019cd8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019cd8:	b480      	push	{r7}
 8019cda:	b085      	sub	sp, #20
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	6078      	str	r0, [r7, #4]
 8019ce0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d01e      	beq.n	8019d26 <udp_netif_ip_addr_changed+0x4e>
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	681b      	ldr	r3, [r3, #0]
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d01a      	beq.n	8019d26 <udp_netif_ip_addr_changed+0x4e>
 8019cf0:	683b      	ldr	r3, [r7, #0]
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d017      	beq.n	8019d26 <udp_netif_ip_addr_changed+0x4e>
 8019cf6:	683b      	ldr	r3, [r7, #0]
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d013      	beq.n	8019d26 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019cfe:	4b0d      	ldr	r3, [pc, #52]	; (8019d34 <udp_netif_ip_addr_changed+0x5c>)
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	60fb      	str	r3, [r7, #12]
 8019d04:	e00c      	b.n	8019d20 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	681a      	ldr	r2, [r3, #0]
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	681b      	ldr	r3, [r3, #0]
 8019d0e:	429a      	cmp	r2, r3
 8019d10:	d103      	bne.n	8019d1a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8019d12:	683b      	ldr	r3, [r7, #0]
 8019d14:	681a      	ldr	r2, [r3, #0]
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	68db      	ldr	r3, [r3, #12]
 8019d1e:	60fb      	str	r3, [r7, #12]
 8019d20:	68fb      	ldr	r3, [r7, #12]
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	d1ef      	bne.n	8019d06 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8019d26:	bf00      	nop
 8019d28:	3714      	adds	r7, #20
 8019d2a:	46bd      	mov	sp, r7
 8019d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d30:	4770      	bx	lr
 8019d32:	bf00      	nop
 8019d34:	20011404 	.word	0x20011404

08019d38 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8019d38:	b580      	push	{r7, lr}
 8019d3a:	b082      	sub	sp, #8
 8019d3c:	af00      	add	r7, sp, #0
 8019d3e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8019d40:	4915      	ldr	r1, [pc, #84]	; (8019d98 <etharp_free_entry+0x60>)
 8019d42:	687a      	ldr	r2, [r7, #4]
 8019d44:	4613      	mov	r3, r2
 8019d46:	005b      	lsls	r3, r3, #1
 8019d48:	4413      	add	r3, r2
 8019d4a:	00db      	lsls	r3, r3, #3
 8019d4c:	440b      	add	r3, r1
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d013      	beq.n	8019d7c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8019d54:	4910      	ldr	r1, [pc, #64]	; (8019d98 <etharp_free_entry+0x60>)
 8019d56:	687a      	ldr	r2, [r7, #4]
 8019d58:	4613      	mov	r3, r2
 8019d5a:	005b      	lsls	r3, r3, #1
 8019d5c:	4413      	add	r3, r2
 8019d5e:	00db      	lsls	r3, r3, #3
 8019d60:	440b      	add	r3, r1
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	4618      	mov	r0, r3
 8019d66:	f7f9 f829 	bl	8012dbc <pbuf_free>
    arp_table[i].q = NULL;
 8019d6a:	490b      	ldr	r1, [pc, #44]	; (8019d98 <etharp_free_entry+0x60>)
 8019d6c:	687a      	ldr	r2, [r7, #4]
 8019d6e:	4613      	mov	r3, r2
 8019d70:	005b      	lsls	r3, r3, #1
 8019d72:	4413      	add	r3, r2
 8019d74:	00db      	lsls	r3, r3, #3
 8019d76:	440b      	add	r3, r1
 8019d78:	2200      	movs	r2, #0
 8019d7a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8019d7c:	4906      	ldr	r1, [pc, #24]	; (8019d98 <etharp_free_entry+0x60>)
 8019d7e:	687a      	ldr	r2, [r7, #4]
 8019d80:	4613      	mov	r3, r2
 8019d82:	005b      	lsls	r3, r3, #1
 8019d84:	4413      	add	r3, r2
 8019d86:	00db      	lsls	r3, r3, #3
 8019d88:	440b      	add	r3, r1
 8019d8a:	3314      	adds	r3, #20
 8019d8c:	2200      	movs	r2, #0
 8019d8e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8019d90:	bf00      	nop
 8019d92:	3708      	adds	r7, #8
 8019d94:	46bd      	mov	sp, r7
 8019d96:	bd80      	pop	{r7, pc}
 8019d98:	20011408 	.word	0x20011408

08019d9c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8019d9c:	b580      	push	{r7, lr}
 8019d9e:	b082      	sub	sp, #8
 8019da0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019da2:	2300      	movs	r3, #0
 8019da4:	607b      	str	r3, [r7, #4]
 8019da6:	e096      	b.n	8019ed6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8019da8:	494f      	ldr	r1, [pc, #316]	; (8019ee8 <etharp_tmr+0x14c>)
 8019daa:	687a      	ldr	r2, [r7, #4]
 8019dac:	4613      	mov	r3, r2
 8019dae:	005b      	lsls	r3, r3, #1
 8019db0:	4413      	add	r3, r2
 8019db2:	00db      	lsls	r3, r3, #3
 8019db4:	440b      	add	r3, r1
 8019db6:	3314      	adds	r3, #20
 8019db8:	781b      	ldrb	r3, [r3, #0]
 8019dba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8019dbc:	78fb      	ldrb	r3, [r7, #3]
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	f000 8086 	beq.w	8019ed0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8019dc4:	4948      	ldr	r1, [pc, #288]	; (8019ee8 <etharp_tmr+0x14c>)
 8019dc6:	687a      	ldr	r2, [r7, #4]
 8019dc8:	4613      	mov	r3, r2
 8019dca:	005b      	lsls	r3, r3, #1
 8019dcc:	4413      	add	r3, r2
 8019dce:	00db      	lsls	r3, r3, #3
 8019dd0:	440b      	add	r3, r1
 8019dd2:	3312      	adds	r3, #18
 8019dd4:	881b      	ldrh	r3, [r3, #0]
 8019dd6:	3301      	adds	r3, #1
 8019dd8:	b298      	uxth	r0, r3
 8019dda:	4943      	ldr	r1, [pc, #268]	; (8019ee8 <etharp_tmr+0x14c>)
 8019ddc:	687a      	ldr	r2, [r7, #4]
 8019dde:	4613      	mov	r3, r2
 8019de0:	005b      	lsls	r3, r3, #1
 8019de2:	4413      	add	r3, r2
 8019de4:	00db      	lsls	r3, r3, #3
 8019de6:	440b      	add	r3, r1
 8019de8:	3312      	adds	r3, #18
 8019dea:	4602      	mov	r2, r0
 8019dec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019dee:	493e      	ldr	r1, [pc, #248]	; (8019ee8 <etharp_tmr+0x14c>)
 8019df0:	687a      	ldr	r2, [r7, #4]
 8019df2:	4613      	mov	r3, r2
 8019df4:	005b      	lsls	r3, r3, #1
 8019df6:	4413      	add	r3, r2
 8019df8:	00db      	lsls	r3, r3, #3
 8019dfa:	440b      	add	r3, r1
 8019dfc:	3312      	adds	r3, #18
 8019dfe:	881b      	ldrh	r3, [r3, #0]
 8019e00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8019e04:	d215      	bcs.n	8019e32 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019e06:	4938      	ldr	r1, [pc, #224]	; (8019ee8 <etharp_tmr+0x14c>)
 8019e08:	687a      	ldr	r2, [r7, #4]
 8019e0a:	4613      	mov	r3, r2
 8019e0c:	005b      	lsls	r3, r3, #1
 8019e0e:	4413      	add	r3, r2
 8019e10:	00db      	lsls	r3, r3, #3
 8019e12:	440b      	add	r3, r1
 8019e14:	3314      	adds	r3, #20
 8019e16:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019e18:	2b01      	cmp	r3, #1
 8019e1a:	d10e      	bne.n	8019e3a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8019e1c:	4932      	ldr	r1, [pc, #200]	; (8019ee8 <etharp_tmr+0x14c>)
 8019e1e:	687a      	ldr	r2, [r7, #4]
 8019e20:	4613      	mov	r3, r2
 8019e22:	005b      	lsls	r3, r3, #1
 8019e24:	4413      	add	r3, r2
 8019e26:	00db      	lsls	r3, r3, #3
 8019e28:	440b      	add	r3, r1
 8019e2a:	3312      	adds	r3, #18
 8019e2c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019e2e:	2b04      	cmp	r3, #4
 8019e30:	d903      	bls.n	8019e3a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8019e32:	6878      	ldr	r0, [r7, #4]
 8019e34:	f7ff ff80 	bl	8019d38 <etharp_free_entry>
 8019e38:	e04a      	b.n	8019ed0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8019e3a:	492b      	ldr	r1, [pc, #172]	; (8019ee8 <etharp_tmr+0x14c>)
 8019e3c:	687a      	ldr	r2, [r7, #4]
 8019e3e:	4613      	mov	r3, r2
 8019e40:	005b      	lsls	r3, r3, #1
 8019e42:	4413      	add	r3, r2
 8019e44:	00db      	lsls	r3, r3, #3
 8019e46:	440b      	add	r3, r1
 8019e48:	3314      	adds	r3, #20
 8019e4a:	781b      	ldrb	r3, [r3, #0]
 8019e4c:	2b03      	cmp	r3, #3
 8019e4e:	d10a      	bne.n	8019e66 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8019e50:	4925      	ldr	r1, [pc, #148]	; (8019ee8 <etharp_tmr+0x14c>)
 8019e52:	687a      	ldr	r2, [r7, #4]
 8019e54:	4613      	mov	r3, r2
 8019e56:	005b      	lsls	r3, r3, #1
 8019e58:	4413      	add	r3, r2
 8019e5a:	00db      	lsls	r3, r3, #3
 8019e5c:	440b      	add	r3, r1
 8019e5e:	3314      	adds	r3, #20
 8019e60:	2204      	movs	r2, #4
 8019e62:	701a      	strb	r2, [r3, #0]
 8019e64:	e034      	b.n	8019ed0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8019e66:	4920      	ldr	r1, [pc, #128]	; (8019ee8 <etharp_tmr+0x14c>)
 8019e68:	687a      	ldr	r2, [r7, #4]
 8019e6a:	4613      	mov	r3, r2
 8019e6c:	005b      	lsls	r3, r3, #1
 8019e6e:	4413      	add	r3, r2
 8019e70:	00db      	lsls	r3, r3, #3
 8019e72:	440b      	add	r3, r1
 8019e74:	3314      	adds	r3, #20
 8019e76:	781b      	ldrb	r3, [r3, #0]
 8019e78:	2b04      	cmp	r3, #4
 8019e7a:	d10a      	bne.n	8019e92 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8019e7c:	491a      	ldr	r1, [pc, #104]	; (8019ee8 <etharp_tmr+0x14c>)
 8019e7e:	687a      	ldr	r2, [r7, #4]
 8019e80:	4613      	mov	r3, r2
 8019e82:	005b      	lsls	r3, r3, #1
 8019e84:	4413      	add	r3, r2
 8019e86:	00db      	lsls	r3, r3, #3
 8019e88:	440b      	add	r3, r1
 8019e8a:	3314      	adds	r3, #20
 8019e8c:	2202      	movs	r2, #2
 8019e8e:	701a      	strb	r2, [r3, #0]
 8019e90:	e01e      	b.n	8019ed0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019e92:	4915      	ldr	r1, [pc, #84]	; (8019ee8 <etharp_tmr+0x14c>)
 8019e94:	687a      	ldr	r2, [r7, #4]
 8019e96:	4613      	mov	r3, r2
 8019e98:	005b      	lsls	r3, r3, #1
 8019e9a:	4413      	add	r3, r2
 8019e9c:	00db      	lsls	r3, r3, #3
 8019e9e:	440b      	add	r3, r1
 8019ea0:	3314      	adds	r3, #20
 8019ea2:	781b      	ldrb	r3, [r3, #0]
 8019ea4:	2b01      	cmp	r3, #1
 8019ea6:	d113      	bne.n	8019ed0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8019ea8:	490f      	ldr	r1, [pc, #60]	; (8019ee8 <etharp_tmr+0x14c>)
 8019eaa:	687a      	ldr	r2, [r7, #4]
 8019eac:	4613      	mov	r3, r2
 8019eae:	005b      	lsls	r3, r3, #1
 8019eb0:	4413      	add	r3, r2
 8019eb2:	00db      	lsls	r3, r3, #3
 8019eb4:	440b      	add	r3, r1
 8019eb6:	3308      	adds	r3, #8
 8019eb8:	6818      	ldr	r0, [r3, #0]
 8019eba:	687a      	ldr	r2, [r7, #4]
 8019ebc:	4613      	mov	r3, r2
 8019ebe:	005b      	lsls	r3, r3, #1
 8019ec0:	4413      	add	r3, r2
 8019ec2:	00db      	lsls	r3, r3, #3
 8019ec4:	4a08      	ldr	r2, [pc, #32]	; (8019ee8 <etharp_tmr+0x14c>)
 8019ec6:	4413      	add	r3, r2
 8019ec8:	3304      	adds	r3, #4
 8019eca:	4619      	mov	r1, r3
 8019ecc:	f000 fe6e 	bl	801abac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	3301      	adds	r3, #1
 8019ed4:	607b      	str	r3, [r7, #4]
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	2b09      	cmp	r3, #9
 8019eda:	f77f af65 	ble.w	8019da8 <etharp_tmr+0xc>
      }
    }
  }
}
 8019ede:	bf00      	nop
 8019ee0:	bf00      	nop
 8019ee2:	3708      	adds	r7, #8
 8019ee4:	46bd      	mov	sp, r7
 8019ee6:	bd80      	pop	{r7, pc}
 8019ee8:	20011408 	.word	0x20011408

08019eec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8019eec:	b580      	push	{r7, lr}
 8019eee:	b08a      	sub	sp, #40	; 0x28
 8019ef0:	af00      	add	r7, sp, #0
 8019ef2:	60f8      	str	r0, [r7, #12]
 8019ef4:	460b      	mov	r3, r1
 8019ef6:	607a      	str	r2, [r7, #4]
 8019ef8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8019efa:	230a      	movs	r3, #10
 8019efc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8019efe:	230a      	movs	r3, #10
 8019f00:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8019f02:	230a      	movs	r3, #10
 8019f04:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8019f06:	2300      	movs	r3, #0
 8019f08:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8019f0a:	230a      	movs	r3, #10
 8019f0c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8019f0e:	2300      	movs	r3, #0
 8019f10:	83bb      	strh	r3, [r7, #28]
 8019f12:	2300      	movs	r3, #0
 8019f14:	837b      	strh	r3, [r7, #26]
 8019f16:	2300      	movs	r3, #0
 8019f18:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019f1a:	2300      	movs	r3, #0
 8019f1c:	843b      	strh	r3, [r7, #32]
 8019f1e:	e0ae      	b.n	801a07e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8019f20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019f24:	49a6      	ldr	r1, [pc, #664]	; (801a1c0 <etharp_find_entry+0x2d4>)
 8019f26:	4613      	mov	r3, r2
 8019f28:	005b      	lsls	r3, r3, #1
 8019f2a:	4413      	add	r3, r2
 8019f2c:	00db      	lsls	r3, r3, #3
 8019f2e:	440b      	add	r3, r1
 8019f30:	3314      	adds	r3, #20
 8019f32:	781b      	ldrb	r3, [r3, #0]
 8019f34:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8019f36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019f3a:	2b0a      	cmp	r3, #10
 8019f3c:	d105      	bne.n	8019f4a <etharp_find_entry+0x5e>
 8019f3e:	7dfb      	ldrb	r3, [r7, #23]
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d102      	bne.n	8019f4a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8019f44:	8c3b      	ldrh	r3, [r7, #32]
 8019f46:	847b      	strh	r3, [r7, #34]	; 0x22
 8019f48:	e095      	b.n	801a076 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8019f4a:	7dfb      	ldrb	r3, [r7, #23]
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	f000 8092 	beq.w	801a076 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8019f52:	7dfb      	ldrb	r3, [r7, #23]
 8019f54:	2b01      	cmp	r3, #1
 8019f56:	d009      	beq.n	8019f6c <etharp_find_entry+0x80>
 8019f58:	7dfb      	ldrb	r3, [r7, #23]
 8019f5a:	2b01      	cmp	r3, #1
 8019f5c:	d806      	bhi.n	8019f6c <etharp_find_entry+0x80>
 8019f5e:	4b99      	ldr	r3, [pc, #612]	; (801a1c4 <etharp_find_entry+0x2d8>)
 8019f60:	f240 1223 	movw	r2, #291	; 0x123
 8019f64:	4998      	ldr	r1, [pc, #608]	; (801a1c8 <etharp_find_entry+0x2dc>)
 8019f66:	4899      	ldr	r0, [pc, #612]	; (801a1cc <etharp_find_entry+0x2e0>)
 8019f68:	f002 fc88 	bl	801c87c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d020      	beq.n	8019fb4 <etharp_find_entry+0xc8>
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	6819      	ldr	r1, [r3, #0]
 8019f76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019f7a:	4891      	ldr	r0, [pc, #580]	; (801a1c0 <etharp_find_entry+0x2d4>)
 8019f7c:	4613      	mov	r3, r2
 8019f7e:	005b      	lsls	r3, r3, #1
 8019f80:	4413      	add	r3, r2
 8019f82:	00db      	lsls	r3, r3, #3
 8019f84:	4403      	add	r3, r0
 8019f86:	3304      	adds	r3, #4
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	4299      	cmp	r1, r3
 8019f8c:	d112      	bne.n	8019fb4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d00c      	beq.n	8019fae <etharp_find_entry+0xc2>
 8019f94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019f98:	4989      	ldr	r1, [pc, #548]	; (801a1c0 <etharp_find_entry+0x2d4>)
 8019f9a:	4613      	mov	r3, r2
 8019f9c:	005b      	lsls	r3, r3, #1
 8019f9e:	4413      	add	r3, r2
 8019fa0:	00db      	lsls	r3, r3, #3
 8019fa2:	440b      	add	r3, r1
 8019fa4:	3308      	adds	r3, #8
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	687a      	ldr	r2, [r7, #4]
 8019faa:	429a      	cmp	r2, r3
 8019fac:	d102      	bne.n	8019fb4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8019fae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019fb2:	e100      	b.n	801a1b6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8019fb4:	7dfb      	ldrb	r3, [r7, #23]
 8019fb6:	2b01      	cmp	r3, #1
 8019fb8:	d140      	bne.n	801a03c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8019fba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019fbe:	4980      	ldr	r1, [pc, #512]	; (801a1c0 <etharp_find_entry+0x2d4>)
 8019fc0:	4613      	mov	r3, r2
 8019fc2:	005b      	lsls	r3, r3, #1
 8019fc4:	4413      	add	r3, r2
 8019fc6:	00db      	lsls	r3, r3, #3
 8019fc8:	440b      	add	r3, r1
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d01a      	beq.n	801a006 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8019fd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019fd4:	497a      	ldr	r1, [pc, #488]	; (801a1c0 <etharp_find_entry+0x2d4>)
 8019fd6:	4613      	mov	r3, r2
 8019fd8:	005b      	lsls	r3, r3, #1
 8019fda:	4413      	add	r3, r2
 8019fdc:	00db      	lsls	r3, r3, #3
 8019fde:	440b      	add	r3, r1
 8019fe0:	3312      	adds	r3, #18
 8019fe2:	881b      	ldrh	r3, [r3, #0]
 8019fe4:	8bba      	ldrh	r2, [r7, #28]
 8019fe6:	429a      	cmp	r2, r3
 8019fe8:	d845      	bhi.n	801a076 <etharp_find_entry+0x18a>
            old_queue = i;
 8019fea:	8c3b      	ldrh	r3, [r7, #32]
 8019fec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8019fee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019ff2:	4973      	ldr	r1, [pc, #460]	; (801a1c0 <etharp_find_entry+0x2d4>)
 8019ff4:	4613      	mov	r3, r2
 8019ff6:	005b      	lsls	r3, r3, #1
 8019ff8:	4413      	add	r3, r2
 8019ffa:	00db      	lsls	r3, r3, #3
 8019ffc:	440b      	add	r3, r1
 8019ffe:	3312      	adds	r3, #18
 801a000:	881b      	ldrh	r3, [r3, #0]
 801a002:	83bb      	strh	r3, [r7, #28]
 801a004:	e037      	b.n	801a076 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801a006:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a00a:	496d      	ldr	r1, [pc, #436]	; (801a1c0 <etharp_find_entry+0x2d4>)
 801a00c:	4613      	mov	r3, r2
 801a00e:	005b      	lsls	r3, r3, #1
 801a010:	4413      	add	r3, r2
 801a012:	00db      	lsls	r3, r3, #3
 801a014:	440b      	add	r3, r1
 801a016:	3312      	adds	r3, #18
 801a018:	881b      	ldrh	r3, [r3, #0]
 801a01a:	8b7a      	ldrh	r2, [r7, #26]
 801a01c:	429a      	cmp	r2, r3
 801a01e:	d82a      	bhi.n	801a076 <etharp_find_entry+0x18a>
            old_pending = i;
 801a020:	8c3b      	ldrh	r3, [r7, #32]
 801a022:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801a024:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a028:	4965      	ldr	r1, [pc, #404]	; (801a1c0 <etharp_find_entry+0x2d4>)
 801a02a:	4613      	mov	r3, r2
 801a02c:	005b      	lsls	r3, r3, #1
 801a02e:	4413      	add	r3, r2
 801a030:	00db      	lsls	r3, r3, #3
 801a032:	440b      	add	r3, r1
 801a034:	3312      	adds	r3, #18
 801a036:	881b      	ldrh	r3, [r3, #0]
 801a038:	837b      	strh	r3, [r7, #26]
 801a03a:	e01c      	b.n	801a076 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a03c:	7dfb      	ldrb	r3, [r7, #23]
 801a03e:	2b01      	cmp	r3, #1
 801a040:	d919      	bls.n	801a076 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a042:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a046:	495e      	ldr	r1, [pc, #376]	; (801a1c0 <etharp_find_entry+0x2d4>)
 801a048:	4613      	mov	r3, r2
 801a04a:	005b      	lsls	r3, r3, #1
 801a04c:	4413      	add	r3, r2
 801a04e:	00db      	lsls	r3, r3, #3
 801a050:	440b      	add	r3, r1
 801a052:	3312      	adds	r3, #18
 801a054:	881b      	ldrh	r3, [r3, #0]
 801a056:	8b3a      	ldrh	r2, [r7, #24]
 801a058:	429a      	cmp	r2, r3
 801a05a:	d80c      	bhi.n	801a076 <etharp_find_entry+0x18a>
            old_stable = i;
 801a05c:	8c3b      	ldrh	r3, [r7, #32]
 801a05e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801a060:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a064:	4956      	ldr	r1, [pc, #344]	; (801a1c0 <etharp_find_entry+0x2d4>)
 801a066:	4613      	mov	r3, r2
 801a068:	005b      	lsls	r3, r3, #1
 801a06a:	4413      	add	r3, r2
 801a06c:	00db      	lsls	r3, r3, #3
 801a06e:	440b      	add	r3, r1
 801a070:	3312      	adds	r3, #18
 801a072:	881b      	ldrh	r3, [r3, #0]
 801a074:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a076:	8c3b      	ldrh	r3, [r7, #32]
 801a078:	3301      	adds	r3, #1
 801a07a:	b29b      	uxth	r3, r3
 801a07c:	843b      	strh	r3, [r7, #32]
 801a07e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a082:	2b09      	cmp	r3, #9
 801a084:	f77f af4c 	ble.w	8019f20 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a088:	7afb      	ldrb	r3, [r7, #11]
 801a08a:	f003 0302 	and.w	r3, r3, #2
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d108      	bne.n	801a0a4 <etharp_find_entry+0x1b8>
 801a092:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a096:	2b0a      	cmp	r3, #10
 801a098:	d107      	bne.n	801a0aa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a09a:	7afb      	ldrb	r3, [r7, #11]
 801a09c:	f003 0301 	and.w	r3, r3, #1
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d102      	bne.n	801a0aa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801a0a4:	f04f 33ff 	mov.w	r3, #4294967295
 801a0a8:	e085      	b.n	801a1b6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a0aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a0ae:	2b09      	cmp	r3, #9
 801a0b0:	dc02      	bgt.n	801a0b8 <etharp_find_entry+0x1cc>
    i = empty;
 801a0b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a0b4:	843b      	strh	r3, [r7, #32]
 801a0b6:	e039      	b.n	801a12c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a0b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801a0bc:	2b09      	cmp	r3, #9
 801a0be:	dc14      	bgt.n	801a0ea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801a0c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a0c2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a0c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a0c8:	493d      	ldr	r1, [pc, #244]	; (801a1c0 <etharp_find_entry+0x2d4>)
 801a0ca:	4613      	mov	r3, r2
 801a0cc:	005b      	lsls	r3, r3, #1
 801a0ce:	4413      	add	r3, r2
 801a0d0:	00db      	lsls	r3, r3, #3
 801a0d2:	440b      	add	r3, r1
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d018      	beq.n	801a10c <etharp_find_entry+0x220>
 801a0da:	4b3a      	ldr	r3, [pc, #232]	; (801a1c4 <etharp_find_entry+0x2d8>)
 801a0dc:	f240 126d 	movw	r2, #365	; 0x16d
 801a0e0:	493b      	ldr	r1, [pc, #236]	; (801a1d0 <etharp_find_entry+0x2e4>)
 801a0e2:	483a      	ldr	r0, [pc, #232]	; (801a1cc <etharp_find_entry+0x2e0>)
 801a0e4:	f002 fbca 	bl	801c87c <iprintf>
 801a0e8:	e010      	b.n	801a10c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a0ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801a0ee:	2b09      	cmp	r3, #9
 801a0f0:	dc02      	bgt.n	801a0f8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801a0f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a0f4:	843b      	strh	r3, [r7, #32]
 801a0f6:	e009      	b.n	801a10c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a0f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a0fc:	2b09      	cmp	r3, #9
 801a0fe:	dc02      	bgt.n	801a106 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801a100:	8bfb      	ldrh	r3, [r7, #30]
 801a102:	843b      	strh	r3, [r7, #32]
 801a104:	e002      	b.n	801a10c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801a106:	f04f 33ff 	mov.w	r3, #4294967295
 801a10a:	e054      	b.n	801a1b6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a10c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a110:	2b09      	cmp	r3, #9
 801a112:	dd06      	ble.n	801a122 <etharp_find_entry+0x236>
 801a114:	4b2b      	ldr	r3, [pc, #172]	; (801a1c4 <etharp_find_entry+0x2d8>)
 801a116:	f240 127f 	movw	r2, #383	; 0x17f
 801a11a:	492e      	ldr	r1, [pc, #184]	; (801a1d4 <etharp_find_entry+0x2e8>)
 801a11c:	482b      	ldr	r0, [pc, #172]	; (801a1cc <etharp_find_entry+0x2e0>)
 801a11e:	f002 fbad 	bl	801c87c <iprintf>
    etharp_free_entry(i);
 801a122:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a126:	4618      	mov	r0, r3
 801a128:	f7ff fe06 	bl	8019d38 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a12c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a130:	2b09      	cmp	r3, #9
 801a132:	dd06      	ble.n	801a142 <etharp_find_entry+0x256>
 801a134:	4b23      	ldr	r3, [pc, #140]	; (801a1c4 <etharp_find_entry+0x2d8>)
 801a136:	f240 1283 	movw	r2, #387	; 0x183
 801a13a:	4926      	ldr	r1, [pc, #152]	; (801a1d4 <etharp_find_entry+0x2e8>)
 801a13c:	4823      	ldr	r0, [pc, #140]	; (801a1cc <etharp_find_entry+0x2e0>)
 801a13e:	f002 fb9d 	bl	801c87c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801a142:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a146:	491e      	ldr	r1, [pc, #120]	; (801a1c0 <etharp_find_entry+0x2d4>)
 801a148:	4613      	mov	r3, r2
 801a14a:	005b      	lsls	r3, r3, #1
 801a14c:	4413      	add	r3, r2
 801a14e:	00db      	lsls	r3, r3, #3
 801a150:	440b      	add	r3, r1
 801a152:	3314      	adds	r3, #20
 801a154:	781b      	ldrb	r3, [r3, #0]
 801a156:	2b00      	cmp	r3, #0
 801a158:	d006      	beq.n	801a168 <etharp_find_entry+0x27c>
 801a15a:	4b1a      	ldr	r3, [pc, #104]	; (801a1c4 <etharp_find_entry+0x2d8>)
 801a15c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801a160:	491d      	ldr	r1, [pc, #116]	; (801a1d8 <etharp_find_entry+0x2ec>)
 801a162:	481a      	ldr	r0, [pc, #104]	; (801a1cc <etharp_find_entry+0x2e0>)
 801a164:	f002 fb8a 	bl	801c87c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801a168:	68fb      	ldr	r3, [r7, #12]
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d00b      	beq.n	801a186 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801a16e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a172:	68fb      	ldr	r3, [r7, #12]
 801a174:	6819      	ldr	r1, [r3, #0]
 801a176:	4812      	ldr	r0, [pc, #72]	; (801a1c0 <etharp_find_entry+0x2d4>)
 801a178:	4613      	mov	r3, r2
 801a17a:	005b      	lsls	r3, r3, #1
 801a17c:	4413      	add	r3, r2
 801a17e:	00db      	lsls	r3, r3, #3
 801a180:	4403      	add	r3, r0
 801a182:	3304      	adds	r3, #4
 801a184:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801a186:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a18a:	490d      	ldr	r1, [pc, #52]	; (801a1c0 <etharp_find_entry+0x2d4>)
 801a18c:	4613      	mov	r3, r2
 801a18e:	005b      	lsls	r3, r3, #1
 801a190:	4413      	add	r3, r2
 801a192:	00db      	lsls	r3, r3, #3
 801a194:	440b      	add	r3, r1
 801a196:	3312      	adds	r3, #18
 801a198:	2200      	movs	r2, #0
 801a19a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801a19c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a1a0:	4907      	ldr	r1, [pc, #28]	; (801a1c0 <etharp_find_entry+0x2d4>)
 801a1a2:	4613      	mov	r3, r2
 801a1a4:	005b      	lsls	r3, r3, #1
 801a1a6:	4413      	add	r3, r2
 801a1a8:	00db      	lsls	r3, r3, #3
 801a1aa:	440b      	add	r3, r1
 801a1ac:	3308      	adds	r3, #8
 801a1ae:	687a      	ldr	r2, [r7, #4]
 801a1b0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801a1b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801a1b6:	4618      	mov	r0, r3
 801a1b8:	3728      	adds	r7, #40	; 0x28
 801a1ba:	46bd      	mov	sp, r7
 801a1bc:	bd80      	pop	{r7, pc}
 801a1be:	bf00      	nop
 801a1c0:	20011408 	.word	0x20011408
 801a1c4:	080205a8 	.word	0x080205a8
 801a1c8:	080205e0 	.word	0x080205e0
 801a1cc:	08020620 	.word	0x08020620
 801a1d0:	08020648 	.word	0x08020648
 801a1d4:	08020660 	.word	0x08020660
 801a1d8:	08020674 	.word	0x08020674

0801a1dc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801a1dc:	b580      	push	{r7, lr}
 801a1de:	b088      	sub	sp, #32
 801a1e0:	af02      	add	r7, sp, #8
 801a1e2:	60f8      	str	r0, [r7, #12]
 801a1e4:	60b9      	str	r1, [r7, #8]
 801a1e6:	607a      	str	r2, [r7, #4]
 801a1e8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a1ea:	68fb      	ldr	r3, [r7, #12]
 801a1ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a1f0:	2b06      	cmp	r3, #6
 801a1f2:	d006      	beq.n	801a202 <etharp_update_arp_entry+0x26>
 801a1f4:	4b48      	ldr	r3, [pc, #288]	; (801a318 <etharp_update_arp_entry+0x13c>)
 801a1f6:	f240 12a9 	movw	r2, #425	; 0x1a9
 801a1fa:	4948      	ldr	r1, [pc, #288]	; (801a31c <etharp_update_arp_entry+0x140>)
 801a1fc:	4848      	ldr	r0, [pc, #288]	; (801a320 <etharp_update_arp_entry+0x144>)
 801a1fe:	f002 fb3d 	bl	801c87c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801a202:	68bb      	ldr	r3, [r7, #8]
 801a204:	2b00      	cmp	r3, #0
 801a206:	d012      	beq.n	801a22e <etharp_update_arp_entry+0x52>
 801a208:	68bb      	ldr	r3, [r7, #8]
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d00e      	beq.n	801a22e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a210:	68bb      	ldr	r3, [r7, #8]
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	68f9      	ldr	r1, [r7, #12]
 801a216:	4618      	mov	r0, r3
 801a218:	f001 f924 	bl	801b464 <ip4_addr_isbroadcast_u32>
 801a21c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d105      	bne.n	801a22e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801a222:	68bb      	ldr	r3, [r7, #8]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a22a:	2be0      	cmp	r3, #224	; 0xe0
 801a22c:	d102      	bne.n	801a234 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a22e:	f06f 030f 	mvn.w	r3, #15
 801a232:	e06c      	b.n	801a30e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801a234:	78fb      	ldrb	r3, [r7, #3]
 801a236:	68fa      	ldr	r2, [r7, #12]
 801a238:	4619      	mov	r1, r3
 801a23a:	68b8      	ldr	r0, [r7, #8]
 801a23c:	f7ff fe56 	bl	8019eec <etharp_find_entry>
 801a240:	4603      	mov	r3, r0
 801a242:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801a244:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	da02      	bge.n	801a252 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801a24c:	8afb      	ldrh	r3, [r7, #22]
 801a24e:	b25b      	sxtb	r3, r3
 801a250:	e05d      	b.n	801a30e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801a252:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a256:	4933      	ldr	r1, [pc, #204]	; (801a324 <etharp_update_arp_entry+0x148>)
 801a258:	4613      	mov	r3, r2
 801a25a:	005b      	lsls	r3, r3, #1
 801a25c:	4413      	add	r3, r2
 801a25e:	00db      	lsls	r3, r3, #3
 801a260:	440b      	add	r3, r1
 801a262:	3314      	adds	r3, #20
 801a264:	2202      	movs	r2, #2
 801a266:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801a268:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a26c:	492d      	ldr	r1, [pc, #180]	; (801a324 <etharp_update_arp_entry+0x148>)
 801a26e:	4613      	mov	r3, r2
 801a270:	005b      	lsls	r3, r3, #1
 801a272:	4413      	add	r3, r2
 801a274:	00db      	lsls	r3, r3, #3
 801a276:	440b      	add	r3, r1
 801a278:	3308      	adds	r3, #8
 801a27a:	68fa      	ldr	r2, [r7, #12]
 801a27c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801a27e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a282:	4613      	mov	r3, r2
 801a284:	005b      	lsls	r3, r3, #1
 801a286:	4413      	add	r3, r2
 801a288:	00db      	lsls	r3, r3, #3
 801a28a:	3308      	adds	r3, #8
 801a28c:	4a25      	ldr	r2, [pc, #148]	; (801a324 <etharp_update_arp_entry+0x148>)
 801a28e:	4413      	add	r3, r2
 801a290:	3304      	adds	r3, #4
 801a292:	2206      	movs	r2, #6
 801a294:	6879      	ldr	r1, [r7, #4]
 801a296:	4618      	mov	r0, r3
 801a298:	f002 fbd1 	bl	801ca3e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801a29c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a2a0:	4920      	ldr	r1, [pc, #128]	; (801a324 <etharp_update_arp_entry+0x148>)
 801a2a2:	4613      	mov	r3, r2
 801a2a4:	005b      	lsls	r3, r3, #1
 801a2a6:	4413      	add	r3, r2
 801a2a8:	00db      	lsls	r3, r3, #3
 801a2aa:	440b      	add	r3, r1
 801a2ac:	3312      	adds	r3, #18
 801a2ae:	2200      	movs	r2, #0
 801a2b0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801a2b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a2b6:	491b      	ldr	r1, [pc, #108]	; (801a324 <etharp_update_arp_entry+0x148>)
 801a2b8:	4613      	mov	r3, r2
 801a2ba:	005b      	lsls	r3, r3, #1
 801a2bc:	4413      	add	r3, r2
 801a2be:	00db      	lsls	r3, r3, #3
 801a2c0:	440b      	add	r3, r1
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d021      	beq.n	801a30c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801a2c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a2cc:	4915      	ldr	r1, [pc, #84]	; (801a324 <etharp_update_arp_entry+0x148>)
 801a2ce:	4613      	mov	r3, r2
 801a2d0:	005b      	lsls	r3, r3, #1
 801a2d2:	4413      	add	r3, r2
 801a2d4:	00db      	lsls	r3, r3, #3
 801a2d6:	440b      	add	r3, r1
 801a2d8:	681b      	ldr	r3, [r3, #0]
 801a2da:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801a2dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a2e0:	4910      	ldr	r1, [pc, #64]	; (801a324 <etharp_update_arp_entry+0x148>)
 801a2e2:	4613      	mov	r3, r2
 801a2e4:	005b      	lsls	r3, r3, #1
 801a2e6:	4413      	add	r3, r2
 801a2e8:	00db      	lsls	r3, r3, #3
 801a2ea:	440b      	add	r3, r1
 801a2ec:	2200      	movs	r2, #0
 801a2ee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801a2f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a2fa:	9300      	str	r3, [sp, #0]
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	6939      	ldr	r1, [r7, #16]
 801a300:	68f8      	ldr	r0, [r7, #12]
 801a302:	f001 ffbd 	bl	801c280 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801a306:	6938      	ldr	r0, [r7, #16]
 801a308:	f7f8 fd58 	bl	8012dbc <pbuf_free>
  }
  return ERR_OK;
 801a30c:	2300      	movs	r3, #0
}
 801a30e:	4618      	mov	r0, r3
 801a310:	3718      	adds	r7, #24
 801a312:	46bd      	mov	sp, r7
 801a314:	bd80      	pop	{r7, pc}
 801a316:	bf00      	nop
 801a318:	080205a8 	.word	0x080205a8
 801a31c:	080206a0 	.word	0x080206a0
 801a320:	08020620 	.word	0x08020620
 801a324:	20011408 	.word	0x20011408

0801a328 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801a328:	b580      	push	{r7, lr}
 801a32a:	b084      	sub	sp, #16
 801a32c:	af00      	add	r7, sp, #0
 801a32e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a330:	2300      	movs	r3, #0
 801a332:	60fb      	str	r3, [r7, #12]
 801a334:	e01e      	b.n	801a374 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801a336:	4913      	ldr	r1, [pc, #76]	; (801a384 <etharp_cleanup_netif+0x5c>)
 801a338:	68fa      	ldr	r2, [r7, #12]
 801a33a:	4613      	mov	r3, r2
 801a33c:	005b      	lsls	r3, r3, #1
 801a33e:	4413      	add	r3, r2
 801a340:	00db      	lsls	r3, r3, #3
 801a342:	440b      	add	r3, r1
 801a344:	3314      	adds	r3, #20
 801a346:	781b      	ldrb	r3, [r3, #0]
 801a348:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801a34a:	7afb      	ldrb	r3, [r7, #11]
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	d00e      	beq.n	801a36e <etharp_cleanup_netif+0x46>
 801a350:	490c      	ldr	r1, [pc, #48]	; (801a384 <etharp_cleanup_netif+0x5c>)
 801a352:	68fa      	ldr	r2, [r7, #12]
 801a354:	4613      	mov	r3, r2
 801a356:	005b      	lsls	r3, r3, #1
 801a358:	4413      	add	r3, r2
 801a35a:	00db      	lsls	r3, r3, #3
 801a35c:	440b      	add	r3, r1
 801a35e:	3308      	adds	r3, #8
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	687a      	ldr	r2, [r7, #4]
 801a364:	429a      	cmp	r2, r3
 801a366:	d102      	bne.n	801a36e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801a368:	68f8      	ldr	r0, [r7, #12]
 801a36a:	f7ff fce5 	bl	8019d38 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a36e:	68fb      	ldr	r3, [r7, #12]
 801a370:	3301      	adds	r3, #1
 801a372:	60fb      	str	r3, [r7, #12]
 801a374:	68fb      	ldr	r3, [r7, #12]
 801a376:	2b09      	cmp	r3, #9
 801a378:	dddd      	ble.n	801a336 <etharp_cleanup_netif+0xe>
    }
  }
}
 801a37a:	bf00      	nop
 801a37c:	bf00      	nop
 801a37e:	3710      	adds	r7, #16
 801a380:	46bd      	mov	sp, r7
 801a382:	bd80      	pop	{r7, pc}
 801a384:	20011408 	.word	0x20011408

0801a388 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801a388:	b5b0      	push	{r4, r5, r7, lr}
 801a38a:	b08a      	sub	sp, #40	; 0x28
 801a38c:	af04      	add	r7, sp, #16
 801a38e:	6078      	str	r0, [r7, #4]
 801a390:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a392:	683b      	ldr	r3, [r7, #0]
 801a394:	2b00      	cmp	r3, #0
 801a396:	d107      	bne.n	801a3a8 <etharp_input+0x20>
 801a398:	4b3d      	ldr	r3, [pc, #244]	; (801a490 <etharp_input+0x108>)
 801a39a:	f240 228a 	movw	r2, #650	; 0x28a
 801a39e:	493d      	ldr	r1, [pc, #244]	; (801a494 <etharp_input+0x10c>)
 801a3a0:	483d      	ldr	r0, [pc, #244]	; (801a498 <etharp_input+0x110>)
 801a3a2:	f002 fa6b 	bl	801c87c <iprintf>
 801a3a6:	e06f      	b.n	801a488 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	685b      	ldr	r3, [r3, #4]
 801a3ac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a3ae:	693b      	ldr	r3, [r7, #16]
 801a3b0:	881b      	ldrh	r3, [r3, #0]
 801a3b2:	b29b      	uxth	r3, r3
 801a3b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a3b8:	d10c      	bne.n	801a3d4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a3ba:	693b      	ldr	r3, [r7, #16]
 801a3bc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a3be:	2b06      	cmp	r3, #6
 801a3c0:	d108      	bne.n	801a3d4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a3c2:	693b      	ldr	r3, [r7, #16]
 801a3c4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a3c6:	2b04      	cmp	r3, #4
 801a3c8:	d104      	bne.n	801a3d4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a3ca:	693b      	ldr	r3, [r7, #16]
 801a3cc:	885b      	ldrh	r3, [r3, #2]
 801a3ce:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a3d0:	2b08      	cmp	r3, #8
 801a3d2:	d003      	beq.n	801a3dc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a3d4:	6878      	ldr	r0, [r7, #4]
 801a3d6:	f7f8 fcf1 	bl	8012dbc <pbuf_free>
    return;
 801a3da:	e055      	b.n	801a488 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a3dc:	693b      	ldr	r3, [r7, #16]
 801a3de:	330e      	adds	r3, #14
 801a3e0:	681b      	ldr	r3, [r3, #0]
 801a3e2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a3e4:	693b      	ldr	r3, [r7, #16]
 801a3e6:	3318      	adds	r3, #24
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a3ec:	683b      	ldr	r3, [r7, #0]
 801a3ee:	3304      	adds	r3, #4
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	d102      	bne.n	801a3fc <etharp_input+0x74>
    for_us = 0;
 801a3f6:	2300      	movs	r3, #0
 801a3f8:	75fb      	strb	r3, [r7, #23]
 801a3fa:	e009      	b.n	801a410 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a3fc:	68ba      	ldr	r2, [r7, #8]
 801a3fe:	683b      	ldr	r3, [r7, #0]
 801a400:	3304      	adds	r3, #4
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	429a      	cmp	r2, r3
 801a406:	bf0c      	ite	eq
 801a408:	2301      	moveq	r3, #1
 801a40a:	2300      	movne	r3, #0
 801a40c:	b2db      	uxtb	r3, r3
 801a40e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a410:	693b      	ldr	r3, [r7, #16]
 801a412:	f103 0208 	add.w	r2, r3, #8
 801a416:	7dfb      	ldrb	r3, [r7, #23]
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d001      	beq.n	801a420 <etharp_input+0x98>
 801a41c:	2301      	movs	r3, #1
 801a41e:	e000      	b.n	801a422 <etharp_input+0x9a>
 801a420:	2302      	movs	r3, #2
 801a422:	f107 010c 	add.w	r1, r7, #12
 801a426:	6838      	ldr	r0, [r7, #0]
 801a428:	f7ff fed8 	bl	801a1dc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a42c:	693b      	ldr	r3, [r7, #16]
 801a42e:	88db      	ldrh	r3, [r3, #6]
 801a430:	b29b      	uxth	r3, r3
 801a432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a436:	d003      	beq.n	801a440 <etharp_input+0xb8>
 801a438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a43c:	d01e      	beq.n	801a47c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a43e:	e020      	b.n	801a482 <etharp_input+0xfa>
      if (for_us) {
 801a440:	7dfb      	ldrb	r3, [r7, #23]
 801a442:	2b00      	cmp	r3, #0
 801a444:	d01c      	beq.n	801a480 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a446:	683b      	ldr	r3, [r7, #0]
 801a448:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801a44c:	693b      	ldr	r3, [r7, #16]
 801a44e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a452:	683b      	ldr	r3, [r7, #0]
 801a454:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801a458:	683b      	ldr	r3, [r7, #0]
 801a45a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a45c:	693a      	ldr	r2, [r7, #16]
 801a45e:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a460:	2102      	movs	r1, #2
 801a462:	9103      	str	r1, [sp, #12]
 801a464:	f107 010c 	add.w	r1, r7, #12
 801a468:	9102      	str	r1, [sp, #8]
 801a46a:	9201      	str	r2, [sp, #4]
 801a46c:	9300      	str	r3, [sp, #0]
 801a46e:	462b      	mov	r3, r5
 801a470:	4622      	mov	r2, r4
 801a472:	4601      	mov	r1, r0
 801a474:	6838      	ldr	r0, [r7, #0]
 801a476:	f000 faeb 	bl	801aa50 <etharp_raw>
      break;
 801a47a:	e001      	b.n	801a480 <etharp_input+0xf8>
      break;
 801a47c:	bf00      	nop
 801a47e:	e000      	b.n	801a482 <etharp_input+0xfa>
      break;
 801a480:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a482:	6878      	ldr	r0, [r7, #4]
 801a484:	f7f8 fc9a 	bl	8012dbc <pbuf_free>
}
 801a488:	3718      	adds	r7, #24
 801a48a:	46bd      	mov	sp, r7
 801a48c:	bdb0      	pop	{r4, r5, r7, pc}
 801a48e:	bf00      	nop
 801a490:	080205a8 	.word	0x080205a8
 801a494:	080206f8 	.word	0x080206f8
 801a498:	08020620 	.word	0x08020620

0801a49c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a49c:	b580      	push	{r7, lr}
 801a49e:	b086      	sub	sp, #24
 801a4a0:	af02      	add	r7, sp, #8
 801a4a2:	60f8      	str	r0, [r7, #12]
 801a4a4:	60b9      	str	r1, [r7, #8]
 801a4a6:	4613      	mov	r3, r2
 801a4a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a4aa:	79fa      	ldrb	r2, [r7, #7]
 801a4ac:	4944      	ldr	r1, [pc, #272]	; (801a5c0 <etharp_output_to_arp_index+0x124>)
 801a4ae:	4613      	mov	r3, r2
 801a4b0:	005b      	lsls	r3, r3, #1
 801a4b2:	4413      	add	r3, r2
 801a4b4:	00db      	lsls	r3, r3, #3
 801a4b6:	440b      	add	r3, r1
 801a4b8:	3314      	adds	r3, #20
 801a4ba:	781b      	ldrb	r3, [r3, #0]
 801a4bc:	2b01      	cmp	r3, #1
 801a4be:	d806      	bhi.n	801a4ce <etharp_output_to_arp_index+0x32>
 801a4c0:	4b40      	ldr	r3, [pc, #256]	; (801a5c4 <etharp_output_to_arp_index+0x128>)
 801a4c2:	f240 22ee 	movw	r2, #750	; 0x2ee
 801a4c6:	4940      	ldr	r1, [pc, #256]	; (801a5c8 <etharp_output_to_arp_index+0x12c>)
 801a4c8:	4840      	ldr	r0, [pc, #256]	; (801a5cc <etharp_output_to_arp_index+0x130>)
 801a4ca:	f002 f9d7 	bl	801c87c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a4ce:	79fa      	ldrb	r2, [r7, #7]
 801a4d0:	493b      	ldr	r1, [pc, #236]	; (801a5c0 <etharp_output_to_arp_index+0x124>)
 801a4d2:	4613      	mov	r3, r2
 801a4d4:	005b      	lsls	r3, r3, #1
 801a4d6:	4413      	add	r3, r2
 801a4d8:	00db      	lsls	r3, r3, #3
 801a4da:	440b      	add	r3, r1
 801a4dc:	3314      	adds	r3, #20
 801a4de:	781b      	ldrb	r3, [r3, #0]
 801a4e0:	2b02      	cmp	r3, #2
 801a4e2:	d153      	bne.n	801a58c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a4e4:	79fa      	ldrb	r2, [r7, #7]
 801a4e6:	4936      	ldr	r1, [pc, #216]	; (801a5c0 <etharp_output_to_arp_index+0x124>)
 801a4e8:	4613      	mov	r3, r2
 801a4ea:	005b      	lsls	r3, r3, #1
 801a4ec:	4413      	add	r3, r2
 801a4ee:	00db      	lsls	r3, r3, #3
 801a4f0:	440b      	add	r3, r1
 801a4f2:	3312      	adds	r3, #18
 801a4f4:	881b      	ldrh	r3, [r3, #0]
 801a4f6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801a4fa:	d919      	bls.n	801a530 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a4fc:	79fa      	ldrb	r2, [r7, #7]
 801a4fe:	4613      	mov	r3, r2
 801a500:	005b      	lsls	r3, r3, #1
 801a502:	4413      	add	r3, r2
 801a504:	00db      	lsls	r3, r3, #3
 801a506:	4a2e      	ldr	r2, [pc, #184]	; (801a5c0 <etharp_output_to_arp_index+0x124>)
 801a508:	4413      	add	r3, r2
 801a50a:	3304      	adds	r3, #4
 801a50c:	4619      	mov	r1, r3
 801a50e:	68f8      	ldr	r0, [r7, #12]
 801a510:	f000 fb4c 	bl	801abac <etharp_request>
 801a514:	4603      	mov	r3, r0
 801a516:	2b00      	cmp	r3, #0
 801a518:	d138      	bne.n	801a58c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a51a:	79fa      	ldrb	r2, [r7, #7]
 801a51c:	4928      	ldr	r1, [pc, #160]	; (801a5c0 <etharp_output_to_arp_index+0x124>)
 801a51e:	4613      	mov	r3, r2
 801a520:	005b      	lsls	r3, r3, #1
 801a522:	4413      	add	r3, r2
 801a524:	00db      	lsls	r3, r3, #3
 801a526:	440b      	add	r3, r1
 801a528:	3314      	adds	r3, #20
 801a52a:	2203      	movs	r2, #3
 801a52c:	701a      	strb	r2, [r3, #0]
 801a52e:	e02d      	b.n	801a58c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a530:	79fa      	ldrb	r2, [r7, #7]
 801a532:	4923      	ldr	r1, [pc, #140]	; (801a5c0 <etharp_output_to_arp_index+0x124>)
 801a534:	4613      	mov	r3, r2
 801a536:	005b      	lsls	r3, r3, #1
 801a538:	4413      	add	r3, r2
 801a53a:	00db      	lsls	r3, r3, #3
 801a53c:	440b      	add	r3, r1
 801a53e:	3312      	adds	r3, #18
 801a540:	881b      	ldrh	r3, [r3, #0]
 801a542:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801a546:	d321      	bcc.n	801a58c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a548:	79fa      	ldrb	r2, [r7, #7]
 801a54a:	4613      	mov	r3, r2
 801a54c:	005b      	lsls	r3, r3, #1
 801a54e:	4413      	add	r3, r2
 801a550:	00db      	lsls	r3, r3, #3
 801a552:	4a1b      	ldr	r2, [pc, #108]	; (801a5c0 <etharp_output_to_arp_index+0x124>)
 801a554:	4413      	add	r3, r2
 801a556:	1d19      	adds	r1, r3, #4
 801a558:	79fa      	ldrb	r2, [r7, #7]
 801a55a:	4613      	mov	r3, r2
 801a55c:	005b      	lsls	r3, r3, #1
 801a55e:	4413      	add	r3, r2
 801a560:	00db      	lsls	r3, r3, #3
 801a562:	3308      	adds	r3, #8
 801a564:	4a16      	ldr	r2, [pc, #88]	; (801a5c0 <etharp_output_to_arp_index+0x124>)
 801a566:	4413      	add	r3, r2
 801a568:	3304      	adds	r3, #4
 801a56a:	461a      	mov	r2, r3
 801a56c:	68f8      	ldr	r0, [r7, #12]
 801a56e:	f000 fafb 	bl	801ab68 <etharp_request_dst>
 801a572:	4603      	mov	r3, r0
 801a574:	2b00      	cmp	r3, #0
 801a576:	d109      	bne.n	801a58c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a578:	79fa      	ldrb	r2, [r7, #7]
 801a57a:	4911      	ldr	r1, [pc, #68]	; (801a5c0 <etharp_output_to_arp_index+0x124>)
 801a57c:	4613      	mov	r3, r2
 801a57e:	005b      	lsls	r3, r3, #1
 801a580:	4413      	add	r3, r2
 801a582:	00db      	lsls	r3, r3, #3
 801a584:	440b      	add	r3, r1
 801a586:	3314      	adds	r3, #20
 801a588:	2203      	movs	r2, #3
 801a58a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801a592:	79fa      	ldrb	r2, [r7, #7]
 801a594:	4613      	mov	r3, r2
 801a596:	005b      	lsls	r3, r3, #1
 801a598:	4413      	add	r3, r2
 801a59a:	00db      	lsls	r3, r3, #3
 801a59c:	3308      	adds	r3, #8
 801a59e:	4a08      	ldr	r2, [pc, #32]	; (801a5c0 <etharp_output_to_arp_index+0x124>)
 801a5a0:	4413      	add	r3, r2
 801a5a2:	3304      	adds	r3, #4
 801a5a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a5a8:	9200      	str	r2, [sp, #0]
 801a5aa:	460a      	mov	r2, r1
 801a5ac:	68b9      	ldr	r1, [r7, #8]
 801a5ae:	68f8      	ldr	r0, [r7, #12]
 801a5b0:	f001 fe66 	bl	801c280 <ethernet_output>
 801a5b4:	4603      	mov	r3, r0
}
 801a5b6:	4618      	mov	r0, r3
 801a5b8:	3710      	adds	r7, #16
 801a5ba:	46bd      	mov	sp, r7
 801a5bc:	bd80      	pop	{r7, pc}
 801a5be:	bf00      	nop
 801a5c0:	20011408 	.word	0x20011408
 801a5c4:	080205a8 	.word	0x080205a8
 801a5c8:	08020718 	.word	0x08020718
 801a5cc:	08020620 	.word	0x08020620

0801a5d0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801a5d0:	b580      	push	{r7, lr}
 801a5d2:	b08a      	sub	sp, #40	; 0x28
 801a5d4:	af02      	add	r7, sp, #8
 801a5d6:	60f8      	str	r0, [r7, #12]
 801a5d8:	60b9      	str	r1, [r7, #8]
 801a5da:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a5e0:	68fb      	ldr	r3, [r7, #12]
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d106      	bne.n	801a5f4 <etharp_output+0x24>
 801a5e6:	4b73      	ldr	r3, [pc, #460]	; (801a7b4 <etharp_output+0x1e4>)
 801a5e8:	f240 321e 	movw	r2, #798	; 0x31e
 801a5ec:	4972      	ldr	r1, [pc, #456]	; (801a7b8 <etharp_output+0x1e8>)
 801a5ee:	4873      	ldr	r0, [pc, #460]	; (801a7bc <etharp_output+0x1ec>)
 801a5f0:	f002 f944 	bl	801c87c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a5f4:	68bb      	ldr	r3, [r7, #8]
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d106      	bne.n	801a608 <etharp_output+0x38>
 801a5fa:	4b6e      	ldr	r3, [pc, #440]	; (801a7b4 <etharp_output+0x1e4>)
 801a5fc:	f240 321f 	movw	r2, #799	; 0x31f
 801a600:	496f      	ldr	r1, [pc, #444]	; (801a7c0 <etharp_output+0x1f0>)
 801a602:	486e      	ldr	r0, [pc, #440]	; (801a7bc <etharp_output+0x1ec>)
 801a604:	f002 f93a 	bl	801c87c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d106      	bne.n	801a61c <etharp_output+0x4c>
 801a60e:	4b69      	ldr	r3, [pc, #420]	; (801a7b4 <etharp_output+0x1e4>)
 801a610:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a614:	496b      	ldr	r1, [pc, #428]	; (801a7c4 <etharp_output+0x1f4>)
 801a616:	4869      	ldr	r0, [pc, #420]	; (801a7bc <etharp_output+0x1ec>)
 801a618:	f002 f930 	bl	801c87c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	68f9      	ldr	r1, [r7, #12]
 801a622:	4618      	mov	r0, r3
 801a624:	f000 ff1e 	bl	801b464 <ip4_addr_isbroadcast_u32>
 801a628:	4603      	mov	r3, r0
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	d002      	beq.n	801a634 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801a62e:	4b66      	ldr	r3, [pc, #408]	; (801a7c8 <etharp_output+0x1f8>)
 801a630:	61fb      	str	r3, [r7, #28]
 801a632:	e0af      	b.n	801a794 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a63c:	2be0      	cmp	r3, #224	; 0xe0
 801a63e:	d118      	bne.n	801a672 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801a640:	2301      	movs	r3, #1
 801a642:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801a644:	2300      	movs	r3, #0
 801a646:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801a648:	235e      	movs	r3, #94	; 0x5e
 801a64a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	3301      	adds	r3, #1
 801a650:	781b      	ldrb	r3, [r3, #0]
 801a652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a656:	b2db      	uxtb	r3, r3
 801a658:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	3302      	adds	r3, #2
 801a65e:	781b      	ldrb	r3, [r3, #0]
 801a660:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	3303      	adds	r3, #3
 801a666:	781b      	ldrb	r3, [r3, #0]
 801a668:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801a66a:	f107 0310 	add.w	r3, r7, #16
 801a66e:	61fb      	str	r3, [r7, #28]
 801a670:	e090      	b.n	801a794 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	681a      	ldr	r2, [r3, #0]
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	3304      	adds	r3, #4
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	405a      	eors	r2, r3
 801a67e:	68fb      	ldr	r3, [r7, #12]
 801a680:	3308      	adds	r3, #8
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	4013      	ands	r3, r2
 801a686:	2b00      	cmp	r3, #0
 801a688:	d012      	beq.n	801a6b0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	681b      	ldr	r3, [r3, #0]
 801a68e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a690:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801a694:	4293      	cmp	r3, r2
 801a696:	d00b      	beq.n	801a6b0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	330c      	adds	r3, #12
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	d003      	beq.n	801a6aa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	330c      	adds	r3, #12
 801a6a6:	61bb      	str	r3, [r7, #24]
 801a6a8:	e002      	b.n	801a6b0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801a6aa:	f06f 0303 	mvn.w	r3, #3
 801a6ae:	e07d      	b.n	801a7ac <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a6b0:	4b46      	ldr	r3, [pc, #280]	; (801a7cc <etharp_output+0x1fc>)
 801a6b2:	781b      	ldrb	r3, [r3, #0]
 801a6b4:	4619      	mov	r1, r3
 801a6b6:	4a46      	ldr	r2, [pc, #280]	; (801a7d0 <etharp_output+0x200>)
 801a6b8:	460b      	mov	r3, r1
 801a6ba:	005b      	lsls	r3, r3, #1
 801a6bc:	440b      	add	r3, r1
 801a6be:	00db      	lsls	r3, r3, #3
 801a6c0:	4413      	add	r3, r2
 801a6c2:	3314      	adds	r3, #20
 801a6c4:	781b      	ldrb	r3, [r3, #0]
 801a6c6:	2b01      	cmp	r3, #1
 801a6c8:	d925      	bls.n	801a716 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a6ca:	4b40      	ldr	r3, [pc, #256]	; (801a7cc <etharp_output+0x1fc>)
 801a6cc:	781b      	ldrb	r3, [r3, #0]
 801a6ce:	4619      	mov	r1, r3
 801a6d0:	4a3f      	ldr	r2, [pc, #252]	; (801a7d0 <etharp_output+0x200>)
 801a6d2:	460b      	mov	r3, r1
 801a6d4:	005b      	lsls	r3, r3, #1
 801a6d6:	440b      	add	r3, r1
 801a6d8:	00db      	lsls	r3, r3, #3
 801a6da:	4413      	add	r3, r2
 801a6dc:	3308      	adds	r3, #8
 801a6de:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a6e0:	68fa      	ldr	r2, [r7, #12]
 801a6e2:	429a      	cmp	r2, r3
 801a6e4:	d117      	bne.n	801a716 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801a6e6:	69bb      	ldr	r3, [r7, #24]
 801a6e8:	681a      	ldr	r2, [r3, #0]
 801a6ea:	4b38      	ldr	r3, [pc, #224]	; (801a7cc <etharp_output+0x1fc>)
 801a6ec:	781b      	ldrb	r3, [r3, #0]
 801a6ee:	4618      	mov	r0, r3
 801a6f0:	4937      	ldr	r1, [pc, #220]	; (801a7d0 <etharp_output+0x200>)
 801a6f2:	4603      	mov	r3, r0
 801a6f4:	005b      	lsls	r3, r3, #1
 801a6f6:	4403      	add	r3, r0
 801a6f8:	00db      	lsls	r3, r3, #3
 801a6fa:	440b      	add	r3, r1
 801a6fc:	3304      	adds	r3, #4
 801a6fe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a700:	429a      	cmp	r2, r3
 801a702:	d108      	bne.n	801a716 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801a704:	4b31      	ldr	r3, [pc, #196]	; (801a7cc <etharp_output+0x1fc>)
 801a706:	781b      	ldrb	r3, [r3, #0]
 801a708:	461a      	mov	r2, r3
 801a70a:	68b9      	ldr	r1, [r7, #8]
 801a70c:	68f8      	ldr	r0, [r7, #12]
 801a70e:	f7ff fec5 	bl	801a49c <etharp_output_to_arp_index>
 801a712:	4603      	mov	r3, r0
 801a714:	e04a      	b.n	801a7ac <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a716:	2300      	movs	r3, #0
 801a718:	75fb      	strb	r3, [r7, #23]
 801a71a:	e031      	b.n	801a780 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a71c:	7dfa      	ldrb	r2, [r7, #23]
 801a71e:	492c      	ldr	r1, [pc, #176]	; (801a7d0 <etharp_output+0x200>)
 801a720:	4613      	mov	r3, r2
 801a722:	005b      	lsls	r3, r3, #1
 801a724:	4413      	add	r3, r2
 801a726:	00db      	lsls	r3, r3, #3
 801a728:	440b      	add	r3, r1
 801a72a:	3314      	adds	r3, #20
 801a72c:	781b      	ldrb	r3, [r3, #0]
 801a72e:	2b01      	cmp	r3, #1
 801a730:	d923      	bls.n	801a77a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801a732:	7dfa      	ldrb	r2, [r7, #23]
 801a734:	4926      	ldr	r1, [pc, #152]	; (801a7d0 <etharp_output+0x200>)
 801a736:	4613      	mov	r3, r2
 801a738:	005b      	lsls	r3, r3, #1
 801a73a:	4413      	add	r3, r2
 801a73c:	00db      	lsls	r3, r3, #3
 801a73e:	440b      	add	r3, r1
 801a740:	3308      	adds	r3, #8
 801a742:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a744:	68fa      	ldr	r2, [r7, #12]
 801a746:	429a      	cmp	r2, r3
 801a748:	d117      	bne.n	801a77a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801a74a:	69bb      	ldr	r3, [r7, #24]
 801a74c:	6819      	ldr	r1, [r3, #0]
 801a74e:	7dfa      	ldrb	r2, [r7, #23]
 801a750:	481f      	ldr	r0, [pc, #124]	; (801a7d0 <etharp_output+0x200>)
 801a752:	4613      	mov	r3, r2
 801a754:	005b      	lsls	r3, r3, #1
 801a756:	4413      	add	r3, r2
 801a758:	00db      	lsls	r3, r3, #3
 801a75a:	4403      	add	r3, r0
 801a75c:	3304      	adds	r3, #4
 801a75e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801a760:	4299      	cmp	r1, r3
 801a762:	d10a      	bne.n	801a77a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801a764:	4a19      	ldr	r2, [pc, #100]	; (801a7cc <etharp_output+0x1fc>)
 801a766:	7dfb      	ldrb	r3, [r7, #23]
 801a768:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801a76a:	7dfb      	ldrb	r3, [r7, #23]
 801a76c:	461a      	mov	r2, r3
 801a76e:	68b9      	ldr	r1, [r7, #8]
 801a770:	68f8      	ldr	r0, [r7, #12]
 801a772:	f7ff fe93 	bl	801a49c <etharp_output_to_arp_index>
 801a776:	4603      	mov	r3, r0
 801a778:	e018      	b.n	801a7ac <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a77a:	7dfb      	ldrb	r3, [r7, #23]
 801a77c:	3301      	adds	r3, #1
 801a77e:	75fb      	strb	r3, [r7, #23]
 801a780:	7dfb      	ldrb	r3, [r7, #23]
 801a782:	2b09      	cmp	r3, #9
 801a784:	d9ca      	bls.n	801a71c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801a786:	68ba      	ldr	r2, [r7, #8]
 801a788:	69b9      	ldr	r1, [r7, #24]
 801a78a:	68f8      	ldr	r0, [r7, #12]
 801a78c:	f000 f822 	bl	801a7d4 <etharp_query>
 801a790:	4603      	mov	r3, r0
 801a792:	e00b      	b.n	801a7ac <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801a794:	68fb      	ldr	r3, [r7, #12]
 801a796:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801a79a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a79e:	9300      	str	r3, [sp, #0]
 801a7a0:	69fb      	ldr	r3, [r7, #28]
 801a7a2:	68b9      	ldr	r1, [r7, #8]
 801a7a4:	68f8      	ldr	r0, [r7, #12]
 801a7a6:	f001 fd6b 	bl	801c280 <ethernet_output>
 801a7aa:	4603      	mov	r3, r0
}
 801a7ac:	4618      	mov	r0, r3
 801a7ae:	3720      	adds	r7, #32
 801a7b0:	46bd      	mov	sp, r7
 801a7b2:	bd80      	pop	{r7, pc}
 801a7b4:	080205a8 	.word	0x080205a8
 801a7b8:	080206f8 	.word	0x080206f8
 801a7bc:	08020620 	.word	0x08020620
 801a7c0:	08020748 	.word	0x08020748
 801a7c4:	080206e8 	.word	0x080206e8
 801a7c8:	08020e18 	.word	0x08020e18
 801a7cc:	200114f8 	.word	0x200114f8
 801a7d0:	20011408 	.word	0x20011408

0801a7d4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801a7d4:	b580      	push	{r7, lr}
 801a7d6:	b08c      	sub	sp, #48	; 0x30
 801a7d8:	af02      	add	r7, sp, #8
 801a7da:	60f8      	str	r0, [r7, #12]
 801a7dc:	60b9      	str	r1, [r7, #8]
 801a7de:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801a7e0:	68fb      	ldr	r3, [r7, #12]
 801a7e2:	3326      	adds	r3, #38	; 0x26
 801a7e4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801a7e6:	23ff      	movs	r3, #255	; 0xff
 801a7e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801a7ec:	2300      	movs	r3, #0
 801a7ee:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a7f0:	68bb      	ldr	r3, [r7, #8]
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	68f9      	ldr	r1, [r7, #12]
 801a7f6:	4618      	mov	r0, r3
 801a7f8:	f000 fe34 	bl	801b464 <ip4_addr_isbroadcast_u32>
 801a7fc:	4603      	mov	r3, r0
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d10c      	bne.n	801a81c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a802:	68bb      	ldr	r3, [r7, #8]
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a80a:	2be0      	cmp	r3, #224	; 0xe0
 801a80c:	d006      	beq.n	801a81c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a80e:	68bb      	ldr	r3, [r7, #8]
 801a810:	2b00      	cmp	r3, #0
 801a812:	d003      	beq.n	801a81c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801a814:	68bb      	ldr	r3, [r7, #8]
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d102      	bne.n	801a822 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a81c:	f06f 030f 	mvn.w	r3, #15
 801a820:	e101      	b.n	801aa26 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801a822:	68fa      	ldr	r2, [r7, #12]
 801a824:	2101      	movs	r1, #1
 801a826:	68b8      	ldr	r0, [r7, #8]
 801a828:	f7ff fb60 	bl	8019eec <etharp_find_entry>
 801a82c:	4603      	mov	r3, r0
 801a82e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801a830:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a834:	2b00      	cmp	r3, #0
 801a836:	da02      	bge.n	801a83e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801a838:	8a7b      	ldrh	r3, [r7, #18]
 801a83a:	b25b      	sxtb	r3, r3
 801a83c:	e0f3      	b.n	801aa26 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801a83e:	8a7b      	ldrh	r3, [r7, #18]
 801a840:	2b7e      	cmp	r3, #126	; 0x7e
 801a842:	d906      	bls.n	801a852 <etharp_query+0x7e>
 801a844:	4b7a      	ldr	r3, [pc, #488]	; (801aa30 <etharp_query+0x25c>)
 801a846:	f240 32c1 	movw	r2, #961	; 0x3c1
 801a84a:	497a      	ldr	r1, [pc, #488]	; (801aa34 <etharp_query+0x260>)
 801a84c:	487a      	ldr	r0, [pc, #488]	; (801aa38 <etharp_query+0x264>)
 801a84e:	f002 f815 	bl	801c87c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801a852:	8a7b      	ldrh	r3, [r7, #18]
 801a854:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801a856:	7c7a      	ldrb	r2, [r7, #17]
 801a858:	4978      	ldr	r1, [pc, #480]	; (801aa3c <etharp_query+0x268>)
 801a85a:	4613      	mov	r3, r2
 801a85c:	005b      	lsls	r3, r3, #1
 801a85e:	4413      	add	r3, r2
 801a860:	00db      	lsls	r3, r3, #3
 801a862:	440b      	add	r3, r1
 801a864:	3314      	adds	r3, #20
 801a866:	781b      	ldrb	r3, [r3, #0]
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d115      	bne.n	801a898 <etharp_query+0xc4>
    is_new_entry = 1;
 801a86c:	2301      	movs	r3, #1
 801a86e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801a870:	7c7a      	ldrb	r2, [r7, #17]
 801a872:	4972      	ldr	r1, [pc, #456]	; (801aa3c <etharp_query+0x268>)
 801a874:	4613      	mov	r3, r2
 801a876:	005b      	lsls	r3, r3, #1
 801a878:	4413      	add	r3, r2
 801a87a:	00db      	lsls	r3, r3, #3
 801a87c:	440b      	add	r3, r1
 801a87e:	3314      	adds	r3, #20
 801a880:	2201      	movs	r2, #1
 801a882:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801a884:	7c7a      	ldrb	r2, [r7, #17]
 801a886:	496d      	ldr	r1, [pc, #436]	; (801aa3c <etharp_query+0x268>)
 801a888:	4613      	mov	r3, r2
 801a88a:	005b      	lsls	r3, r3, #1
 801a88c:	4413      	add	r3, r2
 801a88e:	00db      	lsls	r3, r3, #3
 801a890:	440b      	add	r3, r1
 801a892:	3308      	adds	r3, #8
 801a894:	68fa      	ldr	r2, [r7, #12]
 801a896:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801a898:	7c7a      	ldrb	r2, [r7, #17]
 801a89a:	4968      	ldr	r1, [pc, #416]	; (801aa3c <etharp_query+0x268>)
 801a89c:	4613      	mov	r3, r2
 801a89e:	005b      	lsls	r3, r3, #1
 801a8a0:	4413      	add	r3, r2
 801a8a2:	00db      	lsls	r3, r3, #3
 801a8a4:	440b      	add	r3, r1
 801a8a6:	3314      	adds	r3, #20
 801a8a8:	781b      	ldrb	r3, [r3, #0]
 801a8aa:	2b01      	cmp	r3, #1
 801a8ac:	d011      	beq.n	801a8d2 <etharp_query+0xfe>
 801a8ae:	7c7a      	ldrb	r2, [r7, #17]
 801a8b0:	4962      	ldr	r1, [pc, #392]	; (801aa3c <etharp_query+0x268>)
 801a8b2:	4613      	mov	r3, r2
 801a8b4:	005b      	lsls	r3, r3, #1
 801a8b6:	4413      	add	r3, r2
 801a8b8:	00db      	lsls	r3, r3, #3
 801a8ba:	440b      	add	r3, r1
 801a8bc:	3314      	adds	r3, #20
 801a8be:	781b      	ldrb	r3, [r3, #0]
 801a8c0:	2b01      	cmp	r3, #1
 801a8c2:	d806      	bhi.n	801a8d2 <etharp_query+0xfe>
 801a8c4:	4b5a      	ldr	r3, [pc, #360]	; (801aa30 <etharp_query+0x25c>)
 801a8c6:	f240 32cd 	movw	r2, #973	; 0x3cd
 801a8ca:	495d      	ldr	r1, [pc, #372]	; (801aa40 <etharp_query+0x26c>)
 801a8cc:	485a      	ldr	r0, [pc, #360]	; (801aa38 <etharp_query+0x264>)
 801a8ce:	f001 ffd5 	bl	801c87c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801a8d2:	6a3b      	ldr	r3, [r7, #32]
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d102      	bne.n	801a8de <etharp_query+0x10a>
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	d10c      	bne.n	801a8f8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801a8de:	68b9      	ldr	r1, [r7, #8]
 801a8e0:	68f8      	ldr	r0, [r7, #12]
 801a8e2:	f000 f963 	bl	801abac <etharp_request>
 801a8e6:	4603      	mov	r3, r0
 801a8e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d102      	bne.n	801a8f8 <etharp_query+0x124>
      return result;
 801a8f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801a8f6:	e096      	b.n	801aa26 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	d106      	bne.n	801a90c <etharp_query+0x138>
 801a8fe:	4b4c      	ldr	r3, [pc, #304]	; (801aa30 <etharp_query+0x25c>)
 801a900:	f240 32e1 	movw	r2, #993	; 0x3e1
 801a904:	494f      	ldr	r1, [pc, #316]	; (801aa44 <etharp_query+0x270>)
 801a906:	484c      	ldr	r0, [pc, #304]	; (801aa38 <etharp_query+0x264>)
 801a908:	f001 ffb8 	bl	801c87c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801a90c:	7c7a      	ldrb	r2, [r7, #17]
 801a90e:	494b      	ldr	r1, [pc, #300]	; (801aa3c <etharp_query+0x268>)
 801a910:	4613      	mov	r3, r2
 801a912:	005b      	lsls	r3, r3, #1
 801a914:	4413      	add	r3, r2
 801a916:	00db      	lsls	r3, r3, #3
 801a918:	440b      	add	r3, r1
 801a91a:	3314      	adds	r3, #20
 801a91c:	781b      	ldrb	r3, [r3, #0]
 801a91e:	2b01      	cmp	r3, #1
 801a920:	d917      	bls.n	801a952 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801a922:	4a49      	ldr	r2, [pc, #292]	; (801aa48 <etharp_query+0x274>)
 801a924:	7c7b      	ldrb	r3, [r7, #17]
 801a926:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801a928:	7c7a      	ldrb	r2, [r7, #17]
 801a92a:	4613      	mov	r3, r2
 801a92c:	005b      	lsls	r3, r3, #1
 801a92e:	4413      	add	r3, r2
 801a930:	00db      	lsls	r3, r3, #3
 801a932:	3308      	adds	r3, #8
 801a934:	4a41      	ldr	r2, [pc, #260]	; (801aa3c <etharp_query+0x268>)
 801a936:	4413      	add	r3, r2
 801a938:	3304      	adds	r3, #4
 801a93a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a93e:	9200      	str	r2, [sp, #0]
 801a940:	697a      	ldr	r2, [r7, #20]
 801a942:	6879      	ldr	r1, [r7, #4]
 801a944:	68f8      	ldr	r0, [r7, #12]
 801a946:	f001 fc9b 	bl	801c280 <ethernet_output>
 801a94a:	4603      	mov	r3, r0
 801a94c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a950:	e067      	b.n	801aa22 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a952:	7c7a      	ldrb	r2, [r7, #17]
 801a954:	4939      	ldr	r1, [pc, #228]	; (801aa3c <etharp_query+0x268>)
 801a956:	4613      	mov	r3, r2
 801a958:	005b      	lsls	r3, r3, #1
 801a95a:	4413      	add	r3, r2
 801a95c:	00db      	lsls	r3, r3, #3
 801a95e:	440b      	add	r3, r1
 801a960:	3314      	adds	r3, #20
 801a962:	781b      	ldrb	r3, [r3, #0]
 801a964:	2b01      	cmp	r3, #1
 801a966:	d15c      	bne.n	801aa22 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801a968:	2300      	movs	r3, #0
 801a96a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a970:	e01c      	b.n	801a9ac <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801a972:	69fb      	ldr	r3, [r7, #28]
 801a974:	895a      	ldrh	r2, [r3, #10]
 801a976:	69fb      	ldr	r3, [r7, #28]
 801a978:	891b      	ldrh	r3, [r3, #8]
 801a97a:	429a      	cmp	r2, r3
 801a97c:	d10a      	bne.n	801a994 <etharp_query+0x1c0>
 801a97e:	69fb      	ldr	r3, [r7, #28]
 801a980:	681b      	ldr	r3, [r3, #0]
 801a982:	2b00      	cmp	r3, #0
 801a984:	d006      	beq.n	801a994 <etharp_query+0x1c0>
 801a986:	4b2a      	ldr	r3, [pc, #168]	; (801aa30 <etharp_query+0x25c>)
 801a988:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801a98c:	492f      	ldr	r1, [pc, #188]	; (801aa4c <etharp_query+0x278>)
 801a98e:	482a      	ldr	r0, [pc, #168]	; (801aa38 <etharp_query+0x264>)
 801a990:	f001 ff74 	bl	801c87c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801a994:	69fb      	ldr	r3, [r7, #28]
 801a996:	7b1b      	ldrb	r3, [r3, #12]
 801a998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d002      	beq.n	801a9a6 <etharp_query+0x1d2>
        copy_needed = 1;
 801a9a0:	2301      	movs	r3, #1
 801a9a2:	61bb      	str	r3, [r7, #24]
        break;
 801a9a4:	e005      	b.n	801a9b2 <etharp_query+0x1de>
      }
      p = p->next;
 801a9a6:	69fb      	ldr	r3, [r7, #28]
 801a9a8:	681b      	ldr	r3, [r3, #0]
 801a9aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a9ac:	69fb      	ldr	r3, [r7, #28]
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d1df      	bne.n	801a972 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801a9b2:	69bb      	ldr	r3, [r7, #24]
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d007      	beq.n	801a9c8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801a9b8:	687a      	ldr	r2, [r7, #4]
 801a9ba:	f44f 7120 	mov.w	r1, #640	; 0x280
 801a9be:	200e      	movs	r0, #14
 801a9c0:	f7f8 fc64 	bl	801328c <pbuf_clone>
 801a9c4:	61f8      	str	r0, [r7, #28]
 801a9c6:	e004      	b.n	801a9d2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801a9cc:	69f8      	ldr	r0, [r7, #28]
 801a9ce:	f7f8 fa9b 	bl	8012f08 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801a9d2:	69fb      	ldr	r3, [r7, #28]
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d021      	beq.n	801aa1c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801a9d8:	7c7a      	ldrb	r2, [r7, #17]
 801a9da:	4918      	ldr	r1, [pc, #96]	; (801aa3c <etharp_query+0x268>)
 801a9dc:	4613      	mov	r3, r2
 801a9de:	005b      	lsls	r3, r3, #1
 801a9e0:	4413      	add	r3, r2
 801a9e2:	00db      	lsls	r3, r3, #3
 801a9e4:	440b      	add	r3, r1
 801a9e6:	681b      	ldr	r3, [r3, #0]
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	d00a      	beq.n	801aa02 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801a9ec:	7c7a      	ldrb	r2, [r7, #17]
 801a9ee:	4913      	ldr	r1, [pc, #76]	; (801aa3c <etharp_query+0x268>)
 801a9f0:	4613      	mov	r3, r2
 801a9f2:	005b      	lsls	r3, r3, #1
 801a9f4:	4413      	add	r3, r2
 801a9f6:	00db      	lsls	r3, r3, #3
 801a9f8:	440b      	add	r3, r1
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	4618      	mov	r0, r3
 801a9fe:	f7f8 f9dd 	bl	8012dbc <pbuf_free>
      }
      arp_table[i].q = p;
 801aa02:	7c7a      	ldrb	r2, [r7, #17]
 801aa04:	490d      	ldr	r1, [pc, #52]	; (801aa3c <etharp_query+0x268>)
 801aa06:	4613      	mov	r3, r2
 801aa08:	005b      	lsls	r3, r3, #1
 801aa0a:	4413      	add	r3, r2
 801aa0c:	00db      	lsls	r3, r3, #3
 801aa0e:	440b      	add	r3, r1
 801aa10:	69fa      	ldr	r2, [r7, #28]
 801aa12:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801aa14:	2300      	movs	r3, #0
 801aa16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801aa1a:	e002      	b.n	801aa22 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801aa1c:	23ff      	movs	r3, #255	; 0xff
 801aa1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801aa22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801aa26:	4618      	mov	r0, r3
 801aa28:	3728      	adds	r7, #40	; 0x28
 801aa2a:	46bd      	mov	sp, r7
 801aa2c:	bd80      	pop	{r7, pc}
 801aa2e:	bf00      	nop
 801aa30:	080205a8 	.word	0x080205a8
 801aa34:	08020754 	.word	0x08020754
 801aa38:	08020620 	.word	0x08020620
 801aa3c:	20011408 	.word	0x20011408
 801aa40:	08020764 	.word	0x08020764
 801aa44:	08020748 	.word	0x08020748
 801aa48:	200114f8 	.word	0x200114f8
 801aa4c:	0802078c 	.word	0x0802078c

0801aa50 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801aa50:	b580      	push	{r7, lr}
 801aa52:	b08a      	sub	sp, #40	; 0x28
 801aa54:	af02      	add	r7, sp, #8
 801aa56:	60f8      	str	r0, [r7, #12]
 801aa58:	60b9      	str	r1, [r7, #8]
 801aa5a:	607a      	str	r2, [r7, #4]
 801aa5c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801aa5e:	2300      	movs	r3, #0
 801aa60:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801aa62:	68fb      	ldr	r3, [r7, #12]
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d106      	bne.n	801aa76 <etharp_raw+0x26>
 801aa68:	4b3a      	ldr	r3, [pc, #232]	; (801ab54 <etharp_raw+0x104>)
 801aa6a:	f240 4257 	movw	r2, #1111	; 0x457
 801aa6e:	493a      	ldr	r1, [pc, #232]	; (801ab58 <etharp_raw+0x108>)
 801aa70:	483a      	ldr	r0, [pc, #232]	; (801ab5c <etharp_raw+0x10c>)
 801aa72:	f001 ff03 	bl	801c87c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801aa76:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aa7a:	211c      	movs	r1, #28
 801aa7c:	200e      	movs	r0, #14
 801aa7e:	f7f7 feb9 	bl	80127f4 <pbuf_alloc>
 801aa82:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801aa84:	69bb      	ldr	r3, [r7, #24]
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	d102      	bne.n	801aa90 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801aa8a:	f04f 33ff 	mov.w	r3, #4294967295
 801aa8e:	e05d      	b.n	801ab4c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801aa90:	69bb      	ldr	r3, [r7, #24]
 801aa92:	895b      	ldrh	r3, [r3, #10]
 801aa94:	2b1b      	cmp	r3, #27
 801aa96:	d806      	bhi.n	801aaa6 <etharp_raw+0x56>
 801aa98:	4b2e      	ldr	r3, [pc, #184]	; (801ab54 <etharp_raw+0x104>)
 801aa9a:	f240 4262 	movw	r2, #1122	; 0x462
 801aa9e:	4930      	ldr	r1, [pc, #192]	; (801ab60 <etharp_raw+0x110>)
 801aaa0:	482e      	ldr	r0, [pc, #184]	; (801ab5c <etharp_raw+0x10c>)
 801aaa2:	f001 feeb 	bl	801c87c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801aaa6:	69bb      	ldr	r3, [r7, #24]
 801aaa8:	685b      	ldr	r3, [r3, #4]
 801aaaa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801aaac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801aaae:	4618      	mov	r0, r3
 801aab0:	f7f6 fcd6 	bl	8011460 <lwip_htons>
 801aab4:	4603      	mov	r3, r0
 801aab6:	461a      	mov	r2, r3
 801aab8:	697b      	ldr	r3, [r7, #20]
 801aaba:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801aac2:	2b06      	cmp	r3, #6
 801aac4:	d006      	beq.n	801aad4 <etharp_raw+0x84>
 801aac6:	4b23      	ldr	r3, [pc, #140]	; (801ab54 <etharp_raw+0x104>)
 801aac8:	f240 4269 	movw	r2, #1129	; 0x469
 801aacc:	4925      	ldr	r1, [pc, #148]	; (801ab64 <etharp_raw+0x114>)
 801aace:	4823      	ldr	r0, [pc, #140]	; (801ab5c <etharp_raw+0x10c>)
 801aad0:	f001 fed4 	bl	801c87c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801aad4:	697b      	ldr	r3, [r7, #20]
 801aad6:	3308      	adds	r3, #8
 801aad8:	2206      	movs	r2, #6
 801aada:	6839      	ldr	r1, [r7, #0]
 801aadc:	4618      	mov	r0, r3
 801aade:	f001 ffae 	bl	801ca3e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801aae2:	697b      	ldr	r3, [r7, #20]
 801aae4:	3312      	adds	r3, #18
 801aae6:	2206      	movs	r2, #6
 801aae8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801aaea:	4618      	mov	r0, r3
 801aaec:	f001 ffa7 	bl	801ca3e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801aaf0:	697b      	ldr	r3, [r7, #20]
 801aaf2:	330e      	adds	r3, #14
 801aaf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aaf6:	6812      	ldr	r2, [r2, #0]
 801aaf8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801aafa:	697b      	ldr	r3, [r7, #20]
 801aafc:	3318      	adds	r3, #24
 801aafe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ab00:	6812      	ldr	r2, [r2, #0]
 801ab02:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801ab04:	697b      	ldr	r3, [r7, #20]
 801ab06:	2200      	movs	r2, #0
 801ab08:	701a      	strb	r2, [r3, #0]
 801ab0a:	2200      	movs	r2, #0
 801ab0c:	f042 0201 	orr.w	r2, r2, #1
 801ab10:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801ab12:	697b      	ldr	r3, [r7, #20]
 801ab14:	2200      	movs	r2, #0
 801ab16:	f042 0208 	orr.w	r2, r2, #8
 801ab1a:	709a      	strb	r2, [r3, #2]
 801ab1c:	2200      	movs	r2, #0
 801ab1e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801ab20:	697b      	ldr	r3, [r7, #20]
 801ab22:	2206      	movs	r2, #6
 801ab24:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801ab26:	697b      	ldr	r3, [r7, #20]
 801ab28:	2204      	movs	r2, #4
 801ab2a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801ab2c:	f640 0306 	movw	r3, #2054	; 0x806
 801ab30:	9300      	str	r3, [sp, #0]
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	68ba      	ldr	r2, [r7, #8]
 801ab36:	69b9      	ldr	r1, [r7, #24]
 801ab38:	68f8      	ldr	r0, [r7, #12]
 801ab3a:	f001 fba1 	bl	801c280 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801ab3e:	69b8      	ldr	r0, [r7, #24]
 801ab40:	f7f8 f93c 	bl	8012dbc <pbuf_free>
  p = NULL;
 801ab44:	2300      	movs	r3, #0
 801ab46:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801ab48:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ab4c:	4618      	mov	r0, r3
 801ab4e:	3720      	adds	r7, #32
 801ab50:	46bd      	mov	sp, r7
 801ab52:	bd80      	pop	{r7, pc}
 801ab54:	080205a8 	.word	0x080205a8
 801ab58:	080206f8 	.word	0x080206f8
 801ab5c:	08020620 	.word	0x08020620
 801ab60:	080207a8 	.word	0x080207a8
 801ab64:	080207dc 	.word	0x080207dc

0801ab68 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801ab68:	b580      	push	{r7, lr}
 801ab6a:	b088      	sub	sp, #32
 801ab6c:	af04      	add	r7, sp, #16
 801ab6e:	60f8      	str	r0, [r7, #12]
 801ab70:	60b9      	str	r1, [r7, #8]
 801ab72:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ab74:	68fb      	ldr	r3, [r7, #12]
 801ab76:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801ab7a:	68fb      	ldr	r3, [r7, #12]
 801ab7c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801ab80:	68fb      	ldr	r3, [r7, #12]
 801ab82:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ab84:	2201      	movs	r2, #1
 801ab86:	9203      	str	r2, [sp, #12]
 801ab88:	68ba      	ldr	r2, [r7, #8]
 801ab8a:	9202      	str	r2, [sp, #8]
 801ab8c:	4a06      	ldr	r2, [pc, #24]	; (801aba8 <etharp_request_dst+0x40>)
 801ab8e:	9201      	str	r2, [sp, #4]
 801ab90:	9300      	str	r3, [sp, #0]
 801ab92:	4603      	mov	r3, r0
 801ab94:	687a      	ldr	r2, [r7, #4]
 801ab96:	68f8      	ldr	r0, [r7, #12]
 801ab98:	f7ff ff5a 	bl	801aa50 <etharp_raw>
 801ab9c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801ab9e:	4618      	mov	r0, r3
 801aba0:	3710      	adds	r7, #16
 801aba2:	46bd      	mov	sp, r7
 801aba4:	bd80      	pop	{r7, pc}
 801aba6:	bf00      	nop
 801aba8:	08020e20 	.word	0x08020e20

0801abac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801abac:	b580      	push	{r7, lr}
 801abae:	b082      	sub	sp, #8
 801abb0:	af00      	add	r7, sp, #0
 801abb2:	6078      	str	r0, [r7, #4]
 801abb4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801abb6:	4a05      	ldr	r2, [pc, #20]	; (801abcc <etharp_request+0x20>)
 801abb8:	6839      	ldr	r1, [r7, #0]
 801abba:	6878      	ldr	r0, [r7, #4]
 801abbc:	f7ff ffd4 	bl	801ab68 <etharp_request_dst>
 801abc0:	4603      	mov	r3, r0
}
 801abc2:	4618      	mov	r0, r3
 801abc4:	3708      	adds	r7, #8
 801abc6:	46bd      	mov	sp, r7
 801abc8:	bd80      	pop	{r7, pc}
 801abca:	bf00      	nop
 801abcc:	08020e18 	.word	0x08020e18

0801abd0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801abd0:	b580      	push	{r7, lr}
 801abd2:	b08e      	sub	sp, #56	; 0x38
 801abd4:	af04      	add	r7, sp, #16
 801abd6:	6078      	str	r0, [r7, #4]
 801abd8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801abda:	4b87      	ldr	r3, [pc, #540]	; (801adf8 <icmp_input+0x228>)
 801abdc:	689b      	ldr	r3, [r3, #8]
 801abde:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801abe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abe2:	781b      	ldrb	r3, [r3, #0]
 801abe4:	f003 030f 	and.w	r3, r3, #15
 801abe8:	b2db      	uxtb	r3, r3
 801abea:	009b      	lsls	r3, r3, #2
 801abec:	b2db      	uxtb	r3, r3
 801abee:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801abf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801abf2:	2b13      	cmp	r3, #19
 801abf4:	f240 80e8 	bls.w	801adc8 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	895b      	ldrh	r3, [r3, #10]
 801abfc:	2b03      	cmp	r3, #3
 801abfe:	f240 80e5 	bls.w	801adcc <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	685b      	ldr	r3, [r3, #4]
 801ac06:	781b      	ldrb	r3, [r3, #0]
 801ac08:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801ac0c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	f000 80d2 	beq.w	801adba <icmp_input+0x1ea>
 801ac16:	2b08      	cmp	r3, #8
 801ac18:	f040 80d2 	bne.w	801adc0 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801ac1c:	4b77      	ldr	r3, [pc, #476]	; (801adfc <icmp_input+0x22c>)
 801ac1e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ac20:	4b75      	ldr	r3, [pc, #468]	; (801adf8 <icmp_input+0x228>)
 801ac22:	695b      	ldr	r3, [r3, #20]
 801ac24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ac28:	2be0      	cmp	r3, #224	; 0xe0
 801ac2a:	f000 80d6 	beq.w	801adda <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801ac2e:	4b72      	ldr	r3, [pc, #456]	; (801adf8 <icmp_input+0x228>)
 801ac30:	695b      	ldr	r3, [r3, #20]
 801ac32:	4a71      	ldr	r2, [pc, #452]	; (801adf8 <icmp_input+0x228>)
 801ac34:	6812      	ldr	r2, [r2, #0]
 801ac36:	4611      	mov	r1, r2
 801ac38:	4618      	mov	r0, r3
 801ac3a:	f000 fc13 	bl	801b464 <ip4_addr_isbroadcast_u32>
 801ac3e:	4603      	mov	r3, r0
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	f040 80cc 	bne.w	801adde <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	891b      	ldrh	r3, [r3, #8]
 801ac4a:	2b07      	cmp	r3, #7
 801ac4c:	f240 80c0 	bls.w	801add0 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801ac50:	6878      	ldr	r0, [r7, #4]
 801ac52:	f7f6 fca2 	bl	801159a <inet_chksum_pbuf>
 801ac56:	4603      	mov	r3, r0
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d003      	beq.n	801ac64 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801ac5c:	6878      	ldr	r0, [r7, #4]
 801ac5e:	f7f8 f8ad 	bl	8012dbc <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801ac62:	e0c5      	b.n	801adf0 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ac64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ac66:	330e      	adds	r3, #14
 801ac68:	4619      	mov	r1, r3
 801ac6a:	6878      	ldr	r0, [r7, #4]
 801ac6c:	f7f8 f810 	bl	8012c90 <pbuf_add_header>
 801ac70:	4603      	mov	r3, r0
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d04b      	beq.n	801ad0e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	891a      	ldrh	r2, [r3, #8]
 801ac7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ac7c:	4413      	add	r3, r2
 801ac7e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	891b      	ldrh	r3, [r3, #8]
 801ac84:	8b7a      	ldrh	r2, [r7, #26]
 801ac86:	429a      	cmp	r2, r3
 801ac88:	f0c0 80ab 	bcc.w	801ade2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801ac8c:	8b7b      	ldrh	r3, [r7, #26]
 801ac8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ac92:	4619      	mov	r1, r3
 801ac94:	200e      	movs	r0, #14
 801ac96:	f7f7 fdad 	bl	80127f4 <pbuf_alloc>
 801ac9a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801ac9c:	697b      	ldr	r3, [r7, #20]
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	f000 80a1 	beq.w	801ade6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801aca4:	697b      	ldr	r3, [r7, #20]
 801aca6:	895b      	ldrh	r3, [r3, #10]
 801aca8:	461a      	mov	r2, r3
 801acaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801acac:	3308      	adds	r3, #8
 801acae:	429a      	cmp	r2, r3
 801acb0:	d203      	bcs.n	801acba <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801acb2:	6978      	ldr	r0, [r7, #20]
 801acb4:	f7f8 f882 	bl	8012dbc <pbuf_free>
          goto icmperr;
 801acb8:	e096      	b.n	801ade8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801acba:	697b      	ldr	r3, [r7, #20]
 801acbc:	685b      	ldr	r3, [r3, #4]
 801acbe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801acc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801acc2:	4618      	mov	r0, r3
 801acc4:	f001 febb 	bl	801ca3e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801acc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801acca:	4619      	mov	r1, r3
 801accc:	6978      	ldr	r0, [r7, #20]
 801acce:	f7f7 ffef 	bl	8012cb0 <pbuf_remove_header>
 801acd2:	4603      	mov	r3, r0
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	d009      	beq.n	801acec <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801acd8:	4b49      	ldr	r3, [pc, #292]	; (801ae00 <icmp_input+0x230>)
 801acda:	22b6      	movs	r2, #182	; 0xb6
 801acdc:	4949      	ldr	r1, [pc, #292]	; (801ae04 <icmp_input+0x234>)
 801acde:	484a      	ldr	r0, [pc, #296]	; (801ae08 <icmp_input+0x238>)
 801ace0:	f001 fdcc 	bl	801c87c <iprintf>
          pbuf_free(r);
 801ace4:	6978      	ldr	r0, [r7, #20]
 801ace6:	f7f8 f869 	bl	8012dbc <pbuf_free>
          goto icmperr;
 801acea:	e07d      	b.n	801ade8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801acec:	6879      	ldr	r1, [r7, #4]
 801acee:	6978      	ldr	r0, [r7, #20]
 801acf0:	f7f8 f988 	bl	8013004 <pbuf_copy>
 801acf4:	4603      	mov	r3, r0
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d003      	beq.n	801ad02 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801acfa:	6978      	ldr	r0, [r7, #20]
 801acfc:	f7f8 f85e 	bl	8012dbc <pbuf_free>
          goto icmperr;
 801ad00:	e072      	b.n	801ade8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801ad02:	6878      	ldr	r0, [r7, #4]
 801ad04:	f7f8 f85a 	bl	8012dbc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801ad08:	697b      	ldr	r3, [r7, #20]
 801ad0a:	607b      	str	r3, [r7, #4]
 801ad0c:	e00f      	b.n	801ad2e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ad0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ad10:	330e      	adds	r3, #14
 801ad12:	4619      	mov	r1, r3
 801ad14:	6878      	ldr	r0, [r7, #4]
 801ad16:	f7f7 ffcb 	bl	8012cb0 <pbuf_remove_header>
 801ad1a:	4603      	mov	r3, r0
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	d006      	beq.n	801ad2e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801ad20:	4b37      	ldr	r3, [pc, #220]	; (801ae00 <icmp_input+0x230>)
 801ad22:	22c7      	movs	r2, #199	; 0xc7
 801ad24:	4939      	ldr	r1, [pc, #228]	; (801ae0c <icmp_input+0x23c>)
 801ad26:	4838      	ldr	r0, [pc, #224]	; (801ae08 <icmp_input+0x238>)
 801ad28:	f001 fda8 	bl	801c87c <iprintf>
          goto icmperr;
 801ad2c:	e05c      	b.n	801ade8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801ad2e:	687b      	ldr	r3, [r7, #4]
 801ad30:	685b      	ldr	r3, [r3, #4]
 801ad32:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801ad34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ad36:	4619      	mov	r1, r3
 801ad38:	6878      	ldr	r0, [r7, #4]
 801ad3a:	f7f7 ffa9 	bl	8012c90 <pbuf_add_header>
 801ad3e:	4603      	mov	r3, r0
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d13c      	bne.n	801adbe <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	685b      	ldr	r3, [r3, #4]
 801ad48:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801ad4a:	69fb      	ldr	r3, [r7, #28]
 801ad4c:	681a      	ldr	r2, [r3, #0]
 801ad4e:	68fb      	ldr	r3, [r7, #12]
 801ad50:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801ad52:	4b29      	ldr	r3, [pc, #164]	; (801adf8 <icmp_input+0x228>)
 801ad54:	691a      	ldr	r2, [r3, #16]
 801ad56:	68fb      	ldr	r3, [r7, #12]
 801ad58:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801ad5a:	693b      	ldr	r3, [r7, #16]
 801ad5c:	2200      	movs	r2, #0
 801ad5e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801ad60:	693b      	ldr	r3, [r7, #16]
 801ad62:	885b      	ldrh	r3, [r3, #2]
 801ad64:	b29b      	uxth	r3, r3
 801ad66:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801ad6a:	4293      	cmp	r3, r2
 801ad6c:	d907      	bls.n	801ad7e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801ad6e:	693b      	ldr	r3, [r7, #16]
 801ad70:	885b      	ldrh	r3, [r3, #2]
 801ad72:	b29b      	uxth	r3, r3
 801ad74:	3309      	adds	r3, #9
 801ad76:	b29a      	uxth	r2, r3
 801ad78:	693b      	ldr	r3, [r7, #16]
 801ad7a:	805a      	strh	r2, [r3, #2]
 801ad7c:	e006      	b.n	801ad8c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801ad7e:	693b      	ldr	r3, [r7, #16]
 801ad80:	885b      	ldrh	r3, [r3, #2]
 801ad82:	b29b      	uxth	r3, r3
 801ad84:	3308      	adds	r3, #8
 801ad86:	b29a      	uxth	r2, r3
 801ad88:	693b      	ldr	r3, [r7, #16]
 801ad8a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801ad8c:	68fb      	ldr	r3, [r7, #12]
 801ad8e:	22ff      	movs	r2, #255	; 0xff
 801ad90:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801ad92:	68fb      	ldr	r3, [r7, #12]
 801ad94:	2200      	movs	r2, #0
 801ad96:	729a      	strb	r2, [r3, #10]
 801ad98:	2200      	movs	r2, #0
 801ad9a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801ad9c:	683b      	ldr	r3, [r7, #0]
 801ad9e:	9302      	str	r3, [sp, #8]
 801ada0:	2301      	movs	r3, #1
 801ada2:	9301      	str	r3, [sp, #4]
 801ada4:	2300      	movs	r3, #0
 801ada6:	9300      	str	r3, [sp, #0]
 801ada8:	23ff      	movs	r3, #255	; 0xff
 801adaa:	2200      	movs	r2, #0
 801adac:	69f9      	ldr	r1, [r7, #28]
 801adae:	6878      	ldr	r0, [r7, #4]
 801adb0:	f000 fa80 	bl	801b2b4 <ip4_output_if>
 801adb4:	4603      	mov	r3, r0
 801adb6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801adb8:	e001      	b.n	801adbe <icmp_input+0x1ee>
      break;
 801adba:	bf00      	nop
 801adbc:	e000      	b.n	801adc0 <icmp_input+0x1f0>
      break;
 801adbe:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801adc0:	6878      	ldr	r0, [r7, #4]
 801adc2:	f7f7 fffb 	bl	8012dbc <pbuf_free>
  return;
 801adc6:	e013      	b.n	801adf0 <icmp_input+0x220>
    goto lenerr;
 801adc8:	bf00      	nop
 801adca:	e002      	b.n	801add2 <icmp_input+0x202>
    goto lenerr;
 801adcc:	bf00      	nop
 801adce:	e000      	b.n	801add2 <icmp_input+0x202>
        goto lenerr;
 801add0:	bf00      	nop
lenerr:
  pbuf_free(p);
 801add2:	6878      	ldr	r0, [r7, #4]
 801add4:	f7f7 fff2 	bl	8012dbc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801add8:	e00a      	b.n	801adf0 <icmp_input+0x220>
        goto icmperr;
 801adda:	bf00      	nop
 801addc:	e004      	b.n	801ade8 <icmp_input+0x218>
        goto icmperr;
 801adde:	bf00      	nop
 801ade0:	e002      	b.n	801ade8 <icmp_input+0x218>
          goto icmperr;
 801ade2:	bf00      	nop
 801ade4:	e000      	b.n	801ade8 <icmp_input+0x218>
          goto icmperr;
 801ade6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801ade8:	6878      	ldr	r0, [r7, #4]
 801adea:	f7f7 ffe7 	bl	8012dbc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801adee:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801adf0:	3728      	adds	r7, #40	; 0x28
 801adf2:	46bd      	mov	sp, r7
 801adf4:	bd80      	pop	{r7, pc}
 801adf6:	bf00      	nop
 801adf8:	2000dc54 	.word	0x2000dc54
 801adfc:	2000dc68 	.word	0x2000dc68
 801ae00:	08020820 	.word	0x08020820
 801ae04:	08020858 	.word	0x08020858
 801ae08:	08020890 	.word	0x08020890
 801ae0c:	080208b8 	.word	0x080208b8

0801ae10 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801ae10:	b580      	push	{r7, lr}
 801ae12:	b082      	sub	sp, #8
 801ae14:	af00      	add	r7, sp, #0
 801ae16:	6078      	str	r0, [r7, #4]
 801ae18:	460b      	mov	r3, r1
 801ae1a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801ae1c:	78fb      	ldrb	r3, [r7, #3]
 801ae1e:	461a      	mov	r2, r3
 801ae20:	2103      	movs	r1, #3
 801ae22:	6878      	ldr	r0, [r7, #4]
 801ae24:	f000 f814 	bl	801ae50 <icmp_send_response>
}
 801ae28:	bf00      	nop
 801ae2a:	3708      	adds	r7, #8
 801ae2c:	46bd      	mov	sp, r7
 801ae2e:	bd80      	pop	{r7, pc}

0801ae30 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801ae30:	b580      	push	{r7, lr}
 801ae32:	b082      	sub	sp, #8
 801ae34:	af00      	add	r7, sp, #0
 801ae36:	6078      	str	r0, [r7, #4]
 801ae38:	460b      	mov	r3, r1
 801ae3a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801ae3c:	78fb      	ldrb	r3, [r7, #3]
 801ae3e:	461a      	mov	r2, r3
 801ae40:	210b      	movs	r1, #11
 801ae42:	6878      	ldr	r0, [r7, #4]
 801ae44:	f000 f804 	bl	801ae50 <icmp_send_response>
}
 801ae48:	bf00      	nop
 801ae4a:	3708      	adds	r7, #8
 801ae4c:	46bd      	mov	sp, r7
 801ae4e:	bd80      	pop	{r7, pc}

0801ae50 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801ae50:	b580      	push	{r7, lr}
 801ae52:	b08c      	sub	sp, #48	; 0x30
 801ae54:	af04      	add	r7, sp, #16
 801ae56:	6078      	str	r0, [r7, #4]
 801ae58:	460b      	mov	r3, r1
 801ae5a:	70fb      	strb	r3, [r7, #3]
 801ae5c:	4613      	mov	r3, r2
 801ae5e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801ae60:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ae64:	2124      	movs	r1, #36	; 0x24
 801ae66:	2022      	movs	r0, #34	; 0x22
 801ae68:	f7f7 fcc4 	bl	80127f4 <pbuf_alloc>
 801ae6c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801ae6e:	69fb      	ldr	r3, [r7, #28]
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d056      	beq.n	801af22 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801ae74:	69fb      	ldr	r3, [r7, #28]
 801ae76:	895b      	ldrh	r3, [r3, #10]
 801ae78:	2b23      	cmp	r3, #35	; 0x23
 801ae7a:	d806      	bhi.n	801ae8a <icmp_send_response+0x3a>
 801ae7c:	4b2b      	ldr	r3, [pc, #172]	; (801af2c <icmp_send_response+0xdc>)
 801ae7e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801ae82:	492b      	ldr	r1, [pc, #172]	; (801af30 <icmp_send_response+0xe0>)
 801ae84:	482b      	ldr	r0, [pc, #172]	; (801af34 <icmp_send_response+0xe4>)
 801ae86:	f001 fcf9 	bl	801c87c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	685b      	ldr	r3, [r3, #4]
 801ae8e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801ae90:	69fb      	ldr	r3, [r7, #28]
 801ae92:	685b      	ldr	r3, [r3, #4]
 801ae94:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801ae96:	697b      	ldr	r3, [r7, #20]
 801ae98:	78fa      	ldrb	r2, [r7, #3]
 801ae9a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801ae9c:	697b      	ldr	r3, [r7, #20]
 801ae9e:	78ba      	ldrb	r2, [r7, #2]
 801aea0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801aea2:	697b      	ldr	r3, [r7, #20]
 801aea4:	2200      	movs	r2, #0
 801aea6:	711a      	strb	r2, [r3, #4]
 801aea8:	2200      	movs	r2, #0
 801aeaa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801aeac:	697b      	ldr	r3, [r7, #20]
 801aeae:	2200      	movs	r2, #0
 801aeb0:	719a      	strb	r2, [r3, #6]
 801aeb2:	2200      	movs	r2, #0
 801aeb4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801aeb6:	69fb      	ldr	r3, [r7, #28]
 801aeb8:	685b      	ldr	r3, [r3, #4]
 801aeba:	f103 0008 	add.w	r0, r3, #8
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	685b      	ldr	r3, [r3, #4]
 801aec2:	221c      	movs	r2, #28
 801aec4:	4619      	mov	r1, r3
 801aec6:	f001 fdba 	bl	801ca3e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801aeca:	69bb      	ldr	r3, [r7, #24]
 801aecc:	68db      	ldr	r3, [r3, #12]
 801aece:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801aed0:	f107 030c 	add.w	r3, r7, #12
 801aed4:	4618      	mov	r0, r3
 801aed6:	f000 f82f 	bl	801af38 <ip4_route>
 801aeda:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801aedc:	693b      	ldr	r3, [r7, #16]
 801aede:	2b00      	cmp	r3, #0
 801aee0:	d01b      	beq.n	801af1a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801aee2:	697b      	ldr	r3, [r7, #20]
 801aee4:	2200      	movs	r2, #0
 801aee6:	709a      	strb	r2, [r3, #2]
 801aee8:	2200      	movs	r2, #0
 801aeea:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801aeec:	69fb      	ldr	r3, [r7, #28]
 801aeee:	895b      	ldrh	r3, [r3, #10]
 801aef0:	4619      	mov	r1, r3
 801aef2:	6978      	ldr	r0, [r7, #20]
 801aef4:	f7f6 fb3f 	bl	8011576 <inet_chksum>
 801aef8:	4603      	mov	r3, r0
 801aefa:	461a      	mov	r2, r3
 801aefc:	697b      	ldr	r3, [r7, #20]
 801aefe:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801af00:	f107 020c 	add.w	r2, r7, #12
 801af04:	693b      	ldr	r3, [r7, #16]
 801af06:	9302      	str	r3, [sp, #8]
 801af08:	2301      	movs	r3, #1
 801af0a:	9301      	str	r3, [sp, #4]
 801af0c:	2300      	movs	r3, #0
 801af0e:	9300      	str	r3, [sp, #0]
 801af10:	23ff      	movs	r3, #255	; 0xff
 801af12:	2100      	movs	r1, #0
 801af14:	69f8      	ldr	r0, [r7, #28]
 801af16:	f000 f9cd 	bl	801b2b4 <ip4_output_if>
  }
  pbuf_free(q);
 801af1a:	69f8      	ldr	r0, [r7, #28]
 801af1c:	f7f7 ff4e 	bl	8012dbc <pbuf_free>
 801af20:	e000      	b.n	801af24 <icmp_send_response+0xd4>
    return;
 801af22:	bf00      	nop
}
 801af24:	3720      	adds	r7, #32
 801af26:	46bd      	mov	sp, r7
 801af28:	bd80      	pop	{r7, pc}
 801af2a:	bf00      	nop
 801af2c:	08020820 	.word	0x08020820
 801af30:	080208ec 	.word	0x080208ec
 801af34:	08020890 	.word	0x08020890

0801af38 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801af38:	b480      	push	{r7}
 801af3a:	b085      	sub	sp, #20
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801af40:	4b33      	ldr	r3, [pc, #204]	; (801b010 <ip4_route+0xd8>)
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	60fb      	str	r3, [r7, #12]
 801af46:	e036      	b.n	801afb6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801af48:	68fb      	ldr	r3, [r7, #12]
 801af4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801af4e:	f003 0301 	and.w	r3, r3, #1
 801af52:	b2db      	uxtb	r3, r3
 801af54:	2b00      	cmp	r3, #0
 801af56:	d02b      	beq.n	801afb0 <ip4_route+0x78>
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801af5e:	089b      	lsrs	r3, r3, #2
 801af60:	f003 0301 	and.w	r3, r3, #1
 801af64:	b2db      	uxtb	r3, r3
 801af66:	2b00      	cmp	r3, #0
 801af68:	d022      	beq.n	801afb0 <ip4_route+0x78>
 801af6a:	68fb      	ldr	r3, [r7, #12]
 801af6c:	3304      	adds	r3, #4
 801af6e:	681b      	ldr	r3, [r3, #0]
 801af70:	2b00      	cmp	r3, #0
 801af72:	d01d      	beq.n	801afb0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	681a      	ldr	r2, [r3, #0]
 801af78:	68fb      	ldr	r3, [r7, #12]
 801af7a:	3304      	adds	r3, #4
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	405a      	eors	r2, r3
 801af80:	68fb      	ldr	r3, [r7, #12]
 801af82:	3308      	adds	r3, #8
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	4013      	ands	r3, r2
 801af88:	2b00      	cmp	r3, #0
 801af8a:	d101      	bne.n	801af90 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	e038      	b.n	801b002 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801af90:	68fb      	ldr	r3, [r7, #12]
 801af92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801af96:	f003 0302 	and.w	r3, r3, #2
 801af9a:	2b00      	cmp	r3, #0
 801af9c:	d108      	bne.n	801afb0 <ip4_route+0x78>
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	681a      	ldr	r2, [r3, #0]
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	330c      	adds	r3, #12
 801afa6:	681b      	ldr	r3, [r3, #0]
 801afa8:	429a      	cmp	r2, r3
 801afaa:	d101      	bne.n	801afb0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801afac:	68fb      	ldr	r3, [r7, #12]
 801afae:	e028      	b.n	801b002 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801afb0:	68fb      	ldr	r3, [r7, #12]
 801afb2:	681b      	ldr	r3, [r3, #0]
 801afb4:	60fb      	str	r3, [r7, #12]
 801afb6:	68fb      	ldr	r3, [r7, #12]
 801afb8:	2b00      	cmp	r3, #0
 801afba:	d1c5      	bne.n	801af48 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801afbc:	4b15      	ldr	r3, [pc, #84]	; (801b014 <ip4_route+0xdc>)
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d01a      	beq.n	801affa <ip4_route+0xc2>
 801afc4:	4b13      	ldr	r3, [pc, #76]	; (801b014 <ip4_route+0xdc>)
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801afcc:	f003 0301 	and.w	r3, r3, #1
 801afd0:	2b00      	cmp	r3, #0
 801afd2:	d012      	beq.n	801affa <ip4_route+0xc2>
 801afd4:	4b0f      	ldr	r3, [pc, #60]	; (801b014 <ip4_route+0xdc>)
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801afdc:	f003 0304 	and.w	r3, r3, #4
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	d00a      	beq.n	801affa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801afe4:	4b0b      	ldr	r3, [pc, #44]	; (801b014 <ip4_route+0xdc>)
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	3304      	adds	r3, #4
 801afea:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801afec:	2b00      	cmp	r3, #0
 801afee:	d004      	beq.n	801affa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	b2db      	uxtb	r3, r3
 801aff6:	2b7f      	cmp	r3, #127	; 0x7f
 801aff8:	d101      	bne.n	801affe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801affa:	2300      	movs	r3, #0
 801affc:	e001      	b.n	801b002 <ip4_route+0xca>
  }

  return netif_default;
 801affe:	4b05      	ldr	r3, [pc, #20]	; (801b014 <ip4_route+0xdc>)
 801b000:	681b      	ldr	r3, [r3, #0]
}
 801b002:	4618      	mov	r0, r3
 801b004:	3714      	adds	r7, #20
 801b006:	46bd      	mov	sp, r7
 801b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b00c:	4770      	bx	lr
 801b00e:	bf00      	nop
 801b010:	2001139c 	.word	0x2001139c
 801b014:	200113a0 	.word	0x200113a0

0801b018 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801b018:	b580      	push	{r7, lr}
 801b01a:	b082      	sub	sp, #8
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b020:	687b      	ldr	r3, [r7, #4]
 801b022:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b026:	f003 0301 	and.w	r3, r3, #1
 801b02a:	b2db      	uxtb	r3, r3
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d016      	beq.n	801b05e <ip4_input_accept+0x46>
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	3304      	adds	r3, #4
 801b034:	681b      	ldr	r3, [r3, #0]
 801b036:	2b00      	cmp	r3, #0
 801b038:	d011      	beq.n	801b05e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b03a:	4b0b      	ldr	r3, [pc, #44]	; (801b068 <ip4_input_accept+0x50>)
 801b03c:	695a      	ldr	r2, [r3, #20]
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	3304      	adds	r3, #4
 801b042:	681b      	ldr	r3, [r3, #0]
 801b044:	429a      	cmp	r2, r3
 801b046:	d008      	beq.n	801b05a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b048:	4b07      	ldr	r3, [pc, #28]	; (801b068 <ip4_input_accept+0x50>)
 801b04a:	695b      	ldr	r3, [r3, #20]
 801b04c:	6879      	ldr	r1, [r7, #4]
 801b04e:	4618      	mov	r0, r3
 801b050:	f000 fa08 	bl	801b464 <ip4_addr_isbroadcast_u32>
 801b054:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b056:	2b00      	cmp	r3, #0
 801b058:	d001      	beq.n	801b05e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801b05a:	2301      	movs	r3, #1
 801b05c:	e000      	b.n	801b060 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801b05e:	2300      	movs	r3, #0
}
 801b060:	4618      	mov	r0, r3
 801b062:	3708      	adds	r7, #8
 801b064:	46bd      	mov	sp, r7
 801b066:	bd80      	pop	{r7, pc}
 801b068:	2000dc54 	.word	0x2000dc54

0801b06c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b06c:	b580      	push	{r7, lr}
 801b06e:	b086      	sub	sp, #24
 801b070:	af00      	add	r7, sp, #0
 801b072:	6078      	str	r0, [r7, #4]
 801b074:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	685b      	ldr	r3, [r3, #4]
 801b07a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801b07c:	697b      	ldr	r3, [r7, #20]
 801b07e:	781b      	ldrb	r3, [r3, #0]
 801b080:	091b      	lsrs	r3, r3, #4
 801b082:	b2db      	uxtb	r3, r3
 801b084:	2b04      	cmp	r3, #4
 801b086:	d004      	beq.n	801b092 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b088:	6878      	ldr	r0, [r7, #4]
 801b08a:	f7f7 fe97 	bl	8012dbc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801b08e:	2300      	movs	r3, #0
 801b090:	e107      	b.n	801b2a2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801b092:	697b      	ldr	r3, [r7, #20]
 801b094:	781b      	ldrb	r3, [r3, #0]
 801b096:	f003 030f 	and.w	r3, r3, #15
 801b09a:	b2db      	uxtb	r3, r3
 801b09c:	009b      	lsls	r3, r3, #2
 801b09e:	b2db      	uxtb	r3, r3
 801b0a0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b0a2:	697b      	ldr	r3, [r7, #20]
 801b0a4:	885b      	ldrh	r3, [r3, #2]
 801b0a6:	b29b      	uxth	r3, r3
 801b0a8:	4618      	mov	r0, r3
 801b0aa:	f7f6 f9d9 	bl	8011460 <lwip_htons>
 801b0ae:	4603      	mov	r3, r0
 801b0b0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	891b      	ldrh	r3, [r3, #8]
 801b0b6:	89ba      	ldrh	r2, [r7, #12]
 801b0b8:	429a      	cmp	r2, r3
 801b0ba:	d204      	bcs.n	801b0c6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801b0bc:	89bb      	ldrh	r3, [r7, #12]
 801b0be:	4619      	mov	r1, r3
 801b0c0:	6878      	ldr	r0, [r7, #4]
 801b0c2:	f7f7 fcf5 	bl	8012ab0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	895b      	ldrh	r3, [r3, #10]
 801b0ca:	89fa      	ldrh	r2, [r7, #14]
 801b0cc:	429a      	cmp	r2, r3
 801b0ce:	d807      	bhi.n	801b0e0 <ip4_input+0x74>
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	891b      	ldrh	r3, [r3, #8]
 801b0d4:	89ba      	ldrh	r2, [r7, #12]
 801b0d6:	429a      	cmp	r2, r3
 801b0d8:	d802      	bhi.n	801b0e0 <ip4_input+0x74>
 801b0da:	89fb      	ldrh	r3, [r7, #14]
 801b0dc:	2b13      	cmp	r3, #19
 801b0de:	d804      	bhi.n	801b0ea <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801b0e0:	6878      	ldr	r0, [r7, #4]
 801b0e2:	f7f7 fe6b 	bl	8012dbc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801b0e6:	2300      	movs	r3, #0
 801b0e8:	e0db      	b.n	801b2a2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b0ea:	697b      	ldr	r3, [r7, #20]
 801b0ec:	691b      	ldr	r3, [r3, #16]
 801b0ee:	4a6f      	ldr	r2, [pc, #444]	; (801b2ac <ip4_input+0x240>)
 801b0f0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b0f2:	697b      	ldr	r3, [r7, #20]
 801b0f4:	68db      	ldr	r3, [r3, #12]
 801b0f6:	4a6d      	ldr	r2, [pc, #436]	; (801b2ac <ip4_input+0x240>)
 801b0f8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b0fa:	4b6c      	ldr	r3, [pc, #432]	; (801b2ac <ip4_input+0x240>)
 801b0fc:	695b      	ldr	r3, [r3, #20]
 801b0fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b102:	2be0      	cmp	r3, #224	; 0xe0
 801b104:	d112      	bne.n	801b12c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801b106:	683b      	ldr	r3, [r7, #0]
 801b108:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b10c:	f003 0301 	and.w	r3, r3, #1
 801b110:	b2db      	uxtb	r3, r3
 801b112:	2b00      	cmp	r3, #0
 801b114:	d007      	beq.n	801b126 <ip4_input+0xba>
 801b116:	683b      	ldr	r3, [r7, #0]
 801b118:	3304      	adds	r3, #4
 801b11a:	681b      	ldr	r3, [r3, #0]
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d002      	beq.n	801b126 <ip4_input+0xba>
      netif = inp;
 801b120:	683b      	ldr	r3, [r7, #0]
 801b122:	613b      	str	r3, [r7, #16]
 801b124:	e02a      	b.n	801b17c <ip4_input+0x110>
    } else {
      netif = NULL;
 801b126:	2300      	movs	r3, #0
 801b128:	613b      	str	r3, [r7, #16]
 801b12a:	e027      	b.n	801b17c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801b12c:	6838      	ldr	r0, [r7, #0]
 801b12e:	f7ff ff73 	bl	801b018 <ip4_input_accept>
 801b132:	4603      	mov	r3, r0
 801b134:	2b00      	cmp	r3, #0
 801b136:	d002      	beq.n	801b13e <ip4_input+0xd2>
      netif = inp;
 801b138:	683b      	ldr	r3, [r7, #0]
 801b13a:	613b      	str	r3, [r7, #16]
 801b13c:	e01e      	b.n	801b17c <ip4_input+0x110>
    } else {
      netif = NULL;
 801b13e:	2300      	movs	r3, #0
 801b140:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801b142:	4b5a      	ldr	r3, [pc, #360]	; (801b2ac <ip4_input+0x240>)
 801b144:	695b      	ldr	r3, [r3, #20]
 801b146:	b2db      	uxtb	r3, r3
 801b148:	2b7f      	cmp	r3, #127	; 0x7f
 801b14a:	d017      	beq.n	801b17c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801b14c:	4b58      	ldr	r3, [pc, #352]	; (801b2b0 <ip4_input+0x244>)
 801b14e:	681b      	ldr	r3, [r3, #0]
 801b150:	613b      	str	r3, [r7, #16]
 801b152:	e00e      	b.n	801b172 <ip4_input+0x106>
          if (netif == inp) {
 801b154:	693a      	ldr	r2, [r7, #16]
 801b156:	683b      	ldr	r3, [r7, #0]
 801b158:	429a      	cmp	r2, r3
 801b15a:	d006      	beq.n	801b16a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801b15c:	6938      	ldr	r0, [r7, #16]
 801b15e:	f7ff ff5b 	bl	801b018 <ip4_input_accept>
 801b162:	4603      	mov	r3, r0
 801b164:	2b00      	cmp	r3, #0
 801b166:	d108      	bne.n	801b17a <ip4_input+0x10e>
 801b168:	e000      	b.n	801b16c <ip4_input+0x100>
            continue;
 801b16a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801b16c:	693b      	ldr	r3, [r7, #16]
 801b16e:	681b      	ldr	r3, [r3, #0]
 801b170:	613b      	str	r3, [r7, #16]
 801b172:	693b      	ldr	r3, [r7, #16]
 801b174:	2b00      	cmp	r3, #0
 801b176:	d1ed      	bne.n	801b154 <ip4_input+0xe8>
 801b178:	e000      	b.n	801b17c <ip4_input+0x110>
            break;
 801b17a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b17c:	4b4b      	ldr	r3, [pc, #300]	; (801b2ac <ip4_input+0x240>)
 801b17e:	691b      	ldr	r3, [r3, #16]
 801b180:	6839      	ldr	r1, [r7, #0]
 801b182:	4618      	mov	r0, r3
 801b184:	f000 f96e 	bl	801b464 <ip4_addr_isbroadcast_u32>
 801b188:	4603      	mov	r3, r0
 801b18a:	2b00      	cmp	r3, #0
 801b18c:	d105      	bne.n	801b19a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801b18e:	4b47      	ldr	r3, [pc, #284]	; (801b2ac <ip4_input+0x240>)
 801b190:	691b      	ldr	r3, [r3, #16]
 801b192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b196:	2be0      	cmp	r3, #224	; 0xe0
 801b198:	d104      	bne.n	801b1a4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801b19a:	6878      	ldr	r0, [r7, #4]
 801b19c:	f7f7 fe0e 	bl	8012dbc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801b1a0:	2300      	movs	r3, #0
 801b1a2:	e07e      	b.n	801b2a2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801b1a4:	693b      	ldr	r3, [r7, #16]
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d104      	bne.n	801b1b4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801b1aa:	6878      	ldr	r0, [r7, #4]
 801b1ac:	f7f7 fe06 	bl	8012dbc <pbuf_free>
    return ERR_OK;
 801b1b0:	2300      	movs	r3, #0
 801b1b2:	e076      	b.n	801b2a2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801b1b4:	697b      	ldr	r3, [r7, #20]
 801b1b6:	88db      	ldrh	r3, [r3, #6]
 801b1b8:	b29b      	uxth	r3, r3
 801b1ba:	461a      	mov	r2, r3
 801b1bc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801b1c0:	4013      	ands	r3, r2
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d00b      	beq.n	801b1de <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801b1c6:	6878      	ldr	r0, [r7, #4]
 801b1c8:	f000 fc92 	bl	801baf0 <ip4_reass>
 801b1cc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	2b00      	cmp	r3, #0
 801b1d2:	d101      	bne.n	801b1d8 <ip4_input+0x16c>
      return ERR_OK;
 801b1d4:	2300      	movs	r3, #0
 801b1d6:	e064      	b.n	801b2a2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	685b      	ldr	r3, [r3, #4]
 801b1dc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801b1de:	4a33      	ldr	r2, [pc, #204]	; (801b2ac <ip4_input+0x240>)
 801b1e0:	693b      	ldr	r3, [r7, #16]
 801b1e2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801b1e4:	4a31      	ldr	r2, [pc, #196]	; (801b2ac <ip4_input+0x240>)
 801b1e6:	683b      	ldr	r3, [r7, #0]
 801b1e8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801b1ea:	4a30      	ldr	r2, [pc, #192]	; (801b2ac <ip4_input+0x240>)
 801b1ec:	697b      	ldr	r3, [r7, #20]
 801b1ee:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801b1f0:	697b      	ldr	r3, [r7, #20]
 801b1f2:	781b      	ldrb	r3, [r3, #0]
 801b1f4:	f003 030f 	and.w	r3, r3, #15
 801b1f8:	b2db      	uxtb	r3, r3
 801b1fa:	009b      	lsls	r3, r3, #2
 801b1fc:	b2db      	uxtb	r3, r3
 801b1fe:	b29a      	uxth	r2, r3
 801b200:	4b2a      	ldr	r3, [pc, #168]	; (801b2ac <ip4_input+0x240>)
 801b202:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801b204:	89fb      	ldrh	r3, [r7, #14]
 801b206:	4619      	mov	r1, r3
 801b208:	6878      	ldr	r0, [r7, #4]
 801b20a:	f7f7 fd51 	bl	8012cb0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801b20e:	697b      	ldr	r3, [r7, #20]
 801b210:	7a5b      	ldrb	r3, [r3, #9]
 801b212:	2b11      	cmp	r3, #17
 801b214:	d006      	beq.n	801b224 <ip4_input+0x1b8>
 801b216:	2b11      	cmp	r3, #17
 801b218:	dc13      	bgt.n	801b242 <ip4_input+0x1d6>
 801b21a:	2b01      	cmp	r3, #1
 801b21c:	d00c      	beq.n	801b238 <ip4_input+0x1cc>
 801b21e:	2b06      	cmp	r3, #6
 801b220:	d005      	beq.n	801b22e <ip4_input+0x1c2>
 801b222:	e00e      	b.n	801b242 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801b224:	6839      	ldr	r1, [r7, #0]
 801b226:	6878      	ldr	r0, [r7, #4]
 801b228:	f7fe fac6 	bl	80197b8 <udp_input>
        break;
 801b22c:	e026      	b.n	801b27c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801b22e:	6839      	ldr	r1, [r7, #0]
 801b230:	6878      	ldr	r0, [r7, #4]
 801b232:	f7f9 fe7f 	bl	8014f34 <tcp_input>
        break;
 801b236:	e021      	b.n	801b27c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801b238:	6839      	ldr	r1, [r7, #0]
 801b23a:	6878      	ldr	r0, [r7, #4]
 801b23c:	f7ff fcc8 	bl	801abd0 <icmp_input>
        break;
 801b240:	e01c      	b.n	801b27c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b242:	4b1a      	ldr	r3, [pc, #104]	; (801b2ac <ip4_input+0x240>)
 801b244:	695b      	ldr	r3, [r3, #20]
 801b246:	6939      	ldr	r1, [r7, #16]
 801b248:	4618      	mov	r0, r3
 801b24a:	f000 f90b 	bl	801b464 <ip4_addr_isbroadcast_u32>
 801b24e:	4603      	mov	r3, r0
 801b250:	2b00      	cmp	r3, #0
 801b252:	d10f      	bne.n	801b274 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b254:	4b15      	ldr	r3, [pc, #84]	; (801b2ac <ip4_input+0x240>)
 801b256:	695b      	ldr	r3, [r3, #20]
 801b258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b25c:	2be0      	cmp	r3, #224	; 0xe0
 801b25e:	d009      	beq.n	801b274 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801b260:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b264:	4619      	mov	r1, r3
 801b266:	6878      	ldr	r0, [r7, #4]
 801b268:	f7f7 fd95 	bl	8012d96 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801b26c:	2102      	movs	r1, #2
 801b26e:	6878      	ldr	r0, [r7, #4]
 801b270:	f7ff fdce 	bl	801ae10 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801b274:	6878      	ldr	r0, [r7, #4]
 801b276:	f7f7 fda1 	bl	8012dbc <pbuf_free>
        break;
 801b27a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801b27c:	4b0b      	ldr	r3, [pc, #44]	; (801b2ac <ip4_input+0x240>)
 801b27e:	2200      	movs	r2, #0
 801b280:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801b282:	4b0a      	ldr	r3, [pc, #40]	; (801b2ac <ip4_input+0x240>)
 801b284:	2200      	movs	r2, #0
 801b286:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801b288:	4b08      	ldr	r3, [pc, #32]	; (801b2ac <ip4_input+0x240>)
 801b28a:	2200      	movs	r2, #0
 801b28c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801b28e:	4b07      	ldr	r3, [pc, #28]	; (801b2ac <ip4_input+0x240>)
 801b290:	2200      	movs	r2, #0
 801b292:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801b294:	4b05      	ldr	r3, [pc, #20]	; (801b2ac <ip4_input+0x240>)
 801b296:	2200      	movs	r2, #0
 801b298:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801b29a:	4b04      	ldr	r3, [pc, #16]	; (801b2ac <ip4_input+0x240>)
 801b29c:	2200      	movs	r2, #0
 801b29e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801b2a0:	2300      	movs	r3, #0
}
 801b2a2:	4618      	mov	r0, r3
 801b2a4:	3718      	adds	r7, #24
 801b2a6:	46bd      	mov	sp, r7
 801b2a8:	bd80      	pop	{r7, pc}
 801b2aa:	bf00      	nop
 801b2ac:	2000dc54 	.word	0x2000dc54
 801b2b0:	2001139c 	.word	0x2001139c

0801b2b4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801b2b4:	b580      	push	{r7, lr}
 801b2b6:	b08a      	sub	sp, #40	; 0x28
 801b2b8:	af04      	add	r7, sp, #16
 801b2ba:	60f8      	str	r0, [r7, #12]
 801b2bc:	60b9      	str	r1, [r7, #8]
 801b2be:	607a      	str	r2, [r7, #4]
 801b2c0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801b2c2:	68bb      	ldr	r3, [r7, #8]
 801b2c4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	d009      	beq.n	801b2e0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801b2cc:	68bb      	ldr	r3, [r7, #8]
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d003      	beq.n	801b2da <ip4_output_if+0x26>
 801b2d2:	68bb      	ldr	r3, [r7, #8]
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	d102      	bne.n	801b2e0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801b2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2dc:	3304      	adds	r3, #4
 801b2de:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801b2e0:	78fa      	ldrb	r2, [r7, #3]
 801b2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2e4:	9302      	str	r3, [sp, #8]
 801b2e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b2ea:	9301      	str	r3, [sp, #4]
 801b2ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b2f0:	9300      	str	r3, [sp, #0]
 801b2f2:	4613      	mov	r3, r2
 801b2f4:	687a      	ldr	r2, [r7, #4]
 801b2f6:	6979      	ldr	r1, [r7, #20]
 801b2f8:	68f8      	ldr	r0, [r7, #12]
 801b2fa:	f000 f805 	bl	801b308 <ip4_output_if_src>
 801b2fe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801b300:	4618      	mov	r0, r3
 801b302:	3718      	adds	r7, #24
 801b304:	46bd      	mov	sp, r7
 801b306:	bd80      	pop	{r7, pc}

0801b308 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801b308:	b580      	push	{r7, lr}
 801b30a:	b088      	sub	sp, #32
 801b30c:	af00      	add	r7, sp, #0
 801b30e:	60f8      	str	r0, [r7, #12]
 801b310:	60b9      	str	r1, [r7, #8]
 801b312:	607a      	str	r2, [r7, #4]
 801b314:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801b316:	68fb      	ldr	r3, [r7, #12]
 801b318:	7b9b      	ldrb	r3, [r3, #14]
 801b31a:	2b01      	cmp	r3, #1
 801b31c:	d006      	beq.n	801b32c <ip4_output_if_src+0x24>
 801b31e:	4b4b      	ldr	r3, [pc, #300]	; (801b44c <ip4_output_if_src+0x144>)
 801b320:	f44f 7255 	mov.w	r2, #852	; 0x354
 801b324:	494a      	ldr	r1, [pc, #296]	; (801b450 <ip4_output_if_src+0x148>)
 801b326:	484b      	ldr	r0, [pc, #300]	; (801b454 <ip4_output_if_src+0x14c>)
 801b328:	f001 faa8 	bl	801c87c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	2b00      	cmp	r3, #0
 801b330:	d060      	beq.n	801b3f4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801b332:	2314      	movs	r3, #20
 801b334:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801b336:	2114      	movs	r1, #20
 801b338:	68f8      	ldr	r0, [r7, #12]
 801b33a:	f7f7 fca9 	bl	8012c90 <pbuf_add_header>
 801b33e:	4603      	mov	r3, r0
 801b340:	2b00      	cmp	r3, #0
 801b342:	d002      	beq.n	801b34a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b344:	f06f 0301 	mvn.w	r3, #1
 801b348:	e07c      	b.n	801b444 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801b34a:	68fb      	ldr	r3, [r7, #12]
 801b34c:	685b      	ldr	r3, [r3, #4]
 801b34e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801b350:	68fb      	ldr	r3, [r7, #12]
 801b352:	895b      	ldrh	r3, [r3, #10]
 801b354:	2b13      	cmp	r3, #19
 801b356:	d806      	bhi.n	801b366 <ip4_output_if_src+0x5e>
 801b358:	4b3c      	ldr	r3, [pc, #240]	; (801b44c <ip4_output_if_src+0x144>)
 801b35a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801b35e:	493e      	ldr	r1, [pc, #248]	; (801b458 <ip4_output_if_src+0x150>)
 801b360:	483c      	ldr	r0, [pc, #240]	; (801b454 <ip4_output_if_src+0x14c>)
 801b362:	f001 fa8b 	bl	801c87c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801b366:	69fb      	ldr	r3, [r7, #28]
 801b368:	78fa      	ldrb	r2, [r7, #3]
 801b36a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801b36c:	69fb      	ldr	r3, [r7, #28]
 801b36e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801b372:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	681a      	ldr	r2, [r3, #0]
 801b378:	69fb      	ldr	r3, [r7, #28]
 801b37a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801b37c:	8b7b      	ldrh	r3, [r7, #26]
 801b37e:	089b      	lsrs	r3, r3, #2
 801b380:	b29b      	uxth	r3, r3
 801b382:	b2db      	uxtb	r3, r3
 801b384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b388:	b2da      	uxtb	r2, r3
 801b38a:	69fb      	ldr	r3, [r7, #28]
 801b38c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801b38e:	69fb      	ldr	r3, [r7, #28]
 801b390:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801b394:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801b396:	68fb      	ldr	r3, [r7, #12]
 801b398:	891b      	ldrh	r3, [r3, #8]
 801b39a:	4618      	mov	r0, r3
 801b39c:	f7f6 f860 	bl	8011460 <lwip_htons>
 801b3a0:	4603      	mov	r3, r0
 801b3a2:	461a      	mov	r2, r3
 801b3a4:	69fb      	ldr	r3, [r7, #28]
 801b3a6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801b3a8:	69fb      	ldr	r3, [r7, #28]
 801b3aa:	2200      	movs	r2, #0
 801b3ac:	719a      	strb	r2, [r3, #6]
 801b3ae:	2200      	movs	r2, #0
 801b3b0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801b3b2:	4b2a      	ldr	r3, [pc, #168]	; (801b45c <ip4_output_if_src+0x154>)
 801b3b4:	881b      	ldrh	r3, [r3, #0]
 801b3b6:	4618      	mov	r0, r3
 801b3b8:	f7f6 f852 	bl	8011460 <lwip_htons>
 801b3bc:	4603      	mov	r3, r0
 801b3be:	461a      	mov	r2, r3
 801b3c0:	69fb      	ldr	r3, [r7, #28]
 801b3c2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801b3c4:	4b25      	ldr	r3, [pc, #148]	; (801b45c <ip4_output_if_src+0x154>)
 801b3c6:	881b      	ldrh	r3, [r3, #0]
 801b3c8:	3301      	adds	r3, #1
 801b3ca:	b29a      	uxth	r2, r3
 801b3cc:	4b23      	ldr	r3, [pc, #140]	; (801b45c <ip4_output_if_src+0x154>)
 801b3ce:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801b3d0:	68bb      	ldr	r3, [r7, #8]
 801b3d2:	2b00      	cmp	r3, #0
 801b3d4:	d104      	bne.n	801b3e0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801b3d6:	4b22      	ldr	r3, [pc, #136]	; (801b460 <ip4_output_if_src+0x158>)
 801b3d8:	681a      	ldr	r2, [r3, #0]
 801b3da:	69fb      	ldr	r3, [r7, #28]
 801b3dc:	60da      	str	r2, [r3, #12]
 801b3de:	e003      	b.n	801b3e8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b3e0:	68bb      	ldr	r3, [r7, #8]
 801b3e2:	681a      	ldr	r2, [r3, #0]
 801b3e4:	69fb      	ldr	r3, [r7, #28]
 801b3e6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b3e8:	69fb      	ldr	r3, [r7, #28]
 801b3ea:	2200      	movs	r2, #0
 801b3ec:	729a      	strb	r2, [r3, #10]
 801b3ee:	2200      	movs	r2, #0
 801b3f0:	72da      	strb	r2, [r3, #11]
 801b3f2:	e00f      	b.n	801b414 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b3f4:	68fb      	ldr	r3, [r7, #12]
 801b3f6:	895b      	ldrh	r3, [r3, #10]
 801b3f8:	2b13      	cmp	r3, #19
 801b3fa:	d802      	bhi.n	801b402 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b3fc:	f06f 0301 	mvn.w	r3, #1
 801b400:	e020      	b.n	801b444 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b402:	68fb      	ldr	r3, [r7, #12]
 801b404:	685b      	ldr	r3, [r3, #4]
 801b406:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b408:	69fb      	ldr	r3, [r7, #28]
 801b40a:	691b      	ldr	r3, [r3, #16]
 801b40c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b40e:	f107 0314 	add.w	r3, r7, #20
 801b412:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b416:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b418:	2b00      	cmp	r3, #0
 801b41a:	d00c      	beq.n	801b436 <ip4_output_if_src+0x12e>
 801b41c:	68fb      	ldr	r3, [r7, #12]
 801b41e:	891a      	ldrh	r2, [r3, #8]
 801b420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b422:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b424:	429a      	cmp	r2, r3
 801b426:	d906      	bls.n	801b436 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b428:	687a      	ldr	r2, [r7, #4]
 801b42a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b42c:	68f8      	ldr	r0, [r7, #12]
 801b42e:	f000 fd53 	bl	801bed8 <ip4_frag>
 801b432:	4603      	mov	r3, r0
 801b434:	e006      	b.n	801b444 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b438:	695b      	ldr	r3, [r3, #20]
 801b43a:	687a      	ldr	r2, [r7, #4]
 801b43c:	68f9      	ldr	r1, [r7, #12]
 801b43e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b440:	4798      	blx	r3
 801b442:	4603      	mov	r3, r0
}
 801b444:	4618      	mov	r0, r3
 801b446:	3720      	adds	r7, #32
 801b448:	46bd      	mov	sp, r7
 801b44a:	bd80      	pop	{r7, pc}
 801b44c:	08020918 	.word	0x08020918
 801b450:	0802094c 	.word	0x0802094c
 801b454:	08020958 	.word	0x08020958
 801b458:	08020980 	.word	0x08020980
 801b45c:	200114fa 	.word	0x200114fa
 801b460:	08020e14 	.word	0x08020e14

0801b464 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b464:	b480      	push	{r7}
 801b466:	b085      	sub	sp, #20
 801b468:	af00      	add	r7, sp, #0
 801b46a:	6078      	str	r0, [r7, #4]
 801b46c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b478:	d002      	beq.n	801b480 <ip4_addr_isbroadcast_u32+0x1c>
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	d101      	bne.n	801b484 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b480:	2301      	movs	r3, #1
 801b482:	e02a      	b.n	801b4da <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b484:	683b      	ldr	r3, [r7, #0]
 801b486:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b48a:	f003 0302 	and.w	r3, r3, #2
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d101      	bne.n	801b496 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b492:	2300      	movs	r3, #0
 801b494:	e021      	b.n	801b4da <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b496:	683b      	ldr	r3, [r7, #0]
 801b498:	3304      	adds	r3, #4
 801b49a:	681b      	ldr	r3, [r3, #0]
 801b49c:	687a      	ldr	r2, [r7, #4]
 801b49e:	429a      	cmp	r2, r3
 801b4a0:	d101      	bne.n	801b4a6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b4a2:	2300      	movs	r3, #0
 801b4a4:	e019      	b.n	801b4da <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b4a6:	68fa      	ldr	r2, [r7, #12]
 801b4a8:	683b      	ldr	r3, [r7, #0]
 801b4aa:	3304      	adds	r3, #4
 801b4ac:	681b      	ldr	r3, [r3, #0]
 801b4ae:	405a      	eors	r2, r3
 801b4b0:	683b      	ldr	r3, [r7, #0]
 801b4b2:	3308      	adds	r3, #8
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	4013      	ands	r3, r2
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	d10d      	bne.n	801b4d8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b4bc:	683b      	ldr	r3, [r7, #0]
 801b4be:	3308      	adds	r3, #8
 801b4c0:	681b      	ldr	r3, [r3, #0]
 801b4c2:	43da      	mvns	r2, r3
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b4c8:	683b      	ldr	r3, [r7, #0]
 801b4ca:	3308      	adds	r3, #8
 801b4cc:	681b      	ldr	r3, [r3, #0]
 801b4ce:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b4d0:	429a      	cmp	r2, r3
 801b4d2:	d101      	bne.n	801b4d8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b4d4:	2301      	movs	r3, #1
 801b4d6:	e000      	b.n	801b4da <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b4d8:	2300      	movs	r3, #0
  }
}
 801b4da:	4618      	mov	r0, r3
 801b4dc:	3714      	adds	r7, #20
 801b4de:	46bd      	mov	sp, r7
 801b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4e4:	4770      	bx	lr
	...

0801b4e8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b4e8:	b580      	push	{r7, lr}
 801b4ea:	b084      	sub	sp, #16
 801b4ec:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b4ee:	2300      	movs	r3, #0
 801b4f0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b4f2:	4b12      	ldr	r3, [pc, #72]	; (801b53c <ip_reass_tmr+0x54>)
 801b4f4:	681b      	ldr	r3, [r3, #0]
 801b4f6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b4f8:	e018      	b.n	801b52c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b4fa:	68fb      	ldr	r3, [r7, #12]
 801b4fc:	7fdb      	ldrb	r3, [r3, #31]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d00b      	beq.n	801b51a <ip_reass_tmr+0x32>
      r->timer--;
 801b502:	68fb      	ldr	r3, [r7, #12]
 801b504:	7fdb      	ldrb	r3, [r3, #31]
 801b506:	3b01      	subs	r3, #1
 801b508:	b2da      	uxtb	r2, r3
 801b50a:	68fb      	ldr	r3, [r7, #12]
 801b50c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b50e:	68fb      	ldr	r3, [r7, #12]
 801b510:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b512:	68fb      	ldr	r3, [r7, #12]
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	60fb      	str	r3, [r7, #12]
 801b518:	e008      	b.n	801b52c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b51a:	68fb      	ldr	r3, [r7, #12]
 801b51c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b51e:	68fb      	ldr	r3, [r7, #12]
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b524:	68b9      	ldr	r1, [r7, #8]
 801b526:	6878      	ldr	r0, [r7, #4]
 801b528:	f000 f80a 	bl	801b540 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b52c:	68fb      	ldr	r3, [r7, #12]
 801b52e:	2b00      	cmp	r3, #0
 801b530:	d1e3      	bne.n	801b4fa <ip_reass_tmr+0x12>
    }
  }
}
 801b532:	bf00      	nop
 801b534:	bf00      	nop
 801b536:	3710      	adds	r7, #16
 801b538:	46bd      	mov	sp, r7
 801b53a:	bd80      	pop	{r7, pc}
 801b53c:	200114fc 	.word	0x200114fc

0801b540 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b540:	b580      	push	{r7, lr}
 801b542:	b088      	sub	sp, #32
 801b544:	af00      	add	r7, sp, #0
 801b546:	6078      	str	r0, [r7, #4]
 801b548:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801b54a:	2300      	movs	r3, #0
 801b54c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b54e:	683a      	ldr	r2, [r7, #0]
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	429a      	cmp	r2, r3
 801b554:	d105      	bne.n	801b562 <ip_reass_free_complete_datagram+0x22>
 801b556:	4b45      	ldr	r3, [pc, #276]	; (801b66c <ip_reass_free_complete_datagram+0x12c>)
 801b558:	22ab      	movs	r2, #171	; 0xab
 801b55a:	4945      	ldr	r1, [pc, #276]	; (801b670 <ip_reass_free_complete_datagram+0x130>)
 801b55c:	4845      	ldr	r0, [pc, #276]	; (801b674 <ip_reass_free_complete_datagram+0x134>)
 801b55e:	f001 f98d 	bl	801c87c <iprintf>
  if (prev != NULL) {
 801b562:	683b      	ldr	r3, [r7, #0]
 801b564:	2b00      	cmp	r3, #0
 801b566:	d00a      	beq.n	801b57e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b568:	683b      	ldr	r3, [r7, #0]
 801b56a:	681b      	ldr	r3, [r3, #0]
 801b56c:	687a      	ldr	r2, [r7, #4]
 801b56e:	429a      	cmp	r2, r3
 801b570:	d005      	beq.n	801b57e <ip_reass_free_complete_datagram+0x3e>
 801b572:	4b3e      	ldr	r3, [pc, #248]	; (801b66c <ip_reass_free_complete_datagram+0x12c>)
 801b574:	22ad      	movs	r2, #173	; 0xad
 801b576:	4940      	ldr	r1, [pc, #256]	; (801b678 <ip_reass_free_complete_datagram+0x138>)
 801b578:	483e      	ldr	r0, [pc, #248]	; (801b674 <ip_reass_free_complete_datagram+0x134>)
 801b57a:	f001 f97f 	bl	801c87c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	685b      	ldr	r3, [r3, #4]
 801b582:	685b      	ldr	r3, [r3, #4]
 801b584:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801b586:	697b      	ldr	r3, [r7, #20]
 801b588:	889b      	ldrh	r3, [r3, #4]
 801b58a:	b29b      	uxth	r3, r3
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d12a      	bne.n	801b5e6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801b590:	687b      	ldr	r3, [r7, #4]
 801b592:	685b      	ldr	r3, [r3, #4]
 801b594:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801b596:	697b      	ldr	r3, [r7, #20]
 801b598:	681a      	ldr	r2, [r3, #0]
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b59e:	69bb      	ldr	r3, [r7, #24]
 801b5a0:	6858      	ldr	r0, [r3, #4]
 801b5a2:	687b      	ldr	r3, [r7, #4]
 801b5a4:	3308      	adds	r3, #8
 801b5a6:	2214      	movs	r2, #20
 801b5a8:	4619      	mov	r1, r3
 801b5aa:	f001 fa48 	bl	801ca3e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801b5ae:	2101      	movs	r1, #1
 801b5b0:	69b8      	ldr	r0, [r7, #24]
 801b5b2:	f7ff fc3d 	bl	801ae30 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801b5b6:	69b8      	ldr	r0, [r7, #24]
 801b5b8:	f7f7 fc8e 	bl	8012ed8 <pbuf_clen>
 801b5bc:	4603      	mov	r3, r0
 801b5be:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b5c0:	8bfa      	ldrh	r2, [r7, #30]
 801b5c2:	8a7b      	ldrh	r3, [r7, #18]
 801b5c4:	4413      	add	r3, r2
 801b5c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b5ca:	db05      	blt.n	801b5d8 <ip_reass_free_complete_datagram+0x98>
 801b5cc:	4b27      	ldr	r3, [pc, #156]	; (801b66c <ip_reass_free_complete_datagram+0x12c>)
 801b5ce:	22bc      	movs	r2, #188	; 0xbc
 801b5d0:	492a      	ldr	r1, [pc, #168]	; (801b67c <ip_reass_free_complete_datagram+0x13c>)
 801b5d2:	4828      	ldr	r0, [pc, #160]	; (801b674 <ip_reass_free_complete_datagram+0x134>)
 801b5d4:	f001 f952 	bl	801c87c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b5d8:	8bfa      	ldrh	r2, [r7, #30]
 801b5da:	8a7b      	ldrh	r3, [r7, #18]
 801b5dc:	4413      	add	r3, r2
 801b5de:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801b5e0:	69b8      	ldr	r0, [r7, #24]
 801b5e2:	f7f7 fbeb 	bl	8012dbc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	685b      	ldr	r3, [r3, #4]
 801b5ea:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801b5ec:	e01f      	b.n	801b62e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801b5ee:	69bb      	ldr	r3, [r7, #24]
 801b5f0:	685b      	ldr	r3, [r3, #4]
 801b5f2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801b5f4:	69bb      	ldr	r3, [r7, #24]
 801b5f6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801b5f8:	697b      	ldr	r3, [r7, #20]
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801b5fe:	68f8      	ldr	r0, [r7, #12]
 801b600:	f7f7 fc6a 	bl	8012ed8 <pbuf_clen>
 801b604:	4603      	mov	r3, r0
 801b606:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b608:	8bfa      	ldrh	r2, [r7, #30]
 801b60a:	8a7b      	ldrh	r3, [r7, #18]
 801b60c:	4413      	add	r3, r2
 801b60e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b612:	db05      	blt.n	801b620 <ip_reass_free_complete_datagram+0xe0>
 801b614:	4b15      	ldr	r3, [pc, #84]	; (801b66c <ip_reass_free_complete_datagram+0x12c>)
 801b616:	22cc      	movs	r2, #204	; 0xcc
 801b618:	4918      	ldr	r1, [pc, #96]	; (801b67c <ip_reass_free_complete_datagram+0x13c>)
 801b61a:	4816      	ldr	r0, [pc, #88]	; (801b674 <ip_reass_free_complete_datagram+0x134>)
 801b61c:	f001 f92e 	bl	801c87c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b620:	8bfa      	ldrh	r2, [r7, #30]
 801b622:	8a7b      	ldrh	r3, [r7, #18]
 801b624:	4413      	add	r3, r2
 801b626:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801b628:	68f8      	ldr	r0, [r7, #12]
 801b62a:	f7f7 fbc7 	bl	8012dbc <pbuf_free>
  while (p != NULL) {
 801b62e:	69bb      	ldr	r3, [r7, #24]
 801b630:	2b00      	cmp	r3, #0
 801b632:	d1dc      	bne.n	801b5ee <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801b634:	6839      	ldr	r1, [r7, #0]
 801b636:	6878      	ldr	r0, [r7, #4]
 801b638:	f000 f8c2 	bl	801b7c0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801b63c:	4b10      	ldr	r3, [pc, #64]	; (801b680 <ip_reass_free_complete_datagram+0x140>)
 801b63e:	881b      	ldrh	r3, [r3, #0]
 801b640:	8bfa      	ldrh	r2, [r7, #30]
 801b642:	429a      	cmp	r2, r3
 801b644:	d905      	bls.n	801b652 <ip_reass_free_complete_datagram+0x112>
 801b646:	4b09      	ldr	r3, [pc, #36]	; (801b66c <ip_reass_free_complete_datagram+0x12c>)
 801b648:	22d2      	movs	r2, #210	; 0xd2
 801b64a:	490e      	ldr	r1, [pc, #56]	; (801b684 <ip_reass_free_complete_datagram+0x144>)
 801b64c:	4809      	ldr	r0, [pc, #36]	; (801b674 <ip_reass_free_complete_datagram+0x134>)
 801b64e:	f001 f915 	bl	801c87c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801b652:	4b0b      	ldr	r3, [pc, #44]	; (801b680 <ip_reass_free_complete_datagram+0x140>)
 801b654:	881a      	ldrh	r2, [r3, #0]
 801b656:	8bfb      	ldrh	r3, [r7, #30]
 801b658:	1ad3      	subs	r3, r2, r3
 801b65a:	b29a      	uxth	r2, r3
 801b65c:	4b08      	ldr	r3, [pc, #32]	; (801b680 <ip_reass_free_complete_datagram+0x140>)
 801b65e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801b660:	8bfb      	ldrh	r3, [r7, #30]
}
 801b662:	4618      	mov	r0, r3
 801b664:	3720      	adds	r7, #32
 801b666:	46bd      	mov	sp, r7
 801b668:	bd80      	pop	{r7, pc}
 801b66a:	bf00      	nop
 801b66c:	080209b0 	.word	0x080209b0
 801b670:	080209ec 	.word	0x080209ec
 801b674:	080209f8 	.word	0x080209f8
 801b678:	08020a20 	.word	0x08020a20
 801b67c:	08020a34 	.word	0x08020a34
 801b680:	20011500 	.word	0x20011500
 801b684:	08020a54 	.word	0x08020a54

0801b688 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801b688:	b580      	push	{r7, lr}
 801b68a:	b08a      	sub	sp, #40	; 0x28
 801b68c:	af00      	add	r7, sp, #0
 801b68e:	6078      	str	r0, [r7, #4]
 801b690:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801b692:	2300      	movs	r3, #0
 801b694:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801b696:	2300      	movs	r3, #0
 801b698:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801b69a:	2300      	movs	r3, #0
 801b69c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801b69e:	2300      	movs	r3, #0
 801b6a0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801b6a2:	2300      	movs	r3, #0
 801b6a4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801b6a6:	4b28      	ldr	r3, [pc, #160]	; (801b748 <ip_reass_remove_oldest_datagram+0xc0>)
 801b6a8:	681b      	ldr	r3, [r3, #0]
 801b6aa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801b6ac:	e030      	b.n	801b710 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801b6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6b0:	695a      	ldr	r2, [r3, #20]
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	68db      	ldr	r3, [r3, #12]
 801b6b6:	429a      	cmp	r2, r3
 801b6b8:	d10c      	bne.n	801b6d4 <ip_reass_remove_oldest_datagram+0x4c>
 801b6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6bc:	699a      	ldr	r2, [r3, #24]
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	691b      	ldr	r3, [r3, #16]
 801b6c2:	429a      	cmp	r2, r3
 801b6c4:	d106      	bne.n	801b6d4 <ip_reass_remove_oldest_datagram+0x4c>
 801b6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6c8:	899a      	ldrh	r2, [r3, #12]
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	889b      	ldrh	r3, [r3, #4]
 801b6ce:	b29b      	uxth	r3, r3
 801b6d0:	429a      	cmp	r2, r3
 801b6d2:	d014      	beq.n	801b6fe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801b6d4:	693b      	ldr	r3, [r7, #16]
 801b6d6:	3301      	adds	r3, #1
 801b6d8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801b6da:	6a3b      	ldr	r3, [r7, #32]
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d104      	bne.n	801b6ea <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801b6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6e2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b6e4:	69fb      	ldr	r3, [r7, #28]
 801b6e6:	61bb      	str	r3, [r7, #24]
 801b6e8:	e009      	b.n	801b6fe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801b6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6ec:	7fda      	ldrb	r2, [r3, #31]
 801b6ee:	6a3b      	ldr	r3, [r7, #32]
 801b6f0:	7fdb      	ldrb	r3, [r3, #31]
 801b6f2:	429a      	cmp	r2, r3
 801b6f4:	d803      	bhi.n	801b6fe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801b6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6f8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b6fa:	69fb      	ldr	r3, [r7, #28]
 801b6fc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801b6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b700:	681b      	ldr	r3, [r3, #0]
 801b702:	2b00      	cmp	r3, #0
 801b704:	d001      	beq.n	801b70a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801b706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b708:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801b70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801b710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b712:	2b00      	cmp	r3, #0
 801b714:	d1cb      	bne.n	801b6ae <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801b716:	6a3b      	ldr	r3, [r7, #32]
 801b718:	2b00      	cmp	r3, #0
 801b71a:	d008      	beq.n	801b72e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801b71c:	69b9      	ldr	r1, [r7, #24]
 801b71e:	6a38      	ldr	r0, [r7, #32]
 801b720:	f7ff ff0e 	bl	801b540 <ip_reass_free_complete_datagram>
 801b724:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801b726:	697a      	ldr	r2, [r7, #20]
 801b728:	68fb      	ldr	r3, [r7, #12]
 801b72a:	4413      	add	r3, r2
 801b72c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801b72e:	697a      	ldr	r2, [r7, #20]
 801b730:	683b      	ldr	r3, [r7, #0]
 801b732:	429a      	cmp	r2, r3
 801b734:	da02      	bge.n	801b73c <ip_reass_remove_oldest_datagram+0xb4>
 801b736:	693b      	ldr	r3, [r7, #16]
 801b738:	2b01      	cmp	r3, #1
 801b73a:	dcac      	bgt.n	801b696 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801b73c:	697b      	ldr	r3, [r7, #20]
}
 801b73e:	4618      	mov	r0, r3
 801b740:	3728      	adds	r7, #40	; 0x28
 801b742:	46bd      	mov	sp, r7
 801b744:	bd80      	pop	{r7, pc}
 801b746:	bf00      	nop
 801b748:	200114fc 	.word	0x200114fc

0801b74c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801b74c:	b580      	push	{r7, lr}
 801b74e:	b084      	sub	sp, #16
 801b750:	af00      	add	r7, sp, #0
 801b752:	6078      	str	r0, [r7, #4]
 801b754:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b756:	2004      	movs	r0, #4
 801b758:	f7f6 fc16 	bl	8011f88 <memp_malloc>
 801b75c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801b75e:	68fb      	ldr	r3, [r7, #12]
 801b760:	2b00      	cmp	r3, #0
 801b762:	d110      	bne.n	801b786 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801b764:	6839      	ldr	r1, [r7, #0]
 801b766:	6878      	ldr	r0, [r7, #4]
 801b768:	f7ff ff8e 	bl	801b688 <ip_reass_remove_oldest_datagram>
 801b76c:	4602      	mov	r2, r0
 801b76e:	683b      	ldr	r3, [r7, #0]
 801b770:	4293      	cmp	r3, r2
 801b772:	dc03      	bgt.n	801b77c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b774:	2004      	movs	r0, #4
 801b776:	f7f6 fc07 	bl	8011f88 <memp_malloc>
 801b77a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801b77c:	68fb      	ldr	r3, [r7, #12]
 801b77e:	2b00      	cmp	r3, #0
 801b780:	d101      	bne.n	801b786 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801b782:	2300      	movs	r3, #0
 801b784:	e016      	b.n	801b7b4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801b786:	2220      	movs	r2, #32
 801b788:	2100      	movs	r1, #0
 801b78a:	68f8      	ldr	r0, [r7, #12]
 801b78c:	f001 f8db 	bl	801c946 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801b790:	68fb      	ldr	r3, [r7, #12]
 801b792:	220f      	movs	r2, #15
 801b794:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801b796:	4b09      	ldr	r3, [pc, #36]	; (801b7bc <ip_reass_enqueue_new_datagram+0x70>)
 801b798:	681a      	ldr	r2, [r3, #0]
 801b79a:	68fb      	ldr	r3, [r7, #12]
 801b79c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801b79e:	4a07      	ldr	r2, [pc, #28]	; (801b7bc <ip_reass_enqueue_new_datagram+0x70>)
 801b7a0:	68fb      	ldr	r3, [r7, #12]
 801b7a2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801b7a4:	68fb      	ldr	r3, [r7, #12]
 801b7a6:	3308      	adds	r3, #8
 801b7a8:	2214      	movs	r2, #20
 801b7aa:	6879      	ldr	r1, [r7, #4]
 801b7ac:	4618      	mov	r0, r3
 801b7ae:	f001 f946 	bl	801ca3e <memcpy>
  return ipr;
 801b7b2:	68fb      	ldr	r3, [r7, #12]
}
 801b7b4:	4618      	mov	r0, r3
 801b7b6:	3710      	adds	r7, #16
 801b7b8:	46bd      	mov	sp, r7
 801b7ba:	bd80      	pop	{r7, pc}
 801b7bc:	200114fc 	.word	0x200114fc

0801b7c0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b7c0:	b580      	push	{r7, lr}
 801b7c2:	b082      	sub	sp, #8
 801b7c4:	af00      	add	r7, sp, #0
 801b7c6:	6078      	str	r0, [r7, #4]
 801b7c8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801b7ca:	4b10      	ldr	r3, [pc, #64]	; (801b80c <ip_reass_dequeue_datagram+0x4c>)
 801b7cc:	681b      	ldr	r3, [r3, #0]
 801b7ce:	687a      	ldr	r2, [r7, #4]
 801b7d0:	429a      	cmp	r2, r3
 801b7d2:	d104      	bne.n	801b7de <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	4a0c      	ldr	r2, [pc, #48]	; (801b80c <ip_reass_dequeue_datagram+0x4c>)
 801b7da:	6013      	str	r3, [r2, #0]
 801b7dc:	e00d      	b.n	801b7fa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801b7de:	683b      	ldr	r3, [r7, #0]
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	d106      	bne.n	801b7f2 <ip_reass_dequeue_datagram+0x32>
 801b7e4:	4b0a      	ldr	r3, [pc, #40]	; (801b810 <ip_reass_dequeue_datagram+0x50>)
 801b7e6:	f240 1245 	movw	r2, #325	; 0x145
 801b7ea:	490a      	ldr	r1, [pc, #40]	; (801b814 <ip_reass_dequeue_datagram+0x54>)
 801b7ec:	480a      	ldr	r0, [pc, #40]	; (801b818 <ip_reass_dequeue_datagram+0x58>)
 801b7ee:	f001 f845 	bl	801c87c <iprintf>
    prev->next = ipr->next;
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	681a      	ldr	r2, [r3, #0]
 801b7f6:	683b      	ldr	r3, [r7, #0]
 801b7f8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801b7fa:	6879      	ldr	r1, [r7, #4]
 801b7fc:	2004      	movs	r0, #4
 801b7fe:	f7f6 fc39 	bl	8012074 <memp_free>
}
 801b802:	bf00      	nop
 801b804:	3708      	adds	r7, #8
 801b806:	46bd      	mov	sp, r7
 801b808:	bd80      	pop	{r7, pc}
 801b80a:	bf00      	nop
 801b80c:	200114fc 	.word	0x200114fc
 801b810:	080209b0 	.word	0x080209b0
 801b814:	08020a78 	.word	0x08020a78
 801b818:	080209f8 	.word	0x080209f8

0801b81c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801b81c:	b580      	push	{r7, lr}
 801b81e:	b08c      	sub	sp, #48	; 0x30
 801b820:	af00      	add	r7, sp, #0
 801b822:	60f8      	str	r0, [r7, #12]
 801b824:	60b9      	str	r1, [r7, #8]
 801b826:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801b828:	2300      	movs	r3, #0
 801b82a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801b82c:	2301      	movs	r3, #1
 801b82e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801b830:	68bb      	ldr	r3, [r7, #8]
 801b832:	685b      	ldr	r3, [r3, #4]
 801b834:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b836:	69fb      	ldr	r3, [r7, #28]
 801b838:	885b      	ldrh	r3, [r3, #2]
 801b83a:	b29b      	uxth	r3, r3
 801b83c:	4618      	mov	r0, r3
 801b83e:	f7f5 fe0f 	bl	8011460 <lwip_htons>
 801b842:	4603      	mov	r3, r0
 801b844:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801b846:	69fb      	ldr	r3, [r7, #28]
 801b848:	781b      	ldrb	r3, [r3, #0]
 801b84a:	f003 030f 	and.w	r3, r3, #15
 801b84e:	b2db      	uxtb	r3, r3
 801b850:	009b      	lsls	r3, r3, #2
 801b852:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801b854:	7e7b      	ldrb	r3, [r7, #25]
 801b856:	b29b      	uxth	r3, r3
 801b858:	8b7a      	ldrh	r2, [r7, #26]
 801b85a:	429a      	cmp	r2, r3
 801b85c:	d202      	bcs.n	801b864 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b85e:	f04f 33ff 	mov.w	r3, #4294967295
 801b862:	e135      	b.n	801bad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801b864:	7e7b      	ldrb	r3, [r7, #25]
 801b866:	b29b      	uxth	r3, r3
 801b868:	8b7a      	ldrh	r2, [r7, #26]
 801b86a:	1ad3      	subs	r3, r2, r3
 801b86c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801b86e:	69fb      	ldr	r3, [r7, #28]
 801b870:	88db      	ldrh	r3, [r3, #6]
 801b872:	b29b      	uxth	r3, r3
 801b874:	4618      	mov	r0, r3
 801b876:	f7f5 fdf3 	bl	8011460 <lwip_htons>
 801b87a:	4603      	mov	r3, r0
 801b87c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b880:	b29b      	uxth	r3, r3
 801b882:	00db      	lsls	r3, r3, #3
 801b884:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801b886:	68bb      	ldr	r3, [r7, #8]
 801b888:	685b      	ldr	r3, [r3, #4]
 801b88a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801b88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b88e:	2200      	movs	r2, #0
 801b890:	701a      	strb	r2, [r3, #0]
 801b892:	2200      	movs	r2, #0
 801b894:	705a      	strb	r2, [r3, #1]
 801b896:	2200      	movs	r2, #0
 801b898:	709a      	strb	r2, [r3, #2]
 801b89a:	2200      	movs	r2, #0
 801b89c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801b89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8a0:	8afa      	ldrh	r2, [r7, #22]
 801b8a2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801b8a4:	8afa      	ldrh	r2, [r7, #22]
 801b8a6:	8b7b      	ldrh	r3, [r7, #26]
 801b8a8:	4413      	add	r3, r2
 801b8aa:	b29a      	uxth	r2, r3
 801b8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8ae:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801b8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8b2:	88db      	ldrh	r3, [r3, #6]
 801b8b4:	b29b      	uxth	r3, r3
 801b8b6:	8afa      	ldrh	r2, [r7, #22]
 801b8b8:	429a      	cmp	r2, r3
 801b8ba:	d902      	bls.n	801b8c2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b8bc:	f04f 33ff 	mov.w	r3, #4294967295
 801b8c0:	e106      	b.n	801bad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801b8c2:	68fb      	ldr	r3, [r7, #12]
 801b8c4:	685b      	ldr	r3, [r3, #4]
 801b8c6:	627b      	str	r3, [r7, #36]	; 0x24
 801b8c8:	e068      	b.n	801b99c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8cc:	685b      	ldr	r3, [r3, #4]
 801b8ce:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801b8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8d2:	889b      	ldrh	r3, [r3, #4]
 801b8d4:	b29a      	uxth	r2, r3
 801b8d6:	693b      	ldr	r3, [r7, #16]
 801b8d8:	889b      	ldrh	r3, [r3, #4]
 801b8da:	b29b      	uxth	r3, r3
 801b8dc:	429a      	cmp	r2, r3
 801b8de:	d235      	bcs.n	801b94c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801b8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b8e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801b8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d020      	beq.n	801b92e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801b8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8ee:	889b      	ldrh	r3, [r3, #4]
 801b8f0:	b29a      	uxth	r2, r3
 801b8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8f4:	88db      	ldrh	r3, [r3, #6]
 801b8f6:	b29b      	uxth	r3, r3
 801b8f8:	429a      	cmp	r2, r3
 801b8fa:	d307      	bcc.n	801b90c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801b8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8fe:	88db      	ldrh	r3, [r3, #6]
 801b900:	b29a      	uxth	r2, r3
 801b902:	693b      	ldr	r3, [r7, #16]
 801b904:	889b      	ldrh	r3, [r3, #4]
 801b906:	b29b      	uxth	r3, r3
 801b908:	429a      	cmp	r2, r3
 801b90a:	d902      	bls.n	801b912 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b90c:	f04f 33ff 	mov.w	r3, #4294967295
 801b910:	e0de      	b.n	801bad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801b912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b914:	68ba      	ldr	r2, [r7, #8]
 801b916:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801b918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b91a:	88db      	ldrh	r3, [r3, #6]
 801b91c:	b29a      	uxth	r2, r3
 801b91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b920:	889b      	ldrh	r3, [r3, #4]
 801b922:	b29b      	uxth	r3, r3
 801b924:	429a      	cmp	r2, r3
 801b926:	d03d      	beq.n	801b9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b928:	2300      	movs	r3, #0
 801b92a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801b92c:	e03a      	b.n	801b9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801b92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b930:	88db      	ldrh	r3, [r3, #6]
 801b932:	b29a      	uxth	r2, r3
 801b934:	693b      	ldr	r3, [r7, #16]
 801b936:	889b      	ldrh	r3, [r3, #4]
 801b938:	b29b      	uxth	r3, r3
 801b93a:	429a      	cmp	r2, r3
 801b93c:	d902      	bls.n	801b944 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b93e:	f04f 33ff 	mov.w	r3, #4294967295
 801b942:	e0c5      	b.n	801bad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801b944:	68fb      	ldr	r3, [r7, #12]
 801b946:	68ba      	ldr	r2, [r7, #8]
 801b948:	605a      	str	r2, [r3, #4]
      break;
 801b94a:	e02b      	b.n	801b9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801b94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b94e:	889b      	ldrh	r3, [r3, #4]
 801b950:	b29a      	uxth	r2, r3
 801b952:	693b      	ldr	r3, [r7, #16]
 801b954:	889b      	ldrh	r3, [r3, #4]
 801b956:	b29b      	uxth	r3, r3
 801b958:	429a      	cmp	r2, r3
 801b95a:	d102      	bne.n	801b962 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b95c:	f04f 33ff 	mov.w	r3, #4294967295
 801b960:	e0b6      	b.n	801bad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801b962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b964:	889b      	ldrh	r3, [r3, #4]
 801b966:	b29a      	uxth	r2, r3
 801b968:	693b      	ldr	r3, [r7, #16]
 801b96a:	88db      	ldrh	r3, [r3, #6]
 801b96c:	b29b      	uxth	r3, r3
 801b96e:	429a      	cmp	r2, r3
 801b970:	d202      	bcs.n	801b978 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b972:	f04f 33ff 	mov.w	r3, #4294967295
 801b976:	e0ab      	b.n	801bad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801b978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d009      	beq.n	801b992 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801b97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b980:	88db      	ldrh	r3, [r3, #6]
 801b982:	b29a      	uxth	r2, r3
 801b984:	693b      	ldr	r3, [r7, #16]
 801b986:	889b      	ldrh	r3, [r3, #4]
 801b988:	b29b      	uxth	r3, r3
 801b98a:	429a      	cmp	r2, r3
 801b98c:	d001      	beq.n	801b992 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b98e:	2300      	movs	r3, #0
 801b990:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801b992:	693b      	ldr	r3, [r7, #16]
 801b994:	681b      	ldr	r3, [r3, #0]
 801b996:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801b998:	693b      	ldr	r3, [r7, #16]
 801b99a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801b99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b99e:	2b00      	cmp	r3, #0
 801b9a0:	d193      	bne.n	801b8ca <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801b9a2:	e000      	b.n	801b9a6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801b9a4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9a8:	2b00      	cmp	r3, #0
 801b9aa:	d12d      	bne.n	801ba08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801b9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9ae:	2b00      	cmp	r3, #0
 801b9b0:	d01c      	beq.n	801b9ec <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801b9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9b4:	88db      	ldrh	r3, [r3, #6]
 801b9b6:	b29a      	uxth	r2, r3
 801b9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9ba:	889b      	ldrh	r3, [r3, #4]
 801b9bc:	b29b      	uxth	r3, r3
 801b9be:	429a      	cmp	r2, r3
 801b9c0:	d906      	bls.n	801b9d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801b9c2:	4b45      	ldr	r3, [pc, #276]	; (801bad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b9c4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801b9c8:	4944      	ldr	r1, [pc, #272]	; (801badc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801b9ca:	4845      	ldr	r0, [pc, #276]	; (801bae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b9cc:	f000 ff56 	bl	801c87c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801b9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9d2:	68ba      	ldr	r2, [r7, #8]
 801b9d4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801b9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9d8:	88db      	ldrh	r3, [r3, #6]
 801b9da:	b29a      	uxth	r2, r3
 801b9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9de:	889b      	ldrh	r3, [r3, #4]
 801b9e0:	b29b      	uxth	r3, r3
 801b9e2:	429a      	cmp	r2, r3
 801b9e4:	d010      	beq.n	801ba08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801b9e6:	2300      	movs	r3, #0
 801b9e8:	623b      	str	r3, [r7, #32]
 801b9ea:	e00d      	b.n	801ba08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801b9ec:	68fb      	ldr	r3, [r7, #12]
 801b9ee:	685b      	ldr	r3, [r3, #4]
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	d006      	beq.n	801ba02 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801b9f4:	4b38      	ldr	r3, [pc, #224]	; (801bad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b9f6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801b9fa:	493a      	ldr	r1, [pc, #232]	; (801bae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801b9fc:	4838      	ldr	r0, [pc, #224]	; (801bae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b9fe:	f000 ff3d 	bl	801c87c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801ba02:	68fb      	ldr	r3, [r7, #12]
 801ba04:	68ba      	ldr	r2, [r7, #8]
 801ba06:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	d105      	bne.n	801ba1a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801ba0e:	68fb      	ldr	r3, [r7, #12]
 801ba10:	7f9b      	ldrb	r3, [r3, #30]
 801ba12:	f003 0301 	and.w	r3, r3, #1
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d059      	beq.n	801bace <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801ba1a:	6a3b      	ldr	r3, [r7, #32]
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d04f      	beq.n	801bac0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801ba20:	68fb      	ldr	r3, [r7, #12]
 801ba22:	685b      	ldr	r3, [r3, #4]
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	d006      	beq.n	801ba36 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801ba28:	68fb      	ldr	r3, [r7, #12]
 801ba2a:	685b      	ldr	r3, [r3, #4]
 801ba2c:	685b      	ldr	r3, [r3, #4]
 801ba2e:	889b      	ldrh	r3, [r3, #4]
 801ba30:	b29b      	uxth	r3, r3
 801ba32:	2b00      	cmp	r3, #0
 801ba34:	d002      	beq.n	801ba3c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801ba36:	2300      	movs	r3, #0
 801ba38:	623b      	str	r3, [r7, #32]
 801ba3a:	e041      	b.n	801bac0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801ba3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba3e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801ba40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba42:	681b      	ldr	r3, [r3, #0]
 801ba44:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ba46:	e012      	b.n	801ba6e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801ba48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba4a:	685b      	ldr	r3, [r3, #4]
 801ba4c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801ba4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba50:	88db      	ldrh	r3, [r3, #6]
 801ba52:	b29a      	uxth	r2, r3
 801ba54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba56:	889b      	ldrh	r3, [r3, #4]
 801ba58:	b29b      	uxth	r3, r3
 801ba5a:	429a      	cmp	r2, r3
 801ba5c:	d002      	beq.n	801ba64 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801ba5e:	2300      	movs	r3, #0
 801ba60:	623b      	str	r3, [r7, #32]
            break;
 801ba62:	e007      	b.n	801ba74 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801ba64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba66:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801ba68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ba6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	d1e9      	bne.n	801ba48 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801ba74:	6a3b      	ldr	r3, [r7, #32]
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	d022      	beq.n	801bac0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801ba7a:	68fb      	ldr	r3, [r7, #12]
 801ba7c:	685b      	ldr	r3, [r3, #4]
 801ba7e:	2b00      	cmp	r3, #0
 801ba80:	d106      	bne.n	801ba90 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801ba82:	4b15      	ldr	r3, [pc, #84]	; (801bad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ba84:	f240 12df 	movw	r2, #479	; 0x1df
 801ba88:	4917      	ldr	r1, [pc, #92]	; (801bae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ba8a:	4815      	ldr	r0, [pc, #84]	; (801bae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ba8c:	f000 fef6 	bl	801c87c <iprintf>
          LWIP_ASSERT("sanity check",
 801ba90:	68fb      	ldr	r3, [r7, #12]
 801ba92:	685b      	ldr	r3, [r3, #4]
 801ba94:	685b      	ldr	r3, [r3, #4]
 801ba96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ba98:	429a      	cmp	r2, r3
 801ba9a:	d106      	bne.n	801baaa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801ba9c:	4b0e      	ldr	r3, [pc, #56]	; (801bad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ba9e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801baa2:	4911      	ldr	r1, [pc, #68]	; (801bae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801baa4:	480e      	ldr	r0, [pc, #56]	; (801bae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801baa6:	f000 fee9 	bl	801c87c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801baaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801baac:	681b      	ldr	r3, [r3, #0]
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d006      	beq.n	801bac0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801bab2:	4b09      	ldr	r3, [pc, #36]	; (801bad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bab4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801bab8:	490c      	ldr	r1, [pc, #48]	; (801baec <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801baba:	4809      	ldr	r0, [pc, #36]	; (801bae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801babc:	f000 fede 	bl	801c87c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801bac0:	6a3b      	ldr	r3, [r7, #32]
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	bf14      	ite	ne
 801bac6:	2301      	movne	r3, #1
 801bac8:	2300      	moveq	r3, #0
 801baca:	b2db      	uxtb	r3, r3
 801bacc:	e000      	b.n	801bad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801bace:	2300      	movs	r3, #0
}
 801bad0:	4618      	mov	r0, r3
 801bad2:	3730      	adds	r7, #48	; 0x30
 801bad4:	46bd      	mov	sp, r7
 801bad6:	bd80      	pop	{r7, pc}
 801bad8:	080209b0 	.word	0x080209b0
 801badc:	08020a94 	.word	0x08020a94
 801bae0:	080209f8 	.word	0x080209f8
 801bae4:	08020ab4 	.word	0x08020ab4
 801bae8:	08020aec 	.word	0x08020aec
 801baec:	08020afc 	.word	0x08020afc

0801baf0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801baf0:	b580      	push	{r7, lr}
 801baf2:	b08e      	sub	sp, #56	; 0x38
 801baf4:	af00      	add	r7, sp, #0
 801baf6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	685b      	ldr	r3, [r3, #4]
 801bafc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801bafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb00:	781b      	ldrb	r3, [r3, #0]
 801bb02:	f003 030f 	and.w	r3, r3, #15
 801bb06:	b2db      	uxtb	r3, r3
 801bb08:	009b      	lsls	r3, r3, #2
 801bb0a:	b2db      	uxtb	r3, r3
 801bb0c:	2b14      	cmp	r3, #20
 801bb0e:	f040 8171 	bne.w	801bdf4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801bb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb14:	88db      	ldrh	r3, [r3, #6]
 801bb16:	b29b      	uxth	r3, r3
 801bb18:	4618      	mov	r0, r3
 801bb1a:	f7f5 fca1 	bl	8011460 <lwip_htons>
 801bb1e:	4603      	mov	r3, r0
 801bb20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bb24:	b29b      	uxth	r3, r3
 801bb26:	00db      	lsls	r3, r3, #3
 801bb28:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb2c:	885b      	ldrh	r3, [r3, #2]
 801bb2e:	b29b      	uxth	r3, r3
 801bb30:	4618      	mov	r0, r3
 801bb32:	f7f5 fc95 	bl	8011460 <lwip_htons>
 801bb36:	4603      	mov	r3, r0
 801bb38:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801bb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb3c:	781b      	ldrb	r3, [r3, #0]
 801bb3e:	f003 030f 	and.w	r3, r3, #15
 801bb42:	b2db      	uxtb	r3, r3
 801bb44:	009b      	lsls	r3, r3, #2
 801bb46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801bb4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801bb4e:	b29b      	uxth	r3, r3
 801bb50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bb52:	429a      	cmp	r2, r3
 801bb54:	f0c0 8150 	bcc.w	801bdf8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801bb58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801bb5c:	b29b      	uxth	r3, r3
 801bb5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bb60:	1ad3      	subs	r3, r2, r3
 801bb62:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801bb64:	6878      	ldr	r0, [r7, #4]
 801bb66:	f7f7 f9b7 	bl	8012ed8 <pbuf_clen>
 801bb6a:	4603      	mov	r3, r0
 801bb6c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801bb6e:	4b8c      	ldr	r3, [pc, #560]	; (801bda0 <ip4_reass+0x2b0>)
 801bb70:	881b      	ldrh	r3, [r3, #0]
 801bb72:	461a      	mov	r2, r3
 801bb74:	8c3b      	ldrh	r3, [r7, #32]
 801bb76:	4413      	add	r3, r2
 801bb78:	2b0a      	cmp	r3, #10
 801bb7a:	dd10      	ble.n	801bb9e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801bb7c:	8c3b      	ldrh	r3, [r7, #32]
 801bb7e:	4619      	mov	r1, r3
 801bb80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bb82:	f7ff fd81 	bl	801b688 <ip_reass_remove_oldest_datagram>
 801bb86:	4603      	mov	r3, r0
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	f000 8137 	beq.w	801bdfc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801bb8e:	4b84      	ldr	r3, [pc, #528]	; (801bda0 <ip4_reass+0x2b0>)
 801bb90:	881b      	ldrh	r3, [r3, #0]
 801bb92:	461a      	mov	r2, r3
 801bb94:	8c3b      	ldrh	r3, [r7, #32]
 801bb96:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801bb98:	2b0a      	cmp	r3, #10
 801bb9a:	f300 812f 	bgt.w	801bdfc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801bb9e:	4b81      	ldr	r3, [pc, #516]	; (801bda4 <ip4_reass+0x2b4>)
 801bba0:	681b      	ldr	r3, [r3, #0]
 801bba2:	633b      	str	r3, [r7, #48]	; 0x30
 801bba4:	e015      	b.n	801bbd2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801bba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bba8:	695a      	ldr	r2, [r3, #20]
 801bbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bbac:	68db      	ldr	r3, [r3, #12]
 801bbae:	429a      	cmp	r2, r3
 801bbb0:	d10c      	bne.n	801bbcc <ip4_reass+0xdc>
 801bbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbb4:	699a      	ldr	r2, [r3, #24]
 801bbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bbb8:	691b      	ldr	r3, [r3, #16]
 801bbba:	429a      	cmp	r2, r3
 801bbbc:	d106      	bne.n	801bbcc <ip4_reass+0xdc>
 801bbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbc0:	899a      	ldrh	r2, [r3, #12]
 801bbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bbc4:	889b      	ldrh	r3, [r3, #4]
 801bbc6:	b29b      	uxth	r3, r3
 801bbc8:	429a      	cmp	r2, r3
 801bbca:	d006      	beq.n	801bbda <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801bbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbce:	681b      	ldr	r3, [r3, #0]
 801bbd0:	633b      	str	r3, [r7, #48]	; 0x30
 801bbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbd4:	2b00      	cmp	r3, #0
 801bbd6:	d1e6      	bne.n	801bba6 <ip4_reass+0xb6>
 801bbd8:	e000      	b.n	801bbdc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801bbda:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801bbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d109      	bne.n	801bbf6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801bbe2:	8c3b      	ldrh	r3, [r7, #32]
 801bbe4:	4619      	mov	r1, r3
 801bbe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bbe8:	f7ff fdb0 	bl	801b74c <ip_reass_enqueue_new_datagram>
 801bbec:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801bbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	d11c      	bne.n	801bc2e <ip4_reass+0x13e>
      goto nullreturn;
 801bbf4:	e105      	b.n	801be02 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801bbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bbf8:	88db      	ldrh	r3, [r3, #6]
 801bbfa:	b29b      	uxth	r3, r3
 801bbfc:	4618      	mov	r0, r3
 801bbfe:	f7f5 fc2f 	bl	8011460 <lwip_htons>
 801bc02:	4603      	mov	r3, r0
 801bc04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bc08:	2b00      	cmp	r3, #0
 801bc0a:	d110      	bne.n	801bc2e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801bc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc0e:	89db      	ldrh	r3, [r3, #14]
 801bc10:	4618      	mov	r0, r3
 801bc12:	f7f5 fc25 	bl	8011460 <lwip_htons>
 801bc16:	4603      	mov	r3, r0
 801bc18:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	d006      	beq.n	801bc2e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801bc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc22:	3308      	adds	r3, #8
 801bc24:	2214      	movs	r2, #20
 801bc26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bc28:	4618      	mov	r0, r3
 801bc2a:	f000 ff08 	bl	801ca3e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801bc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc30:	88db      	ldrh	r3, [r3, #6]
 801bc32:	b29b      	uxth	r3, r3
 801bc34:	f003 0320 	and.w	r3, r3, #32
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	bf0c      	ite	eq
 801bc3c:	2301      	moveq	r3, #1
 801bc3e:	2300      	movne	r3, #0
 801bc40:	b2db      	uxtb	r3, r3
 801bc42:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801bc44:	69fb      	ldr	r3, [r7, #28]
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d00e      	beq.n	801bc68 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801bc4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801bc4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bc4e:	4413      	add	r3, r2
 801bc50:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801bc52:	8b7a      	ldrh	r2, [r7, #26]
 801bc54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bc56:	429a      	cmp	r2, r3
 801bc58:	f0c0 80a0 	bcc.w	801bd9c <ip4_reass+0x2ac>
 801bc5c:	8b7b      	ldrh	r3, [r7, #26]
 801bc5e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801bc62:	4293      	cmp	r3, r2
 801bc64:	f200 809a 	bhi.w	801bd9c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801bc68:	69fa      	ldr	r2, [r7, #28]
 801bc6a:	6879      	ldr	r1, [r7, #4]
 801bc6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bc6e:	f7ff fdd5 	bl	801b81c <ip_reass_chain_frag_into_datagram_and_validate>
 801bc72:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801bc74:	697b      	ldr	r3, [r7, #20]
 801bc76:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bc7a:	f000 809b 	beq.w	801bdb4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801bc7e:	4b48      	ldr	r3, [pc, #288]	; (801bda0 <ip4_reass+0x2b0>)
 801bc80:	881a      	ldrh	r2, [r3, #0]
 801bc82:	8c3b      	ldrh	r3, [r7, #32]
 801bc84:	4413      	add	r3, r2
 801bc86:	b29a      	uxth	r2, r3
 801bc88:	4b45      	ldr	r3, [pc, #276]	; (801bda0 <ip4_reass+0x2b0>)
 801bc8a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801bc8c:	69fb      	ldr	r3, [r7, #28]
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	d00d      	beq.n	801bcae <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801bc92:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801bc94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bc96:	4413      	add	r3, r2
 801bc98:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801bc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc9c:	8a7a      	ldrh	r2, [r7, #18]
 801bc9e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801bca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bca2:	7f9b      	ldrb	r3, [r3, #30]
 801bca4:	f043 0301 	orr.w	r3, r3, #1
 801bca8:	b2da      	uxtb	r2, r3
 801bcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bcac:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801bcae:	697b      	ldr	r3, [r7, #20]
 801bcb0:	2b01      	cmp	r3, #1
 801bcb2:	d171      	bne.n	801bd98 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801bcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bcb6:	8b9b      	ldrh	r3, [r3, #28]
 801bcb8:	3314      	adds	r3, #20
 801bcba:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801bcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bcbe:	685b      	ldr	r3, [r3, #4]
 801bcc0:	685b      	ldr	r3, [r3, #4]
 801bcc2:	681b      	ldr	r3, [r3, #0]
 801bcc4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801bcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bcc8:	685b      	ldr	r3, [r3, #4]
 801bcca:	685b      	ldr	r3, [r3, #4]
 801bccc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801bcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bcd0:	3308      	adds	r3, #8
 801bcd2:	2214      	movs	r2, #20
 801bcd4:	4619      	mov	r1, r3
 801bcd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bcd8:	f000 feb1 	bl	801ca3e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801bcdc:	8a3b      	ldrh	r3, [r7, #16]
 801bcde:	4618      	mov	r0, r3
 801bce0:	f7f5 fbbe 	bl	8011460 <lwip_htons>
 801bce4:	4603      	mov	r3, r0
 801bce6:	461a      	mov	r2, r3
 801bce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcea:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801bcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcee:	2200      	movs	r2, #0
 801bcf0:	719a      	strb	r2, [r3, #6]
 801bcf2:	2200      	movs	r2, #0
 801bcf4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801bcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcf8:	2200      	movs	r2, #0
 801bcfa:	729a      	strb	r2, [r3, #10]
 801bcfc:	2200      	movs	r2, #0
 801bcfe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801bd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd02:	685b      	ldr	r3, [r3, #4]
 801bd04:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801bd06:	e00d      	b.n	801bd24 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801bd08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bd0a:	685b      	ldr	r3, [r3, #4]
 801bd0c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801bd0e:	2114      	movs	r1, #20
 801bd10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801bd12:	f7f6 ffcd 	bl	8012cb0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801bd16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801bd18:	6878      	ldr	r0, [r7, #4]
 801bd1a:	f7f7 f91d 	bl	8012f58 <pbuf_cat>
      r = iprh->next_pbuf;
 801bd1e:	68fb      	ldr	r3, [r7, #12]
 801bd20:	681b      	ldr	r3, [r3, #0]
 801bd22:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801bd24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	d1ee      	bne.n	801bd08 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801bd2a:	4b1e      	ldr	r3, [pc, #120]	; (801bda4 <ip4_reass+0x2b4>)
 801bd2c:	681b      	ldr	r3, [r3, #0]
 801bd2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bd30:	429a      	cmp	r2, r3
 801bd32:	d102      	bne.n	801bd3a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801bd34:	2300      	movs	r3, #0
 801bd36:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bd38:	e010      	b.n	801bd5c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801bd3a:	4b1a      	ldr	r3, [pc, #104]	; (801bda4 <ip4_reass+0x2b4>)
 801bd3c:	681b      	ldr	r3, [r3, #0]
 801bd3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bd40:	e007      	b.n	801bd52 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801bd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd44:	681b      	ldr	r3, [r3, #0]
 801bd46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bd48:	429a      	cmp	r2, r3
 801bd4a:	d006      	beq.n	801bd5a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801bd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd4e:	681b      	ldr	r3, [r3, #0]
 801bd50:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d1f4      	bne.n	801bd42 <ip4_reass+0x252>
 801bd58:	e000      	b.n	801bd5c <ip4_reass+0x26c>
          break;
 801bd5a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801bd5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bd5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bd60:	f7ff fd2e 	bl	801b7c0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801bd64:	6878      	ldr	r0, [r7, #4]
 801bd66:	f7f7 f8b7 	bl	8012ed8 <pbuf_clen>
 801bd6a:	4603      	mov	r3, r0
 801bd6c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801bd6e:	4b0c      	ldr	r3, [pc, #48]	; (801bda0 <ip4_reass+0x2b0>)
 801bd70:	881b      	ldrh	r3, [r3, #0]
 801bd72:	8c3a      	ldrh	r2, [r7, #32]
 801bd74:	429a      	cmp	r2, r3
 801bd76:	d906      	bls.n	801bd86 <ip4_reass+0x296>
 801bd78:	4b0b      	ldr	r3, [pc, #44]	; (801bda8 <ip4_reass+0x2b8>)
 801bd7a:	f240 229b 	movw	r2, #667	; 0x29b
 801bd7e:	490b      	ldr	r1, [pc, #44]	; (801bdac <ip4_reass+0x2bc>)
 801bd80:	480b      	ldr	r0, [pc, #44]	; (801bdb0 <ip4_reass+0x2c0>)
 801bd82:	f000 fd7b 	bl	801c87c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801bd86:	4b06      	ldr	r3, [pc, #24]	; (801bda0 <ip4_reass+0x2b0>)
 801bd88:	881a      	ldrh	r2, [r3, #0]
 801bd8a:	8c3b      	ldrh	r3, [r7, #32]
 801bd8c:	1ad3      	subs	r3, r2, r3
 801bd8e:	b29a      	uxth	r2, r3
 801bd90:	4b03      	ldr	r3, [pc, #12]	; (801bda0 <ip4_reass+0x2b0>)
 801bd92:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	e038      	b.n	801be0a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801bd98:	2300      	movs	r3, #0
 801bd9a:	e036      	b.n	801be0a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801bd9c:	bf00      	nop
 801bd9e:	e00a      	b.n	801bdb6 <ip4_reass+0x2c6>
 801bda0:	20011500 	.word	0x20011500
 801bda4:	200114fc 	.word	0x200114fc
 801bda8:	080209b0 	.word	0x080209b0
 801bdac:	08020b20 	.word	0x08020b20
 801bdb0:	080209f8 	.word	0x080209f8
    goto nullreturn_ipr;
 801bdb4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801bdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bdb8:	2b00      	cmp	r3, #0
 801bdba:	d106      	bne.n	801bdca <ip4_reass+0x2da>
 801bdbc:	4b15      	ldr	r3, [pc, #84]	; (801be14 <ip4_reass+0x324>)
 801bdbe:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801bdc2:	4915      	ldr	r1, [pc, #84]	; (801be18 <ip4_reass+0x328>)
 801bdc4:	4815      	ldr	r0, [pc, #84]	; (801be1c <ip4_reass+0x32c>)
 801bdc6:	f000 fd59 	bl	801c87c <iprintf>
  if (ipr->p == NULL) {
 801bdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bdcc:	685b      	ldr	r3, [r3, #4]
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d116      	bne.n	801be00 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801bdd2:	4b13      	ldr	r3, [pc, #76]	; (801be20 <ip4_reass+0x330>)
 801bdd4:	681b      	ldr	r3, [r3, #0]
 801bdd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bdd8:	429a      	cmp	r2, r3
 801bdda:	d006      	beq.n	801bdea <ip4_reass+0x2fa>
 801bddc:	4b0d      	ldr	r3, [pc, #52]	; (801be14 <ip4_reass+0x324>)
 801bdde:	f240 22ab 	movw	r2, #683	; 0x2ab
 801bde2:	4910      	ldr	r1, [pc, #64]	; (801be24 <ip4_reass+0x334>)
 801bde4:	480d      	ldr	r0, [pc, #52]	; (801be1c <ip4_reass+0x32c>)
 801bde6:	f000 fd49 	bl	801c87c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801bdea:	2100      	movs	r1, #0
 801bdec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bdee:	f7ff fce7 	bl	801b7c0 <ip_reass_dequeue_datagram>
 801bdf2:	e006      	b.n	801be02 <ip4_reass+0x312>
    goto nullreturn;
 801bdf4:	bf00      	nop
 801bdf6:	e004      	b.n	801be02 <ip4_reass+0x312>
    goto nullreturn;
 801bdf8:	bf00      	nop
 801bdfa:	e002      	b.n	801be02 <ip4_reass+0x312>
      goto nullreturn;
 801bdfc:	bf00      	nop
 801bdfe:	e000      	b.n	801be02 <ip4_reass+0x312>
  }

nullreturn:
 801be00:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801be02:	6878      	ldr	r0, [r7, #4]
 801be04:	f7f6 ffda 	bl	8012dbc <pbuf_free>
  return NULL;
 801be08:	2300      	movs	r3, #0
}
 801be0a:	4618      	mov	r0, r3
 801be0c:	3738      	adds	r7, #56	; 0x38
 801be0e:	46bd      	mov	sp, r7
 801be10:	bd80      	pop	{r7, pc}
 801be12:	bf00      	nop
 801be14:	080209b0 	.word	0x080209b0
 801be18:	08020b3c 	.word	0x08020b3c
 801be1c:	080209f8 	.word	0x080209f8
 801be20:	200114fc 	.word	0x200114fc
 801be24:	08020b48 	.word	0x08020b48

0801be28 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801be28:	b580      	push	{r7, lr}
 801be2a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801be2c:	2005      	movs	r0, #5
 801be2e:	f7f6 f8ab 	bl	8011f88 <memp_malloc>
 801be32:	4603      	mov	r3, r0
}
 801be34:	4618      	mov	r0, r3
 801be36:	bd80      	pop	{r7, pc}

0801be38 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801be38:	b580      	push	{r7, lr}
 801be3a:	b082      	sub	sp, #8
 801be3c:	af00      	add	r7, sp, #0
 801be3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	2b00      	cmp	r3, #0
 801be44:	d106      	bne.n	801be54 <ip_frag_free_pbuf_custom_ref+0x1c>
 801be46:	4b07      	ldr	r3, [pc, #28]	; (801be64 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801be48:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801be4c:	4906      	ldr	r1, [pc, #24]	; (801be68 <ip_frag_free_pbuf_custom_ref+0x30>)
 801be4e:	4807      	ldr	r0, [pc, #28]	; (801be6c <ip_frag_free_pbuf_custom_ref+0x34>)
 801be50:	f000 fd14 	bl	801c87c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801be54:	6879      	ldr	r1, [r7, #4]
 801be56:	2005      	movs	r0, #5
 801be58:	f7f6 f90c 	bl	8012074 <memp_free>
}
 801be5c:	bf00      	nop
 801be5e:	3708      	adds	r7, #8
 801be60:	46bd      	mov	sp, r7
 801be62:	bd80      	pop	{r7, pc}
 801be64:	080209b0 	.word	0x080209b0
 801be68:	08020b68 	.word	0x08020b68
 801be6c:	080209f8 	.word	0x080209f8

0801be70 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801be70:	b580      	push	{r7, lr}
 801be72:	b084      	sub	sp, #16
 801be74:	af00      	add	r7, sp, #0
 801be76:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801be7c:	68fb      	ldr	r3, [r7, #12]
 801be7e:	2b00      	cmp	r3, #0
 801be80:	d106      	bne.n	801be90 <ipfrag_free_pbuf_custom+0x20>
 801be82:	4b11      	ldr	r3, [pc, #68]	; (801bec8 <ipfrag_free_pbuf_custom+0x58>)
 801be84:	f240 22ce 	movw	r2, #718	; 0x2ce
 801be88:	4910      	ldr	r1, [pc, #64]	; (801becc <ipfrag_free_pbuf_custom+0x5c>)
 801be8a:	4811      	ldr	r0, [pc, #68]	; (801bed0 <ipfrag_free_pbuf_custom+0x60>)
 801be8c:	f000 fcf6 	bl	801c87c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801be90:	68fa      	ldr	r2, [r7, #12]
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	429a      	cmp	r2, r3
 801be96:	d006      	beq.n	801bea6 <ipfrag_free_pbuf_custom+0x36>
 801be98:	4b0b      	ldr	r3, [pc, #44]	; (801bec8 <ipfrag_free_pbuf_custom+0x58>)
 801be9a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801be9e:	490d      	ldr	r1, [pc, #52]	; (801bed4 <ipfrag_free_pbuf_custom+0x64>)
 801bea0:	480b      	ldr	r0, [pc, #44]	; (801bed0 <ipfrag_free_pbuf_custom+0x60>)
 801bea2:	f000 fceb 	bl	801c87c <iprintf>
  if (pcr->original != NULL) {
 801bea6:	68fb      	ldr	r3, [r7, #12]
 801bea8:	695b      	ldr	r3, [r3, #20]
 801beaa:	2b00      	cmp	r3, #0
 801beac:	d004      	beq.n	801beb8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801beae:	68fb      	ldr	r3, [r7, #12]
 801beb0:	695b      	ldr	r3, [r3, #20]
 801beb2:	4618      	mov	r0, r3
 801beb4:	f7f6 ff82 	bl	8012dbc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801beb8:	68f8      	ldr	r0, [r7, #12]
 801beba:	f7ff ffbd 	bl	801be38 <ip_frag_free_pbuf_custom_ref>
}
 801bebe:	bf00      	nop
 801bec0:	3710      	adds	r7, #16
 801bec2:	46bd      	mov	sp, r7
 801bec4:	bd80      	pop	{r7, pc}
 801bec6:	bf00      	nop
 801bec8:	080209b0 	.word	0x080209b0
 801becc:	08020b74 	.word	0x08020b74
 801bed0:	080209f8 	.word	0x080209f8
 801bed4:	08020b80 	.word	0x08020b80

0801bed8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801bed8:	b580      	push	{r7, lr}
 801beda:	b094      	sub	sp, #80	; 0x50
 801bedc:	af02      	add	r7, sp, #8
 801bede:	60f8      	str	r0, [r7, #12]
 801bee0:	60b9      	str	r1, [r7, #8]
 801bee2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801bee4:	2300      	movs	r3, #0
 801bee6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801beea:	68bb      	ldr	r3, [r7, #8]
 801beec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801beee:	3b14      	subs	r3, #20
 801bef0:	2b00      	cmp	r3, #0
 801bef2:	da00      	bge.n	801bef6 <ip4_frag+0x1e>
 801bef4:	3307      	adds	r3, #7
 801bef6:	10db      	asrs	r3, r3, #3
 801bef8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801befa:	2314      	movs	r3, #20
 801befc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801befe:	68fb      	ldr	r3, [r7, #12]
 801bf00:	685b      	ldr	r3, [r3, #4]
 801bf02:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801bf04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf06:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801bf08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf0a:	781b      	ldrb	r3, [r3, #0]
 801bf0c:	f003 030f 	and.w	r3, r3, #15
 801bf10:	b2db      	uxtb	r3, r3
 801bf12:	009b      	lsls	r3, r3, #2
 801bf14:	b2db      	uxtb	r3, r3
 801bf16:	2b14      	cmp	r3, #20
 801bf18:	d002      	beq.n	801bf20 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801bf1a:	f06f 0305 	mvn.w	r3, #5
 801bf1e:	e110      	b.n	801c142 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801bf20:	68fb      	ldr	r3, [r7, #12]
 801bf22:	895b      	ldrh	r3, [r3, #10]
 801bf24:	2b13      	cmp	r3, #19
 801bf26:	d809      	bhi.n	801bf3c <ip4_frag+0x64>
 801bf28:	4b88      	ldr	r3, [pc, #544]	; (801c14c <ip4_frag+0x274>)
 801bf2a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801bf2e:	4988      	ldr	r1, [pc, #544]	; (801c150 <ip4_frag+0x278>)
 801bf30:	4888      	ldr	r0, [pc, #544]	; (801c154 <ip4_frag+0x27c>)
 801bf32:	f000 fca3 	bl	801c87c <iprintf>
 801bf36:	f06f 0305 	mvn.w	r3, #5
 801bf3a:	e102      	b.n	801c142 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801bf3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf3e:	88db      	ldrh	r3, [r3, #6]
 801bf40:	b29b      	uxth	r3, r3
 801bf42:	4618      	mov	r0, r3
 801bf44:	f7f5 fa8c 	bl	8011460 <lwip_htons>
 801bf48:	4603      	mov	r3, r0
 801bf4a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801bf4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bf4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bf52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801bf56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bf58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801bf5c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801bf5e:	68fb      	ldr	r3, [r7, #12]
 801bf60:	891b      	ldrh	r3, [r3, #8]
 801bf62:	3b14      	subs	r3, #20
 801bf64:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801bf68:	e0e1      	b.n	801c12e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801bf6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bf6c:	00db      	lsls	r3, r3, #3
 801bf6e:	b29b      	uxth	r3, r3
 801bf70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bf74:	4293      	cmp	r3, r2
 801bf76:	bf28      	it	cs
 801bf78:	4613      	movcs	r3, r2
 801bf7a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801bf7c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bf80:	2114      	movs	r1, #20
 801bf82:	200e      	movs	r0, #14
 801bf84:	f7f6 fc36 	bl	80127f4 <pbuf_alloc>
 801bf88:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801bf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	f000 80d5 	beq.w	801c13c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801bf92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf94:	895b      	ldrh	r3, [r3, #10]
 801bf96:	2b13      	cmp	r3, #19
 801bf98:	d806      	bhi.n	801bfa8 <ip4_frag+0xd0>
 801bf9a:	4b6c      	ldr	r3, [pc, #432]	; (801c14c <ip4_frag+0x274>)
 801bf9c:	f44f 7249 	mov.w	r2, #804	; 0x324
 801bfa0:	496d      	ldr	r1, [pc, #436]	; (801c158 <ip4_frag+0x280>)
 801bfa2:	486c      	ldr	r0, [pc, #432]	; (801c154 <ip4_frag+0x27c>)
 801bfa4:	f000 fc6a 	bl	801c87c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801bfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfaa:	685b      	ldr	r3, [r3, #4]
 801bfac:	2214      	movs	r2, #20
 801bfae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	f000 fd44 	bl	801ca3e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801bfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfb8:	685b      	ldr	r3, [r3, #4]
 801bfba:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801bfbc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bfbe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801bfc2:	e064      	b.n	801c08e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801bfc4:	68fb      	ldr	r3, [r7, #12]
 801bfc6:	895a      	ldrh	r2, [r3, #10]
 801bfc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bfca:	1ad3      	subs	r3, r2, r3
 801bfcc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801bfce:	68fb      	ldr	r3, [r7, #12]
 801bfd0:	895b      	ldrh	r3, [r3, #10]
 801bfd2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801bfd4:	429a      	cmp	r2, r3
 801bfd6:	d906      	bls.n	801bfe6 <ip4_frag+0x10e>
 801bfd8:	4b5c      	ldr	r3, [pc, #368]	; (801c14c <ip4_frag+0x274>)
 801bfda:	f240 322d 	movw	r2, #813	; 0x32d
 801bfde:	495f      	ldr	r1, [pc, #380]	; (801c15c <ip4_frag+0x284>)
 801bfe0:	485c      	ldr	r0, [pc, #368]	; (801c154 <ip4_frag+0x27c>)
 801bfe2:	f000 fc4b 	bl	801c87c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801bfe6:	8bfa      	ldrh	r2, [r7, #30]
 801bfe8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801bfec:	4293      	cmp	r3, r2
 801bfee:	bf28      	it	cs
 801bff0:	4613      	movcs	r3, r2
 801bff2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801bff6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d105      	bne.n	801c00a <ip4_frag+0x132>
        poff = 0;
 801bffe:	2300      	movs	r3, #0
 801c000:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801c002:	68fb      	ldr	r3, [r7, #12]
 801c004:	681b      	ldr	r3, [r3, #0]
 801c006:	60fb      	str	r3, [r7, #12]
        continue;
 801c008:	e041      	b.n	801c08e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801c00a:	f7ff ff0d 	bl	801be28 <ip_frag_alloc_pbuf_custom_ref>
 801c00e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801c010:	69bb      	ldr	r3, [r7, #24]
 801c012:	2b00      	cmp	r3, #0
 801c014:	d103      	bne.n	801c01e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801c016:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c018:	f7f6 fed0 	bl	8012dbc <pbuf_free>
        goto memerr;
 801c01c:	e08f      	b.n	801c13e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c01e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801c020:	68fb      	ldr	r3, [r7, #12]
 801c022:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c024:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c026:	4413      	add	r3, r2
 801c028:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801c02c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801c030:	9201      	str	r2, [sp, #4]
 801c032:	9300      	str	r3, [sp, #0]
 801c034:	4603      	mov	r3, r0
 801c036:	2241      	movs	r2, #65	; 0x41
 801c038:	2000      	movs	r0, #0
 801c03a:	f7f6 fd05 	bl	8012a48 <pbuf_alloced_custom>
 801c03e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801c040:	697b      	ldr	r3, [r7, #20]
 801c042:	2b00      	cmp	r3, #0
 801c044:	d106      	bne.n	801c054 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801c046:	69b8      	ldr	r0, [r7, #24]
 801c048:	f7ff fef6 	bl	801be38 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801c04c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c04e:	f7f6 feb5 	bl	8012dbc <pbuf_free>
        goto memerr;
 801c052:	e074      	b.n	801c13e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801c054:	68f8      	ldr	r0, [r7, #12]
 801c056:	f7f6 ff57 	bl	8012f08 <pbuf_ref>
      pcr->original = p;
 801c05a:	69bb      	ldr	r3, [r7, #24]
 801c05c:	68fa      	ldr	r2, [r7, #12]
 801c05e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c060:	69bb      	ldr	r3, [r7, #24]
 801c062:	4a3f      	ldr	r2, [pc, #252]	; (801c160 <ip4_frag+0x288>)
 801c064:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801c066:	6979      	ldr	r1, [r7, #20]
 801c068:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c06a:	f7f6 ff75 	bl	8012f58 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801c06e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801c072:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c076:	1ad3      	subs	r3, r2, r3
 801c078:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801c07c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801c080:	2b00      	cmp	r3, #0
 801c082:	d004      	beq.n	801c08e <ip4_frag+0x1b6>
        poff = 0;
 801c084:	2300      	movs	r3, #0
 801c086:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801c088:	68fb      	ldr	r3, [r7, #12]
 801c08a:	681b      	ldr	r3, [r3, #0]
 801c08c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801c08e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801c092:	2b00      	cmp	r3, #0
 801c094:	d196      	bne.n	801bfc4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801c096:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801c098:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c09c:	4413      	add	r3, r2
 801c09e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801c0a0:	68bb      	ldr	r3, [r7, #8]
 801c0a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801c0a4:	f1a3 0213 	sub.w	r2, r3, #19
 801c0a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c0ac:	429a      	cmp	r2, r3
 801c0ae:	bfcc      	ite	gt
 801c0b0:	2301      	movgt	r3, #1
 801c0b2:	2300      	movle	r3, #0
 801c0b4:	b2db      	uxtb	r3, r3
 801c0b6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801c0b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c0bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c0c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801c0c2:	6a3b      	ldr	r3, [r7, #32]
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	d002      	beq.n	801c0ce <ip4_frag+0x1f6>
 801c0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	d003      	beq.n	801c0d6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801c0ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c0d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801c0d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c0d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c0d8:	4618      	mov	r0, r3
 801c0da:	f7f5 f9c1 	bl	8011460 <lwip_htons>
 801c0de:	4603      	mov	r3, r0
 801c0e0:	461a      	mov	r2, r3
 801c0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c0e4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801c0e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c0e8:	3314      	adds	r3, #20
 801c0ea:	b29b      	uxth	r3, r3
 801c0ec:	4618      	mov	r0, r3
 801c0ee:	f7f5 f9b7 	bl	8011460 <lwip_htons>
 801c0f2:	4603      	mov	r3, r0
 801c0f4:	461a      	mov	r2, r3
 801c0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c0f8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801c0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c0fc:	2200      	movs	r2, #0
 801c0fe:	729a      	strb	r2, [r3, #10]
 801c100:	2200      	movs	r2, #0
 801c102:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801c104:	68bb      	ldr	r3, [r7, #8]
 801c106:	695b      	ldr	r3, [r3, #20]
 801c108:	687a      	ldr	r2, [r7, #4]
 801c10a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c10c:	68b8      	ldr	r0, [r7, #8]
 801c10e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801c110:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c112:	f7f6 fe53 	bl	8012dbc <pbuf_free>
    left = (u16_t)(left - fragsize);
 801c116:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c11a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c11c:	1ad3      	subs	r3, r2, r3
 801c11e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801c122:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801c126:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c128:	4413      	add	r3, r2
 801c12a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801c12e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c132:	2b00      	cmp	r3, #0
 801c134:	f47f af19 	bne.w	801bf6a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801c138:	2300      	movs	r3, #0
 801c13a:	e002      	b.n	801c142 <ip4_frag+0x26a>
      goto memerr;
 801c13c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801c13e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c142:	4618      	mov	r0, r3
 801c144:	3748      	adds	r7, #72	; 0x48
 801c146:	46bd      	mov	sp, r7
 801c148:	bd80      	pop	{r7, pc}
 801c14a:	bf00      	nop
 801c14c:	080209b0 	.word	0x080209b0
 801c150:	08020b8c 	.word	0x08020b8c
 801c154:	080209f8 	.word	0x080209f8
 801c158:	08020ba8 	.word	0x08020ba8
 801c15c:	08020bc8 	.word	0x08020bc8
 801c160:	0801be71 	.word	0x0801be71

0801c164 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c164:	b580      	push	{r7, lr}
 801c166:	b086      	sub	sp, #24
 801c168:	af00      	add	r7, sp, #0
 801c16a:	6078      	str	r0, [r7, #4]
 801c16c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801c16e:	230e      	movs	r3, #14
 801c170:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	895b      	ldrh	r3, [r3, #10]
 801c176:	2b0e      	cmp	r3, #14
 801c178:	d96e      	bls.n	801c258 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	7bdb      	ldrb	r3, [r3, #15]
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d106      	bne.n	801c190 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801c182:	683b      	ldr	r3, [r7, #0]
 801c184:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c188:	3301      	adds	r3, #1
 801c18a:	b2da      	uxtb	r2, r3
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	685b      	ldr	r3, [r3, #4]
 801c194:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c196:	693b      	ldr	r3, [r7, #16]
 801c198:	7b1a      	ldrb	r2, [r3, #12]
 801c19a:	7b5b      	ldrb	r3, [r3, #13]
 801c19c:	021b      	lsls	r3, r3, #8
 801c19e:	4313      	orrs	r3, r2
 801c1a0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c1a2:	693b      	ldr	r3, [r7, #16]
 801c1a4:	781b      	ldrb	r3, [r3, #0]
 801c1a6:	f003 0301 	and.w	r3, r3, #1
 801c1aa:	2b00      	cmp	r3, #0
 801c1ac:	d023      	beq.n	801c1f6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c1ae:	693b      	ldr	r3, [r7, #16]
 801c1b0:	781b      	ldrb	r3, [r3, #0]
 801c1b2:	2b01      	cmp	r3, #1
 801c1b4:	d10f      	bne.n	801c1d6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c1b6:	693b      	ldr	r3, [r7, #16]
 801c1b8:	785b      	ldrb	r3, [r3, #1]
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	d11b      	bne.n	801c1f6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c1be:	693b      	ldr	r3, [r7, #16]
 801c1c0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c1c2:	2b5e      	cmp	r3, #94	; 0x5e
 801c1c4:	d117      	bne.n	801c1f6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	7b5b      	ldrb	r3, [r3, #13]
 801c1ca:	f043 0310 	orr.w	r3, r3, #16
 801c1ce:	b2da      	uxtb	r2, r3
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	735a      	strb	r2, [r3, #13]
 801c1d4:	e00f      	b.n	801c1f6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c1d6:	693b      	ldr	r3, [r7, #16]
 801c1d8:	2206      	movs	r2, #6
 801c1da:	4928      	ldr	r1, [pc, #160]	; (801c27c <ethernet_input+0x118>)
 801c1dc:	4618      	mov	r0, r3
 801c1de:	f000 fba2 	bl	801c926 <memcmp>
 801c1e2:	4603      	mov	r3, r0
 801c1e4:	2b00      	cmp	r3, #0
 801c1e6:	d106      	bne.n	801c1f6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c1e8:	687b      	ldr	r3, [r7, #4]
 801c1ea:	7b5b      	ldrb	r3, [r3, #13]
 801c1ec:	f043 0308 	orr.w	r3, r3, #8
 801c1f0:	b2da      	uxtb	r2, r3
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801c1f6:	89fb      	ldrh	r3, [r7, #14]
 801c1f8:	2b08      	cmp	r3, #8
 801c1fa:	d003      	beq.n	801c204 <ethernet_input+0xa0>
 801c1fc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801c200:	d014      	beq.n	801c22c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801c202:	e032      	b.n	801c26a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c204:	683b      	ldr	r3, [r7, #0]
 801c206:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c20a:	f003 0308 	and.w	r3, r3, #8
 801c20e:	2b00      	cmp	r3, #0
 801c210:	d024      	beq.n	801c25c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c212:	8afb      	ldrh	r3, [r7, #22]
 801c214:	4619      	mov	r1, r3
 801c216:	6878      	ldr	r0, [r7, #4]
 801c218:	f7f6 fd4a 	bl	8012cb0 <pbuf_remove_header>
 801c21c:	4603      	mov	r3, r0
 801c21e:	2b00      	cmp	r3, #0
 801c220:	d11e      	bne.n	801c260 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801c222:	6839      	ldr	r1, [r7, #0]
 801c224:	6878      	ldr	r0, [r7, #4]
 801c226:	f7fe ff21 	bl	801b06c <ip4_input>
      break;
 801c22a:	e013      	b.n	801c254 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c22c:	683b      	ldr	r3, [r7, #0]
 801c22e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c232:	f003 0308 	and.w	r3, r3, #8
 801c236:	2b00      	cmp	r3, #0
 801c238:	d014      	beq.n	801c264 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c23a:	8afb      	ldrh	r3, [r7, #22]
 801c23c:	4619      	mov	r1, r3
 801c23e:	6878      	ldr	r0, [r7, #4]
 801c240:	f7f6 fd36 	bl	8012cb0 <pbuf_remove_header>
 801c244:	4603      	mov	r3, r0
 801c246:	2b00      	cmp	r3, #0
 801c248:	d10e      	bne.n	801c268 <ethernet_input+0x104>
        etharp_input(p, netif);
 801c24a:	6839      	ldr	r1, [r7, #0]
 801c24c:	6878      	ldr	r0, [r7, #4]
 801c24e:	f7fe f89b 	bl	801a388 <etharp_input>
      break;
 801c252:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801c254:	2300      	movs	r3, #0
 801c256:	e00c      	b.n	801c272 <ethernet_input+0x10e>
    goto free_and_return;
 801c258:	bf00      	nop
 801c25a:	e006      	b.n	801c26a <ethernet_input+0x106>
        goto free_and_return;
 801c25c:	bf00      	nop
 801c25e:	e004      	b.n	801c26a <ethernet_input+0x106>
        goto free_and_return;
 801c260:	bf00      	nop
 801c262:	e002      	b.n	801c26a <ethernet_input+0x106>
        goto free_and_return;
 801c264:	bf00      	nop
 801c266:	e000      	b.n	801c26a <ethernet_input+0x106>
        goto free_and_return;
 801c268:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801c26a:	6878      	ldr	r0, [r7, #4]
 801c26c:	f7f6 fda6 	bl	8012dbc <pbuf_free>
  return ERR_OK;
 801c270:	2300      	movs	r3, #0
}
 801c272:	4618      	mov	r0, r3
 801c274:	3718      	adds	r7, #24
 801c276:	46bd      	mov	sp, r7
 801c278:	bd80      	pop	{r7, pc}
 801c27a:	bf00      	nop
 801c27c:	08020e18 	.word	0x08020e18

0801c280 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801c280:	b580      	push	{r7, lr}
 801c282:	b086      	sub	sp, #24
 801c284:	af00      	add	r7, sp, #0
 801c286:	60f8      	str	r0, [r7, #12]
 801c288:	60b9      	str	r1, [r7, #8]
 801c28a:	607a      	str	r2, [r7, #4]
 801c28c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c28e:	8c3b      	ldrh	r3, [r7, #32]
 801c290:	4618      	mov	r0, r3
 801c292:	f7f5 f8e5 	bl	8011460 <lwip_htons>
 801c296:	4603      	mov	r3, r0
 801c298:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801c29a:	210e      	movs	r1, #14
 801c29c:	68b8      	ldr	r0, [r7, #8]
 801c29e:	f7f6 fcf7 	bl	8012c90 <pbuf_add_header>
 801c2a2:	4603      	mov	r3, r0
 801c2a4:	2b00      	cmp	r3, #0
 801c2a6:	d125      	bne.n	801c2f4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801c2a8:	68bb      	ldr	r3, [r7, #8]
 801c2aa:	685b      	ldr	r3, [r3, #4]
 801c2ac:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801c2ae:	693b      	ldr	r3, [r7, #16]
 801c2b0:	8afa      	ldrh	r2, [r7, #22]
 801c2b2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801c2b4:	693b      	ldr	r3, [r7, #16]
 801c2b6:	2206      	movs	r2, #6
 801c2b8:	6839      	ldr	r1, [r7, #0]
 801c2ba:	4618      	mov	r0, r3
 801c2bc:	f000 fbbf 	bl	801ca3e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801c2c0:	693b      	ldr	r3, [r7, #16]
 801c2c2:	3306      	adds	r3, #6
 801c2c4:	2206      	movs	r2, #6
 801c2c6:	6879      	ldr	r1, [r7, #4]
 801c2c8:	4618      	mov	r0, r3
 801c2ca:	f000 fbb8 	bl	801ca3e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c2ce:	68fb      	ldr	r3, [r7, #12]
 801c2d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801c2d4:	2b06      	cmp	r3, #6
 801c2d6:	d006      	beq.n	801c2e6 <ethernet_output+0x66>
 801c2d8:	4b0a      	ldr	r3, [pc, #40]	; (801c304 <ethernet_output+0x84>)
 801c2da:	f44f 7299 	mov.w	r2, #306	; 0x132
 801c2de:	490a      	ldr	r1, [pc, #40]	; (801c308 <ethernet_output+0x88>)
 801c2e0:	480a      	ldr	r0, [pc, #40]	; (801c30c <ethernet_output+0x8c>)
 801c2e2:	f000 facb 	bl	801c87c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c2e6:	68fb      	ldr	r3, [r7, #12]
 801c2e8:	699b      	ldr	r3, [r3, #24]
 801c2ea:	68b9      	ldr	r1, [r7, #8]
 801c2ec:	68f8      	ldr	r0, [r7, #12]
 801c2ee:	4798      	blx	r3
 801c2f0:	4603      	mov	r3, r0
 801c2f2:	e002      	b.n	801c2fa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801c2f4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c2f6:	f06f 0301 	mvn.w	r3, #1
}
 801c2fa:	4618      	mov	r0, r3
 801c2fc:	3718      	adds	r7, #24
 801c2fe:	46bd      	mov	sp, r7
 801c300:	bd80      	pop	{r7, pc}
 801c302:	bf00      	nop
 801c304:	08020bd8 	.word	0x08020bd8
 801c308:	08020c10 	.word	0x08020c10
 801c30c:	08020c44 	.word	0x08020c44

0801c310 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c310:	b580      	push	{r7, lr}
 801c312:	b082      	sub	sp, #8
 801c314:	af00      	add	r7, sp, #0
 801c316:	6078      	str	r0, [r7, #4]
 801c318:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801c31a:	683b      	ldr	r3, [r7, #0]
 801c31c:	2200      	movs	r2, #0
 801c31e:	2104      	movs	r1, #4
 801c320:	4618      	mov	r0, r3
 801c322:	f7ef fcb6 	bl	800bc92 <osMessageQueueNew>
 801c326:	4602      	mov	r2, r0
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	681b      	ldr	r3, [r3, #0]
 801c330:	2b00      	cmp	r3, #0
 801c332:	d102      	bne.n	801c33a <sys_mbox_new+0x2a>
    return ERR_MEM;
 801c334:	f04f 33ff 	mov.w	r3, #4294967295
 801c338:	e000      	b.n	801c33c <sys_mbox_new+0x2c>

  return ERR_OK;
 801c33a:	2300      	movs	r3, #0
}
 801c33c:	4618      	mov	r0, r3
 801c33e:	3708      	adds	r7, #8
 801c340:	46bd      	mov	sp, r7
 801c342:	bd80      	pop	{r7, pc}

0801c344 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801c344:	b580      	push	{r7, lr}
 801c346:	b082      	sub	sp, #8
 801c348:	af00      	add	r7, sp, #0
 801c34a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	681b      	ldr	r3, [r3, #0]
 801c350:	4618      	mov	r0, r3
 801c352:	f7ef fdc3 	bl	800bedc <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	4618      	mov	r0, r3
 801c35c:	f7ef fddd 	bl	800bf1a <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801c360:	bf00      	nop
 801c362:	3708      	adds	r7, #8
 801c364:	46bd      	mov	sp, r7
 801c366:	bd80      	pop	{r7, pc}

0801c368 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c368:	b580      	push	{r7, lr}
 801c36a:	b084      	sub	sp, #16
 801c36c:	af00      	add	r7, sp, #0
 801c36e:	6078      	str	r0, [r7, #4]
 801c370:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	6818      	ldr	r0, [r3, #0]
 801c376:	4639      	mov	r1, r7
 801c378:	2300      	movs	r3, #0
 801c37a:	2200      	movs	r2, #0
 801c37c:	f7ef fcfc 	bl	800bd78 <osMessageQueuePut>
 801c380:	4603      	mov	r3, r0
 801c382:	2b00      	cmp	r3, #0
 801c384:	d102      	bne.n	801c38c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801c386:	2300      	movs	r3, #0
 801c388:	73fb      	strb	r3, [r7, #15]
 801c38a:	e001      	b.n	801c390 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801c38c:	23ff      	movs	r3, #255	; 0xff
 801c38e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801c390:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c394:	4618      	mov	r0, r3
 801c396:	3710      	adds	r7, #16
 801c398:	46bd      	mov	sp, r7
 801c39a:	bd80      	pop	{r7, pc}

0801c39c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c39c:	b580      	push	{r7, lr}
 801c39e:	b086      	sub	sp, #24
 801c3a0:	af00      	add	r7, sp, #0
 801c3a2:	60f8      	str	r0, [r7, #12]
 801c3a4:	60b9      	str	r1, [r7, #8]
 801c3a6:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801c3a8:	f7ef f972 	bl	800b690 <osKernelGetTickCount>
 801c3ac:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801c3ae:	687b      	ldr	r3, [r7, #4]
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d013      	beq.n	801c3dc <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801c3b4:	68fb      	ldr	r3, [r7, #12]
 801c3b6:	6818      	ldr	r0, [r3, #0]
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	2200      	movs	r2, #0
 801c3bc:	68b9      	ldr	r1, [r7, #8]
 801c3be:	f7ef fd35 	bl	800be2c <osMessageQueueGet>
 801c3c2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801c3c4:	693b      	ldr	r3, [r7, #16]
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	d105      	bne.n	801c3d6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801c3ca:	f7ef f961 	bl	800b690 <osKernelGetTickCount>
 801c3ce:	4602      	mov	r2, r0
 801c3d0:	697b      	ldr	r3, [r7, #20]
 801c3d2:	1ad3      	subs	r3, r2, r3
 801c3d4:	e00f      	b.n	801c3f6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c3d6:	f04f 33ff 	mov.w	r3, #4294967295
 801c3da:	e00c      	b.n	801c3f6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801c3dc:	68fb      	ldr	r3, [r7, #12]
 801c3de:	6818      	ldr	r0, [r3, #0]
 801c3e0:	f04f 33ff 	mov.w	r3, #4294967295
 801c3e4:	2200      	movs	r2, #0
 801c3e6:	68b9      	ldr	r1, [r7, #8]
 801c3e8:	f7ef fd20 	bl	800be2c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801c3ec:	f7ef f950 	bl	800b690 <osKernelGetTickCount>
 801c3f0:	4602      	mov	r2, r0
 801c3f2:	697b      	ldr	r3, [r7, #20]
 801c3f4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801c3f6:	4618      	mov	r0, r3
 801c3f8:	3718      	adds	r7, #24
 801c3fa:	46bd      	mov	sp, r7
 801c3fc:	bd80      	pop	{r7, pc}

0801c3fe <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801c3fe:	b580      	push	{r7, lr}
 801c400:	b082      	sub	sp, #8
 801c402:	af00      	add	r7, sp, #0
 801c404:	6078      	str	r0, [r7, #4]
 801c406:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801c408:	687b      	ldr	r3, [r7, #4]
 801c40a:	6818      	ldr	r0, [r3, #0]
 801c40c:	2300      	movs	r3, #0
 801c40e:	2200      	movs	r2, #0
 801c410:	6839      	ldr	r1, [r7, #0]
 801c412:	f7ef fd0b 	bl	800be2c <osMessageQueueGet>
 801c416:	4603      	mov	r3, r0
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d101      	bne.n	801c420 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801c41c:	2300      	movs	r3, #0
 801c41e:	e001      	b.n	801c424 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801c420:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801c424:	4618      	mov	r0, r3
 801c426:	3708      	adds	r7, #8
 801c428:	46bd      	mov	sp, r7
 801c42a:	bd80      	pop	{r7, pc}

0801c42c <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801c42c:	b480      	push	{r7}
 801c42e:	b083      	sub	sp, #12
 801c430:	af00      	add	r7, sp, #0
 801c432:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	2b00      	cmp	r3, #0
 801c43a:	d101      	bne.n	801c440 <sys_mbox_valid+0x14>
    return 0;
 801c43c:	2300      	movs	r3, #0
 801c43e:	e000      	b.n	801c442 <sys_mbox_valid+0x16>
  else
    return 1;
 801c440:	2301      	movs	r3, #1
}
 801c442:	4618      	mov	r0, r3
 801c444:	370c      	adds	r7, #12
 801c446:	46bd      	mov	sp, r7
 801c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c44c:	4770      	bx	lr

0801c44e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801c44e:	b480      	push	{r7}
 801c450:	b083      	sub	sp, #12
 801c452:	af00      	add	r7, sp, #0
 801c454:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	2200      	movs	r2, #0
 801c45a:	601a      	str	r2, [r3, #0]
}
 801c45c:	bf00      	nop
 801c45e:	370c      	adds	r7, #12
 801c460:	46bd      	mov	sp, r7
 801c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c466:	4770      	bx	lr

0801c468 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801c468:	b580      	push	{r7, lr}
 801c46a:	b082      	sub	sp, #8
 801c46c:	af00      	add	r7, sp, #0
 801c46e:	6078      	str	r0, [r7, #4]
 801c470:	460b      	mov	r3, r1
 801c472:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801c474:	78fb      	ldrb	r3, [r7, #3]
 801c476:	2200      	movs	r2, #0
 801c478:	4619      	mov	r1, r3
 801c47a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801c47e:	f7ef fad2 	bl	800ba26 <osSemaphoreNew>
 801c482:	4602      	mov	r2, r0
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801c488:	687b      	ldr	r3, [r7, #4]
 801c48a:	681b      	ldr	r3, [r3, #0]
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d102      	bne.n	801c496 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c490:	f04f 33ff 	mov.w	r3, #4294967295
 801c494:	e009      	b.n	801c4aa <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801c496:	78fb      	ldrb	r3, [r7, #3]
 801c498:	2b00      	cmp	r3, #0
 801c49a:	d105      	bne.n	801c4a8 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	2100      	movs	r1, #0
 801c4a2:	4618      	mov	r0, r3
 801c4a4:	f7ef fb48 	bl	800bb38 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801c4a8:	2300      	movs	r3, #0
}
 801c4aa:	4618      	mov	r0, r3
 801c4ac:	3708      	adds	r7, #8
 801c4ae:	46bd      	mov	sp, r7
 801c4b0:	bd80      	pop	{r7, pc}

0801c4b2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801c4b2:	b580      	push	{r7, lr}
 801c4b4:	b084      	sub	sp, #16
 801c4b6:	af00      	add	r7, sp, #0
 801c4b8:	6078      	str	r0, [r7, #4]
 801c4ba:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801c4bc:	f7ef f8e8 	bl	800b690 <osKernelGetTickCount>
 801c4c0:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801c4c2:	683b      	ldr	r3, [r7, #0]
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d011      	beq.n	801c4ec <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	681b      	ldr	r3, [r3, #0]
 801c4cc:	6839      	ldr	r1, [r7, #0]
 801c4ce:	4618      	mov	r0, r3
 801c4d0:	f7ef fb32 	bl	800bb38 <osSemaphoreAcquire>
 801c4d4:	4603      	mov	r3, r0
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d105      	bne.n	801c4e6 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801c4da:	f7ef f8d9 	bl	800b690 <osKernelGetTickCount>
 801c4de:	4602      	mov	r2, r0
 801c4e0:	68fb      	ldr	r3, [r7, #12]
 801c4e2:	1ad3      	subs	r3, r2, r3
 801c4e4:	e012      	b.n	801c50c <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c4e6:	f04f 33ff 	mov.w	r3, #4294967295
 801c4ea:	e00f      	b.n	801c50c <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801c4ec:	bf00      	nop
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	681b      	ldr	r3, [r3, #0]
 801c4f2:	f04f 31ff 	mov.w	r1, #4294967295
 801c4f6:	4618      	mov	r0, r3
 801c4f8:	f7ef fb1e 	bl	800bb38 <osSemaphoreAcquire>
 801c4fc:	4603      	mov	r3, r0
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d1f5      	bne.n	801c4ee <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801c502:	f7ef f8c5 	bl	800b690 <osKernelGetTickCount>
 801c506:	4602      	mov	r2, r0
 801c508:	68fb      	ldr	r3, [r7, #12]
 801c50a:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801c50c:	4618      	mov	r0, r3
 801c50e:	3710      	adds	r7, #16
 801c510:	46bd      	mov	sp, r7
 801c512:	bd80      	pop	{r7, pc}

0801c514 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801c514:	b580      	push	{r7, lr}
 801c516:	b082      	sub	sp, #8
 801c518:	af00      	add	r7, sp, #0
 801c51a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	681b      	ldr	r3, [r3, #0]
 801c520:	4618      	mov	r0, r3
 801c522:	f7ef fb55 	bl	800bbd0 <osSemaphoreRelease>
}
 801c526:	bf00      	nop
 801c528:	3708      	adds	r7, #8
 801c52a:	46bd      	mov	sp, r7
 801c52c:	bd80      	pop	{r7, pc}

0801c52e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801c52e:	b580      	push	{r7, lr}
 801c530:	b082      	sub	sp, #8
 801c532:	af00      	add	r7, sp, #0
 801c534:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801c536:	687b      	ldr	r3, [r7, #4]
 801c538:	681b      	ldr	r3, [r3, #0]
 801c53a:	4618      	mov	r0, r3
 801c53c:	f7ef fb86 	bl	800bc4c <osSemaphoreDelete>
}
 801c540:	bf00      	nop
 801c542:	3708      	adds	r7, #8
 801c544:	46bd      	mov	sp, r7
 801c546:	bd80      	pop	{r7, pc}

0801c548 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801c548:	b480      	push	{r7}
 801c54a:	b083      	sub	sp, #12
 801c54c:	af00      	add	r7, sp, #0
 801c54e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	681b      	ldr	r3, [r3, #0]
 801c554:	2b00      	cmp	r3, #0
 801c556:	d101      	bne.n	801c55c <sys_sem_valid+0x14>
    return 0;
 801c558:	2300      	movs	r3, #0
 801c55a:	e000      	b.n	801c55e <sys_sem_valid+0x16>
  else
    return 1;
 801c55c:	2301      	movs	r3, #1
}
 801c55e:	4618      	mov	r0, r3
 801c560:	370c      	adds	r7, #12
 801c562:	46bd      	mov	sp, r7
 801c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c568:	4770      	bx	lr

0801c56a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801c56a:	b480      	push	{r7}
 801c56c:	b083      	sub	sp, #12
 801c56e:	af00      	add	r7, sp, #0
 801c570:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	2200      	movs	r2, #0
 801c576:	601a      	str	r2, [r3, #0]
}
 801c578:	bf00      	nop
 801c57a:	370c      	adds	r7, #12
 801c57c:	46bd      	mov	sp, r7
 801c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c582:	4770      	bx	lr

0801c584 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801c584:	b580      	push	{r7, lr}
 801c586:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801c588:	2000      	movs	r0, #0
 801c58a:	f7ef f941 	bl	800b810 <osMutexNew>
 801c58e:	4603      	mov	r3, r0
 801c590:	4a01      	ldr	r2, [pc, #4]	; (801c598 <sys_init+0x14>)
 801c592:	6013      	str	r3, [r2, #0]
#endif
}
 801c594:	bf00      	nop
 801c596:	bd80      	pop	{r7, pc}
 801c598:	20011504 	.word	0x20011504

0801c59c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c59c:	b580      	push	{r7, lr}
 801c59e:	b082      	sub	sp, #8
 801c5a0:	af00      	add	r7, sp, #0
 801c5a2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801c5a4:	2000      	movs	r0, #0
 801c5a6:	f7ef f933 	bl	800b810 <osMutexNew>
 801c5aa:	4602      	mov	r2, r0
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801c5b0:	687b      	ldr	r3, [r7, #4]
 801c5b2:	681b      	ldr	r3, [r3, #0]
 801c5b4:	2b00      	cmp	r3, #0
 801c5b6:	d102      	bne.n	801c5be <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c5b8:	f04f 33ff 	mov.w	r3, #4294967295
 801c5bc:	e000      	b.n	801c5c0 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c5be:	2300      	movs	r3, #0
}
 801c5c0:	4618      	mov	r0, r3
 801c5c2:	3708      	adds	r7, #8
 801c5c4:	46bd      	mov	sp, r7
 801c5c6:	bd80      	pop	{r7, pc}

0801c5c8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c5c8:	b580      	push	{r7, lr}
 801c5ca:	b082      	sub	sp, #8
 801c5cc:	af00      	add	r7, sp, #0
 801c5ce:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	681b      	ldr	r3, [r3, #0]
 801c5d4:	f04f 31ff 	mov.w	r1, #4294967295
 801c5d8:	4618      	mov	r0, r3
 801c5da:	f7ef f99e 	bl	800b91a <osMutexAcquire>
#endif
}
 801c5de:	bf00      	nop
 801c5e0:	3708      	adds	r7, #8
 801c5e2:	46bd      	mov	sp, r7
 801c5e4:	bd80      	pop	{r7, pc}

0801c5e6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c5e6:	b580      	push	{r7, lr}
 801c5e8:	b082      	sub	sp, #8
 801c5ea:	af00      	add	r7, sp, #0
 801c5ec:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801c5ee:	687b      	ldr	r3, [r7, #4]
 801c5f0:	681b      	ldr	r3, [r3, #0]
 801c5f2:	4618      	mov	r0, r3
 801c5f4:	f7ef f9db 	bl	800b9ae <osMutexRelease>
}
 801c5f8:	bf00      	nop
 801c5fa:	3708      	adds	r7, #8
 801c5fc:	46bd      	mov	sp, r7
 801c5fe:	bd80      	pop	{r7, pc}

0801c600 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c600:	b580      	push	{r7, lr}
 801c602:	b08e      	sub	sp, #56	; 0x38
 801c604:	af00      	add	r7, sp, #0
 801c606:	60f8      	str	r0, [r7, #12]
 801c608:	60b9      	str	r1, [r7, #8]
 801c60a:	607a      	str	r2, [r7, #4]
 801c60c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801c60e:	f107 0314 	add.w	r3, r7, #20
 801c612:	2224      	movs	r2, #36	; 0x24
 801c614:	2100      	movs	r1, #0
 801c616:	4618      	mov	r0, r3
 801c618:	f000 f995 	bl	801c946 <memset>
 801c61c:	68fb      	ldr	r3, [r7, #12]
 801c61e:	617b      	str	r3, [r7, #20]
 801c620:	683b      	ldr	r3, [r7, #0]
 801c622:	62bb      	str	r3, [r7, #40]	; 0x28
 801c624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c626:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801c628:	f107 0314 	add.w	r3, r7, #20
 801c62c:	461a      	mov	r2, r3
 801c62e:	6879      	ldr	r1, [r7, #4]
 801c630:	68b8      	ldr	r0, [r7, #8]
 801c632:	f7ef f841 	bl	800b6b8 <osThreadNew>
 801c636:	4603      	mov	r3, r0
#endif
}
 801c638:	4618      	mov	r0, r3
 801c63a:	3738      	adds	r7, #56	; 0x38
 801c63c:	46bd      	mov	sp, r7
 801c63e:	bd80      	pop	{r7, pc}

0801c640 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c640:	b580      	push	{r7, lr}
 801c642:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801c644:	4b04      	ldr	r3, [pc, #16]	; (801c658 <sys_arch_protect+0x18>)
 801c646:	681b      	ldr	r3, [r3, #0]
 801c648:	f04f 31ff 	mov.w	r1, #4294967295
 801c64c:	4618      	mov	r0, r3
 801c64e:	f7ef f964 	bl	800b91a <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801c652:	2301      	movs	r3, #1
}
 801c654:	4618      	mov	r0, r3
 801c656:	bd80      	pop	{r7, pc}
 801c658:	20011504 	.word	0x20011504

0801c65c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c65c:	b580      	push	{r7, lr}
 801c65e:	b082      	sub	sp, #8
 801c660:	af00      	add	r7, sp, #0
 801c662:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c664:	4b04      	ldr	r3, [pc, #16]	; (801c678 <sys_arch_unprotect+0x1c>)
 801c666:	681b      	ldr	r3, [r3, #0]
 801c668:	4618      	mov	r0, r3
 801c66a:	f7ef f9a0 	bl	800b9ae <osMutexRelease>
}
 801c66e:	bf00      	nop
 801c670:	3708      	adds	r7, #8
 801c672:	46bd      	mov	sp, r7
 801c674:	bd80      	pop	{r7, pc}
 801c676:	bf00      	nop
 801c678:	20011504 	.word	0x20011504

0801c67c <rand>:
 801c67c:	4b16      	ldr	r3, [pc, #88]	; (801c6d8 <rand+0x5c>)
 801c67e:	b510      	push	{r4, lr}
 801c680:	681c      	ldr	r4, [r3, #0]
 801c682:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c684:	b9b3      	cbnz	r3, 801c6b4 <rand+0x38>
 801c686:	2018      	movs	r0, #24
 801c688:	f000 fa50 	bl	801cb2c <malloc>
 801c68c:	4602      	mov	r2, r0
 801c68e:	6320      	str	r0, [r4, #48]	; 0x30
 801c690:	b920      	cbnz	r0, 801c69c <rand+0x20>
 801c692:	4b12      	ldr	r3, [pc, #72]	; (801c6dc <rand+0x60>)
 801c694:	2152      	movs	r1, #82	; 0x52
 801c696:	4812      	ldr	r0, [pc, #72]	; (801c6e0 <rand+0x64>)
 801c698:	f000 f9de 	bl	801ca58 <__assert_func>
 801c69c:	4911      	ldr	r1, [pc, #68]	; (801c6e4 <rand+0x68>)
 801c69e:	4b12      	ldr	r3, [pc, #72]	; (801c6e8 <rand+0x6c>)
 801c6a0:	e9c0 1300 	strd	r1, r3, [r0]
 801c6a4:	4b11      	ldr	r3, [pc, #68]	; (801c6ec <rand+0x70>)
 801c6a6:	2100      	movs	r1, #0
 801c6a8:	6083      	str	r3, [r0, #8]
 801c6aa:	230b      	movs	r3, #11
 801c6ac:	8183      	strh	r3, [r0, #12]
 801c6ae:	2001      	movs	r0, #1
 801c6b0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c6b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c6b6:	480e      	ldr	r0, [pc, #56]	; (801c6f0 <rand+0x74>)
 801c6b8:	690b      	ldr	r3, [r1, #16]
 801c6ba:	694c      	ldr	r4, [r1, #20]
 801c6bc:	4a0d      	ldr	r2, [pc, #52]	; (801c6f4 <rand+0x78>)
 801c6be:	4358      	muls	r0, r3
 801c6c0:	fb02 0004 	mla	r0, r2, r4, r0
 801c6c4:	fba3 3202 	umull	r3, r2, r3, r2
 801c6c8:	3301      	adds	r3, #1
 801c6ca:	eb40 0002 	adc.w	r0, r0, r2
 801c6ce:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801c6d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801c6d6:	bd10      	pop	{r4, pc}
 801c6d8:	2000008c 	.word	0x2000008c
 801c6dc:	08020e26 	.word	0x08020e26
 801c6e0:	08020e3d 	.word	0x08020e3d
 801c6e4:	abcd330e 	.word	0xabcd330e
 801c6e8:	e66d1234 	.word	0xe66d1234
 801c6ec:	0005deec 	.word	0x0005deec
 801c6f0:	5851f42d 	.word	0x5851f42d
 801c6f4:	4c957f2d 	.word	0x4c957f2d

0801c6f8 <std>:
 801c6f8:	2300      	movs	r3, #0
 801c6fa:	b510      	push	{r4, lr}
 801c6fc:	4604      	mov	r4, r0
 801c6fe:	6083      	str	r3, [r0, #8]
 801c700:	8181      	strh	r1, [r0, #12]
 801c702:	4619      	mov	r1, r3
 801c704:	6643      	str	r3, [r0, #100]	; 0x64
 801c706:	81c2      	strh	r2, [r0, #14]
 801c708:	2208      	movs	r2, #8
 801c70a:	6183      	str	r3, [r0, #24]
 801c70c:	e9c0 3300 	strd	r3, r3, [r0]
 801c710:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c714:	305c      	adds	r0, #92	; 0x5c
 801c716:	f000 f916 	bl	801c946 <memset>
 801c71a:	4b0d      	ldr	r3, [pc, #52]	; (801c750 <std+0x58>)
 801c71c:	6224      	str	r4, [r4, #32]
 801c71e:	6263      	str	r3, [r4, #36]	; 0x24
 801c720:	4b0c      	ldr	r3, [pc, #48]	; (801c754 <std+0x5c>)
 801c722:	62a3      	str	r3, [r4, #40]	; 0x28
 801c724:	4b0c      	ldr	r3, [pc, #48]	; (801c758 <std+0x60>)
 801c726:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c728:	4b0c      	ldr	r3, [pc, #48]	; (801c75c <std+0x64>)
 801c72a:	6323      	str	r3, [r4, #48]	; 0x30
 801c72c:	4b0c      	ldr	r3, [pc, #48]	; (801c760 <std+0x68>)
 801c72e:	429c      	cmp	r4, r3
 801c730:	d006      	beq.n	801c740 <std+0x48>
 801c732:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801c736:	4294      	cmp	r4, r2
 801c738:	d002      	beq.n	801c740 <std+0x48>
 801c73a:	33d0      	adds	r3, #208	; 0xd0
 801c73c:	429c      	cmp	r4, r3
 801c73e:	d105      	bne.n	801c74c <std+0x54>
 801c740:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c748:	f000 b976 	b.w	801ca38 <__retarget_lock_init_recursive>
 801c74c:	bd10      	pop	{r4, pc}
 801c74e:	bf00      	nop
 801c750:	0801c8a1 	.word	0x0801c8a1
 801c754:	0801c8c3 	.word	0x0801c8c3
 801c758:	0801c8fb 	.word	0x0801c8fb
 801c75c:	0801c91f 	.word	0x0801c91f
 801c760:	20011508 	.word	0x20011508

0801c764 <stdio_exit_handler>:
 801c764:	4a02      	ldr	r2, [pc, #8]	; (801c770 <stdio_exit_handler+0xc>)
 801c766:	4903      	ldr	r1, [pc, #12]	; (801c774 <stdio_exit_handler+0x10>)
 801c768:	4803      	ldr	r0, [pc, #12]	; (801c778 <stdio_exit_handler+0x14>)
 801c76a:	f000 b869 	b.w	801c840 <_fwalk_sglue>
 801c76e:	bf00      	nop
 801c770:	20000034 	.word	0x20000034
 801c774:	0801d349 	.word	0x0801d349
 801c778:	20000040 	.word	0x20000040

0801c77c <cleanup_stdio>:
 801c77c:	6841      	ldr	r1, [r0, #4]
 801c77e:	4b0c      	ldr	r3, [pc, #48]	; (801c7b0 <cleanup_stdio+0x34>)
 801c780:	4299      	cmp	r1, r3
 801c782:	b510      	push	{r4, lr}
 801c784:	4604      	mov	r4, r0
 801c786:	d001      	beq.n	801c78c <cleanup_stdio+0x10>
 801c788:	f000 fdde 	bl	801d348 <_fflush_r>
 801c78c:	68a1      	ldr	r1, [r4, #8]
 801c78e:	4b09      	ldr	r3, [pc, #36]	; (801c7b4 <cleanup_stdio+0x38>)
 801c790:	4299      	cmp	r1, r3
 801c792:	d002      	beq.n	801c79a <cleanup_stdio+0x1e>
 801c794:	4620      	mov	r0, r4
 801c796:	f000 fdd7 	bl	801d348 <_fflush_r>
 801c79a:	68e1      	ldr	r1, [r4, #12]
 801c79c:	4b06      	ldr	r3, [pc, #24]	; (801c7b8 <cleanup_stdio+0x3c>)
 801c79e:	4299      	cmp	r1, r3
 801c7a0:	d004      	beq.n	801c7ac <cleanup_stdio+0x30>
 801c7a2:	4620      	mov	r0, r4
 801c7a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c7a8:	f000 bdce 	b.w	801d348 <_fflush_r>
 801c7ac:	bd10      	pop	{r4, pc}
 801c7ae:	bf00      	nop
 801c7b0:	20011508 	.word	0x20011508
 801c7b4:	20011570 	.word	0x20011570
 801c7b8:	200115d8 	.word	0x200115d8

0801c7bc <global_stdio_init.part.0>:
 801c7bc:	b510      	push	{r4, lr}
 801c7be:	4b0b      	ldr	r3, [pc, #44]	; (801c7ec <global_stdio_init.part.0+0x30>)
 801c7c0:	2104      	movs	r1, #4
 801c7c2:	4c0b      	ldr	r4, [pc, #44]	; (801c7f0 <global_stdio_init.part.0+0x34>)
 801c7c4:	4a0b      	ldr	r2, [pc, #44]	; (801c7f4 <global_stdio_init.part.0+0x38>)
 801c7c6:	4620      	mov	r0, r4
 801c7c8:	601a      	str	r2, [r3, #0]
 801c7ca:	2200      	movs	r2, #0
 801c7cc:	f7ff ff94 	bl	801c6f8 <std>
 801c7d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801c7d4:	2201      	movs	r2, #1
 801c7d6:	2109      	movs	r1, #9
 801c7d8:	f7ff ff8e 	bl	801c6f8 <std>
 801c7dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801c7e0:	2202      	movs	r2, #2
 801c7e2:	2112      	movs	r1, #18
 801c7e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c7e8:	f7ff bf86 	b.w	801c6f8 <std>
 801c7ec:	20011640 	.word	0x20011640
 801c7f0:	20011508 	.word	0x20011508
 801c7f4:	0801c765 	.word	0x0801c765

0801c7f8 <__sfp_lock_acquire>:
 801c7f8:	4801      	ldr	r0, [pc, #4]	; (801c800 <__sfp_lock_acquire+0x8>)
 801c7fa:	f000 b91e 	b.w	801ca3a <__retarget_lock_acquire_recursive>
 801c7fe:	bf00      	nop
 801c800:	20011649 	.word	0x20011649

0801c804 <__sfp_lock_release>:
 801c804:	4801      	ldr	r0, [pc, #4]	; (801c80c <__sfp_lock_release+0x8>)
 801c806:	f000 b919 	b.w	801ca3c <__retarget_lock_release_recursive>
 801c80a:	bf00      	nop
 801c80c:	20011649 	.word	0x20011649

0801c810 <__sinit>:
 801c810:	b510      	push	{r4, lr}
 801c812:	4604      	mov	r4, r0
 801c814:	f7ff fff0 	bl	801c7f8 <__sfp_lock_acquire>
 801c818:	6a23      	ldr	r3, [r4, #32]
 801c81a:	b11b      	cbz	r3, 801c824 <__sinit+0x14>
 801c81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c820:	f7ff bff0 	b.w	801c804 <__sfp_lock_release>
 801c824:	4b04      	ldr	r3, [pc, #16]	; (801c838 <__sinit+0x28>)
 801c826:	6223      	str	r3, [r4, #32]
 801c828:	4b04      	ldr	r3, [pc, #16]	; (801c83c <__sinit+0x2c>)
 801c82a:	681b      	ldr	r3, [r3, #0]
 801c82c:	2b00      	cmp	r3, #0
 801c82e:	d1f5      	bne.n	801c81c <__sinit+0xc>
 801c830:	f7ff ffc4 	bl	801c7bc <global_stdio_init.part.0>
 801c834:	e7f2      	b.n	801c81c <__sinit+0xc>
 801c836:	bf00      	nop
 801c838:	0801c77d 	.word	0x0801c77d
 801c83c:	20011640 	.word	0x20011640

0801c840 <_fwalk_sglue>:
 801c840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c844:	4607      	mov	r7, r0
 801c846:	4688      	mov	r8, r1
 801c848:	4614      	mov	r4, r2
 801c84a:	2600      	movs	r6, #0
 801c84c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c850:	f1b9 0901 	subs.w	r9, r9, #1
 801c854:	d505      	bpl.n	801c862 <_fwalk_sglue+0x22>
 801c856:	6824      	ldr	r4, [r4, #0]
 801c858:	2c00      	cmp	r4, #0
 801c85a:	d1f7      	bne.n	801c84c <_fwalk_sglue+0xc>
 801c85c:	4630      	mov	r0, r6
 801c85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c862:	89ab      	ldrh	r3, [r5, #12]
 801c864:	2b01      	cmp	r3, #1
 801c866:	d907      	bls.n	801c878 <_fwalk_sglue+0x38>
 801c868:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c86c:	3301      	adds	r3, #1
 801c86e:	d003      	beq.n	801c878 <_fwalk_sglue+0x38>
 801c870:	4629      	mov	r1, r5
 801c872:	4638      	mov	r0, r7
 801c874:	47c0      	blx	r8
 801c876:	4306      	orrs	r6, r0
 801c878:	3568      	adds	r5, #104	; 0x68
 801c87a:	e7e9      	b.n	801c850 <_fwalk_sglue+0x10>

0801c87c <iprintf>:
 801c87c:	b40f      	push	{r0, r1, r2, r3}
 801c87e:	b507      	push	{r0, r1, r2, lr}
 801c880:	4906      	ldr	r1, [pc, #24]	; (801c89c <iprintf+0x20>)
 801c882:	ab04      	add	r3, sp, #16
 801c884:	6808      	ldr	r0, [r1, #0]
 801c886:	f853 2b04 	ldr.w	r2, [r3], #4
 801c88a:	6881      	ldr	r1, [r0, #8]
 801c88c:	9301      	str	r3, [sp, #4]
 801c88e:	f000 fa2b 	bl	801cce8 <_vfiprintf_r>
 801c892:	b003      	add	sp, #12
 801c894:	f85d eb04 	ldr.w	lr, [sp], #4
 801c898:	b004      	add	sp, #16
 801c89a:	4770      	bx	lr
 801c89c:	2000008c 	.word	0x2000008c

0801c8a0 <__sread>:
 801c8a0:	b510      	push	{r4, lr}
 801c8a2:	460c      	mov	r4, r1
 801c8a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c8a8:	f000 f878 	bl	801c99c <_read_r>
 801c8ac:	2800      	cmp	r0, #0
 801c8ae:	bfab      	itete	ge
 801c8b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c8b2:	89a3      	ldrhlt	r3, [r4, #12]
 801c8b4:	181b      	addge	r3, r3, r0
 801c8b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c8ba:	bfac      	ite	ge
 801c8bc:	6563      	strge	r3, [r4, #84]	; 0x54
 801c8be:	81a3      	strhlt	r3, [r4, #12]
 801c8c0:	bd10      	pop	{r4, pc}

0801c8c2 <__swrite>:
 801c8c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8c6:	461f      	mov	r7, r3
 801c8c8:	898b      	ldrh	r3, [r1, #12]
 801c8ca:	4605      	mov	r5, r0
 801c8cc:	460c      	mov	r4, r1
 801c8ce:	05db      	lsls	r3, r3, #23
 801c8d0:	4616      	mov	r6, r2
 801c8d2:	d505      	bpl.n	801c8e0 <__swrite+0x1e>
 801c8d4:	2302      	movs	r3, #2
 801c8d6:	2200      	movs	r2, #0
 801c8d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c8dc:	f000 f84c 	bl	801c978 <_lseek_r>
 801c8e0:	89a3      	ldrh	r3, [r4, #12]
 801c8e2:	4632      	mov	r2, r6
 801c8e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c8e8:	4628      	mov	r0, r5
 801c8ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c8ee:	81a3      	strh	r3, [r4, #12]
 801c8f0:	463b      	mov	r3, r7
 801c8f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c8f6:	f000 b863 	b.w	801c9c0 <_write_r>

0801c8fa <__sseek>:
 801c8fa:	b510      	push	{r4, lr}
 801c8fc:	460c      	mov	r4, r1
 801c8fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c902:	f000 f839 	bl	801c978 <_lseek_r>
 801c906:	1c43      	adds	r3, r0, #1
 801c908:	89a3      	ldrh	r3, [r4, #12]
 801c90a:	bf15      	itete	ne
 801c90c:	6560      	strne	r0, [r4, #84]	; 0x54
 801c90e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c916:	81a3      	strheq	r3, [r4, #12]
 801c918:	bf18      	it	ne
 801c91a:	81a3      	strhne	r3, [r4, #12]
 801c91c:	bd10      	pop	{r4, pc}

0801c91e <__sclose>:
 801c91e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c922:	f000 b819 	b.w	801c958 <_close_r>

0801c926 <memcmp>:
 801c926:	3901      	subs	r1, #1
 801c928:	4402      	add	r2, r0
 801c92a:	b510      	push	{r4, lr}
 801c92c:	4290      	cmp	r0, r2
 801c92e:	d101      	bne.n	801c934 <memcmp+0xe>
 801c930:	2000      	movs	r0, #0
 801c932:	e005      	b.n	801c940 <memcmp+0x1a>
 801c934:	7803      	ldrb	r3, [r0, #0]
 801c936:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c93a:	42a3      	cmp	r3, r4
 801c93c:	d001      	beq.n	801c942 <memcmp+0x1c>
 801c93e:	1b18      	subs	r0, r3, r4
 801c940:	bd10      	pop	{r4, pc}
 801c942:	3001      	adds	r0, #1
 801c944:	e7f2      	b.n	801c92c <memcmp+0x6>

0801c946 <memset>:
 801c946:	4402      	add	r2, r0
 801c948:	4603      	mov	r3, r0
 801c94a:	4293      	cmp	r3, r2
 801c94c:	d100      	bne.n	801c950 <memset+0xa>
 801c94e:	4770      	bx	lr
 801c950:	f803 1b01 	strb.w	r1, [r3], #1
 801c954:	e7f9      	b.n	801c94a <memset+0x4>
	...

0801c958 <_close_r>:
 801c958:	b538      	push	{r3, r4, r5, lr}
 801c95a:	2300      	movs	r3, #0
 801c95c:	4d05      	ldr	r5, [pc, #20]	; (801c974 <_close_r+0x1c>)
 801c95e:	4604      	mov	r4, r0
 801c960:	4608      	mov	r0, r1
 801c962:	602b      	str	r3, [r5, #0]
 801c964:	f7e5 f9e3 	bl	8001d2e <_close>
 801c968:	1c43      	adds	r3, r0, #1
 801c96a:	d102      	bne.n	801c972 <_close_r+0x1a>
 801c96c:	682b      	ldr	r3, [r5, #0]
 801c96e:	b103      	cbz	r3, 801c972 <_close_r+0x1a>
 801c970:	6023      	str	r3, [r4, #0]
 801c972:	bd38      	pop	{r3, r4, r5, pc}
 801c974:	20011644 	.word	0x20011644

0801c978 <_lseek_r>:
 801c978:	b538      	push	{r3, r4, r5, lr}
 801c97a:	4604      	mov	r4, r0
 801c97c:	4d06      	ldr	r5, [pc, #24]	; (801c998 <_lseek_r+0x20>)
 801c97e:	4608      	mov	r0, r1
 801c980:	4611      	mov	r1, r2
 801c982:	2200      	movs	r2, #0
 801c984:	602a      	str	r2, [r5, #0]
 801c986:	461a      	mov	r2, r3
 801c988:	f7e5 f9f8 	bl	8001d7c <_lseek>
 801c98c:	1c43      	adds	r3, r0, #1
 801c98e:	d102      	bne.n	801c996 <_lseek_r+0x1e>
 801c990:	682b      	ldr	r3, [r5, #0]
 801c992:	b103      	cbz	r3, 801c996 <_lseek_r+0x1e>
 801c994:	6023      	str	r3, [r4, #0]
 801c996:	bd38      	pop	{r3, r4, r5, pc}
 801c998:	20011644 	.word	0x20011644

0801c99c <_read_r>:
 801c99c:	b538      	push	{r3, r4, r5, lr}
 801c99e:	4604      	mov	r4, r0
 801c9a0:	4d06      	ldr	r5, [pc, #24]	; (801c9bc <_read_r+0x20>)
 801c9a2:	4608      	mov	r0, r1
 801c9a4:	4611      	mov	r1, r2
 801c9a6:	2200      	movs	r2, #0
 801c9a8:	602a      	str	r2, [r5, #0]
 801c9aa:	461a      	mov	r2, r3
 801c9ac:	f7e5 f9a2 	bl	8001cf4 <_read>
 801c9b0:	1c43      	adds	r3, r0, #1
 801c9b2:	d102      	bne.n	801c9ba <_read_r+0x1e>
 801c9b4:	682b      	ldr	r3, [r5, #0]
 801c9b6:	b103      	cbz	r3, 801c9ba <_read_r+0x1e>
 801c9b8:	6023      	str	r3, [r4, #0]
 801c9ba:	bd38      	pop	{r3, r4, r5, pc}
 801c9bc:	20011644 	.word	0x20011644

0801c9c0 <_write_r>:
 801c9c0:	b538      	push	{r3, r4, r5, lr}
 801c9c2:	4604      	mov	r4, r0
 801c9c4:	4d06      	ldr	r5, [pc, #24]	; (801c9e0 <_write_r+0x20>)
 801c9c6:	4608      	mov	r0, r1
 801c9c8:	4611      	mov	r1, r2
 801c9ca:	2200      	movs	r2, #0
 801c9cc:	602a      	str	r2, [r5, #0]
 801c9ce:	461a      	mov	r2, r3
 801c9d0:	f7e4 fd61 	bl	8001496 <_write>
 801c9d4:	1c43      	adds	r3, r0, #1
 801c9d6:	d102      	bne.n	801c9de <_write_r+0x1e>
 801c9d8:	682b      	ldr	r3, [r5, #0]
 801c9da:	b103      	cbz	r3, 801c9de <_write_r+0x1e>
 801c9dc:	6023      	str	r3, [r4, #0]
 801c9de:	bd38      	pop	{r3, r4, r5, pc}
 801c9e0:	20011644 	.word	0x20011644

0801c9e4 <__errno>:
 801c9e4:	4b01      	ldr	r3, [pc, #4]	; (801c9ec <__errno+0x8>)
 801c9e6:	6818      	ldr	r0, [r3, #0]
 801c9e8:	4770      	bx	lr
 801c9ea:	bf00      	nop
 801c9ec:	2000008c 	.word	0x2000008c

0801c9f0 <__libc_init_array>:
 801c9f0:	b570      	push	{r4, r5, r6, lr}
 801c9f2:	4d0d      	ldr	r5, [pc, #52]	; (801ca28 <__libc_init_array+0x38>)
 801c9f4:	2600      	movs	r6, #0
 801c9f6:	4c0d      	ldr	r4, [pc, #52]	; (801ca2c <__libc_init_array+0x3c>)
 801c9f8:	1b64      	subs	r4, r4, r5
 801c9fa:	10a4      	asrs	r4, r4, #2
 801c9fc:	42a6      	cmp	r6, r4
 801c9fe:	d109      	bne.n	801ca14 <__libc_init_array+0x24>
 801ca00:	4d0b      	ldr	r5, [pc, #44]	; (801ca30 <__libc_init_array+0x40>)
 801ca02:	2600      	movs	r6, #0
 801ca04:	4c0b      	ldr	r4, [pc, #44]	; (801ca34 <__libc_init_array+0x44>)
 801ca06:	f000 fe5b 	bl	801d6c0 <_init>
 801ca0a:	1b64      	subs	r4, r4, r5
 801ca0c:	10a4      	asrs	r4, r4, #2
 801ca0e:	42a6      	cmp	r6, r4
 801ca10:	d105      	bne.n	801ca1e <__libc_init_array+0x2e>
 801ca12:	bd70      	pop	{r4, r5, r6, pc}
 801ca14:	f855 3b04 	ldr.w	r3, [r5], #4
 801ca18:	3601      	adds	r6, #1
 801ca1a:	4798      	blx	r3
 801ca1c:	e7ee      	b.n	801c9fc <__libc_init_array+0xc>
 801ca1e:	f855 3b04 	ldr.w	r3, [r5], #4
 801ca22:	3601      	adds	r6, #1
 801ca24:	4798      	blx	r3
 801ca26:	e7f2      	b.n	801ca0e <__libc_init_array+0x1e>
 801ca28:	08020f0c 	.word	0x08020f0c
 801ca2c:	08020f0c 	.word	0x08020f0c
 801ca30:	08020f0c 	.word	0x08020f0c
 801ca34:	08020f10 	.word	0x08020f10

0801ca38 <__retarget_lock_init_recursive>:
 801ca38:	4770      	bx	lr

0801ca3a <__retarget_lock_acquire_recursive>:
 801ca3a:	4770      	bx	lr

0801ca3c <__retarget_lock_release_recursive>:
 801ca3c:	4770      	bx	lr

0801ca3e <memcpy>:
 801ca3e:	440a      	add	r2, r1
 801ca40:	1e43      	subs	r3, r0, #1
 801ca42:	4291      	cmp	r1, r2
 801ca44:	d100      	bne.n	801ca48 <memcpy+0xa>
 801ca46:	4770      	bx	lr
 801ca48:	b510      	push	{r4, lr}
 801ca4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ca4e:	4291      	cmp	r1, r2
 801ca50:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ca54:	d1f9      	bne.n	801ca4a <memcpy+0xc>
 801ca56:	bd10      	pop	{r4, pc}

0801ca58 <__assert_func>:
 801ca58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ca5a:	4614      	mov	r4, r2
 801ca5c:	461a      	mov	r2, r3
 801ca5e:	4b09      	ldr	r3, [pc, #36]	; (801ca84 <__assert_func+0x2c>)
 801ca60:	4605      	mov	r5, r0
 801ca62:	681b      	ldr	r3, [r3, #0]
 801ca64:	68d8      	ldr	r0, [r3, #12]
 801ca66:	b14c      	cbz	r4, 801ca7c <__assert_func+0x24>
 801ca68:	4b07      	ldr	r3, [pc, #28]	; (801ca88 <__assert_func+0x30>)
 801ca6a:	9100      	str	r1, [sp, #0]
 801ca6c:	4907      	ldr	r1, [pc, #28]	; (801ca8c <__assert_func+0x34>)
 801ca6e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ca72:	462b      	mov	r3, r5
 801ca74:	f000 fc90 	bl	801d398 <fiprintf>
 801ca78:	f000 fd54 	bl	801d524 <abort>
 801ca7c:	4b04      	ldr	r3, [pc, #16]	; (801ca90 <__assert_func+0x38>)
 801ca7e:	461c      	mov	r4, r3
 801ca80:	e7f3      	b.n	801ca6a <__assert_func+0x12>
 801ca82:	bf00      	nop
 801ca84:	2000008c 	.word	0x2000008c
 801ca88:	08020e95 	.word	0x08020e95
 801ca8c:	08020ea2 	.word	0x08020ea2
 801ca90:	08020ed0 	.word	0x08020ed0

0801ca94 <_free_r>:
 801ca94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ca96:	2900      	cmp	r1, #0
 801ca98:	d043      	beq.n	801cb22 <_free_r+0x8e>
 801ca9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ca9e:	1f0c      	subs	r4, r1, #4
 801caa0:	9001      	str	r0, [sp, #4]
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	bfb8      	it	lt
 801caa6:	18e4      	addlt	r4, r4, r3
 801caa8:	f000 f8e8 	bl	801cc7c <__malloc_lock>
 801caac:	4a1e      	ldr	r2, [pc, #120]	; (801cb28 <_free_r+0x94>)
 801caae:	9801      	ldr	r0, [sp, #4]
 801cab0:	6813      	ldr	r3, [r2, #0]
 801cab2:	b933      	cbnz	r3, 801cac2 <_free_r+0x2e>
 801cab4:	6063      	str	r3, [r4, #4]
 801cab6:	6014      	str	r4, [r2, #0]
 801cab8:	b003      	add	sp, #12
 801caba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cabe:	f000 b8e3 	b.w	801cc88 <__malloc_unlock>
 801cac2:	42a3      	cmp	r3, r4
 801cac4:	d908      	bls.n	801cad8 <_free_r+0x44>
 801cac6:	6825      	ldr	r5, [r4, #0]
 801cac8:	1961      	adds	r1, r4, r5
 801caca:	428b      	cmp	r3, r1
 801cacc:	bf01      	itttt	eq
 801cace:	6819      	ldreq	r1, [r3, #0]
 801cad0:	685b      	ldreq	r3, [r3, #4]
 801cad2:	1949      	addeq	r1, r1, r5
 801cad4:	6021      	streq	r1, [r4, #0]
 801cad6:	e7ed      	b.n	801cab4 <_free_r+0x20>
 801cad8:	461a      	mov	r2, r3
 801cada:	685b      	ldr	r3, [r3, #4]
 801cadc:	b10b      	cbz	r3, 801cae2 <_free_r+0x4e>
 801cade:	42a3      	cmp	r3, r4
 801cae0:	d9fa      	bls.n	801cad8 <_free_r+0x44>
 801cae2:	6811      	ldr	r1, [r2, #0]
 801cae4:	1855      	adds	r5, r2, r1
 801cae6:	42a5      	cmp	r5, r4
 801cae8:	d10b      	bne.n	801cb02 <_free_r+0x6e>
 801caea:	6824      	ldr	r4, [r4, #0]
 801caec:	4421      	add	r1, r4
 801caee:	1854      	adds	r4, r2, r1
 801caf0:	6011      	str	r1, [r2, #0]
 801caf2:	42a3      	cmp	r3, r4
 801caf4:	d1e0      	bne.n	801cab8 <_free_r+0x24>
 801caf6:	681c      	ldr	r4, [r3, #0]
 801caf8:	685b      	ldr	r3, [r3, #4]
 801cafa:	440c      	add	r4, r1
 801cafc:	6053      	str	r3, [r2, #4]
 801cafe:	6014      	str	r4, [r2, #0]
 801cb00:	e7da      	b.n	801cab8 <_free_r+0x24>
 801cb02:	d902      	bls.n	801cb0a <_free_r+0x76>
 801cb04:	230c      	movs	r3, #12
 801cb06:	6003      	str	r3, [r0, #0]
 801cb08:	e7d6      	b.n	801cab8 <_free_r+0x24>
 801cb0a:	6825      	ldr	r5, [r4, #0]
 801cb0c:	1961      	adds	r1, r4, r5
 801cb0e:	428b      	cmp	r3, r1
 801cb10:	bf02      	ittt	eq
 801cb12:	6819      	ldreq	r1, [r3, #0]
 801cb14:	685b      	ldreq	r3, [r3, #4]
 801cb16:	1949      	addeq	r1, r1, r5
 801cb18:	6063      	str	r3, [r4, #4]
 801cb1a:	bf08      	it	eq
 801cb1c:	6021      	streq	r1, [r4, #0]
 801cb1e:	6054      	str	r4, [r2, #4]
 801cb20:	e7ca      	b.n	801cab8 <_free_r+0x24>
 801cb22:	b003      	add	sp, #12
 801cb24:	bd30      	pop	{r4, r5, pc}
 801cb26:	bf00      	nop
 801cb28:	2001164c 	.word	0x2001164c

0801cb2c <malloc>:
 801cb2c:	4b02      	ldr	r3, [pc, #8]	; (801cb38 <malloc+0xc>)
 801cb2e:	4601      	mov	r1, r0
 801cb30:	6818      	ldr	r0, [r3, #0]
 801cb32:	f000 b823 	b.w	801cb7c <_malloc_r>
 801cb36:	bf00      	nop
 801cb38:	2000008c 	.word	0x2000008c

0801cb3c <sbrk_aligned>:
 801cb3c:	b570      	push	{r4, r5, r6, lr}
 801cb3e:	4e0e      	ldr	r6, [pc, #56]	; (801cb78 <sbrk_aligned+0x3c>)
 801cb40:	460c      	mov	r4, r1
 801cb42:	4605      	mov	r5, r0
 801cb44:	6831      	ldr	r1, [r6, #0]
 801cb46:	b911      	cbnz	r1, 801cb4e <sbrk_aligned+0x12>
 801cb48:	f000 fcce 	bl	801d4e8 <_sbrk_r>
 801cb4c:	6030      	str	r0, [r6, #0]
 801cb4e:	4621      	mov	r1, r4
 801cb50:	4628      	mov	r0, r5
 801cb52:	f000 fcc9 	bl	801d4e8 <_sbrk_r>
 801cb56:	1c43      	adds	r3, r0, #1
 801cb58:	d00a      	beq.n	801cb70 <sbrk_aligned+0x34>
 801cb5a:	1cc4      	adds	r4, r0, #3
 801cb5c:	f024 0403 	bic.w	r4, r4, #3
 801cb60:	42a0      	cmp	r0, r4
 801cb62:	d007      	beq.n	801cb74 <sbrk_aligned+0x38>
 801cb64:	1a21      	subs	r1, r4, r0
 801cb66:	4628      	mov	r0, r5
 801cb68:	f000 fcbe 	bl	801d4e8 <_sbrk_r>
 801cb6c:	3001      	adds	r0, #1
 801cb6e:	d101      	bne.n	801cb74 <sbrk_aligned+0x38>
 801cb70:	f04f 34ff 	mov.w	r4, #4294967295
 801cb74:	4620      	mov	r0, r4
 801cb76:	bd70      	pop	{r4, r5, r6, pc}
 801cb78:	20011650 	.word	0x20011650

0801cb7c <_malloc_r>:
 801cb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cb80:	1ccd      	adds	r5, r1, #3
 801cb82:	4607      	mov	r7, r0
 801cb84:	f025 0503 	bic.w	r5, r5, #3
 801cb88:	3508      	adds	r5, #8
 801cb8a:	2d0c      	cmp	r5, #12
 801cb8c:	bf38      	it	cc
 801cb8e:	250c      	movcc	r5, #12
 801cb90:	2d00      	cmp	r5, #0
 801cb92:	db01      	blt.n	801cb98 <_malloc_r+0x1c>
 801cb94:	42a9      	cmp	r1, r5
 801cb96:	d905      	bls.n	801cba4 <_malloc_r+0x28>
 801cb98:	230c      	movs	r3, #12
 801cb9a:	2600      	movs	r6, #0
 801cb9c:	603b      	str	r3, [r7, #0]
 801cb9e:	4630      	mov	r0, r6
 801cba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cba4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801cc78 <_malloc_r+0xfc>
 801cba8:	f000 f868 	bl	801cc7c <__malloc_lock>
 801cbac:	f8d8 3000 	ldr.w	r3, [r8]
 801cbb0:	461c      	mov	r4, r3
 801cbb2:	bb5c      	cbnz	r4, 801cc0c <_malloc_r+0x90>
 801cbb4:	4629      	mov	r1, r5
 801cbb6:	4638      	mov	r0, r7
 801cbb8:	f7ff ffc0 	bl	801cb3c <sbrk_aligned>
 801cbbc:	1c43      	adds	r3, r0, #1
 801cbbe:	4604      	mov	r4, r0
 801cbc0:	d155      	bne.n	801cc6e <_malloc_r+0xf2>
 801cbc2:	f8d8 4000 	ldr.w	r4, [r8]
 801cbc6:	4626      	mov	r6, r4
 801cbc8:	2e00      	cmp	r6, #0
 801cbca:	d145      	bne.n	801cc58 <_malloc_r+0xdc>
 801cbcc:	2c00      	cmp	r4, #0
 801cbce:	d048      	beq.n	801cc62 <_malloc_r+0xe6>
 801cbd0:	6823      	ldr	r3, [r4, #0]
 801cbd2:	4631      	mov	r1, r6
 801cbd4:	4638      	mov	r0, r7
 801cbd6:	eb04 0903 	add.w	r9, r4, r3
 801cbda:	f000 fc85 	bl	801d4e8 <_sbrk_r>
 801cbde:	4581      	cmp	r9, r0
 801cbe0:	d13f      	bne.n	801cc62 <_malloc_r+0xe6>
 801cbe2:	6821      	ldr	r1, [r4, #0]
 801cbe4:	4638      	mov	r0, r7
 801cbe6:	1a6d      	subs	r5, r5, r1
 801cbe8:	4629      	mov	r1, r5
 801cbea:	f7ff ffa7 	bl	801cb3c <sbrk_aligned>
 801cbee:	3001      	adds	r0, #1
 801cbf0:	d037      	beq.n	801cc62 <_malloc_r+0xe6>
 801cbf2:	6823      	ldr	r3, [r4, #0]
 801cbf4:	442b      	add	r3, r5
 801cbf6:	6023      	str	r3, [r4, #0]
 801cbf8:	f8d8 3000 	ldr.w	r3, [r8]
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d038      	beq.n	801cc72 <_malloc_r+0xf6>
 801cc00:	685a      	ldr	r2, [r3, #4]
 801cc02:	42a2      	cmp	r2, r4
 801cc04:	d12b      	bne.n	801cc5e <_malloc_r+0xe2>
 801cc06:	2200      	movs	r2, #0
 801cc08:	605a      	str	r2, [r3, #4]
 801cc0a:	e00f      	b.n	801cc2c <_malloc_r+0xb0>
 801cc0c:	6822      	ldr	r2, [r4, #0]
 801cc0e:	1b52      	subs	r2, r2, r5
 801cc10:	d41f      	bmi.n	801cc52 <_malloc_r+0xd6>
 801cc12:	2a0b      	cmp	r2, #11
 801cc14:	d917      	bls.n	801cc46 <_malloc_r+0xca>
 801cc16:	1961      	adds	r1, r4, r5
 801cc18:	42a3      	cmp	r3, r4
 801cc1a:	6025      	str	r5, [r4, #0]
 801cc1c:	bf18      	it	ne
 801cc1e:	6059      	strne	r1, [r3, #4]
 801cc20:	6863      	ldr	r3, [r4, #4]
 801cc22:	bf08      	it	eq
 801cc24:	f8c8 1000 	streq.w	r1, [r8]
 801cc28:	5162      	str	r2, [r4, r5]
 801cc2a:	604b      	str	r3, [r1, #4]
 801cc2c:	f104 060b 	add.w	r6, r4, #11
 801cc30:	4638      	mov	r0, r7
 801cc32:	f000 f829 	bl	801cc88 <__malloc_unlock>
 801cc36:	1d23      	adds	r3, r4, #4
 801cc38:	f026 0607 	bic.w	r6, r6, #7
 801cc3c:	1af2      	subs	r2, r6, r3
 801cc3e:	d0ae      	beq.n	801cb9e <_malloc_r+0x22>
 801cc40:	1b9b      	subs	r3, r3, r6
 801cc42:	50a3      	str	r3, [r4, r2]
 801cc44:	e7ab      	b.n	801cb9e <_malloc_r+0x22>
 801cc46:	42a3      	cmp	r3, r4
 801cc48:	6862      	ldr	r2, [r4, #4]
 801cc4a:	d1dd      	bne.n	801cc08 <_malloc_r+0x8c>
 801cc4c:	f8c8 2000 	str.w	r2, [r8]
 801cc50:	e7ec      	b.n	801cc2c <_malloc_r+0xb0>
 801cc52:	4623      	mov	r3, r4
 801cc54:	6864      	ldr	r4, [r4, #4]
 801cc56:	e7ac      	b.n	801cbb2 <_malloc_r+0x36>
 801cc58:	4634      	mov	r4, r6
 801cc5a:	6876      	ldr	r6, [r6, #4]
 801cc5c:	e7b4      	b.n	801cbc8 <_malloc_r+0x4c>
 801cc5e:	4613      	mov	r3, r2
 801cc60:	e7cc      	b.n	801cbfc <_malloc_r+0x80>
 801cc62:	230c      	movs	r3, #12
 801cc64:	4638      	mov	r0, r7
 801cc66:	603b      	str	r3, [r7, #0]
 801cc68:	f000 f80e 	bl	801cc88 <__malloc_unlock>
 801cc6c:	e797      	b.n	801cb9e <_malloc_r+0x22>
 801cc6e:	6025      	str	r5, [r4, #0]
 801cc70:	e7dc      	b.n	801cc2c <_malloc_r+0xb0>
 801cc72:	605b      	str	r3, [r3, #4]
 801cc74:	deff      	udf	#255	; 0xff
 801cc76:	bf00      	nop
 801cc78:	2001164c 	.word	0x2001164c

0801cc7c <__malloc_lock>:
 801cc7c:	4801      	ldr	r0, [pc, #4]	; (801cc84 <__malloc_lock+0x8>)
 801cc7e:	f7ff bedc 	b.w	801ca3a <__retarget_lock_acquire_recursive>
 801cc82:	bf00      	nop
 801cc84:	20011648 	.word	0x20011648

0801cc88 <__malloc_unlock>:
 801cc88:	4801      	ldr	r0, [pc, #4]	; (801cc90 <__malloc_unlock+0x8>)
 801cc8a:	f7ff bed7 	b.w	801ca3c <__retarget_lock_release_recursive>
 801cc8e:	bf00      	nop
 801cc90:	20011648 	.word	0x20011648

0801cc94 <__sfputc_r>:
 801cc94:	6893      	ldr	r3, [r2, #8]
 801cc96:	3b01      	subs	r3, #1
 801cc98:	2b00      	cmp	r3, #0
 801cc9a:	6093      	str	r3, [r2, #8]
 801cc9c:	b410      	push	{r4}
 801cc9e:	da08      	bge.n	801ccb2 <__sfputc_r+0x1e>
 801cca0:	6994      	ldr	r4, [r2, #24]
 801cca2:	42a3      	cmp	r3, r4
 801cca4:	db01      	blt.n	801ccaa <__sfputc_r+0x16>
 801cca6:	290a      	cmp	r1, #10
 801cca8:	d103      	bne.n	801ccb2 <__sfputc_r+0x1e>
 801ccaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ccae:	f000 bb85 	b.w	801d3bc <__swbuf_r>
 801ccb2:	6813      	ldr	r3, [r2, #0]
 801ccb4:	1c58      	adds	r0, r3, #1
 801ccb6:	6010      	str	r0, [r2, #0]
 801ccb8:	4608      	mov	r0, r1
 801ccba:	7019      	strb	r1, [r3, #0]
 801ccbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ccc0:	4770      	bx	lr

0801ccc2 <__sfputs_r>:
 801ccc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ccc4:	4606      	mov	r6, r0
 801ccc6:	460f      	mov	r7, r1
 801ccc8:	4614      	mov	r4, r2
 801ccca:	18d5      	adds	r5, r2, r3
 801cccc:	42ac      	cmp	r4, r5
 801ccce:	d101      	bne.n	801ccd4 <__sfputs_r+0x12>
 801ccd0:	2000      	movs	r0, #0
 801ccd2:	e007      	b.n	801cce4 <__sfputs_r+0x22>
 801ccd4:	463a      	mov	r2, r7
 801ccd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ccda:	4630      	mov	r0, r6
 801ccdc:	f7ff ffda 	bl	801cc94 <__sfputc_r>
 801cce0:	1c43      	adds	r3, r0, #1
 801cce2:	d1f3      	bne.n	801cccc <__sfputs_r+0xa>
 801cce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cce8 <_vfiprintf_r>:
 801cce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccec:	460d      	mov	r5, r1
 801ccee:	b09d      	sub	sp, #116	; 0x74
 801ccf0:	4614      	mov	r4, r2
 801ccf2:	4698      	mov	r8, r3
 801ccf4:	4606      	mov	r6, r0
 801ccf6:	b118      	cbz	r0, 801cd00 <_vfiprintf_r+0x18>
 801ccf8:	6a03      	ldr	r3, [r0, #32]
 801ccfa:	b90b      	cbnz	r3, 801cd00 <_vfiprintf_r+0x18>
 801ccfc:	f7ff fd88 	bl	801c810 <__sinit>
 801cd00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cd02:	07d9      	lsls	r1, r3, #31
 801cd04:	d405      	bmi.n	801cd12 <_vfiprintf_r+0x2a>
 801cd06:	89ab      	ldrh	r3, [r5, #12]
 801cd08:	059a      	lsls	r2, r3, #22
 801cd0a:	d402      	bmi.n	801cd12 <_vfiprintf_r+0x2a>
 801cd0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cd0e:	f7ff fe94 	bl	801ca3a <__retarget_lock_acquire_recursive>
 801cd12:	89ab      	ldrh	r3, [r5, #12]
 801cd14:	071b      	lsls	r3, r3, #28
 801cd16:	d501      	bpl.n	801cd1c <_vfiprintf_r+0x34>
 801cd18:	692b      	ldr	r3, [r5, #16]
 801cd1a:	b99b      	cbnz	r3, 801cd44 <_vfiprintf_r+0x5c>
 801cd1c:	4629      	mov	r1, r5
 801cd1e:	4630      	mov	r0, r6
 801cd20:	f000 fb8a 	bl	801d438 <__swsetup_r>
 801cd24:	b170      	cbz	r0, 801cd44 <_vfiprintf_r+0x5c>
 801cd26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cd28:	07dc      	lsls	r4, r3, #31
 801cd2a:	d504      	bpl.n	801cd36 <_vfiprintf_r+0x4e>
 801cd2c:	f04f 30ff 	mov.w	r0, #4294967295
 801cd30:	b01d      	add	sp, #116	; 0x74
 801cd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd36:	89ab      	ldrh	r3, [r5, #12]
 801cd38:	0598      	lsls	r0, r3, #22
 801cd3a:	d4f7      	bmi.n	801cd2c <_vfiprintf_r+0x44>
 801cd3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cd3e:	f7ff fe7d 	bl	801ca3c <__retarget_lock_release_recursive>
 801cd42:	e7f3      	b.n	801cd2c <_vfiprintf_r+0x44>
 801cd44:	2300      	movs	r3, #0
 801cd46:	f8cd 800c 	str.w	r8, [sp, #12]
 801cd4a:	f04f 0901 	mov.w	r9, #1
 801cd4e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 801cf08 <_vfiprintf_r+0x220>
 801cd52:	9309      	str	r3, [sp, #36]	; 0x24
 801cd54:	2320      	movs	r3, #32
 801cd56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cd5a:	2330      	movs	r3, #48	; 0x30
 801cd5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cd60:	4623      	mov	r3, r4
 801cd62:	469a      	mov	sl, r3
 801cd64:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cd68:	b10a      	cbz	r2, 801cd6e <_vfiprintf_r+0x86>
 801cd6a:	2a25      	cmp	r2, #37	; 0x25
 801cd6c:	d1f9      	bne.n	801cd62 <_vfiprintf_r+0x7a>
 801cd6e:	ebba 0b04 	subs.w	fp, sl, r4
 801cd72:	d00b      	beq.n	801cd8c <_vfiprintf_r+0xa4>
 801cd74:	465b      	mov	r3, fp
 801cd76:	4622      	mov	r2, r4
 801cd78:	4629      	mov	r1, r5
 801cd7a:	4630      	mov	r0, r6
 801cd7c:	f7ff ffa1 	bl	801ccc2 <__sfputs_r>
 801cd80:	3001      	adds	r0, #1
 801cd82:	f000 80a9 	beq.w	801ced8 <_vfiprintf_r+0x1f0>
 801cd86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cd88:	445a      	add	r2, fp
 801cd8a:	9209      	str	r2, [sp, #36]	; 0x24
 801cd8c:	f89a 3000 	ldrb.w	r3, [sl]
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	f000 80a1 	beq.w	801ced8 <_vfiprintf_r+0x1f0>
 801cd96:	2300      	movs	r3, #0
 801cd98:	f04f 32ff 	mov.w	r2, #4294967295
 801cd9c:	f10a 0a01 	add.w	sl, sl, #1
 801cda0:	9304      	str	r3, [sp, #16]
 801cda2:	9307      	str	r3, [sp, #28]
 801cda4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cda8:	931a      	str	r3, [sp, #104]	; 0x68
 801cdaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cdae:	4654      	mov	r4, sl
 801cdb0:	2205      	movs	r2, #5
 801cdb2:	4855      	ldr	r0, [pc, #340]	; (801cf08 <_vfiprintf_r+0x220>)
 801cdb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cdb8:	f000 fba6 	bl	801d508 <memchr>
 801cdbc:	9a04      	ldr	r2, [sp, #16]
 801cdbe:	b9d8      	cbnz	r0, 801cdf8 <_vfiprintf_r+0x110>
 801cdc0:	06d1      	lsls	r1, r2, #27
 801cdc2:	bf44      	itt	mi
 801cdc4:	2320      	movmi	r3, #32
 801cdc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cdca:	0713      	lsls	r3, r2, #28
 801cdcc:	bf44      	itt	mi
 801cdce:	232b      	movmi	r3, #43	; 0x2b
 801cdd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cdd4:	f89a 3000 	ldrb.w	r3, [sl]
 801cdd8:	2b2a      	cmp	r3, #42	; 0x2a
 801cdda:	d015      	beq.n	801ce08 <_vfiprintf_r+0x120>
 801cddc:	9a07      	ldr	r2, [sp, #28]
 801cdde:	4654      	mov	r4, sl
 801cde0:	2000      	movs	r0, #0
 801cde2:	f04f 0c0a 	mov.w	ip, #10
 801cde6:	4621      	mov	r1, r4
 801cde8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cdec:	3b30      	subs	r3, #48	; 0x30
 801cdee:	2b09      	cmp	r3, #9
 801cdf0:	d94d      	bls.n	801ce8e <_vfiprintf_r+0x1a6>
 801cdf2:	b1b0      	cbz	r0, 801ce22 <_vfiprintf_r+0x13a>
 801cdf4:	9207      	str	r2, [sp, #28]
 801cdf6:	e014      	b.n	801ce22 <_vfiprintf_r+0x13a>
 801cdf8:	eba0 0308 	sub.w	r3, r0, r8
 801cdfc:	46a2      	mov	sl, r4
 801cdfe:	fa09 f303 	lsl.w	r3, r9, r3
 801ce02:	4313      	orrs	r3, r2
 801ce04:	9304      	str	r3, [sp, #16]
 801ce06:	e7d2      	b.n	801cdae <_vfiprintf_r+0xc6>
 801ce08:	9b03      	ldr	r3, [sp, #12]
 801ce0a:	1d19      	adds	r1, r3, #4
 801ce0c:	681b      	ldr	r3, [r3, #0]
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	9103      	str	r1, [sp, #12]
 801ce12:	bfbb      	ittet	lt
 801ce14:	425b      	neglt	r3, r3
 801ce16:	f042 0202 	orrlt.w	r2, r2, #2
 801ce1a:	9307      	strge	r3, [sp, #28]
 801ce1c:	9307      	strlt	r3, [sp, #28]
 801ce1e:	bfb8      	it	lt
 801ce20:	9204      	strlt	r2, [sp, #16]
 801ce22:	7823      	ldrb	r3, [r4, #0]
 801ce24:	2b2e      	cmp	r3, #46	; 0x2e
 801ce26:	d10c      	bne.n	801ce42 <_vfiprintf_r+0x15a>
 801ce28:	7863      	ldrb	r3, [r4, #1]
 801ce2a:	2b2a      	cmp	r3, #42	; 0x2a
 801ce2c:	d134      	bne.n	801ce98 <_vfiprintf_r+0x1b0>
 801ce2e:	9b03      	ldr	r3, [sp, #12]
 801ce30:	3402      	adds	r4, #2
 801ce32:	1d1a      	adds	r2, r3, #4
 801ce34:	681b      	ldr	r3, [r3, #0]
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	9203      	str	r2, [sp, #12]
 801ce3a:	bfb8      	it	lt
 801ce3c:	f04f 33ff 	movlt.w	r3, #4294967295
 801ce40:	9305      	str	r3, [sp, #20]
 801ce42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801cf18 <_vfiprintf_r+0x230>
 801ce46:	2203      	movs	r2, #3
 801ce48:	7821      	ldrb	r1, [r4, #0]
 801ce4a:	4650      	mov	r0, sl
 801ce4c:	f000 fb5c 	bl	801d508 <memchr>
 801ce50:	b138      	cbz	r0, 801ce62 <_vfiprintf_r+0x17a>
 801ce52:	eba0 000a 	sub.w	r0, r0, sl
 801ce56:	2240      	movs	r2, #64	; 0x40
 801ce58:	9b04      	ldr	r3, [sp, #16]
 801ce5a:	3401      	adds	r4, #1
 801ce5c:	4082      	lsls	r2, r0
 801ce5e:	4313      	orrs	r3, r2
 801ce60:	9304      	str	r3, [sp, #16]
 801ce62:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ce66:	2206      	movs	r2, #6
 801ce68:	4828      	ldr	r0, [pc, #160]	; (801cf0c <_vfiprintf_r+0x224>)
 801ce6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ce6e:	f000 fb4b 	bl	801d508 <memchr>
 801ce72:	2800      	cmp	r0, #0
 801ce74:	d03f      	beq.n	801cef6 <_vfiprintf_r+0x20e>
 801ce76:	4b26      	ldr	r3, [pc, #152]	; (801cf10 <_vfiprintf_r+0x228>)
 801ce78:	bb1b      	cbnz	r3, 801cec2 <_vfiprintf_r+0x1da>
 801ce7a:	9b03      	ldr	r3, [sp, #12]
 801ce7c:	3307      	adds	r3, #7
 801ce7e:	f023 0307 	bic.w	r3, r3, #7
 801ce82:	3308      	adds	r3, #8
 801ce84:	9303      	str	r3, [sp, #12]
 801ce86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce88:	443b      	add	r3, r7
 801ce8a:	9309      	str	r3, [sp, #36]	; 0x24
 801ce8c:	e768      	b.n	801cd60 <_vfiprintf_r+0x78>
 801ce8e:	fb0c 3202 	mla	r2, ip, r2, r3
 801ce92:	460c      	mov	r4, r1
 801ce94:	2001      	movs	r0, #1
 801ce96:	e7a6      	b.n	801cde6 <_vfiprintf_r+0xfe>
 801ce98:	2300      	movs	r3, #0
 801ce9a:	3401      	adds	r4, #1
 801ce9c:	f04f 0c0a 	mov.w	ip, #10
 801cea0:	4619      	mov	r1, r3
 801cea2:	9305      	str	r3, [sp, #20]
 801cea4:	4620      	mov	r0, r4
 801cea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ceaa:	3a30      	subs	r2, #48	; 0x30
 801ceac:	2a09      	cmp	r2, #9
 801ceae:	d903      	bls.n	801ceb8 <_vfiprintf_r+0x1d0>
 801ceb0:	2b00      	cmp	r3, #0
 801ceb2:	d0c6      	beq.n	801ce42 <_vfiprintf_r+0x15a>
 801ceb4:	9105      	str	r1, [sp, #20]
 801ceb6:	e7c4      	b.n	801ce42 <_vfiprintf_r+0x15a>
 801ceb8:	fb0c 2101 	mla	r1, ip, r1, r2
 801cebc:	4604      	mov	r4, r0
 801cebe:	2301      	movs	r3, #1
 801cec0:	e7f0      	b.n	801cea4 <_vfiprintf_r+0x1bc>
 801cec2:	ab03      	add	r3, sp, #12
 801cec4:	462a      	mov	r2, r5
 801cec6:	a904      	add	r1, sp, #16
 801cec8:	4630      	mov	r0, r6
 801ceca:	9300      	str	r3, [sp, #0]
 801cecc:	4b11      	ldr	r3, [pc, #68]	; (801cf14 <_vfiprintf_r+0x22c>)
 801cece:	f3af 8000 	nop.w
 801ced2:	4607      	mov	r7, r0
 801ced4:	1c78      	adds	r0, r7, #1
 801ced6:	d1d6      	bne.n	801ce86 <_vfiprintf_r+0x19e>
 801ced8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ceda:	07d9      	lsls	r1, r3, #31
 801cedc:	d405      	bmi.n	801ceea <_vfiprintf_r+0x202>
 801cede:	89ab      	ldrh	r3, [r5, #12]
 801cee0:	059a      	lsls	r2, r3, #22
 801cee2:	d402      	bmi.n	801ceea <_vfiprintf_r+0x202>
 801cee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cee6:	f7ff fda9 	bl	801ca3c <__retarget_lock_release_recursive>
 801ceea:	89ab      	ldrh	r3, [r5, #12]
 801ceec:	065b      	lsls	r3, r3, #25
 801ceee:	f53f af1d 	bmi.w	801cd2c <_vfiprintf_r+0x44>
 801cef2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cef4:	e71c      	b.n	801cd30 <_vfiprintf_r+0x48>
 801cef6:	ab03      	add	r3, sp, #12
 801cef8:	462a      	mov	r2, r5
 801cefa:	a904      	add	r1, sp, #16
 801cefc:	4630      	mov	r0, r6
 801cefe:	9300      	str	r3, [sp, #0]
 801cf00:	4b04      	ldr	r3, [pc, #16]	; (801cf14 <_vfiprintf_r+0x22c>)
 801cf02:	f000 f87d 	bl	801d000 <_printf_i>
 801cf06:	e7e4      	b.n	801ced2 <_vfiprintf_r+0x1ea>
 801cf08:	08020ed1 	.word	0x08020ed1
 801cf0c:	08020edb 	.word	0x08020edb
 801cf10:	00000000 	.word	0x00000000
 801cf14:	0801ccc3 	.word	0x0801ccc3
 801cf18:	08020ed7 	.word	0x08020ed7

0801cf1c <_printf_common>:
 801cf1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf20:	4616      	mov	r6, r2
 801cf22:	4699      	mov	r9, r3
 801cf24:	688a      	ldr	r2, [r1, #8]
 801cf26:	4607      	mov	r7, r0
 801cf28:	690b      	ldr	r3, [r1, #16]
 801cf2a:	460c      	mov	r4, r1
 801cf2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801cf30:	4293      	cmp	r3, r2
 801cf32:	bfb8      	it	lt
 801cf34:	4613      	movlt	r3, r2
 801cf36:	6033      	str	r3, [r6, #0]
 801cf38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801cf3c:	b10a      	cbz	r2, 801cf42 <_printf_common+0x26>
 801cf3e:	3301      	adds	r3, #1
 801cf40:	6033      	str	r3, [r6, #0]
 801cf42:	6823      	ldr	r3, [r4, #0]
 801cf44:	0699      	lsls	r1, r3, #26
 801cf46:	bf42      	ittt	mi
 801cf48:	6833      	ldrmi	r3, [r6, #0]
 801cf4a:	3302      	addmi	r3, #2
 801cf4c:	6033      	strmi	r3, [r6, #0]
 801cf4e:	6825      	ldr	r5, [r4, #0]
 801cf50:	f015 0506 	ands.w	r5, r5, #6
 801cf54:	d106      	bne.n	801cf64 <_printf_common+0x48>
 801cf56:	f104 0a19 	add.w	sl, r4, #25
 801cf5a:	68e3      	ldr	r3, [r4, #12]
 801cf5c:	6832      	ldr	r2, [r6, #0]
 801cf5e:	1a9b      	subs	r3, r3, r2
 801cf60:	42ab      	cmp	r3, r5
 801cf62:	dc2b      	bgt.n	801cfbc <_printf_common+0xa0>
 801cf64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801cf68:	1e13      	subs	r3, r2, #0
 801cf6a:	6822      	ldr	r2, [r4, #0]
 801cf6c:	bf18      	it	ne
 801cf6e:	2301      	movne	r3, #1
 801cf70:	0692      	lsls	r2, r2, #26
 801cf72:	d430      	bmi.n	801cfd6 <_printf_common+0xba>
 801cf74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801cf78:	4649      	mov	r1, r9
 801cf7a:	4638      	mov	r0, r7
 801cf7c:	47c0      	blx	r8
 801cf7e:	3001      	adds	r0, #1
 801cf80:	d023      	beq.n	801cfca <_printf_common+0xae>
 801cf82:	6823      	ldr	r3, [r4, #0]
 801cf84:	341a      	adds	r4, #26
 801cf86:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801cf8a:	f003 0306 	and.w	r3, r3, #6
 801cf8e:	2b04      	cmp	r3, #4
 801cf90:	bf0a      	itet	eq
 801cf92:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801cf96:	2500      	movne	r5, #0
 801cf98:	6833      	ldreq	r3, [r6, #0]
 801cf9a:	f04f 0600 	mov.w	r6, #0
 801cf9e:	bf08      	it	eq
 801cfa0:	1aed      	subeq	r5, r5, r3
 801cfa2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801cfa6:	bf08      	it	eq
 801cfa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cfac:	4293      	cmp	r3, r2
 801cfae:	bfc4      	itt	gt
 801cfb0:	1a9b      	subgt	r3, r3, r2
 801cfb2:	18ed      	addgt	r5, r5, r3
 801cfb4:	42b5      	cmp	r5, r6
 801cfb6:	d11a      	bne.n	801cfee <_printf_common+0xd2>
 801cfb8:	2000      	movs	r0, #0
 801cfba:	e008      	b.n	801cfce <_printf_common+0xb2>
 801cfbc:	2301      	movs	r3, #1
 801cfbe:	4652      	mov	r2, sl
 801cfc0:	4649      	mov	r1, r9
 801cfc2:	4638      	mov	r0, r7
 801cfc4:	47c0      	blx	r8
 801cfc6:	3001      	adds	r0, #1
 801cfc8:	d103      	bne.n	801cfd2 <_printf_common+0xb6>
 801cfca:	f04f 30ff 	mov.w	r0, #4294967295
 801cfce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cfd2:	3501      	adds	r5, #1
 801cfd4:	e7c1      	b.n	801cf5a <_printf_common+0x3e>
 801cfd6:	18e1      	adds	r1, r4, r3
 801cfd8:	1c5a      	adds	r2, r3, #1
 801cfda:	2030      	movs	r0, #48	; 0x30
 801cfdc:	3302      	adds	r3, #2
 801cfde:	4422      	add	r2, r4
 801cfe0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801cfe4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801cfe8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801cfec:	e7c2      	b.n	801cf74 <_printf_common+0x58>
 801cfee:	2301      	movs	r3, #1
 801cff0:	4622      	mov	r2, r4
 801cff2:	4649      	mov	r1, r9
 801cff4:	4638      	mov	r0, r7
 801cff6:	47c0      	blx	r8
 801cff8:	3001      	adds	r0, #1
 801cffa:	d0e6      	beq.n	801cfca <_printf_common+0xae>
 801cffc:	3601      	adds	r6, #1
 801cffe:	e7d9      	b.n	801cfb4 <_printf_common+0x98>

0801d000 <_printf_i>:
 801d000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d004:	7e0f      	ldrb	r7, [r1, #24]
 801d006:	4691      	mov	r9, r2
 801d008:	4680      	mov	r8, r0
 801d00a:	460c      	mov	r4, r1
 801d00c:	2f78      	cmp	r7, #120	; 0x78
 801d00e:	469a      	mov	sl, r3
 801d010:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d012:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801d016:	d807      	bhi.n	801d028 <_printf_i+0x28>
 801d018:	2f62      	cmp	r7, #98	; 0x62
 801d01a:	d80a      	bhi.n	801d032 <_printf_i+0x32>
 801d01c:	2f00      	cmp	r7, #0
 801d01e:	f000 80d3 	beq.w	801d1c8 <_printf_i+0x1c8>
 801d022:	2f58      	cmp	r7, #88	; 0x58
 801d024:	f000 80bf 	beq.w	801d1a6 <_printf_i+0x1a6>
 801d028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d02c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d030:	e03a      	b.n	801d0a8 <_printf_i+0xa8>
 801d032:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d036:	2b15      	cmp	r3, #21
 801d038:	d8f6      	bhi.n	801d028 <_printf_i+0x28>
 801d03a:	a101      	add	r1, pc, #4	; (adr r1, 801d040 <_printf_i+0x40>)
 801d03c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d040:	0801d099 	.word	0x0801d099
 801d044:	0801d0ad 	.word	0x0801d0ad
 801d048:	0801d029 	.word	0x0801d029
 801d04c:	0801d029 	.word	0x0801d029
 801d050:	0801d029 	.word	0x0801d029
 801d054:	0801d029 	.word	0x0801d029
 801d058:	0801d0ad 	.word	0x0801d0ad
 801d05c:	0801d029 	.word	0x0801d029
 801d060:	0801d029 	.word	0x0801d029
 801d064:	0801d029 	.word	0x0801d029
 801d068:	0801d029 	.word	0x0801d029
 801d06c:	0801d1af 	.word	0x0801d1af
 801d070:	0801d0d9 	.word	0x0801d0d9
 801d074:	0801d16b 	.word	0x0801d16b
 801d078:	0801d029 	.word	0x0801d029
 801d07c:	0801d029 	.word	0x0801d029
 801d080:	0801d1d1 	.word	0x0801d1d1
 801d084:	0801d029 	.word	0x0801d029
 801d088:	0801d0d9 	.word	0x0801d0d9
 801d08c:	0801d029 	.word	0x0801d029
 801d090:	0801d029 	.word	0x0801d029
 801d094:	0801d173 	.word	0x0801d173
 801d098:	682b      	ldr	r3, [r5, #0]
 801d09a:	1d1a      	adds	r2, r3, #4
 801d09c:	681b      	ldr	r3, [r3, #0]
 801d09e:	602a      	str	r2, [r5, #0]
 801d0a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d0a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d0a8:	2301      	movs	r3, #1
 801d0aa:	e09e      	b.n	801d1ea <_printf_i+0x1ea>
 801d0ac:	6820      	ldr	r0, [r4, #0]
 801d0ae:	682b      	ldr	r3, [r5, #0]
 801d0b0:	0607      	lsls	r7, r0, #24
 801d0b2:	f103 0104 	add.w	r1, r3, #4
 801d0b6:	6029      	str	r1, [r5, #0]
 801d0b8:	d501      	bpl.n	801d0be <_printf_i+0xbe>
 801d0ba:	681e      	ldr	r6, [r3, #0]
 801d0bc:	e003      	b.n	801d0c6 <_printf_i+0xc6>
 801d0be:	0646      	lsls	r6, r0, #25
 801d0c0:	d5fb      	bpl.n	801d0ba <_printf_i+0xba>
 801d0c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d0c6:	2e00      	cmp	r6, #0
 801d0c8:	da03      	bge.n	801d0d2 <_printf_i+0xd2>
 801d0ca:	232d      	movs	r3, #45	; 0x2d
 801d0cc:	4276      	negs	r6, r6
 801d0ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d0d2:	4859      	ldr	r0, [pc, #356]	; (801d238 <_printf_i+0x238>)
 801d0d4:	230a      	movs	r3, #10
 801d0d6:	e012      	b.n	801d0fe <_printf_i+0xfe>
 801d0d8:	682b      	ldr	r3, [r5, #0]
 801d0da:	6820      	ldr	r0, [r4, #0]
 801d0dc:	1d19      	adds	r1, r3, #4
 801d0de:	6029      	str	r1, [r5, #0]
 801d0e0:	0605      	lsls	r5, r0, #24
 801d0e2:	d501      	bpl.n	801d0e8 <_printf_i+0xe8>
 801d0e4:	681e      	ldr	r6, [r3, #0]
 801d0e6:	e002      	b.n	801d0ee <_printf_i+0xee>
 801d0e8:	0641      	lsls	r1, r0, #25
 801d0ea:	d5fb      	bpl.n	801d0e4 <_printf_i+0xe4>
 801d0ec:	881e      	ldrh	r6, [r3, #0]
 801d0ee:	2f6f      	cmp	r7, #111	; 0x6f
 801d0f0:	4851      	ldr	r0, [pc, #324]	; (801d238 <_printf_i+0x238>)
 801d0f2:	bf0c      	ite	eq
 801d0f4:	2308      	moveq	r3, #8
 801d0f6:	230a      	movne	r3, #10
 801d0f8:	2100      	movs	r1, #0
 801d0fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d0fe:	6865      	ldr	r5, [r4, #4]
 801d100:	2d00      	cmp	r5, #0
 801d102:	60a5      	str	r5, [r4, #8]
 801d104:	bfa2      	ittt	ge
 801d106:	6821      	ldrge	r1, [r4, #0]
 801d108:	f021 0104 	bicge.w	r1, r1, #4
 801d10c:	6021      	strge	r1, [r4, #0]
 801d10e:	b90e      	cbnz	r6, 801d114 <_printf_i+0x114>
 801d110:	2d00      	cmp	r5, #0
 801d112:	d04a      	beq.n	801d1aa <_printf_i+0x1aa>
 801d114:	4615      	mov	r5, r2
 801d116:	fbb6 f1f3 	udiv	r1, r6, r3
 801d11a:	fb03 6711 	mls	r7, r3, r1, r6
 801d11e:	5dc7      	ldrb	r7, [r0, r7]
 801d120:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801d124:	4637      	mov	r7, r6
 801d126:	460e      	mov	r6, r1
 801d128:	42bb      	cmp	r3, r7
 801d12a:	d9f4      	bls.n	801d116 <_printf_i+0x116>
 801d12c:	2b08      	cmp	r3, #8
 801d12e:	d10b      	bne.n	801d148 <_printf_i+0x148>
 801d130:	6823      	ldr	r3, [r4, #0]
 801d132:	07de      	lsls	r6, r3, #31
 801d134:	d508      	bpl.n	801d148 <_printf_i+0x148>
 801d136:	6923      	ldr	r3, [r4, #16]
 801d138:	6861      	ldr	r1, [r4, #4]
 801d13a:	4299      	cmp	r1, r3
 801d13c:	bfde      	ittt	le
 801d13e:	2330      	movle	r3, #48	; 0x30
 801d140:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d144:	f105 35ff 	addle.w	r5, r5, #4294967295
 801d148:	1b52      	subs	r2, r2, r5
 801d14a:	6122      	str	r2, [r4, #16]
 801d14c:	464b      	mov	r3, r9
 801d14e:	aa03      	add	r2, sp, #12
 801d150:	4621      	mov	r1, r4
 801d152:	4640      	mov	r0, r8
 801d154:	f8cd a000 	str.w	sl, [sp]
 801d158:	f7ff fee0 	bl	801cf1c <_printf_common>
 801d15c:	3001      	adds	r0, #1
 801d15e:	d149      	bne.n	801d1f4 <_printf_i+0x1f4>
 801d160:	f04f 30ff 	mov.w	r0, #4294967295
 801d164:	b004      	add	sp, #16
 801d166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d16a:	6823      	ldr	r3, [r4, #0]
 801d16c:	f043 0320 	orr.w	r3, r3, #32
 801d170:	6023      	str	r3, [r4, #0]
 801d172:	2778      	movs	r7, #120	; 0x78
 801d174:	4831      	ldr	r0, [pc, #196]	; (801d23c <_printf_i+0x23c>)
 801d176:	6823      	ldr	r3, [r4, #0]
 801d178:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d17c:	061f      	lsls	r7, r3, #24
 801d17e:	6829      	ldr	r1, [r5, #0]
 801d180:	f851 6b04 	ldr.w	r6, [r1], #4
 801d184:	d402      	bmi.n	801d18c <_printf_i+0x18c>
 801d186:	065f      	lsls	r7, r3, #25
 801d188:	bf48      	it	mi
 801d18a:	b2b6      	uxthmi	r6, r6
 801d18c:	07df      	lsls	r7, r3, #31
 801d18e:	6029      	str	r1, [r5, #0]
 801d190:	bf44      	itt	mi
 801d192:	f043 0320 	orrmi.w	r3, r3, #32
 801d196:	6023      	strmi	r3, [r4, #0]
 801d198:	b91e      	cbnz	r6, 801d1a2 <_printf_i+0x1a2>
 801d19a:	6823      	ldr	r3, [r4, #0]
 801d19c:	f023 0320 	bic.w	r3, r3, #32
 801d1a0:	6023      	str	r3, [r4, #0]
 801d1a2:	2310      	movs	r3, #16
 801d1a4:	e7a8      	b.n	801d0f8 <_printf_i+0xf8>
 801d1a6:	4824      	ldr	r0, [pc, #144]	; (801d238 <_printf_i+0x238>)
 801d1a8:	e7e5      	b.n	801d176 <_printf_i+0x176>
 801d1aa:	4615      	mov	r5, r2
 801d1ac:	e7be      	b.n	801d12c <_printf_i+0x12c>
 801d1ae:	682b      	ldr	r3, [r5, #0]
 801d1b0:	6826      	ldr	r6, [r4, #0]
 801d1b2:	1d18      	adds	r0, r3, #4
 801d1b4:	6961      	ldr	r1, [r4, #20]
 801d1b6:	6028      	str	r0, [r5, #0]
 801d1b8:	0635      	lsls	r5, r6, #24
 801d1ba:	681b      	ldr	r3, [r3, #0]
 801d1bc:	d501      	bpl.n	801d1c2 <_printf_i+0x1c2>
 801d1be:	6019      	str	r1, [r3, #0]
 801d1c0:	e002      	b.n	801d1c8 <_printf_i+0x1c8>
 801d1c2:	0670      	lsls	r0, r6, #25
 801d1c4:	d5fb      	bpl.n	801d1be <_printf_i+0x1be>
 801d1c6:	8019      	strh	r1, [r3, #0]
 801d1c8:	2300      	movs	r3, #0
 801d1ca:	4615      	mov	r5, r2
 801d1cc:	6123      	str	r3, [r4, #16]
 801d1ce:	e7bd      	b.n	801d14c <_printf_i+0x14c>
 801d1d0:	682b      	ldr	r3, [r5, #0]
 801d1d2:	2100      	movs	r1, #0
 801d1d4:	1d1a      	adds	r2, r3, #4
 801d1d6:	602a      	str	r2, [r5, #0]
 801d1d8:	681d      	ldr	r5, [r3, #0]
 801d1da:	6862      	ldr	r2, [r4, #4]
 801d1dc:	4628      	mov	r0, r5
 801d1de:	f000 f993 	bl	801d508 <memchr>
 801d1e2:	b108      	cbz	r0, 801d1e8 <_printf_i+0x1e8>
 801d1e4:	1b40      	subs	r0, r0, r5
 801d1e6:	6060      	str	r0, [r4, #4]
 801d1e8:	6863      	ldr	r3, [r4, #4]
 801d1ea:	6123      	str	r3, [r4, #16]
 801d1ec:	2300      	movs	r3, #0
 801d1ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d1f2:	e7ab      	b.n	801d14c <_printf_i+0x14c>
 801d1f4:	6923      	ldr	r3, [r4, #16]
 801d1f6:	462a      	mov	r2, r5
 801d1f8:	4649      	mov	r1, r9
 801d1fa:	4640      	mov	r0, r8
 801d1fc:	47d0      	blx	sl
 801d1fe:	3001      	adds	r0, #1
 801d200:	d0ae      	beq.n	801d160 <_printf_i+0x160>
 801d202:	6823      	ldr	r3, [r4, #0]
 801d204:	079b      	lsls	r3, r3, #30
 801d206:	d413      	bmi.n	801d230 <_printf_i+0x230>
 801d208:	68e0      	ldr	r0, [r4, #12]
 801d20a:	9b03      	ldr	r3, [sp, #12]
 801d20c:	4298      	cmp	r0, r3
 801d20e:	bfb8      	it	lt
 801d210:	4618      	movlt	r0, r3
 801d212:	e7a7      	b.n	801d164 <_printf_i+0x164>
 801d214:	2301      	movs	r3, #1
 801d216:	4632      	mov	r2, r6
 801d218:	4649      	mov	r1, r9
 801d21a:	4640      	mov	r0, r8
 801d21c:	47d0      	blx	sl
 801d21e:	3001      	adds	r0, #1
 801d220:	d09e      	beq.n	801d160 <_printf_i+0x160>
 801d222:	3501      	adds	r5, #1
 801d224:	68e3      	ldr	r3, [r4, #12]
 801d226:	9903      	ldr	r1, [sp, #12]
 801d228:	1a5b      	subs	r3, r3, r1
 801d22a:	42ab      	cmp	r3, r5
 801d22c:	dcf2      	bgt.n	801d214 <_printf_i+0x214>
 801d22e:	e7eb      	b.n	801d208 <_printf_i+0x208>
 801d230:	2500      	movs	r5, #0
 801d232:	f104 0619 	add.w	r6, r4, #25
 801d236:	e7f5      	b.n	801d224 <_printf_i+0x224>
 801d238:	08020ee2 	.word	0x08020ee2
 801d23c:	08020ef3 	.word	0x08020ef3

0801d240 <__sflush_r>:
 801d240:	898a      	ldrh	r2, [r1, #12]
 801d242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d246:	4605      	mov	r5, r0
 801d248:	0710      	lsls	r0, r2, #28
 801d24a:	460c      	mov	r4, r1
 801d24c:	d458      	bmi.n	801d300 <__sflush_r+0xc0>
 801d24e:	684b      	ldr	r3, [r1, #4]
 801d250:	2b00      	cmp	r3, #0
 801d252:	dc05      	bgt.n	801d260 <__sflush_r+0x20>
 801d254:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d256:	2b00      	cmp	r3, #0
 801d258:	dc02      	bgt.n	801d260 <__sflush_r+0x20>
 801d25a:	2000      	movs	r0, #0
 801d25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d262:	2e00      	cmp	r6, #0
 801d264:	d0f9      	beq.n	801d25a <__sflush_r+0x1a>
 801d266:	2300      	movs	r3, #0
 801d268:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d26c:	682f      	ldr	r7, [r5, #0]
 801d26e:	6a21      	ldr	r1, [r4, #32]
 801d270:	602b      	str	r3, [r5, #0]
 801d272:	d032      	beq.n	801d2da <__sflush_r+0x9a>
 801d274:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d276:	89a3      	ldrh	r3, [r4, #12]
 801d278:	075a      	lsls	r2, r3, #29
 801d27a:	d505      	bpl.n	801d288 <__sflush_r+0x48>
 801d27c:	6863      	ldr	r3, [r4, #4]
 801d27e:	1ac0      	subs	r0, r0, r3
 801d280:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d282:	b10b      	cbz	r3, 801d288 <__sflush_r+0x48>
 801d284:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d286:	1ac0      	subs	r0, r0, r3
 801d288:	2300      	movs	r3, #0
 801d28a:	4602      	mov	r2, r0
 801d28c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d28e:	4628      	mov	r0, r5
 801d290:	6a21      	ldr	r1, [r4, #32]
 801d292:	47b0      	blx	r6
 801d294:	1c43      	adds	r3, r0, #1
 801d296:	89a3      	ldrh	r3, [r4, #12]
 801d298:	d106      	bne.n	801d2a8 <__sflush_r+0x68>
 801d29a:	6829      	ldr	r1, [r5, #0]
 801d29c:	291d      	cmp	r1, #29
 801d29e:	d82b      	bhi.n	801d2f8 <__sflush_r+0xb8>
 801d2a0:	4a28      	ldr	r2, [pc, #160]	; (801d344 <__sflush_r+0x104>)
 801d2a2:	410a      	asrs	r2, r1
 801d2a4:	07d6      	lsls	r6, r2, #31
 801d2a6:	d427      	bmi.n	801d2f8 <__sflush_r+0xb8>
 801d2a8:	2200      	movs	r2, #0
 801d2aa:	04d9      	lsls	r1, r3, #19
 801d2ac:	6062      	str	r2, [r4, #4]
 801d2ae:	6922      	ldr	r2, [r4, #16]
 801d2b0:	6022      	str	r2, [r4, #0]
 801d2b2:	d504      	bpl.n	801d2be <__sflush_r+0x7e>
 801d2b4:	1c42      	adds	r2, r0, #1
 801d2b6:	d101      	bne.n	801d2bc <__sflush_r+0x7c>
 801d2b8:	682b      	ldr	r3, [r5, #0]
 801d2ba:	b903      	cbnz	r3, 801d2be <__sflush_r+0x7e>
 801d2bc:	6560      	str	r0, [r4, #84]	; 0x54
 801d2be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d2c0:	602f      	str	r7, [r5, #0]
 801d2c2:	2900      	cmp	r1, #0
 801d2c4:	d0c9      	beq.n	801d25a <__sflush_r+0x1a>
 801d2c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d2ca:	4299      	cmp	r1, r3
 801d2cc:	d002      	beq.n	801d2d4 <__sflush_r+0x94>
 801d2ce:	4628      	mov	r0, r5
 801d2d0:	f7ff fbe0 	bl	801ca94 <_free_r>
 801d2d4:	2000      	movs	r0, #0
 801d2d6:	6360      	str	r0, [r4, #52]	; 0x34
 801d2d8:	e7c0      	b.n	801d25c <__sflush_r+0x1c>
 801d2da:	2301      	movs	r3, #1
 801d2dc:	4628      	mov	r0, r5
 801d2de:	47b0      	blx	r6
 801d2e0:	1c41      	adds	r1, r0, #1
 801d2e2:	d1c8      	bne.n	801d276 <__sflush_r+0x36>
 801d2e4:	682b      	ldr	r3, [r5, #0]
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	d0c5      	beq.n	801d276 <__sflush_r+0x36>
 801d2ea:	2b1d      	cmp	r3, #29
 801d2ec:	d001      	beq.n	801d2f2 <__sflush_r+0xb2>
 801d2ee:	2b16      	cmp	r3, #22
 801d2f0:	d101      	bne.n	801d2f6 <__sflush_r+0xb6>
 801d2f2:	602f      	str	r7, [r5, #0]
 801d2f4:	e7b1      	b.n	801d25a <__sflush_r+0x1a>
 801d2f6:	89a3      	ldrh	r3, [r4, #12]
 801d2f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d2fc:	81a3      	strh	r3, [r4, #12]
 801d2fe:	e7ad      	b.n	801d25c <__sflush_r+0x1c>
 801d300:	690f      	ldr	r7, [r1, #16]
 801d302:	2f00      	cmp	r7, #0
 801d304:	d0a9      	beq.n	801d25a <__sflush_r+0x1a>
 801d306:	0793      	lsls	r3, r2, #30
 801d308:	680e      	ldr	r6, [r1, #0]
 801d30a:	600f      	str	r7, [r1, #0]
 801d30c:	bf0c      	ite	eq
 801d30e:	694b      	ldreq	r3, [r1, #20]
 801d310:	2300      	movne	r3, #0
 801d312:	eba6 0807 	sub.w	r8, r6, r7
 801d316:	608b      	str	r3, [r1, #8]
 801d318:	f1b8 0f00 	cmp.w	r8, #0
 801d31c:	dd9d      	ble.n	801d25a <__sflush_r+0x1a>
 801d31e:	4643      	mov	r3, r8
 801d320:	463a      	mov	r2, r7
 801d322:	6a21      	ldr	r1, [r4, #32]
 801d324:	4628      	mov	r0, r5
 801d326:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d328:	47b0      	blx	r6
 801d32a:	2800      	cmp	r0, #0
 801d32c:	dc06      	bgt.n	801d33c <__sflush_r+0xfc>
 801d32e:	89a3      	ldrh	r3, [r4, #12]
 801d330:	f04f 30ff 	mov.w	r0, #4294967295
 801d334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d338:	81a3      	strh	r3, [r4, #12]
 801d33a:	e78f      	b.n	801d25c <__sflush_r+0x1c>
 801d33c:	4407      	add	r7, r0
 801d33e:	eba8 0800 	sub.w	r8, r8, r0
 801d342:	e7e9      	b.n	801d318 <__sflush_r+0xd8>
 801d344:	dfbffffe 	.word	0xdfbffffe

0801d348 <_fflush_r>:
 801d348:	b538      	push	{r3, r4, r5, lr}
 801d34a:	690b      	ldr	r3, [r1, #16]
 801d34c:	4605      	mov	r5, r0
 801d34e:	460c      	mov	r4, r1
 801d350:	b913      	cbnz	r3, 801d358 <_fflush_r+0x10>
 801d352:	2500      	movs	r5, #0
 801d354:	4628      	mov	r0, r5
 801d356:	bd38      	pop	{r3, r4, r5, pc}
 801d358:	b118      	cbz	r0, 801d362 <_fflush_r+0x1a>
 801d35a:	6a03      	ldr	r3, [r0, #32]
 801d35c:	b90b      	cbnz	r3, 801d362 <_fflush_r+0x1a>
 801d35e:	f7ff fa57 	bl	801c810 <__sinit>
 801d362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d366:	2b00      	cmp	r3, #0
 801d368:	d0f3      	beq.n	801d352 <_fflush_r+0xa>
 801d36a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d36c:	07d0      	lsls	r0, r2, #31
 801d36e:	d404      	bmi.n	801d37a <_fflush_r+0x32>
 801d370:	0599      	lsls	r1, r3, #22
 801d372:	d402      	bmi.n	801d37a <_fflush_r+0x32>
 801d374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d376:	f7ff fb60 	bl	801ca3a <__retarget_lock_acquire_recursive>
 801d37a:	4628      	mov	r0, r5
 801d37c:	4621      	mov	r1, r4
 801d37e:	f7ff ff5f 	bl	801d240 <__sflush_r>
 801d382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d384:	4605      	mov	r5, r0
 801d386:	07da      	lsls	r2, r3, #31
 801d388:	d4e4      	bmi.n	801d354 <_fflush_r+0xc>
 801d38a:	89a3      	ldrh	r3, [r4, #12]
 801d38c:	059b      	lsls	r3, r3, #22
 801d38e:	d4e1      	bmi.n	801d354 <_fflush_r+0xc>
 801d390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d392:	f7ff fb53 	bl	801ca3c <__retarget_lock_release_recursive>
 801d396:	e7dd      	b.n	801d354 <_fflush_r+0xc>

0801d398 <fiprintf>:
 801d398:	b40e      	push	{r1, r2, r3}
 801d39a:	b503      	push	{r0, r1, lr}
 801d39c:	ab03      	add	r3, sp, #12
 801d39e:	4601      	mov	r1, r0
 801d3a0:	4805      	ldr	r0, [pc, #20]	; (801d3b8 <fiprintf+0x20>)
 801d3a2:	f853 2b04 	ldr.w	r2, [r3], #4
 801d3a6:	6800      	ldr	r0, [r0, #0]
 801d3a8:	9301      	str	r3, [sp, #4]
 801d3aa:	f7ff fc9d 	bl	801cce8 <_vfiprintf_r>
 801d3ae:	b002      	add	sp, #8
 801d3b0:	f85d eb04 	ldr.w	lr, [sp], #4
 801d3b4:	b003      	add	sp, #12
 801d3b6:	4770      	bx	lr
 801d3b8:	2000008c 	.word	0x2000008c

0801d3bc <__swbuf_r>:
 801d3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3be:	460e      	mov	r6, r1
 801d3c0:	4614      	mov	r4, r2
 801d3c2:	4605      	mov	r5, r0
 801d3c4:	b118      	cbz	r0, 801d3ce <__swbuf_r+0x12>
 801d3c6:	6a03      	ldr	r3, [r0, #32]
 801d3c8:	b90b      	cbnz	r3, 801d3ce <__swbuf_r+0x12>
 801d3ca:	f7ff fa21 	bl	801c810 <__sinit>
 801d3ce:	69a3      	ldr	r3, [r4, #24]
 801d3d0:	60a3      	str	r3, [r4, #8]
 801d3d2:	89a3      	ldrh	r3, [r4, #12]
 801d3d4:	071a      	lsls	r2, r3, #28
 801d3d6:	d525      	bpl.n	801d424 <__swbuf_r+0x68>
 801d3d8:	6923      	ldr	r3, [r4, #16]
 801d3da:	b31b      	cbz	r3, 801d424 <__swbuf_r+0x68>
 801d3dc:	6823      	ldr	r3, [r4, #0]
 801d3de:	b2f6      	uxtb	r6, r6
 801d3e0:	6922      	ldr	r2, [r4, #16]
 801d3e2:	4637      	mov	r7, r6
 801d3e4:	1a98      	subs	r0, r3, r2
 801d3e6:	6963      	ldr	r3, [r4, #20]
 801d3e8:	4283      	cmp	r3, r0
 801d3ea:	dc04      	bgt.n	801d3f6 <__swbuf_r+0x3a>
 801d3ec:	4621      	mov	r1, r4
 801d3ee:	4628      	mov	r0, r5
 801d3f0:	f7ff ffaa 	bl	801d348 <_fflush_r>
 801d3f4:	b9e0      	cbnz	r0, 801d430 <__swbuf_r+0x74>
 801d3f6:	68a3      	ldr	r3, [r4, #8]
 801d3f8:	3b01      	subs	r3, #1
 801d3fa:	60a3      	str	r3, [r4, #8]
 801d3fc:	6823      	ldr	r3, [r4, #0]
 801d3fe:	1c5a      	adds	r2, r3, #1
 801d400:	6022      	str	r2, [r4, #0]
 801d402:	701e      	strb	r6, [r3, #0]
 801d404:	1c43      	adds	r3, r0, #1
 801d406:	6962      	ldr	r2, [r4, #20]
 801d408:	429a      	cmp	r2, r3
 801d40a:	d004      	beq.n	801d416 <__swbuf_r+0x5a>
 801d40c:	89a3      	ldrh	r3, [r4, #12]
 801d40e:	07db      	lsls	r3, r3, #31
 801d410:	d506      	bpl.n	801d420 <__swbuf_r+0x64>
 801d412:	2e0a      	cmp	r6, #10
 801d414:	d104      	bne.n	801d420 <__swbuf_r+0x64>
 801d416:	4621      	mov	r1, r4
 801d418:	4628      	mov	r0, r5
 801d41a:	f7ff ff95 	bl	801d348 <_fflush_r>
 801d41e:	b938      	cbnz	r0, 801d430 <__swbuf_r+0x74>
 801d420:	4638      	mov	r0, r7
 801d422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d424:	4621      	mov	r1, r4
 801d426:	4628      	mov	r0, r5
 801d428:	f000 f806 	bl	801d438 <__swsetup_r>
 801d42c:	2800      	cmp	r0, #0
 801d42e:	d0d5      	beq.n	801d3dc <__swbuf_r+0x20>
 801d430:	f04f 37ff 	mov.w	r7, #4294967295
 801d434:	e7f4      	b.n	801d420 <__swbuf_r+0x64>
	...

0801d438 <__swsetup_r>:
 801d438:	b538      	push	{r3, r4, r5, lr}
 801d43a:	4b2a      	ldr	r3, [pc, #168]	; (801d4e4 <__swsetup_r+0xac>)
 801d43c:	4605      	mov	r5, r0
 801d43e:	460c      	mov	r4, r1
 801d440:	6818      	ldr	r0, [r3, #0]
 801d442:	b118      	cbz	r0, 801d44c <__swsetup_r+0x14>
 801d444:	6a03      	ldr	r3, [r0, #32]
 801d446:	b90b      	cbnz	r3, 801d44c <__swsetup_r+0x14>
 801d448:	f7ff f9e2 	bl	801c810 <__sinit>
 801d44c:	89a3      	ldrh	r3, [r4, #12]
 801d44e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d452:	0718      	lsls	r0, r3, #28
 801d454:	d422      	bmi.n	801d49c <__swsetup_r+0x64>
 801d456:	06d9      	lsls	r1, r3, #27
 801d458:	d407      	bmi.n	801d46a <__swsetup_r+0x32>
 801d45a:	2309      	movs	r3, #9
 801d45c:	602b      	str	r3, [r5, #0]
 801d45e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d462:	f04f 30ff 	mov.w	r0, #4294967295
 801d466:	81a3      	strh	r3, [r4, #12]
 801d468:	e034      	b.n	801d4d4 <__swsetup_r+0x9c>
 801d46a:	0758      	lsls	r0, r3, #29
 801d46c:	d512      	bpl.n	801d494 <__swsetup_r+0x5c>
 801d46e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d470:	b141      	cbz	r1, 801d484 <__swsetup_r+0x4c>
 801d472:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d476:	4299      	cmp	r1, r3
 801d478:	d002      	beq.n	801d480 <__swsetup_r+0x48>
 801d47a:	4628      	mov	r0, r5
 801d47c:	f7ff fb0a 	bl	801ca94 <_free_r>
 801d480:	2300      	movs	r3, #0
 801d482:	6363      	str	r3, [r4, #52]	; 0x34
 801d484:	89a3      	ldrh	r3, [r4, #12]
 801d486:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d48a:	81a3      	strh	r3, [r4, #12]
 801d48c:	2300      	movs	r3, #0
 801d48e:	6063      	str	r3, [r4, #4]
 801d490:	6923      	ldr	r3, [r4, #16]
 801d492:	6023      	str	r3, [r4, #0]
 801d494:	89a3      	ldrh	r3, [r4, #12]
 801d496:	f043 0308 	orr.w	r3, r3, #8
 801d49a:	81a3      	strh	r3, [r4, #12]
 801d49c:	6923      	ldr	r3, [r4, #16]
 801d49e:	b94b      	cbnz	r3, 801d4b4 <__swsetup_r+0x7c>
 801d4a0:	89a3      	ldrh	r3, [r4, #12]
 801d4a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d4a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d4aa:	d003      	beq.n	801d4b4 <__swsetup_r+0x7c>
 801d4ac:	4621      	mov	r1, r4
 801d4ae:	4628      	mov	r0, r5
 801d4b0:	f000 f864 	bl	801d57c <__smakebuf_r>
 801d4b4:	89a0      	ldrh	r0, [r4, #12]
 801d4b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d4ba:	f010 0301 	ands.w	r3, r0, #1
 801d4be:	d00a      	beq.n	801d4d6 <__swsetup_r+0x9e>
 801d4c0:	2300      	movs	r3, #0
 801d4c2:	60a3      	str	r3, [r4, #8]
 801d4c4:	6963      	ldr	r3, [r4, #20]
 801d4c6:	425b      	negs	r3, r3
 801d4c8:	61a3      	str	r3, [r4, #24]
 801d4ca:	6923      	ldr	r3, [r4, #16]
 801d4cc:	b943      	cbnz	r3, 801d4e0 <__swsetup_r+0xa8>
 801d4ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d4d2:	d1c4      	bne.n	801d45e <__swsetup_r+0x26>
 801d4d4:	bd38      	pop	{r3, r4, r5, pc}
 801d4d6:	0781      	lsls	r1, r0, #30
 801d4d8:	bf58      	it	pl
 801d4da:	6963      	ldrpl	r3, [r4, #20]
 801d4dc:	60a3      	str	r3, [r4, #8]
 801d4de:	e7f4      	b.n	801d4ca <__swsetup_r+0x92>
 801d4e0:	2000      	movs	r0, #0
 801d4e2:	e7f7      	b.n	801d4d4 <__swsetup_r+0x9c>
 801d4e4:	2000008c 	.word	0x2000008c

0801d4e8 <_sbrk_r>:
 801d4e8:	b538      	push	{r3, r4, r5, lr}
 801d4ea:	2300      	movs	r3, #0
 801d4ec:	4d05      	ldr	r5, [pc, #20]	; (801d504 <_sbrk_r+0x1c>)
 801d4ee:	4604      	mov	r4, r0
 801d4f0:	4608      	mov	r0, r1
 801d4f2:	602b      	str	r3, [r5, #0]
 801d4f4:	f7e4 fc50 	bl	8001d98 <_sbrk>
 801d4f8:	1c43      	adds	r3, r0, #1
 801d4fa:	d102      	bne.n	801d502 <_sbrk_r+0x1a>
 801d4fc:	682b      	ldr	r3, [r5, #0]
 801d4fe:	b103      	cbz	r3, 801d502 <_sbrk_r+0x1a>
 801d500:	6023      	str	r3, [r4, #0]
 801d502:	bd38      	pop	{r3, r4, r5, pc}
 801d504:	20011644 	.word	0x20011644

0801d508 <memchr>:
 801d508:	b2c9      	uxtb	r1, r1
 801d50a:	4402      	add	r2, r0
 801d50c:	b510      	push	{r4, lr}
 801d50e:	4290      	cmp	r0, r2
 801d510:	4603      	mov	r3, r0
 801d512:	d101      	bne.n	801d518 <memchr+0x10>
 801d514:	2300      	movs	r3, #0
 801d516:	e003      	b.n	801d520 <memchr+0x18>
 801d518:	781c      	ldrb	r4, [r3, #0]
 801d51a:	3001      	adds	r0, #1
 801d51c:	428c      	cmp	r4, r1
 801d51e:	d1f6      	bne.n	801d50e <memchr+0x6>
 801d520:	4618      	mov	r0, r3
 801d522:	bd10      	pop	{r4, pc}

0801d524 <abort>:
 801d524:	2006      	movs	r0, #6
 801d526:	b508      	push	{r3, lr}
 801d528:	f000 f88c 	bl	801d644 <raise>
 801d52c:	2001      	movs	r0, #1
 801d52e:	f7e4 fbd7 	bl	8001ce0 <_exit>

0801d532 <__swhatbuf_r>:
 801d532:	b570      	push	{r4, r5, r6, lr}
 801d534:	460c      	mov	r4, r1
 801d536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d53a:	b096      	sub	sp, #88	; 0x58
 801d53c:	4615      	mov	r5, r2
 801d53e:	2900      	cmp	r1, #0
 801d540:	461e      	mov	r6, r3
 801d542:	da0c      	bge.n	801d55e <__swhatbuf_r+0x2c>
 801d544:	89a3      	ldrh	r3, [r4, #12]
 801d546:	2100      	movs	r1, #0
 801d548:	f013 0f80 	tst.w	r3, #128	; 0x80
 801d54c:	bf0c      	ite	eq
 801d54e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801d552:	2340      	movne	r3, #64	; 0x40
 801d554:	2000      	movs	r0, #0
 801d556:	6031      	str	r1, [r6, #0]
 801d558:	602b      	str	r3, [r5, #0]
 801d55a:	b016      	add	sp, #88	; 0x58
 801d55c:	bd70      	pop	{r4, r5, r6, pc}
 801d55e:	466a      	mov	r2, sp
 801d560:	f000 f878 	bl	801d654 <_fstat_r>
 801d564:	2800      	cmp	r0, #0
 801d566:	dbed      	blt.n	801d544 <__swhatbuf_r+0x12>
 801d568:	9901      	ldr	r1, [sp, #4]
 801d56a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801d56e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801d572:	4259      	negs	r1, r3
 801d574:	4159      	adcs	r1, r3
 801d576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d57a:	e7eb      	b.n	801d554 <__swhatbuf_r+0x22>

0801d57c <__smakebuf_r>:
 801d57c:	898b      	ldrh	r3, [r1, #12]
 801d57e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d580:	079d      	lsls	r5, r3, #30
 801d582:	4606      	mov	r6, r0
 801d584:	460c      	mov	r4, r1
 801d586:	d507      	bpl.n	801d598 <__smakebuf_r+0x1c>
 801d588:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d58c:	6023      	str	r3, [r4, #0]
 801d58e:	6123      	str	r3, [r4, #16]
 801d590:	2301      	movs	r3, #1
 801d592:	6163      	str	r3, [r4, #20]
 801d594:	b002      	add	sp, #8
 801d596:	bd70      	pop	{r4, r5, r6, pc}
 801d598:	ab01      	add	r3, sp, #4
 801d59a:	466a      	mov	r2, sp
 801d59c:	f7ff ffc9 	bl	801d532 <__swhatbuf_r>
 801d5a0:	9900      	ldr	r1, [sp, #0]
 801d5a2:	4605      	mov	r5, r0
 801d5a4:	4630      	mov	r0, r6
 801d5a6:	f7ff fae9 	bl	801cb7c <_malloc_r>
 801d5aa:	b948      	cbnz	r0, 801d5c0 <__smakebuf_r+0x44>
 801d5ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d5b0:	059a      	lsls	r2, r3, #22
 801d5b2:	d4ef      	bmi.n	801d594 <__smakebuf_r+0x18>
 801d5b4:	f023 0303 	bic.w	r3, r3, #3
 801d5b8:	f043 0302 	orr.w	r3, r3, #2
 801d5bc:	81a3      	strh	r3, [r4, #12]
 801d5be:	e7e3      	b.n	801d588 <__smakebuf_r+0xc>
 801d5c0:	89a3      	ldrh	r3, [r4, #12]
 801d5c2:	6020      	str	r0, [r4, #0]
 801d5c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d5c8:	6120      	str	r0, [r4, #16]
 801d5ca:	81a3      	strh	r3, [r4, #12]
 801d5cc:	9b00      	ldr	r3, [sp, #0]
 801d5ce:	6163      	str	r3, [r4, #20]
 801d5d0:	9b01      	ldr	r3, [sp, #4]
 801d5d2:	b15b      	cbz	r3, 801d5ec <__smakebuf_r+0x70>
 801d5d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d5d8:	4630      	mov	r0, r6
 801d5da:	f000 f84d 	bl	801d678 <_isatty_r>
 801d5de:	b128      	cbz	r0, 801d5ec <__smakebuf_r+0x70>
 801d5e0:	89a3      	ldrh	r3, [r4, #12]
 801d5e2:	f023 0303 	bic.w	r3, r3, #3
 801d5e6:	f043 0301 	orr.w	r3, r3, #1
 801d5ea:	81a3      	strh	r3, [r4, #12]
 801d5ec:	89a3      	ldrh	r3, [r4, #12]
 801d5ee:	431d      	orrs	r5, r3
 801d5f0:	81a5      	strh	r5, [r4, #12]
 801d5f2:	e7cf      	b.n	801d594 <__smakebuf_r+0x18>

0801d5f4 <_raise_r>:
 801d5f4:	291f      	cmp	r1, #31
 801d5f6:	b538      	push	{r3, r4, r5, lr}
 801d5f8:	4604      	mov	r4, r0
 801d5fa:	460d      	mov	r5, r1
 801d5fc:	d904      	bls.n	801d608 <_raise_r+0x14>
 801d5fe:	2316      	movs	r3, #22
 801d600:	6003      	str	r3, [r0, #0]
 801d602:	f04f 30ff 	mov.w	r0, #4294967295
 801d606:	bd38      	pop	{r3, r4, r5, pc}
 801d608:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801d60a:	b112      	cbz	r2, 801d612 <_raise_r+0x1e>
 801d60c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d610:	b94b      	cbnz	r3, 801d626 <_raise_r+0x32>
 801d612:	4620      	mov	r0, r4
 801d614:	f000 f852 	bl	801d6bc <_getpid_r>
 801d618:	462a      	mov	r2, r5
 801d61a:	4601      	mov	r1, r0
 801d61c:	4620      	mov	r0, r4
 801d61e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d622:	f000 b839 	b.w	801d698 <_kill_r>
 801d626:	2b01      	cmp	r3, #1
 801d628:	d00a      	beq.n	801d640 <_raise_r+0x4c>
 801d62a:	1c59      	adds	r1, r3, #1
 801d62c:	d103      	bne.n	801d636 <_raise_r+0x42>
 801d62e:	2316      	movs	r3, #22
 801d630:	6003      	str	r3, [r0, #0]
 801d632:	2001      	movs	r0, #1
 801d634:	e7e7      	b.n	801d606 <_raise_r+0x12>
 801d636:	2400      	movs	r4, #0
 801d638:	4628      	mov	r0, r5
 801d63a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d63e:	4798      	blx	r3
 801d640:	2000      	movs	r0, #0
 801d642:	e7e0      	b.n	801d606 <_raise_r+0x12>

0801d644 <raise>:
 801d644:	4b02      	ldr	r3, [pc, #8]	; (801d650 <raise+0xc>)
 801d646:	4601      	mov	r1, r0
 801d648:	6818      	ldr	r0, [r3, #0]
 801d64a:	f7ff bfd3 	b.w	801d5f4 <_raise_r>
 801d64e:	bf00      	nop
 801d650:	2000008c 	.word	0x2000008c

0801d654 <_fstat_r>:
 801d654:	b538      	push	{r3, r4, r5, lr}
 801d656:	2300      	movs	r3, #0
 801d658:	4d06      	ldr	r5, [pc, #24]	; (801d674 <_fstat_r+0x20>)
 801d65a:	4604      	mov	r4, r0
 801d65c:	4608      	mov	r0, r1
 801d65e:	4611      	mov	r1, r2
 801d660:	602b      	str	r3, [r5, #0]
 801d662:	f7e4 fb70 	bl	8001d46 <_fstat>
 801d666:	1c43      	adds	r3, r0, #1
 801d668:	d102      	bne.n	801d670 <_fstat_r+0x1c>
 801d66a:	682b      	ldr	r3, [r5, #0]
 801d66c:	b103      	cbz	r3, 801d670 <_fstat_r+0x1c>
 801d66e:	6023      	str	r3, [r4, #0]
 801d670:	bd38      	pop	{r3, r4, r5, pc}
 801d672:	bf00      	nop
 801d674:	20011644 	.word	0x20011644

0801d678 <_isatty_r>:
 801d678:	b538      	push	{r3, r4, r5, lr}
 801d67a:	2300      	movs	r3, #0
 801d67c:	4d05      	ldr	r5, [pc, #20]	; (801d694 <_isatty_r+0x1c>)
 801d67e:	4604      	mov	r4, r0
 801d680:	4608      	mov	r0, r1
 801d682:	602b      	str	r3, [r5, #0]
 801d684:	f7e4 fb6f 	bl	8001d66 <_isatty>
 801d688:	1c43      	adds	r3, r0, #1
 801d68a:	d102      	bne.n	801d692 <_isatty_r+0x1a>
 801d68c:	682b      	ldr	r3, [r5, #0]
 801d68e:	b103      	cbz	r3, 801d692 <_isatty_r+0x1a>
 801d690:	6023      	str	r3, [r4, #0]
 801d692:	bd38      	pop	{r3, r4, r5, pc}
 801d694:	20011644 	.word	0x20011644

0801d698 <_kill_r>:
 801d698:	b538      	push	{r3, r4, r5, lr}
 801d69a:	2300      	movs	r3, #0
 801d69c:	4d06      	ldr	r5, [pc, #24]	; (801d6b8 <_kill_r+0x20>)
 801d69e:	4604      	mov	r4, r0
 801d6a0:	4608      	mov	r0, r1
 801d6a2:	4611      	mov	r1, r2
 801d6a4:	602b      	str	r3, [r5, #0]
 801d6a6:	f7e4 fb0b 	bl	8001cc0 <_kill>
 801d6aa:	1c43      	adds	r3, r0, #1
 801d6ac:	d102      	bne.n	801d6b4 <_kill_r+0x1c>
 801d6ae:	682b      	ldr	r3, [r5, #0]
 801d6b0:	b103      	cbz	r3, 801d6b4 <_kill_r+0x1c>
 801d6b2:	6023      	str	r3, [r4, #0]
 801d6b4:	bd38      	pop	{r3, r4, r5, pc}
 801d6b6:	bf00      	nop
 801d6b8:	20011644 	.word	0x20011644

0801d6bc <_getpid_r>:
 801d6bc:	f7e4 baf8 	b.w	8001cb0 <_getpid>

0801d6c0 <_init>:
 801d6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6c2:	bf00      	nop
 801d6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d6c6:	bc08      	pop	{r3}
 801d6c8:	469e      	mov	lr, r3
 801d6ca:	4770      	bx	lr

0801d6cc <_fini>:
 801d6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6ce:	bf00      	nop
 801d6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d6d2:	bc08      	pop	{r3}
 801d6d4:	469e      	mov	lr, r3
 801d6d6:	4770      	bx	lr
